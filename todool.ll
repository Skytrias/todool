; ModuleID = 'odin_package'
source_filename = "odin_package"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%runtime.Type_Info = type { i64, i64, i32, [4 x i8], i64, { [15 x i64], i64 } }
%..string = type { i8*, i64 }
%runtime.Default_Temp_Allocator = type { { i8*, i64 }, i64, i8*, %runtime.Allocator, { { i8*, i64 }*, i64, i64, %runtime.Allocator } }
%runtime.Allocator = type { i8*, i8* }
%fontstash.Font = type { %stb_truetype.fontinfo, { i8*, i64 }, i32, i32, i32, [4 x i8], { %fontstash.Glyph*, i64, i64, %runtime.Allocator }, [256 x i64] }
%stb_truetype.fontinfo = type { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %stb_truetype._buf, %stb_truetype._buf, %stb_truetype._buf, %stb_truetype._buf, %stb_truetype._buf, %stb_truetype._buf }
%stb_truetype._buf = type { i8*, i32, i32 }
%fontstash.Glyph = type <{ i32, i32, i64, float, i16, i16, i16, i16, i16, i16, float }>
%src.Global_State = type { { %src.Window**, i64, i64, %runtime.Allocator }, %runtime.Logger, i8, [7 x i8], [6 x %sdl2.Cursor*], i64, float, [4 x i8], { %src.Element**, i64, i64, %runtime.Allocator }, i8, [7 x i8], [4 x %sdl2_mixer.Chunk*], %"src.ease.Flux_Map(f32)-17572" }
%src.Window = type { %src.Element, %src.Element*, %src.Element*, %src.Element*, %src.Element*, %time.Tick, %src.Panel_Floaty*, i32, [4 x i8], %src.Element*, i64, %time.Tick, float, float, [2 x float], [2 x float], [2 x float], i64, i64, i64, float, float, i8, [7 x i8], %src.Render_Target*, %sdl2.Window*, i32, [4 x i8], i64, i8, [7 x i8], %strings.Builder, i8, i8, i8, i8, [4 x i8], { { i64*, i64 }, { i8*, i64, i64, %runtime.Allocator } }, %src.Element*, i8, [7 x i8], %strings.Builder, i8*, %src.Undo_Manager, %strings.Builder, %strings.Builder, { i64*, i64, i64, %runtime.Allocator }, %strings.Builder, %mem.Arena, { i8*, i64 } }
%src.Element = type { i32, [4 x i8], %src.Element*, { %src.Element**, i64, i64, %runtime.Allocator }, %src.Window*, %src.Rect, %src.Rect, i8*, i8*, i64, %src.Font_Options*, %..string, i8* }
%src.Rect = type { float, float, float, float }
%src.Font_Options = type { %fontstash.Font*, float, [4 x i8] }
%src.Panel_Floaty = type { %src.Element, %src.Panel*, float, float, float, float }
%src.Panel = type { %src.Element, float, [4 x i8], float, float, float, float, float, i8, i8, [2 x i8], %src.Scrollbar*, i64 }
%src.Scrollbar = type { %src.Element, float, float, float, float, i8, i8, [6 x i8] }
%time.Tick = type { i64 }
%src.Render_Target = type { { %src.Render_Group*, i64, i64, %runtime.Allocator }, { %src.Render_Vertex*, i64 }, i64, i32, i32, i32, i32, i32, [4 x i8], i32, i32, i32, i32, i32, i32, [4 x %src.Render_Texture], i8, [7 x i8], i8* }
%src.Render_Group = type { %src.Rect, i64, i64 }
%src.Render_Vertex = type <{ [2 x float], [2 x float], [4 x i8], i16, i16, [2 x float], i32 }>
%src.Render_Texture = type { i32, i32, { i8*, i64 }, i32, i32, i32, i32, %image.Image* }
%image.Image = type { i64, i64, i64, i64, %bytes.Buffer, %"src.Maybe(RGB_Pixel_16)-16685", %image.Image_Metadata, i64 }
%bytes.Buffer = type { { i8*, i64, i64, %runtime.Allocator }, i64, i8, [7 x i8] }
%"src.Maybe(RGB_Pixel_16)-16685" = type { [3 x i16], i16 }
%image.Image_Metadata = type { i64, i64 }
%sdl2.Window = type {}
%src.Undo_Manager = type { { i8*, i64, i64, %runtime.Allocator }, { i8*, i64, i64, %runtime.Allocator }, i64 }
%strings.Builder = type { { i8*, i64, i64, %runtime.Allocator } }
%mem.Arena = type { { i8*, i64 }, i64, i64, i64 }
%runtime.Logger = type { i8*, i8*, i64, i16, [6 x i8] }
%sdl2.Cursor = type {}
%sdl2_mixer.Chunk = type { i32, [4 x i8], i8*, i32, i8, [3 x i8] }
%"src.ease.Flux_Map(f32)-17572" = type { { { i64*, i64 }, { i8*, i64, i64, %runtime.Allocator } }, { float**, i64, i64, %runtime.Allocator } }
%src.Pomodoro = type { i64, i32, [4 x i8], %time.Stopwatch, i64, i8, i8, [6 x i8], { %src.Pomodoro_Celebration*, i64 } }
%time.Stopwatch = type { i8, [7 x i8], %time.Tick, i64 }
%src.Pomodoro_Celebration = type { float, float, [4 x i8], i8, [3 x i8] }
%src.Sidebar = type { %src.Split_Pane*, %src.Enum_Panel*, i64, %src.Sidebar_Options, %src.Sidebar_Tags, %src.Label* }
%src.Split_Pane = type { %src.Element, i8, [3 x i8], float, float, float, float, [4 x i8] }
%src.Enum_Panel = type { %src.Element, i64*, i64 }
%src.Sidebar_Options = type { %src.Panel*, %src.Slider*, %src.Checkbox*, %src.Checkbox*, %src.Checkbox*, %src.Checkbox*, %src.Checkbox*, %src.Checkbox*, %src.Slider*, %src.Slider*, %src.Slider*, %src.Icon_Button*, %src.Slider*, %src.Linear_Gauge*, %src.Label* }
%src.Checkbox = type { %src.Element, %strings.Builder, i8, i8, [2 x i8], float, i8* }
%src.Icon_Button = type { %src.Element, i64, i8* }
%src.Slider = type { %src.Element, float, [4 x i8], %strings.Builder, i8* }
%src.Linear_Gauge = type { %src.Element, float, [4 x i8], %strings.Builder, %..string, %..string }
%src.Sidebar_Tags = type { %src.Panel*, [8 x %strings.Builder*], i64, i64, %src.Toggle_Selector* }
%src.Toggle_Selector = type { %src.Element, i64*, i64, { %..string*, i64 }, { %src.Rect*, i64 }, i8, [3 x i8], float, float, [4 x i8] }
%src.Label = type { %src.Element, %strings.Builder, float, [4 x i8] }
%src.Mode_Panel = type { %src.Element, i64, float, float, float, [4 x i8], [2 x %src.Pan_Camera], { %src.Rect*, i64, i64, %runtime.Allocator } }
%src.Pan_Camera = type { float, float, float, float, float, float, i8, [7 x i8], %src.Pan_Camera_Animation, %src.Pan_Camera_Animation }
%src.Pan_Camera_Animation = type { i8, [7 x i8], i64, float, [4 x i8] }
%src.Copy_Task = type <{ i32, i32, i8, i8, i8, i8, i8 }>
%src.Search_Result_Mixed = type <{ %src.Task*, i16, i16 }>
%src.Task = type { %src.Element, i64, i64, %src.Task*, i8, [7 x i8], %src.Icon_Button*, %src.Task_Box*, i64, float, i8, i8, i8, [1 x i8], float, float, i8, i8, i8, i8, [4 x i8], [3 x i64], { %src.Search_Result*, i64, i64, %runtime.Allocator }, %src.Rect, i8, [7 x i8] }
%src.Task_Box = type { %src.Element, %src.Box, [4 x i8], [4 x i8] }
%src.Box = type { %strings.Builder, { %..string*, i64, i64, %runtime.Allocator }, i64, i64, %cutf8.Decode_State, i8, [7 x i8], i64, i64, i8, [7 x i8], i64, i64, float, [4 x i8], %time.Tick }
%cutf8.Decode_State = type { i32, [4 x i8], i64, i64, i64 }
%src.Search_Result = type <{ i16, i16 }>
%src.Theme_Editor = type { i8, [7 x i8], [32 x %src.Panel*], i64, i64, %src.Color_Picker*, %src.Window*, %src.Checkbox*, %src.Checkbox*, %src.Checkbox*, %src.Slider*, %src.Slider*, %src.Slider*, %src.Slider*, %src.Slider*, %src.Slider*, %src.Slider*, %src.Slider*, %src.Slider*, [4 x i8], [4 x i8] }
%src.Color_Picker = type { %src.Element, %src.Color_Picker_SV*, %src.Color_Picker_HUE*, [4 x i8]* }
%src.Color_Picker_SV = type { %src.Element, float, float, [4 x i8], i8, [3 x i8], float, float }
%src.Color_Picker_HUE = type { %src.Element, float, i8, [3 x i8], float, float }
%utf8.Accept_Range = type { i8, i8 }
%strconv.Float_Info = type { i64, i64, i64 }
%fontstash.Font_Atlas = type { i64, i64, { %fontstash.Atlas_Node*, i64, i64, %runtime.Allocator }, { i8*, i64 }, float, float }
%fontstash.Atlas_Node = type { i16, i16, i16 }
%src.Theme = type { [3 x [4 x i8]], [3 x [4 x i8]], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [8 x [4 x i8]] }
%rand.Rand = type { i64, i64, i8, [7 x i8] }
%io.Stream_VTable = type { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8* }
%runtime.Type_Info_Named = type { %..string, %runtime.Type_Info*, %..string, %runtime.Source_Code_Location }
%runtime.Source_Code_Location = type { %..string, i32, i32, %..string }
%runtime.Type_Info_Struct = type { { %runtime.Type_Info**, i64 }, { %..string*, i64 }, { i64*, i64 }, { i8*, i64 }, { %..string*, i64 }, i8, i8, i8, [5 x i8], i8*, i8, [7 x i8], %runtime.Type_Info*, i64 }
%runtime.string_decode_rune.Accept_Range-1 = type { i8, i8 }
%runtime.Type_Info_Enum = type { %runtime.Type_Info*, { %..string*, i64 }, { i64*, i64 } }
%runtime.Type_Info_Integer = type { i8, i8 }
%runtime.Type_Info_Pointer = type { %runtime.Type_Info* }
%runtime.Type_Info_Bit_Set = type { %runtime.Type_Info*, %runtime.Type_Info*, i64, i64 }
%runtime.Type_Info_Union = type { { %runtime.Type_Info**, i64 }, i64, %runtime.Type_Info*, i8*, i8, i8, i8, [5 x i8] }
%runtime.Type_Info_Slice = type { %runtime.Type_Info*, i64 }
%runtime.Type_Info_Procedure = type { %runtime.Type_Info*, %runtime.Type_Info*, i8, i8, [6 x i8] }
%runtime.Type_Info_Tuple = type { { %runtime.Type_Info**, i64 }, { %..string*, i64 } }
%runtime.Type_Info_Multi_Pointer = type { %runtime.Type_Info* }
%runtime.Type_Info_Array = type { %runtime.Type_Info*, i64, i64 }
%runtime.Type_Info_Dynamic_Array = type { %runtime.Type_Info*, i64 }
%runtime.Type_Info_Map = type { %runtime.Type_Info*, %runtime.Type_Info*, %runtime.Type_Info*, i8*, i8* }
%runtime.Raw_String = type { i8*, i64 }
%src.Theme_Save_Load = type { [3 x i32], [3 x i32], i32, i32, i32, i32, i32, i32, i32, i32, [8 x i32] }
%image.Netpbm_Info = type { %image.Netpbm_Header }
%image.Netpbm_Header = type { i64, i64, i64, i64, i64, i64, %..string, float, i8, [3 x i8] }
%image.PNG_Info = type { %image.PNG_IHDR, [3 x i8], { %image.PNG_Chunk*, i64, i64, %runtime.Allocator } }
%image.PNG_IHDR = type <{ i32, i32, i8, i8, i8, i8, i8 }>
%image.PNG_Chunk = type <{ %image.PNG_Chunk_Header, { i8*, i64 }, i32 }>
%image.PNG_Chunk_Header = type <{ i32, i32 }>
%image.QOI_Info = type { %image.QOI_Header }
%image.QOI_Header = type <{ i32, i32, i32, i8, i8 }>
%io.Stream = type { %io.Stream_VTable*, i8* }
%runtime.Context = type { %runtime.Allocator, %runtime.Allocator, i8*, %runtime.Logger, i8*, i64, i8* }
%runtime.Raw_Dynamic_Array = type { i8*, i64, i64, %runtime.Allocator }
%runtime.Map_Header = type { %runtime.Raw_Map*, i8*, i64, i64, i64, i64, i64, i64 }
%runtime.Raw_Map = type { { i64*, i64 }, %runtime.Raw_Dynamic_Array }
%runtime.Map_Entry_Header = type { i64, i64 }
%runtime.Map_Hash = type { i64, i8* }
%runtime.Map_Find_Result = type { i64, i64, i64 }
%__gnu_h2f_ieee.fp32-2 = type { i32 }
%runtime.Type_Info_Rune = type {}
%runtime.Type_Info_Float = type { i8 }
%runtime.Type_Info_Complex = type {}
%runtime.Type_Info_Quaternion = type {}
%runtime.Type_Info_String = type { i8 }
%runtime.Type_Info_Boolean = type {}
%runtime.Type_Info_Any = type {}
%runtime.Type_Info_Type_Id = type {}
%runtime.Type_Info_Soa_Pointer = type { %runtime.Type_Info* }
%runtime.Type_Info_Enumerated_Array = type { %runtime.Type_Info*, %runtime.Type_Info*, i64, i64, i64, i64, i8, [7 x i8] }
%runtime.Type_Info_Simd_Vector = type { %runtime.Type_Info*, i64, i64 }
%runtime.Type_Info_Relative_Pointer = type { %runtime.Type_Info*, %runtime.Type_Info* }
%runtime.Type_Info_Relative_Slice = type { %runtime.Type_Info*, %runtime.Type_Info* }
%runtime.Type_Info_Matrix = type { %runtime.Type_Info*, i64, i64, i64, i64 }
%src.Undo_Item_Box_Rune_Append = type { %src.Box*, i32, [4 x i8] }
%src.Undo_Item_Box_Rune_Pop = type { %src.Box*, i64, i64 }
%src.Undo_Item_Box_Rune_Insert_At = type { %src.Box*, i64, i32, [4 x i8] }
%src.Undo_Item_Box_Rune_Remove_At = type { %src.Box*, i64 }
%src.Undo_Item_Box_Remove_Selection = type { %src.Box*, i64, i64, i64 }
%src.Undo_Item_Box_Insert_Runes = type { %src.Box*, i64, i64, i64, i64 }
%src.Undo_Builder_Uppercased_Content_Reset = type { %strings.Builder*, i64 }
%src.Undo_Builder_Uppercased_Content = type { %strings.Builder* }
%src.Text_Box = type { %src.Element, %src.Box, float, i8, [3 x i8] }
%..any = type { i8*, i64 }
%src.Wrap_State = type { %fontstash.Font*, float, [4 x i8], { %..string*, i64 }, i8, [3 x i8], %src.Rect, [4 x i8], i64, i64, float, [4 x i8] }
%src.element_box_mouse_selection.Mouse_Character_Selection-3 = type { float, float, float, float, float, float, i64, float, [4 x i8] }
%src.Find_By_Point = type { float, float, %src.Element* }
%src.Button = type { %src.Element, %strings.Builder, i8* }
%src.Color_Button = type { %src.Element, i8*, [4 x i8]* }
%src.Spacer = type { %src.Element, float, float, i8, [7 x i8], i64 }
%sdl2.KeyboardEvent = type { i32, i32, i32, i8, i8, i8, i8, %sdl2.Keysym }
%sdl2.Keysym = type { i32, i32, i16, [2 x i8], i32 }
%sdl2.Event = type { [7 x i64] }
%sdl2.WindowEvent = type { i32, i32, i32, i8, i8, i8, i8, i32, i32 }
%sdl2.TextInputEvent = type { i32, i32, i32, [32 x i8] }
%sdl2.MouseWheelEvent = type { i32, i32, i32, i32, i32, i32, i32 }
%sdl2.MouseMotionEvent = type { i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%sdl2.MouseButtonEvent = type { i32, i32, i32, i32, i8, i8, i8, i8, i32, i32 }
%sdl2.DropEvent = type { i32, i32, i8*, i32, [4 x i8] }
%"src.Flux_Tween(T)-17575" = type { float*, float, float, float, [4 x i8], double, i64, double, double, i64, i8, [7 x i8], i8*, i8*, i8*, i8* }
%src.Pattern_Scanner = type { %..string, i32, [4 x i8], i64, i64, i64, i64, i64, i64, i64, i64, { { i64*, i64 }, { i8*, i64, i64, %runtime.Allocator } } }
%bytes.Reader = type { { i8*, i64 }, i64, i64 }
%os.OS_Stat = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i64, i64, %os.Unix_File_Time, %os.Unix_File_Time, %os.Unix_File_Time, i64, i64, i64 }
%os.Unix_File_Time = type { i64, i64 }
%io.Writer = type { %io.Stream }
%json.Marshal_Error = type { i64, i64 }
%json.Marshal_Options = type { i64, i8, i8, [6 x i8], i64, i64, i8, i8, i8, i8, i8, [3 x i8] }
%json.Parser = type { %json.Tokenizer, %json.Token, %json.Token, i64, %runtime.Allocator, i8, [7 x i8] }
%json.Tokenizer = type { %json.Pos, %..string, i32, [4 x i8], i64, i64, i64, i8, i8, [6 x i8] }
%json.Pos = type { i64, i64, i64 }
%json.Token = type { %json.Pos, i64, %..string }
%json.Value = type { [7 x i64], i64 }
%json.Unmarshal_Error = type { [7 x i64], i64 }
%strconv.Decimal_Slice = type { { i8*, i64 }, i64, i64, i8, [7 x i8] }
%strconv_decimal.Decimal = type { [384 x i8], i64, i64, i8, i8, [6 x i8] }
%fmt.Info = type { i8, i8, i8, i8, i8, i8, i8, [1 x i8], i64, i64, i64, i8, i8, i8, i8, [4 x i8], %io.Writer, %..any, i64, i64, %"runtime.Maybe(int)-15311", i8, [7 x i8], i64 }
%"runtime.Maybe(int)-15311" = type { i64, i64 }
%..quaternion256 = type { double, double, double, double }
%unix.timespec = type { i64, i64 }
%sdl2.RWops = type { i8*, i8*, i8*, i8*, i8*, i32, [4 x i8], { [5 x i64] } }
%png.PLTE = type <{ [256 x [3 x i8]], i16 }>
%image.Error = type { [2 x i64], i64 }
%png.Filter_Params = type <{ { i8*, i64 }, { i8*, i64 }, i64, i64, i64, i64, i8 }>
%zlib.Huffman_Table = type { [512 x i16], [17 x i16], [6 x i8], [17 x i64], [17 x i16], [288 x i8], [288 x i16], [6 x i8] }
%compress.Error = type { i64, i64 }
%compress.Context_Memory_Input = type <{ { i8*, i64 }, %bytes.Buffer*, i64, i64, i64, i64, i64 }>
%src.V1_Save_Header = type { i32, i32, i32, i16, [2 x i8] }
%src.Misc_Save_Load = type { float, [4 x i8], i64, { float, i8, i8, i8, i8, i8, i8, [2 x i8] }, [4 x i8], { [8 x %..string], i64 }, { i64, i64, i64, i64, i8, [7 x i8], i64 }, { i64, i64 }, %src.Theme_Save_Load }

@"__$type_info_data" = internal global [270 x %runtime.Type_Info] zeroinitializer
@"__$type_info_types_data" = internal global [225 x %runtime.Type_Info*] zeroinitializer
@"__$type_info_names_data" = internal global [225 x %..string] zeroinitializer
@"__$type_info_offsets_data" = internal global [225 x i64] zeroinitializer
@"__$type_info_usings_data" = internal global [225 x i8] zeroinitializer
@"__$type_info_tags_data" = internal global [225 x %..string] zeroinitializer
@runtime.type_table = internal global { %runtime.Type_Info*, i64 } { %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 0), i64 270 }
@runtime.args__ = internal global { i8**, i64 } zeroinitializer
@runtime.global_default_temp_allocator_data = internal thread_local global %runtime.Default_Temp_Allocator zeroinitializer
@src.SCALE = internal global float 1.000000e+00
@src.LINE_WIDTH = internal global float 0.000000e+00
@src.ROUNDNESS = internal global float 0.000000e+00
@src.font_regular = internal global %fontstash.Font* null
@src.font_bold = internal global %fontstash.Font* null
@src.font_icon = internal global %fontstash.Font* null
@src.gs = internal global %src.Global_State zeroinitializer
@src.default_base_path = internal global %..string zeroinitializer
@src.pomodoro = internal global %src.Pomodoro zeroinitializer
@src.shader_vert = internal global { i8*, i64 } { i8* getelementptr inbounds ([1337 x i8], [1337 x i8]* @"csbs$0", i64 0, i64 0), i64 1336 }
@"csbs$0" = private unnamed_addr constant [1337 x i8] c"#version 330\0A\0A// input from vertex\0Ain vec2 i_pos;\0Ain vec2 i_uv;\0Ain uint i_color;\0Ain uint i_roundness_and_thickness;\0Ain vec2 i_additional;\0Ain uint i_kind;\0A\0A// uniforms\0Auniform mat4 u_projection;\0A\0A// output\0Aout vec2 v_pos;\0Aout vec2 v_uv;\0Aout vec4 v_color;\0Aout vec2 v_adjusted_half_dimensions;\0Aout float v_roundness;\0Aout float v_thickness;\0Aout vec2 v_additional;\0Aflat out uint v_kind;\0A\0A// get u16 information out\0Auint uint_get_lower(uint val) { return val & uint(0xFFFF); }\0Auint uint_get_upper(uint val) { return val >> 16 & uint(0xFFFF); }\0A\0Avoid main(void) {\0A\09gl_Position = u_projection * vec4(i_pos, 0, 1);\0A\09v_additional = i_additional;\0A\09v_pos = i_pos;\0A\09v_uv = i_uv;\0A\0A\09// only available since glsl 4.0\0A\09// v_color = unpackUnorm4x8(i_color);\0A\09// unwrap color from uint\0A\09v_color = vec4(\0A\09\09float((i_color       ) & 0xFFu) / 255.0, \0A\09\09float((i_color >> 8u ) & 0xFFu) / 255.0,\0A\09\09float((i_color >> 16u) & 0xFFu) / 255.0,\0A\09\09float((i_color >> 24u) & 0xFFu) / 255.0  // alpha\0A\09);\0A\0A\09v_roundness = float(uint_get_lower(i_roundness_and_thickness));\0A\09v_thickness = float(uint_get_upper(i_roundness_and_thickness)) / 1.5;\0A\0A\09// calculate dimensions per vertex\0A\09vec2 center = i_uv;\0A\09// center = round(center);\0A\09vec2 half_dimensions = abs(v_pos - center);\0A\09v_adjusted_half_dimensions = half_dimensions - v_roundness + vec2(0.5, 0.5);\0A\0A\09v_kind = i_kind;\0A}\00", align 1
@src.shader_frag = internal global { i8*, i64 } { i8* getelementptr inbounds ([3472 x i8], [3472 x i8]* @"csbs$1", i64 0, i64 0), i64 3471 }
@"csbs$1" = private unnamed_addr constant [3472 x i8] c"#version 330\0A\0A// input from vertex\0Ain vec2 v_pos;\0Ain vec2 v_uv;\0Ain vec4 v_color;\0Ain vec2 v_adjusted_half_dimensions;\0Ain float v_roundness;\0Ain float v_thickness;\0Ain vec2 v_additional;\0Aflat in uint v_kind;\0A\0A// uniforms\0Auniform mat4 u_projection;\0Auniform sampler2D u_sampler_font;\0Auniform sampler2D u_sampler_sv;\0Auniform sampler2D u_sampler_hue;\0Auniform sampler2D u_sampler_test;\0Auniform vec4 u_shadow_color;\0A\0A// output\0Aout vec4 o_color;\0A\0A// distance from a rectangle \0A// doesnt do rounding\0Afloat sdBox(vec2 p, vec2 b) {\0A\09vec2 d = abs(p) - b;\0A\09return(length(max(d, vec2(0.0, 0.0))) + min(max(d.x, d.y), 0.0));\0A}\0A\0Afloat sdArc(in vec2 p, in vec2 sc, in float ra, float rb) {\0A\09p.x = abs(p.x);\0A\09// return ((sc.y*p.x>sc.x*p.y) ? length(p-sc*ra) : abs(length(p)-ra)) - rb;\0A\09return (sc.y*p.x > sc.x*p.y) ? length(p - ra*sc) - rb : abs(length(p) - ra) - rb;\0A}\0A\0Afloat sigmoid(float t) {\0A\09return 1.0 / (1.0 + exp(-t));\0A}\0A\0A#define RK_Invalid uint(0)\0A#define RK_Rect uint(1)\0A#define RK_Glyph uint(2)\0A#define RK_Drop_Shadow uint(3)\0A#define RK_SV uint(4)\0A#define RK_HUE uint(5)\0A#define RK_TEXTURE uint(6)\0A#define RK_ARC uint(7)\0A\0Avoid main(void) {\0A\09vec4 color_goal = v_color;\0A\0A\09if (v_kind == RK_Invalid) {\0A\0A\09} else if (v_kind == RK_Rect) {\0A\09\09// calculate distance from center and dimensions\0A\09\09vec2 center = v_uv;\0A\09\09float distance = sdBox(v_pos - center, v_adjusted_half_dimensions);\0A\09\09distance -= v_roundness;\0A\0A\09\09// add thickness if exists\09\0A\09\09if (v_thickness >= 1) {\0A\09\09\09distance = (abs(distance + v_thickness) - v_thickness);\0A\09\09}\0A\09\09\0A\09\09float alpha = 1.0 - smoothstep(-1.0, 0.0, distance);\0A\09\09color_goal.a *= alpha;\0A\09} else if (v_kind == RK_Glyph) {\0A\09\09float alpha = texture(u_sampler_font, v_uv).r;\0A\09\09color_goal.a *= alpha;\0A\09} else if (v_kind == RK_Drop_Shadow) {\0A\09\09vec2 center = v_uv;\0A\09\09vec2 drop_size = vec2(20, 20);\0A\0A\09\09float drop_distance = sdBox(v_pos - center, v_adjusted_half_dimensions - drop_size);\0A\09\09drop_distance -= v_roundness;\0A\09\09drop_distance = sigmoid(drop_distance * 0.25);\0A\09\09float drop_alpha = 1 - smoothstep(0, 1, drop_distance);\0A\0A\09\09float rect_distance = sdBox(v_pos - center, v_adjusted_half_dimensions - drop_size);\0A\09\09rect_distance -= v_roundness;\0A\09\09float rect_alpha = 1 - smoothstep(-1, 1, rect_distance);\0A\0A\09\09color_goal = u_shadow_color;\0A\09\09color_goal.a = drop_alpha;\0A\09\09color_goal = mix(color_goal, v_color, rect_alpha);\0A\09} else if (v_kind == RK_SV) {\0A\09\09vec4 texture_color = texture(u_sampler_sv, v_uv);\0A\09\09color_goal = mix(color_goal, texture_color, texture_color.a);\0A\09\09color_goal.a = 1;\0A\09} else if (v_kind == RK_HUE) {\0A\09\09vec4 texture_color = texture(u_sampler_hue, v_uv);\0A\09\09color_goal = texture_color;\0A\09} else if (v_kind == RK_TEXTURE) {\0A\09\09vec2 uv = v_uv;\0A\09\09vec2 texture_size = vec2(32, 32);\0A\09\09vec2 size = vec2(v_roundness, v_thickness);\0A\09\09uv *= (size / texture_size);\0A\09\09vec4 texture_color = texture(u_sampler_test, uv);\0A\09\09color_goal *= texture_color;\0A\09} else if (v_kind == RK_ARC) {\0A\09\09float tb = v_additional.x;\0A\09\09vec2 sc = vec2(sin(tb), cos(tb));\0A\09\09vec2 center = v_uv;\0A\09\09float thickness = v_thickness;\0A\09\09float size = v_adjusted_half_dimensions.x - thickness - 5;\0A\09\09\0A\09\09float rot = tb;\0A    mat4 mat = mat4(\0A        cos(rot), -sin(rot), 0, 0,\0A        sin(rot), cos(rot), 0, 0,\0A        0, 0, 1, 0,\0A        0, 0, 0, 1\0A    );\0A\09\09vec2 p = v_pos - round(center);\0A    vec4 res = (mat * vec4(p, 0, 0));\0A    p = res.xy;\0A\0A\09\09float distance = sdArc(p, sc, size, thickness);\0A\0A\09\09color_goal = mix(vec4(1, 1, 1, 0), color_goal, 1 - smoothstep(-1, 0, distance));\0A\09}\0A\0A\09o_color = color_goal;\0A}\00", align 1
@src.png_sv = internal global { i8*, i64 } { i8* getelementptr inbounds ([23345 x i8], [23345 x i8]* @"csbs$2", i64 0, i64 0), i64 23344 }
@"csbs$2" = private unnamed_addr constant [23345 x i8] c"\89PNG\0D\0A\1A\0A\00\00\00\0DIHDR\00\00\01\00\00\00\01\00\08\04\00\00\00\F6{`\ED\00\00Z\F7IDATx\01\BC\97\D7r\EC6\10D\0F\F6\E6\1F\F4\C7\F9k\9C\EDW\E7\C7\9Bs\0E\926\B1\8F\93XSK\16\CC\D5M\CB\88b\CF`J=\DD\80\9A\F2\B9\0E\C8{a G`!@\8E\C2\CD\BF\D7s\9AQ\D2EA\8Ez\0A8\C9\04\92\AA\BA[\DD\88\AC\EF\F3\1A\E6\F5\F6g\9Fdm\D1\8B\93\059\02\0D\E1Cs\7Fx3A:c\11\C1YL\9F\96i\BE~-\CE2v*\C4T3\1Cfu2\9B\07\B3\1A\04t\1C\8Bh\14\C1\A8\A2j\D4\18a\97\C1\9D[\D7\BE\F5\A9\F0E\DA\E0g\F2\80>-\17h\17{\C8>=\8B\F4\DA\F7\0A{\FA\B7\F0\1D\ED\D9\AB\02gJ\F4`T\94\A2\19\9B\04+\DA\F1\0D<\1Fc\14\C7\1F$\90D\85}\06a\9B\BDp\9A\8D\F04/}\E0\1FB\DB\EB\87\DAw\CF:\E7\C6l\8BLLM\DFo\E6\8E6\BDh\E5\A0\CB\F8Ben\CC\CEc!:\AF\ACZ\D0\B9\07H@\C9T\DFzE\D8i\D1>\12\AF\C2\D5a\8D\D6\AF4\9Fs\FA\07\F7\EE\FF\D5\FEFX{\E2\AD<\14\BEL\DB\C9{y@\D3%\05\D3\A2\F3?@O\9B\ADO\1EH:\CD\C2D\7F\1Drz\D4v\B3\A6\AA\9E\E4\05)z\99\B4R\D5\02\9A\8A\D52\EF\89\C9St\D7wG\84\0Ax%\1BG\F2\15P\13\00\1C\F5\0E\09\C4!\11b\DCe\10\06\D7\D9\09[\DF\E4\CCw\C2\1B_\F8C\A0m\F5\A2[8\96\F7\01\CD\B8\A0\BB\F4Ugg\96^\BC\C7\D4\8D\E9,A3\B5\D6\D3\C9l\AB\0C\1C\E6_9T\A4V\EE\91\D8q\849@\A9E3j\D5a]\82\D5\04*j\82\AA\A0\09h\92q,\ECs-'\FC\A7\FDk9m\9B\C0Yvn\DC\B8vl\80?\03wl[=\DE\01X\FAn\A6\14-\AD\EEMq\EA.\11\\V\EB\CA\08\ABd\DE\0E E\9B)\C5\D5\D8\CE\F6\AAh\9A\D4;\A2V\09\D3\F5\\\E1\D20\80\14\EDZ\B1\99\D3}\8E\04\95x\E8\01h\BD'x9\BBfT!\19\9Fpy\D8\10a\88\C2>\11\AE\E6\84\08\DB\C0&{a\EFI\B6\C2\AB\9C\FA\CE\B7\BE\F4\89\F0u\DAZ?\90\FA~|?\8FG:\8E}E\17\05\BD\9D:\06\17Wlzh\0BU\D4M\08\AD\85\ED\B0\9E\8A-e\E3\A5\0CM\89\16\D6\11]o\14\F9I\99\BE\E2\FC\17!\89\A3\F1\C78\FC{\C1\7F\D7&\B0\F3\F4\DC\01\E0\CC\A7y\E3+\E1\99?\A5\9D\E9\91\D47\9D\E9fe\96v\0A\D4\C8\E5\FF\BE1\9D\F9;\88\AA\AC\91,n\F2&y\0AeVF\98\B7\C9\B4r\0B5S4\D1i|\D1{){J\F9\A6\DC\AA\D4>\D2\8C\90 @r\B8\BF\AF]>\0C\890\FC\FBv9k`\17\88\DB\F3\AD\1F\C0Y\F6\C2\BB\DC\F0\B1\F0\22'\BE\15^\F9g\EE\D9N\F5\E2\CA\C7,\AC\B9,m\B1:\EAb\AE\E7f\CA\B6\FB\ED\C2\FF\AE\F7\F3\8A\B1W'dF\F9\9C|\14\B0\B0\F5\B43\BA\C4>\08#\D1\E8\EC\9A\BE\E9\156A\85\22>\AA\8E\B6\BF\1A\B6\AD\D4\1Fa\17\D8d\F0\9A\AF\85\DD\BF\D7I`\E3\AB\C0\B3\BC\F5\B5/\85_\D2N\B4O\A5M\A7\84\1C\DD0\B5\DEv\1CD\03\BD,\A6\C6m\AE:\C7u\B8\C5FZ\020\89\B1\B3`\8C\B1\FE\C5\B8\95\E86\CF\E40\C9\ED\BE\FF\DB\ED}\DF\F7w\B7I\EC!\17\B6L\10\82'\E8\FE\1F\DA\DA\93\89\FB\03\A4(\8A\936*\B2\D17\81\F0+\9D\00WJ\9CV0\D4\B3\D9\88\C7Z\E5\0B\89\91D\17|W\BB\E7\F9\17\AEu\ED\CA')\D8%\FEE\01\B4\A0'\A2\9C\FF\C6\C1\17\DC\F3\86\8D\E5\FF\1F\8C\F8\8A\1B\8B\00_\19\F1\1BD\E4w\D2\E0|X\FBIL\E5\B7\EFf\87\AD?\BFV\9F\9A=>\89d81\93\A9^\D9\DF\1F\AE\FC\C9 \18\EC\DA\12\B6u\FE\1DE\80\22/\E5\F6\8B\CE\E1Y@WV\1CB\FBe\F0:\DC\DA!\FA/c\8Bz\ED\E5\90k\D2\06\D0\D0\DB\F4\81\80\C1/\E9\DFd\FE8(\F8K\FE\F7\FBw\EC_\8F\83\02\E5\01>!\E2\9F\F8\CA/\87%\CCo\E4s\09\9FA3\CF\01\220\DF\D3\9F\FD\ACyPZq\A1\9F=u\07y\01\E6=z\F2\7F\9B\B2S\AE_+\08\D1\A5\BC;~\06\D2z\C1\0Ev\D5>\D4\E5y\19\EEL\D0\E0I\17\1EN\C0TY\F6;v\E0{\DFw\BF\07T\F5\E4+\D7\13z\05>\E0\86\C1\EA\FF\95\FB\D5\BF\95\EB\E1\00\8A\02\EF\BC1\E2\8D\7F\C7N\80O\CC\AF3Y\8F\FF\B3\EBO\EA~\1E\AA>o\1B|\DE>\AE\B0{_\F3\D8\F3=\BE\9F_\CFLbuT\98\A8nd\D1m]@\14\E9fn\01R+\DAK\EC\AB\0B6kAt\C3'\1A\90}\C2\7F%\B0\86\8D\DF\825\AE\E2\1F\01\D5>\C1\8A}\C7\09\7F\C5\BF\0FV\0B\B8\1F\F0\BFso\02\BB\11\FC-\F2\CB\A4z2\F81\01\A27\86y8\94`t\BF=\81\CA\B2\1B\C4\B4\96\9B\CA\CC\F2t%p\FD\D9\96\F0\B6\B3?\E3:\B7\87v\9A\0Amr\F7s\D8%\DE\EA4l\13i\C3G\DA\0F\18\EA8\DE\B1\9D\F3\BE\D7\E1&\10\F55\F0\825\04\BAl\1FO\E3\A7\D0W\16pc\C4\ED\8C\80\D6\03\FEj\01e\03#\FE\86\AF\FC\C4\FCB\\\C0\9EC\F5\BC\F2\A7\8D\E1\D2\CF\B3V\BC\FAa\1C\CB\EB\BC\A0>\DCa\98\EA\01\19a\88\E7\D5o\F3H?\E32\E0\CDb[R\D7\14\89M\DF\C8\11\1CA\DD\01;)$\EC\8D\0C\C1\B2\1F/\1C\015\81\F2\04G\C5\8F$\C9\01\C7\01\BB\0Ax\F4\03m\FE\06\17\DCc\EC;\F2\01\11`\E3c\BC\85R\80\BD\09T\16\10\F1\17|a~z&\FF\F3\F1\E8c\D9\8F9-\0C\EA\07\B3\7F\B8\A6\FD~\06\F1\FC\F9d\0F\AA9K\F8<N\A6f\8C^\C3K\00\A6]\82y\AD\FD\856}\AE\F6\AB\AB\B7\D1\AB\A62\92\22H\04\FB\AC_\CE\C0\86\8F\A4+\FFh\0E\03\A4g\80\22\00H&\D6\90\FD[\B0eu\FFj\00\D6\80\95\11?\8E\18\E8\C1\DB\BE\C2\F7\83\04\FF@\C4\9F\91\9F\08A\D4\83\9By7\0EC\9A\C4<\9D\9B\CE\15\9CS\EB\F2\E4Y\F3)\EF\DD+\B5W\F3\13\87\AFW%\E7\D3Y\E4Z\F3\AD50\E1w\B2\DC\80\89A\91\A2z}\11b\E1\F0\AA\BF<\EE\89\1Eu?\11\7F\D1`9\1D\80\E0\97\FC\93h\FF\EC\FE#\F6\EFE\80W\DEb\E3;*\07\F8\8ER\80\DB\A9\01\FF\C4w~e\FE\87t\9D\CD{\FB\87\A9^\07p!\98]j]\F7S\BB\E6w\06\C1p\CE\18\BE\BBB?\0F\9BL\09A\D7h\EC\F7\CD\E3\DA\B8\049\D3\AE\7F\89rB{\88\06yH7\BC\B6\80\C7}\DD\BD\C4\A6j?\05\1F\F0\D8\A7\A8W?=\F1\F3\F4\FDR\000\F1\88J\FF\07\03\F7\D8)\B0rc\8D\81\AF|?\CE\02#n'\05\F6&\F0\03\F9\EF\0E\E5|\9E\9F\8Df\13\D7\C0ib\7F\0D\8C9s\F3|>5\90N\F3\93\98\01/\DBVu\14\BC\D8\D3&\F7\ED\B9\F2\ED\11\01v\90kXt\B4C]K\C8\BD\B2\C4\A8\F74\F0m\F9H\BFJ\D2?[\C5G\E4\D8\82\16{F\A0e\FE\A6\C0+\EFE\85\01>B\FE?\F1v\FC\AC#\E0\88\1B^x\D3\1Cp\FA\80\1B#\FEs\1C\0A}g\FE\EB#\028\D2\99\7F\1E&\9Ek\C2\D3\F9<\AE1\B0\F4G\01\8C\9E\CEys1\B8\0D\DA6qh\1FL\08\B6\D7\AEs\FB\AC\FA\E9\04\C3\ED\80\0Dp\EF\953\E0\A0\EA}DQAk\D5\92\80\82\BE@\1FQ\EF\DA\F6;\EC\DF\07D\8C\C4\AA\8A'\B9AG\BE\11\0Bn\CA\01N\F7o\F9\8F\D0 \08\8C|\83>\0C\F2\15/\8Cx\8B\FF\E2m\F7\01#\FFI>\1F\EE\A6\8D\A1\EF\EF~\E0#\F0\D5\CD\93\01\1AN&\83A\84\9BM\C2\F0N\A7\F8\E8y]\D7\95\AE\00nC\B3\D7\14B]\82\9C\A7\1F\CD\08\B2\B7\82\A3Y\09\E2\03\F2\BA\D3N\9A\10\FA^\A3\DF\F1\BD\1D\F4\BC\C6\AA[\E2\9C\06\06^\8E1N\09@\09?\E5\FEK\110\CA\04\E2\11\83<\DA\81L\E0\BAC\8E\08\B9\80}\12\B8\E3G\FC`D\FE\A3G1\8EnI\1A\8En\BB\BC>o\08\93\F6A6\039\AF\ED\1E\D1:*n3{'\C2\BC\A2\DBS\A2\03I\8D\7F~\AA\0D\9E\D4\DD\BE@\94\ED=\DF\D3\82\EB\BC\85<d\B9{\93%\DC\06\08\03^\BBs \D9b^\93\C0\06\10<\15\C1&\90\E3\\\1F\A7j>\F0\08\C5\C0\0A\82\80\EF\C7$\F0\E0\8A\F7P\1C\F4_\EC> \FF\DE\090\CF\F3\05\DAt\AFE\DCf\88\A8*\F6$\DC;\B7\E83\9F\CC\0Bz\C7B\06y\02\BD\0F^\AC(\D1\9D\BD\B5\C7\B1n\B5\19\E2b\FB\AE\92\DFm\A0\E8!\B8U\E1\A2Y$\86\BB={\E2'\B8G\86\CD\DEY\E7-\FE\A9V\A0\00\E8\9C\F8I\F0\85k\94\0A@\DF\8FIA\1E`\EC\CF>\E4\FD\8E\A2@EA\03\C8\F7\F1\1EE\81\07\90\9F\F0\C67\E6\DF\9E\13@\E0\E9nR\FDI\F4\B5\8AFu?\8D\81\F9\\=\82\B3t\F1*\DC\F3\11\EE\EA\F7\EBz\9E\E2\D7w\E8\F7x0\CB\A1\9A/\92\CC>\B2\D13=\ED\B6\0A$\90\84\F6\AA\CF\BB\EBG\10\14\CC\D4\D5\10\09\007\05\EED\A8\FC\DF\06P\E0{\06\D0\00\88\A3\FAy\EA@\C4*\0A\9Ca\F0\F7\C37\E8P\E8?\C8\BF\CE\08\D0\D6\E6\D5\7F\9D\B6\A7\0E\E1j\DB\AE$\EB\1Aa\A8L\B1\9E\08h\E2\8F\05h'\F3\EC\FB\1A\8DU\9D\D0SM\96\03.\BD\DB\007c\A7}\A11\17\F2.\B5\85\FA\AD\84\82[E?z\A2V\0Bb\AD\F5\FFv\12\F9\AC\DF\F5/\05\88\E0X5\1Cr\E1]\14\E0\E0~\BF\86N\02\CB\04V\12\B8\12\B8\C5JM\02N\03\FE\8B\FC\8B z\0E\EB\D35\CE\CF\EE\AC\07\0D~N,\A6}\87-'\9F\10QS\02\A7v\CFAV\0Ft\D8\C5_\E6R\9D\B7\9F\F3qf\F9\B4\EAn\AE\BB\9A\F0kE\E0z\97\AE\81p\BF\A7\BB\BFR\80R\85\04\B9\85\F6\15\D4\C8\22AQ\80\F4\04P:\D0]\C0\03\0E\81\D4\04\80G,\C41\05T\22x?)\10\F1\19;\05\F2\CF\02i\EE\00\22\C4\F3\A9\F8\CF\C0\D6\B3\A6\B3}\04\1B\84W\E3\16\B6~\02K\89\BD\E8\D1)\D4*\B9\1B\D0(7\12\E4\F1\13\F3\A0G\ABE\C3\D62\EC\F6}\9F@\A3\01\9B\BE\90\A4\9C\00\DB\E4\EF\DD6\80\84\EB\BE\88\B0p#\BC\ABN\108p\0E\97\CD\00F\A0&\01\AC\01S\80\04\B2R\80u\DC\8Fi`\E0\1Eu$d#x\04B\C8?\91\97Q\CF+\CD\C5?\AD\FE$/\B3D\FB+\00\C1\EF\81\8F!H\ED\02\9A\83`_\B16H\EC;\B1&M\86\FD9\E8\FBL\95\ECvP\B5].\8D\AE\E9\97\D8j\8F\EA\B7i\04\9BC\D0\8A\D4\C0\F5\0F\D8\E3\D7\11\D08I\80\04\EC\004\F7\BB\F3\93\AF\F1\90\E7G\1C\DCX\03\F4\07At\0A\E0)\E0\8E\01\E4\C6\95\DB\01\FFJ\B5\80\07\98\9Fqc\FEq\22\E4\D6\84K\F4S\EB\EC\EF\C9\A6\0F\05U\B6\1AkG2\B5KD\B8\0E\8E-\ED#M\A1\F9\F0\E7\95\BEG\F7\D2\05\DF3\AF\BD\BD\F7\FF\9E\F2\F9`\D7\D4\D0.*\16\B2\DF\97%\AC\DF\A6S\C0^\F9\04\BC\12\D8\A8u\9E\A6\0FX\B8\B2\98[S\C0\BE.\E1W\1B\D0\00\08\8E\C3\01\ACP\FF\AF\18hp\E0Q\162\DF\8E\E87\E2\C1\EF\83yg\0D\83\F9G'\F7]\01\9E\C2m\C0\93L\09\B3(#\F8\D9[\83h\15\A0t\81~\A6v\BBg\FB\F78\1D\F4\9A\BA\B9\C0\BE\18>\D5\EFt\16 \E1\95\0B\11\8A~ \C3qN\EB\EA\09u\8ADp\84\AC\A2\DAC\D3\83\DA\15\C3z\A0\9F\D0U\8055\8F\11,\C8%>c\8Bj\0FE\86\01O\00\F5\15\B8\9F$\90\11,\02\10k\EC\F0\03\8FXKUre\E5\81\FA|\E0\17\DCyC\FE\9ET\E7\8E\B9\B8?\95\7F\9F\D0\B5\FA\07\FDa\10W\F05\C5\EF9\A2\F6\07\D8\81\F3\DE\82\C0I\A1~F\87\D9\AE\A5\C9\BF\C5_+\BA\BB\C4\B8`\C1\86S\9A\DB\B0\17\83\86\FC%p\FE\FE\82\BE\E8\9B@\92\84 \8F~\C6\07k\81\D6A\13\04\94\0E\90\A0FAp\0B\1F\00\D9\08\AEp\0C4\CE\0F\83\D54\B0\9DG\C2\F5\A1P}2H*\10q\E7N\81\FC\DD\05^\C58\D3\E8\95|J\87\ABZ\A4\06\1E\CBo\AB\B8\B9\A0G\D7#\DB\B8\CBi\82\FDBQ\81\99\009o\10\FE0v\A4\\\1C\EA\E0\16\CC\C0\C4\FF'A\91\13\AEn:\E0E\08fU\BDu Q\93\7F\D8\0EF\0C\14\8Cg\8BX(\F1\87\08qz\82<^\07\F5U$\F1\F4/% \90\FA8\C88\A7\015\81\88\1Bpx\80q(\C1\C6\E4\FD \C0\B7\83(\B7\B83\7F{\01t6\B0\A9\92\9C\CEe\B0\C3\7F\\w\F8\D1\ADZ\1F\F3\1C\C2t\09\9F5\9F\0Ef\B8\8F\07\B3%|\22C\9F\F4E\15\B6\FD\95\DE%\18<\EE\FB\D3\92\A0-\DEywJz\95\BB\ED\9D\C1W\C0\04{\87\A2\02I]\93#\04\B6ua\A0\0E\86\17\AE\B4\05\D4\04\80\D36\D7UU\FFa\1B\B9\02$\90\E0 \B1\85\06\C1\AA\FF\D2\80\F5\8C\84V\EA\03\A2\A5\00\FB\BF\FC\CD\AC\A2\FB\FD<\B659f\D5\AC\0E\ED\D9\DCaML\E2\9E\00\03\8D*\81Y\9C\E3c%\CD\CB\FD`\C7\AD\02}>\E0\85FI\94\D07\9A\A8\82\ED\07\08=\B9\FF\B9V\EF\F4\FDN\F7&\8D\EB]\E2\AF\FB\FE\89_i\80\FA>\E5\FA1jk\16\FC\81\DD\1Flqx~\10\EBQ\A1\EBq%\15\00V\9D\07(\11\1C\8F\10\01\F6\AF\22@\1F\02\E7\E9\7F\CC\DAA(\BC\E90]\EE\D8\A9`\D0\FA\BC\DF\F2@\EB\04\FBn\92\1A \8B\06\B5\B3;w\C1\17D\03>\09.\81>\FC\051\0By<\13T\B0\1B\17\A0\8B\0E\A5\08\0BI\9C\EE\DD\09@\B5\EF\C3J\B6\16@R\C3\1CtO\A2\B5\03\B0\9F\FF\0D\EC\80\83\82\DF9\80\9D\80>\11\BC\FFK\AEQ\CD\E0>\1Ea\0Dxp=\E0\AFH(\7Fe\88=\A4M\01\EF\02\CB\A7\AF\CD\E1O\F7A\18`\03j\B1\A5\AC\94@i\C41\DC\F3\A7P?\1B1\D2\87\CD\A0\BA\B7FB\CD\0CA\F4\88W]\DF\A3ar\F8\A0H\C1\AF?\DC\C9\EE\F2u\B7\10:\F7\1B\08'\FFE\0F\90\94J\E8\FAx!\15\00\1D\E0:\FD+\F2\8C-jE\14\18\1C\FCI\AC\C7\DD\FD\E8\F1\A2\C0\0DR\81\22A\FD\9D\F0\EE\04\1E\CC_\B2\CF\F8\9C\9D\00\CC \9F\A5y\E1]\97\8C\C0\00\B7\BC\AF[\BA\CBY\DE\14nr\B1\E4{_\D3\00[:+\CB\93\13}5\95\8A\\=\C7\D73[\FF\8F\13P\D1\A0\B4A\A2/\B0%\F2v\09j\02\D5\C7K/6W\FE\E4\0F\BE\0E\F3\A8\00\98\11\A0\12\01O\01\A3i@\DD\0F\D6\0CpG\0D\83\C9\F5 \C0\00r\E0\115\0B$\1F\A5\01\C8_J\C6\BB\CB\8F\A7\FD_w\F3}\11\F0{f\E2\9F\C4\AC\DD\88`\0Ao\83`W\A5\0E\A9\E8Tf(\B4+\EA{=\C6\0D%\02p\9F7\11&\C1\AE\DD\82H\93dx\CA\17\CC<\09\22\C3\A7\81\128:;\0D\F5V\89?\F5\9F\BA\FE\00/\C0\97{\19\18\C7\FC\EF\EE_\E9\09\D5\FF\F7\EE\8F\ED\A8\FD\85\F5\13\94\FD\03\815d\05\17\BES\A3`\C4m0\DF\07\F3\07\92\F7#\0F\C8\9F\CF\14\A0g\82]~'s<]\FD\AA\E4\E8#a\BB\063\14\05E?\ABcp\AE\02\D7q\D0FO\A4B\86\A3\A1R\1E}\8F\9E\F1\B7\C6\A0\ABQ\FB\AD\16\9D\14\1E#\0B\BF&\F4\82~hWmi\B0\EB\CAw\EE\F4\FB;M\08A\EE\11p 9\D4\FF\81\AC1\10\DC\E1_O\1Fs'D\01l\91\BCQ\14Xcw\01\FB\F5\06\EA`\E8\D0\80`\FE\CC\B9\DF|\E6\0FM\EF\FD\95x\A2\0C\FF\A3\EB,\94d\C9\99d\1D\BAs\9F\FF233.33\83\ED\A3\FCp\A6K\D2Z+\F4\D9g\9E]k6S\95\A0\CC\AE\D3\1E\E0\E1\11Y\DD`\B0\05\AC\C2\9FF\91\F1#W\F9\F3\83\E5g\14\F0\1D\8F\B5\08U\DBg\E4\AB\0C\F0\F8\14\B3\FB^\BD5\B8\AA\1E\F0\DE\97\0D\14c^\14\94P=\F8\C2\D8S\03[U\BD'\13\B8\0D\9E\E0\01\AB\96\B4\F0\EA\03\EB\ACB\0C\F6\11\D0\B1?\F6\DA\BB)_\8D\FD:\C1\7F\0F\94\C0N\07=\15H-\F0\FA\\>^\FBG}\97\F1\A3\D9<\E1\CC\10\7F\1A\809\1A^\0F\98\EF\81\15\98\D4\F6\F5E&x\CB\8A\FCk{\F8\91\12\F4O\89\1F!\DC<.\F8]\C0Q\B6m\FB\F4\E5g\CA\AE\9ES\FD\A6\02\83={\FAy\1F\EF\06\F4*a\CFm\B3\BFc\1E[\A1h\C9\FA)\FB\CEkkO\A7#M\BC\E8\9E\80\8D\A0Z-\02\AF;#\A0\0C\\k\8D\AE\03r$l\AD\D7\E5\00]\0B\AC~pd\7FF\81\1F\EE\B9\F6\F8\DC\FB\E1\BAdp\1D\03\F8\AB\14]\81\EA=\01,\B2\F5\DE\A3\AC\D7\D3`b\8A\7F\17\8D\A1\00\99\A0\FD&\F2X585\B4\8D\22\C9\ED\B7P\1A\B2]\C1\F1\CE\D1\B2{\E3\89WH\0B)\F5}\F2w\95^\8A\F9f\CB\B7\DF\95\84\FB.\07l\95\C2\CD\C3]g\AD\0D\A0qV\F5=\D7\9C\C7\E8\9A\B3\B7\11\90\FD\DB0l\067\FC{\ED\81\DF\BF\E6\AB\9A\0A6\FCL\06:\1D\D4\FF\F3\8D\01\1F\EB\18\C03\D0\0A9c^c\BD\F7\FF\CA\ED7p\BE7\05\C1\CC\EF\CA\0B(\DD\A3_\EFq[\C5\B4\8F\1C2\CD\87\B2\83\EDK\D7\22\D8s\9FZ\01\F1\93\12\CA\00B\00\A28\EC\ACm\B7\A0+\EA\9B \AA&c\1E\855\8C\A8\04\AA(\04\8D\02\14\80\15S\004\83Z\17\18=1\BC^E;\C8\96p\03OW\C0\9E\00&\F0\B1\C7_\0A\D0\DB\A0?\DE7[+\FB}\14w\F2\05\C4aS\C4\D2\FB\BFV\065\1A\95\D4\0E\B2/\984N\C0\E3J\A0a\9D\E0G\22\E9\A8\EE\D0\A7\0C\9FL\8FI\1E\BC\FFV\01\0B\F4\F36\0DY\B3T\08\90\0A\BD\97i\A1V\07k|_\05\D0-\8A\C2\B9,\FEV\AF\98M\04o&\\\B3\F6j\13\98\E4\FE3\12\DE\13?\DF\D6\BC\D9\DFG\C5?\CD\E6\A3zH\BC;\83\E3/\FEF\1D\D0\E3\E6iaISHZ\98\0C!\B2\BF\E0\D6\86\1D \FA\98\CF\85Y\A34\B4\BF\D7\FC\ED<\0A\F73\CCcj\FBi\04{g\DDo\DA\18\17\92\A7\CF\EFs\A7\D6\F9\EC\00<\9E\F9s\1A\80\F40\96\CA@\07\89\D39t\F4\BB\8F3\03\88\F0#\EC\AD\09\D6\85\BE\8A\08`C\88r\B0\E1\FF\04\1F.\C0\84`\FB\7F\BF\8E?\17h\E1z\1B\E8\07\00\E9\89dh\02k\C6\0D\EFl\A1\E8=\9E]\BDHDR>\D9<\19?\9A\BAA\22%\87\D2LC\BBM-i\9E\80\BB\85\B83\CEm,r'm\A0B\E2\ED\D4\B3\96\84\B0{\7Ff|\A2\85\82o4}\CD\FC\DB\A60\12\90&\00!\FC\AE>\F6\DA\94\7Fc\AFV\03\9A\1A\CEf\02\EB\1Cq>\90\D9\A0\93\06\E6\1E\FD\C8\F85\82\FDQ\E3\CF\DE\A7\00\011Xg\91F\B5\CDH\A7\91 \06\C1\03j\02kz\A8\86\C4,\91)\03\F6\95\85\A3\F9\FC\A0\A6\B9j<\02\EAOe\98C\16\E0\D6\DE\03\C7>\04]\EA\87\D1\02,\C6\A3\0E\10\BEO<\C1\FF#\CB\AB\11\02\FF\BC\11\A1\F9\FE*8@\C5V\D5\9A\87\0F\B4\06(?\98k\BC\D6w\F5\FD\DE\EB\D5\A6=\E8\05`\0Csu\0A8\D0\8FO\F05\81\8F=\FETx\F4t\DB(\09z\9Fiv#h\84\DD7L\C1-\92J\C2\DFUD\CE\FC\16m\9Eu~\16@k\12\DEgy\F4~\B2\A5\E8\13+j[u\08\\\D5\04\E4\DA6\80\EDFL'\82\B2\FA\07D\A2C\CE\005\E0\ED\FDXcB\DF\09\00\85\A0\0E\19\9C\AD\FF\D1\0D\C4\04\A8\05\D66\22\8C\DD*\C0\DC\AB\B7\AA\A7\02\A9\00\1Az\F6nkx\FF\F8lA\06\FB\81\B1\F1'\00\E4\B0fp}\82\E8\D9\BF\F0\87f\FF\DE<\22\B3[\1A&\D3OH\01\DA6q~\93O)\ED<\EE\E4\B1\DEN\85\D0\B1\0ED\A1I\94\08\F9'\FD\DB\ED\823\80\A4w\AA\B9[%@\11\E0\EE{\03\F3\B9\9CJa\ADk\1EHA\CE\FFW\88B@\CF8(\A4\EFD%\04\E1\96\8A\09\FD\BB\03\FF\DA\E3\8C}~\CC=\FA\C8\B7\13'{6\88\E7\05k\FF\E8\B2\80\F1\C7\E1\ABn\09q\82A\98\D6\D69\AFP\DBg\A1Q\0E\8B$\E8\12C\08]\AD\86\BF\D7m\CB7\A3M6z\94w\C8\ED\FD)\98\0C*\EB\90k\B9\0Fs\D9\CB\221e\E0N\14\AE\ECxL\FE\DF\17\F8\86\BCj*\F6^\E2'\0B\18\C8Ad\FE\D3\1B\E8\E80\ED&^x_{l\B6\D6I%\9A\00\B3@\1D\01\F6\EA\FF\E7F\11Xgo\ECf\01\E3\F0\84o<$\06\17X\AF\FA\B0\1E\D8\E3\8F.\BDb6\CFI\9F!\98m\AA\FAe(yeRH\EF\8DuV\17\86\E1\0C\E8\D9\DD\F7\A8T\F0\EEYGD\D37\C9\A3\A5bK\BEQ\0E\0Ar[Tfx#@\1Ek\0D\A0\B7\16\1A\A1u@\9BD{yG\87\A7\EE\0FkZ\FD\E5\17\DD\E1\A78<f\A3Y\A8\FD\19\05\F6Z{\16\C5as\81\86\9F\1A\80#\CD\03\C6~\91\02Z\1E\9E\AF\BD\07\CF\0B\B604\FE\F0k@\0E\C0\0C\BD&\00i\A1\10\EA\CBB\E2*\D7\BD\8D\03O\C3\92>F\1F\F0\18XHBY#\98\F7=\9B\FEN\CBWH\ED\04\DC\D8\03M\84\0Bp\BBE\12\B0\D1\13\D9\FE\92A!wK\F2G4\99\C1\06\E6S\058\C6\D03A\CD\102\11\F8T\90\0D\E1\8E\81\B0\00\C6Cf\D7\04\B3F\EDo\ED\F7\DD\1Bl\C3\DB?\FA4\00\A1 \16h\FD\EF\99\BA\A9 \CF\A6I|\85U:\18-\A3\A8\0FXo: 6\10\E4\8D\0CB\D0\D5@\EF'1\\\88O\86\F8\BBt\AC \80\EA|HZ}v\F5\AD\9D\F5\A3\18</\8B\FC\CF\D5D\04\F2\BD\0C\80\9A\E9\85\D8\\}tv\03\BD\B7\06\99\7F\B6\11\96\D3\00\AFEB\00~\AA\FF\8D\1C\B4;!\DCt\B0\F7h\FF?\91\80:\A0\E6Q\05:\15T\8D\DF\7FH*\B6u\9F~\AD\FFWe\83\C7c\9A\89\06\00[h7\E0\F7\05\FC\F2\EB\AA[{X^:c@v\CE\F4a\10\0F\9AW\C6\1E=\B5\E1\F8\12\0B\ACc\9C\C9\93\15\\\D1\C5x\B2\BAB\99\0D)\BE\BD\9C\FF7\0E\A0\0C \FD\00\E4X\08\C0\0B#\BD\0C`\DE\9F\F9\EA\93cm\8E\7F\F7\19\E6w7\81f\9B\E2\05\BB#B\F7\01\FFv}\D8\17\A8\8F\F9:F\F6m\CD\C3\0A^\1D\0F>#@\A1\06T\8D\DFk\CF\04\F6\C8\932\80\08\C9\EF|\\\AD\EFQ\DA9\99O\D6\96`f\00O\C1\97\84\13\0D\A9\F0\F3~m?\CE\CA\1E\B9\D7\0A\9F1\F0`\01x\BE\A5^\F0\7F\F6\880cMb\03\CD\03\CC=\98\BFE\A3l\81&\D0\CBc\B50\92\16v\DA\1CB\03p$\F4*\82\B7\A3\D0\85\E0\EBT\FDM\0A\BB\11T\E3\F4\00f\F5XhU5\13\F8v\B6\9B\0CvR\F8l\0E\8FO\93\1A\E3w\85\9B\00\ED\91\B7Y\DC KL\00\DA\A8\03\00\D2\B5}(\05]\B6K\E5!\C3\F6\F6N\8F\DC\ED'\F1\88i\02\A39+\22\D37K\00~\8E'\E9S\E1\D7t\9E\9A\DF\0ECI38\F5<\F1\83\CE\7F\ED\C9\A4\E3kk0\8B\AA\E0\8C\15j\00\BD\D7\0C\A1\C5\DF\CEF\BD\DF\B1F*\D8+i\0AWuEp\AE\1C\AF\FD\FD\BAS\05\C7\F3\C7\FE\D1\86\0F\8C\DF\DD\DB\BE}\1A@\B2\FD\84\D6H\F0\A5\D5\A3\C7\AC0\84l/\EB\FF\96c\AEq\98+D]\B7\03j\09_v\142\01|%\857h\BB\A2\ED\D9\FD\B5Gs{\C8\A2\A9\C2J\A0\05#\B2}\12@s=\04\B0k\BC\B5\AD\0A\E6j\B3Xg:\00\BE\D1F\CBd\10\13\CC\1Fg\AB\8F}\9C\FA\FEu\C2\C1\D8\DF\9F3\1A@\EF}\CC\AAn\10\FB\B8(D\B0\F6\A7i\8C\DF\CE\00\FC\8E\F8\A5\FF\B3\EF5\A1\F1g6\1F\F8<\F3zU}FB\A9d\839(I\95|!a\92\A6q\EDS%0\FC\93;d\05\1A\DC\F6)\1FP\93&\86\02h\1E\EF\D9`\98\C0rM_\1B\06 \F4r\85\CE\E4\9F\A7V\11\BD\00~\CD=\E8\04`j\AD\FD\03=\D1`\1E\CE\0F=<?gX\0C\A2\01\FA^g\C5\B75W\0D\1BCU\C7\006\BD9\E0\EDw\00\F7]C\B0V\08\B5\DDk\80\14\80\A5wz\18\FB\C5\DEW\B0\852\F9\86\1C\01\CFv\A5\94O\FA)\FC\97\D9\BC\1F\F8d\BB\1A\DCb\8C\AB\FD\9C\82\8F-\D2\D4\E4\E9\E0\1D\1D\7F\A1\F7\EA\DB\D6\ED-Y\00S\7F;\FE\0E@\EB\88\AF\85\18<n\94\F8L\1A\93y\A0S\18*\06\7F\F7Y\0A^+\9E\FBc\D1\18\9E\BB\F3\FF\CB\EF\10\EC\14\F0\9B\82HN\0EmO\E6\FF\95\F6\09X\1E\C9\EE\1D\A0\93\D7}\E7\0C\FB\FBy\C4{h \CFy\1E\EB\04|\86<\8F6\D8\81\E4\04\CC&\DF\84\F2\86\1D\AF\D6\FF\09\E4\10\D8\C5\8C\EFm>\01,\C6%' \11(\05e\03h]\1D\10\D1\D7\B81\D7\8A\DA\C0)\C0W3\17&\00\DA\E4z\8F\F6\D01\1E\B2\BE\82\90\03\A2\DF.\1B\F8\B6\EA\98\8A\89`\FC\86\E0\19\AC-\FD\14~\14l\9F9=\A1\F3N\0EoJ\E6\02\FE4 \93\C1\B0\FC\EB\B5\B6~\89?\ABw\D2\E7\933\98\D15\17\89(\8A\80\DCO\FE\00\A4\B5\9D\EE\A3\C0K\DEo\0C\C1\044\03\D5\00\CC\A7\8D\0EcP\F4\E1\B9!\15@&\04\1B\EA\9E\1CB\17D\0EF\17\9C\B7>x\15DPI\D8\14\10_\1Cq\12\C2\EB\DCg\FCzx\AD\C1{\EC24K\F7\02fY|\D7\F3q\84l\FF\C5@\04Y\DD\9Fu\9A\DE~\18\8Ad\D1\F3\96r\BC\B2\22)\E5\CEu\00\1B~n\D1\AEx,\F3\87\C8\193\B4\9C\BEH\E0e\02\99\FB\81\9C\95f~\A7\01\8C\02=\16\DA\1E\DEt\F0\98\C1^\B5z\D5\9A\BD\A5\12\B8\EB\06}\C7\C3\E71\AAy\85\E6\AA\AE\07^\FD\0D\E4\E3t\0B~\EDf\ED\02\94\80cX\E6)\F2\1C\16c\B9d\DF \15{\BB\F9y\9C\B4P\FA\B6 WL\09\E1\C5\0Cs\EA\AC\96\A0\9C\15n\BF\DEE\90\8D'@\D6d\CE\8A\C3u\08:\06\FA^\AEy\C5\BEj\A0\BEoDP\FF\07~\BC\BB\8Dj\DD\C82n\14\D8]U\1C\F1g\1E3\\\05\1Fx\85\F7\EF\D1\B3\01\E3\D0\BFu\01oC\F8X\87\88\8C\B9\1D\0D\19\FB\D5E\E1\D9\FAq\B3\839~\F5\E9\95\CF\D2\CF \9E\E6\F1N,\8E\EB\DF\94\80\FEZ\936\FA\EEhf\0D\A1\D7\CC\0C\E8B\1A\BE\ADG[\A6&%\\M\D90\CB\1BW\11k!f\C2o\DA\80\00\08z!\E2*\F6\EA\EF\F5L\08k\1B\0F\F89\FA<E\E1\F1\BA\F3\\ \C3\E1D\87qZ\B8\A3\BB\007%\D8\15@\078\93C'\F3\CF\86\BEc\C31\AAW\EFw\FE\EF\CF\FD+\84g\E1\13@\81\B1FP\B6Q\D7w\1D\CCA\B5\8Fufr'no)\E7],4\B3\B7X\E1\E3]5g\DE'&\F4k\1B\91w\C9bP\F31\C6X\1F\1C\87\0F\F0{;\13\00|\93,\8F\16\D0\D4\BE\D6}R\B8V\03jx\EF\80\A3!\F1\99\ABI]{\BC\BD@\C6\07W1\158\E7\1E4\86\C7\FE\B07\B0\F6\A04\A4-\C4\97G\92\FD\DB\08\AA&\06\B0\C6\AF\04\B0\F8\BDP\BCg\EFi\1EV\F4@\19\1A\A2\EF\D9\0E\D2\EC\DE\F6\00\E9\E1{\15-\E9\D5\B0q\1D\DBzz\D4\08)\F3\08\AA\1D\7F\C1\B6@\B4\A8\87\09\98\EFM\12w=(E\FB\A7\D7\98\10Z\F0\E7l\F3t\B7J\BD\AF\05\93\B5\10+\90\82\E9\1B\EEk\0E\FB\D5M\E5\DD\E7>V\8D\E3\DDm gT\94\BF!\C6\84\D05\84\CF\FFG\CF\13\8E_\BE\D1\8A\10+t!\F4\0A\CA\1B\D1H\FF{\18Kv\FB4)\8D,j\0B\93A\88\BCoV9J\BE\1E\00\0Fk~Z7go\19'\B6\F0M\8AF\A7\08\99\13\8Ao\F3\D4\A0\1C\F2\FA\CA\FF\9F\D4\CFB\B0\D1'%t\C7\DF.\01MaV9\09x\E3\C0l\09Xa\C8\D7\F1\09\EA\DA\E3\16\83'\FF\D7I\10s\9D\C0\8F|\B4\BE\FF\DC?\F4\AF\DFO\0C\19\E3\17\9F\B9\\HS\BB\7F\9F(\98\E7O\A05\80\CA\EE\9C\D1Bn\00\C1{v\F1\A5g\F6\E7\BC'0\E5\80\87\E5*k\A5~\A6\99\0C\FB\FE\CBn\F4l \F6 F\FB\D0IM|\FE:\CB\BCK\F0\FE\88\06i0\D6\06\A1\FE)\FF\ACM\8C@\16\AAK\02\F7\92\07t\D8w8\84\F9\80yK\C6\C5\D0\C8\9A\14\89\AB\87\C3\D6\EA\F6p\13\C1jm`\8F_\88\D2\CD\EA?)\DC{\EA\97z@\14\87\B4k\B0!\A1\D38\0C\F62\7F\03w\ED/\B1@aF\16\E2\B9\AD9\16O\FB\A7\11l\E1\8E\F9\1E\90\81\DD\CC\BB\06O_\E6\FE\A8 lf\AF\CA\19\80\DE\E3\DD\D2\8EA\D1m\A3\F9\AC\A2\EE\D4\FB\BB\1F\CE^\9F\D5\EB?h\05-H`\DB\E1tL\E42\FF\ED\9F\92\EA\D79\0F\1C\97\12\AE\F1\F39P-\98\EC\85y\04\D3\7F\DB\EAa\05\D7>\01O&\91\CC_\09\AAd\D8\B5\F2\0A\93\01\D5{\9AJd}4D{\07\AA\FF\EE\DB\08\06\B0ez\D2X\8C\DA^q\FD\9Bw\E0\D5\D3a\0CJ\BF\98\8B\D0C\06;j5-t<\94wf\81\AF\E7\EF\0B\FC\D9\EBm\A0oS@\0F\E4\89\E1y\D6\CE\FD\EA\B3T\01?\F7(\C3\08\C8\E4?A\A5\D9\92u\82\01\1F\06n\0B\C8\BB\B6v\00\89\DB\C0U\CB\01\0EM\E5\EA|2\0F\0D\0F\83I\EE\8Fq\19C\EC\FEe\0C\B1\AD\13W\F8l\1FYZOf\15\C0a\22\0E{\E5\13\C0\B5V\AFnz\08\E4mV}\84\A1/r\7F\1B\0D\C2\0F\F5\82s\80\0B\9E\BBl\131!\B0G@\DF\83a\A7[\F0\FDM\1Cu\EB\80\1E\0B1\11\BC\AA\0D\E0V\01\D0;\89\9A*;\FE\CF\BB\A0\18+\DE\03oi\B8\8D.\C1\CE%\92\06\F4\B3>%\1E\A3\88\B3?>\CAQ\AEK\E5\EF\8B\DAG\0A\B9~=\D4\DE\E1\ED~\C2e\997R\F5\E5D\85\EA\7Fv\F1g\E5\DF^\1F\13@\BD\D7\01z\B5\BF\B7\EF#\03\EF\8E\1A\0B_\C7\10z>\B0;\04\B3\98\0F6\19\CC\DEo\93hS\B9]\C2\DA\DF_9\98h\F0\ED\90\C1\F13\C2\08H\80\0B\E7O)gH\C8v\C6\06\D6<`\CC\12\90\9C\F8\CED\1E\85\9B\AF\CFR\B2\CC\EBc\99&\D4\06\C0G\8E\C0;\11!\CA\B8]Q(\B6\17s\97~\C5P\97\FF\DD\E2\8D\CA\11\83\BAGW\F4\034\99kP\84|\A6\C8\C9\FFH\B2\0E\86\C8\07\80\FBu\E5\EE\CE\FC\1F\E7hO\0B\F1\FDv\F3\AA\82B.)\BC\89\E0V\09\E3\A7\F5n\C1J\1Eo\1A\10x\D7s\ED\178y\CFx\E1\15RF\A1{h\83\F2\FD\D2$Bt\0E\EE\B1R\F9\8B\1A\C3\A9_\9F\0EP\F37LK7\F5nM!\8B\BD\DA\EE\BB\9Eq1\C0\\\E8\0D\\\BFo\FD\7F\CE\12\190\09a\EFI\A1uy\C1)\1EO\B6\E8f\CE\A2\1A@\E5\9Fp\01%\E1c\00\A3\15\01\94\C2\DA]\0E\EE\D1SB\E3\A7\1C\EDH\B0\F5\E00\8D'\01\1C\02\F8\\\A9\D2\AF\8F9\19X1\E0\19l<\EA\83\87\91\A9P\C0.\B6O\FB:\8B\14\BD\BA\B21e>\D7\88\A4\80N*\A6L\94r\90\1C\913\AD\F6Q\FAY/t\98\E9(\22\8B\94Q\9C\EB\1AxB=\F5\01\BD\81\96\84\F7\02\FA\96\83\99\10\9A\B7\1C\EC\C8\10\\`\13\01\C6>l`\D7P\12:\BA\C0Y3~\92\E2\C7<m\CE\15\D6>\13\019j\86\AF>.%<\B9k-\18\02J!YT\DA\B92\DD4I\B7!lf6\AB\C7\D8\A7`E$\E0\0Ez\BB\D0\D9X\F2\DA\85Ix\\\A1w\8F>\AF\B1\D8\1A\86\F37\D2\CF\1E\00k\96\AC\01\B5\F0*\09\D1\0BtZp\ED\D1{\ED\EF\AC\\\8B\F7\B5\BBqb\8F`\AD\0E\F7)\0B\B7\CF\CF\EA\ED\89\01\A8\E9A\02\1F%\97&\E2/V\CF/\CB*\A1m<(\DE\A2\B0\ABbm\A8\F7\D9\0E~\CE\EF\18\B6\B3^0\01\E8\DF\B5\BC\87c\A14\8D\C8\FB$\B2e\11\C1\CFO3\AAm\F0\FF\22\FBd\0A\E8c\BD\82\07\FF%\8F\B0\89\DE\\0\8B1\97\9C\1FC=\C9\80\F37\04@\05kt/\90\0A\A0|hl\AFV\02\CB\01\D1\EE\1B\B4:\D8l\A0M\00\A9x\FC\7F\FD;K;=\BFM\229\7F\A8\04\C8\ADB\83\E7\DE=;t\9E\C3\B8\84\D5\94\C01\FB\F4\EA\0F\B50'Y\BF\D0\DCX\CD\8F\0B\99HS5A\8C\CD\80\9E\066\14\86\A9\00\84\E6Hs\ED]\BD\D1{1\22\D2&B\B1\C8\19\8A\0A\F2=\02q\1Fds\F6]\19\0432\9CG\C6\A8\02h\19\1D\BF\BF\FEnQ\D8\A4o]O\A7.\E8j`\AE\1A\0ACs\8F\FF'q\CB\0E\80A?\81\A53\80\FF<\DB\BF\8Cj\067\D7\A7\DE\C4\11\F8U\1FC\E5\8B\F8\91\1A\BFW[:\22\FAdg \F9\87\E7\19\E9T\A2=Y\BF\08\136qdD\C8\C0N\F9\F1\B1\EC\16\10\8C\CC\FB\C4\02K\BCZ\CB\A8r\DE\E5\1D\CB+\AFF\C8$ \92\10<A\15\B0(\06\8F\B4C?\10\A3\80\0B\F4{\A7\80\D6=.5\FC\BFj|z~\D4\00\9E\B1X\13l\BD\CA\EB9\F3(\CE\AC\0F\94q\92\AFW\08\C1\84\ED\07\E7\B0\BC\B3N\D8F\85\FB\F7\1A,\D9v\AA~&\19\B8\BD\9E\DB\A4\92@-)\85\B49\AD`\D8\C7,\92\05`s!\0AqG\F3>U@[w\07\F7\E5\B4\04U\C0\F58\BE+H\E8\FB\F7\C1@x\1Fc*\B0'\D2?f\8D\89@4\AB\BA\12\98\1D\01\F6\AC\F1\7F\94n\0BHv\EC\C9\0A\92\FB\EB\85a&\82\98\C0\1B\05.?`\DB+\BC\0E\C6\A6\8F\EB\89\FC\D8\87\EC\AB4\E4\D8\D8\18\CB\A0\C5\BD\A6\D1\09:\18\B2\8F\AFRC\AA\11\C9]\B2\81''\10t\F2?\03#/\8DG\D1\A8z>D\1E\E0hx\E3H1\08=D\F05\120\9C\B4vv\04\DA8:EM\8B\C1k\005\C6\FFNh\0D\D3Y\B1\C7y\12@\90-\ABz8}\EA\04\A7\12\C8*\01\EF\CB\1A?\B8|\D4$\BE\F6\12I\1Eq\B2\EA\EEK\1C!\85\B2\F1+\E0\A2\F4\F4\19\03\C2S\EE\CDr1\09\9F#^\CB3\16\93\A6\17\B7\BA\AC\BB\A6H\D4\02T\C7\C5\A96\E3OE\B4\19\B49)\0E\DFGF\FA1\91\B6\CB\B5#\15\F4\DF\1D\EA\9E@\D9\1B8$\F0\7F\11\B6\03`[4\00\22Asm\F2\04\00(\F3z\F2\F9\84Q`5\89\92\D3[ocV\DEi\07a#\B2\16\D2X\F9YIE\16\AA\A8t\A92*\F1\DD[\E3\ED\DA\93\BD@\83\BA\03(\D1\F2\CD\F3\C8\14=D\A4\C7+\02\D9\19x\E8\80!\11\C9\F7[\00\85\114\E80\87\86\BC\CFM\0A\C2\A2\1EhQ\AB+\84S\17\AC\F1?\1F$\D0h\E0\F1P\EB\89\99\AC\94\E6!\F2\06=\BBFT\DBN\81\BC\1A\C2\A82o\DD\FF\A5\97\E8s\0A\9E}\90\C9\DE\8F\AE]2{\D8\F9\CE1\F7{\DE\94\90!\9F\C7D\9C'\90\F6\85\F5T\7F\D0\FE\C0\8B)\BFH~\98\06\B5\7F\83\09\C8\B4\86\98\08\C0$\80\BCY\E3*\A2\C1\0A\F5\8F\B8\C0\91= \83\E7\B5\FB\88v\03\BAw\F0?\F4w\FFYP8\9BC\E1\B1\BDRf\C0\9A\84\\\BE/\A8\11\A6c\C2\10x\22\EC\C7\9A\955IT\F9~\A9[e\9C ?\03\AC\D9\DFB\D2\C1\92r\9Bd\96\A3\A1\F9\BC\9F<\C0\B0\9F\B4\D0I`\EFC\EE\E2\9C-\229\801\80\FA`\DE1WGC\DA\EF\01\9D}\A6\82[1\F4\CB\22\BAE\DC}\02;\02k\8D\FF\91\04+\B9|\92;u{r\AA\C5cH'\B2\83g\1F\AF\9D\AB\CFpG\D5=\C1\CB\FE @\F6\9E#\A2\F6\DBK\BD\CF\08T\AC3\BA \EC\90\DCH\052}\B9\8Dt\B0\E5}\15>\E2\05\8F\84\D1\182\E7\A7\99\EC\E5\BD\10\08L\00\BCb\12\B7k~\EF\E9\03a\CDt\D6^\DB\04`\15\B0\D6y\BD4\0F\82\D8t\B08R\1FW\01\E0u\AD\F1\DF-\ED\BE\B2q\01\09=pG\ED\AF\A7\01F\C6\8B\8C \F1\DAf\E4\1C\8F\9E\FDx\05\16\AEL\A31\94\CBD\1C3\F3.F\0DD#\E7w\DA\A0\89\B7\98\96\C4\B0\A1\DEJFz4\81\BAq\BF\BDD \B5\A1d\9A\90\1D\A4\C7S\F0\A1\18\E4\E3\E2\C5}\99R\DBL\14?\FA\81\8AAr\00\12D\9BU\0F\89\EF\AA\1A\E3\BFZ\FAe\F6\F7\08\AFo\B8\C2\D5\DBx%G\87\D1\E8\819>\86\CA\A7\F4\D4{A\13\AD\154:\04\F9\BC\BB\F2\8Fw\1CJL\FA\98\22\B2\89@\9F}\D2@\19\FF\10m\84\AA\BBB\C1\E7s\10\0D!\83\B3\B2\03\CBJ\FD\9E^_\D5+\8E\D3\E3\D2\04\10\82[\F1\1B]\FEY\00\EE\85\868\8F!\A8\10\9C\AD6\88Idh=p\AF\1A\FF%J?C\FA\0E\92\17\06\01\0C}6\C5\18v\D8\8A\B4\00L(}\09\B7\C6\A6\E9$'\B0\07P\16\94O\8D/c\88\F42\19\82\DC\80T\A3gGu\EF(\89\B1\A1\16Y}\9A\DD\A1\9A\86\FA&\18\CF\D4\10\D3E\AC^\82n\C5\EF\E0\D8\8A\A8\D01b\D5` \D49\01\B6[%\A0(\FA\F8,\01\CF\DD'Z!_\1D\D5\06\B0\85W\96M\\x\0Ey\C9\D5-\16\C3,\FA\D5\D1\8F\94\88\BC\93\F7p\FB+\05|\EEgu s\A7\B20n84\02k\F0NS\B3\D3(\EE\AA'\91\FC\02\AD\9DL\A82\80r\AE\CFv\F0_2\CE\19\B9\1E\E2B\D0G\F5\07\F4s\05\D79#H$\E8\01\B3~\E7\CA\B3\ADZX<)X\FD\F8XG\A9\B9W9&2\FE\B3YZ\D8\1D\FBt\9B\D7G\ABH3H\99\B8B8\FDJ\08\B7\D0C\006S\FC\929A\C7\A9\C2H)\9B\15\8E\F5\B1/1!*E~_\9DO(\CAC>6\D2\B4_:\AC\80c\B0\C2\81\13L\96i\1Fe\BC\1A\92=M\C0\01\F1\13\DC\1D\15\BDk\D8\EE\BE\E0k\85H\B4:\D4S\22b$\D2\BD\B1?d\01'\EC\CB\0Dz0d\ED\F1\1F\B7!\F2k\F3Wo\D3\83\D7v\DC;F6\03\D8:\0B\BD\03<a\C5\1C0\DBR@_\BD\C7&\F0\96\FE\ED\FC@6\9DVD\94\A7\F8\AC\15h\DE\C6\99'qs\8E\88\F2 \13\849\BE\AFY\C7\80;R $(\F9\A0\F0ch9\AA\B6\B4o\A6\03,\0D\8Fq@\FEf\9F\A0\DA/c\C2\1E\FD\D8X\16\85\CAB\E7\E3\D0o\C4\00\FEC\F4\F7\1C\09Y\A9\F3\85G\1A~\83\F4\C9\1A\B6^\22\BFpM\CE\16I\04\DF\09B\06\F3w|\81\BBi\A8\C62\C3?7\F7\DA]\EAz\180\C0w\B3\E6!\FE\EAtE_\901\A3\D1\A6\E2\DAs[\06E\95|\14\98L3\BBa\DE\96\8C\D6\FF\CF\B6\10Q\01\22X\C5D\10Gk/\CA\C1\CB\FB;\01\D82>\FBD\84\8E]\FF^\0A\15\CC]\9FV\B9\1F\16c\99\D3\F3\AA\07\E0\E3\DA\B6\83&\A5\0E\98mc,/{\8Ev\17L#Q[ X\87\DFg\1A\10\1CG\D3\0D\05\A6\09-!\D5\01\DA\05\AE\A01\E4X\A8\D1\84+\1C\B6v\FE\C7\87\C0\9BY@\04:WP\0Dl\99\C1\01\\Q\98\88a\DB\F8B^L\0B\D6\8C\E7\86\F5\FB\8E\06\FDd\E0Z\FD:\FE\FD\DE\82\D6F %\B3@\04\E0\AC\09\F4\C0L\02\8DY\00i\DD\1F\1E\ACAd\22\EA\C2\AAR9$\CDj`m\\\C1\F8I\17\C4\0E\F5\FB\A8\FBe4(\84\9Co\E1W\C5X#D\DC\A1\BB\07\09\85'4\A4\C0L\1Dc\C4\80\CF_\A3B\82\EE3\17|z\07\FAyWk\0D\E7\DE]\FF_\82H\12`\A6\C8\0E\C1e\0C='\E4\B8\E8\\\1D)\10\86\D7\1E\FF.\0D\C0\82\CB\1C\99P\A7\AF\93\DF#!\0C\1C\A6\CFx}\1B\97p\F7F\94f\F1\E5\10v#\15v\94\8D\8DC#\AB\03\B0\13\B8s]\8B4\B86oY\D9\AB\04\CA\DD\82\E1o+9n\13\CF\F9\D8#DI\C8n\81\04\D0H\A0i|\EE{T\1E\E0\88(O\AF\F6=xp|\DD\BF9@\12X\8D\00M\A0\D5\89G\028\89\13{\FC\9B7\BEl\C0\C6s\0C\D7\FD\FA5Yx\A5\A4\8FU\DC\AF\8FI4\F9\0Du\07\81G\F5\FA\E6\99\F1s_\19\E8\C9\188V\8F'\1C\0D\EDz\B8\EEM\A3\9A \1EC\E0\11\DBM\0AP\D1\0B\15\93+\F7\D2\F5\A5\A1\1C\CA\BE\D9_\B0\FB\83\CB\03\EC&\F0|\89\12\F1\8D\09/~\12Wlg\02\9A\03\C0\00h\0Eu+\89\19\C1\D3\0E\FE\D7\BB\0C\A8\9A\C1\A3\E1+\D4\0AF\C4d\CE<Cv\99\18\CD\F1{=\DB\CD\CFqO\F3\BC\93\83\FC&\8CJ~\DA\81\09\C9\08\C6\A6\B5+H\FBF\00\09\1E\81\B8\A30$,>G\C0\07\FBW\F7\07\EE\A8\1C\BA\F8\D3\22I\10\8A\06\14\8E~\0F\F9\80\B9\10\87\1C\03!U\CCU\18@{t\0F\97\A8\05\94\8F\8C\AE\8DD|\93\84U\C0\8D\13\1F<S\B8\C6\BF6\1Ce\17\B0\D2\C7rk\C7\9AJ\C3I)\D8\F2\D2\D5\C9\FE\85\A4\14x\BD\DBBc\D8\BC\B1\C2\E6p\BF\8A\88&\02\E3`\A5\E4\CE\DCG\F66\02t\F0\88\A9\80\0A*iT\A1\B2\97-\E1\AB[\A32:\01\BC\8F\A0\12\01&\E5\E49\83G\AC\87,\AC/(\0DAN^\13\BA\88\A7/\A6\15\F6<[\A6\01\18\C1\F8W\ED\99rg\000\E4GK(!vu\0A\C0#W\1B<I\07F\0A\83\FC\B3\94{_\F4=\BA\05\EA\10\1A!Q\11\06\C8j\05_L\8B\E0\DB~\E9j\09\A0\B0ES7\CD\84(l\80\EF\F7\E0\10\80E\83o\15\06k\CF\89X\D6\B0\F7\FB\D6T\EC?\D7U\FFT\02V\BF;\1E\CE\90(\CF\09\A1\1C\9E\F1Qz\8D5\FE\C53\E7\E3\06\E17)\C7F\13\18\F2\A7h,\0C\A6\17\FD45\FD|T\DC\14\12u\F8P#|\E6}\9E\0D\AA\1B\1E\95~\85\16\D0p\F2H16\7F5*\EB\19|\C9\8C\CF\DC\84\06Y\B7-\CC>\B9\9Fd\B0\CAcT\06\9A\0EY\0E1\18\A2\A7\06H\D7\EC$\B0\B3\1A\9D\1F\A9\12_7>\9Cm\98\80<`/\FF8\C5\E8\BB\8C\7F\C1\C3\1D\19\CE\15q\D2\EF\14~<\E6\B5\CA7\D7\FA\B3So0\B6\90L\0A\B9\A4n>\ED\AFQ\08\99R\B0[}\9D\06\D2G\83\97,\05(\9C\AE\AFJM\90\99\C1\1Dz\BFW\\\B0e\01\B8\BB\96\81\B9x9\C0C\01\DB@\10H)]\9A\C8\A9\01B\8Fz\0F\19\89H\00\03@\018\F7\F2\C1\F1\A0\8A\ED\F7L\05\DE{\ED\F1\CF\05\87X`en\F7\DD\EF\00.\AB\EE~\D5\DF#\EC\A7>\1F\BF\E8\F0K\0C\C3\98c\8Ax\1C\17\A7\12V\05\A0\BC\82\FFz\81\C8\8A\98q\A7,\D1\\\AB> \98\B5,0\98\15\81C\8C#\CEt|X\96\87\BDY\A6\10'\80\F0z\02\E4\22\ED\DA\81\BE\94Or\FB:~\DB\04\BAY.5\C1Z}6\85\E0\B5\ED\14\D0\18nB\D8\E61\FE\99\9A\BE\9E\1D\B3w\E6\F8/m\\\C3\BC[Q\88\19|I+\CE\0B\ADg3\A8\AC\F7\CFa\13qJ\B3\B1\97\920\EA\DC`\F2(\04\E0\C6Y{\C5F\22\96X&>f\00x1`\08\F26\\\14\02 ii\9F|l\F38u\01\93\DA\CB\91\B8\D0\0B\18\03\ED\B6\02\8A_\95#\E3v\12\9F\E0#(\1D\B0\0F\F7\A7D\ACk\18\E3\9F\C0\C6\A3M\AB\FEE\B6\B7gh\E3\C5_\C4\83\10J#\A5Z\C6\04\A7\06\01\B16\CF\E5\0Bn\E4e\83\BCA\D9\9C\EE0\C9\05\CD2Q\12\A7\A9X\05x\D6i^\A3\D9hcR\DC1\0F$\FB\1F\B0y}\7Fk\0C\8A\A2\B7\E0C3\B8\C7q<\0B\BF^{\C1\94\F9\9Cw\0B@\AE \0DM\98\FF\B2\F4;ga\02(\14m\0A\D5F1\FE\F1W!\C8\E1\0D\C4`A\BD\C7\E4\E1\8FG\B9\E3\C9\DD\A0\8CBi\96\06X\F7k\E4\C0\16p\98\BB\03:L\AB\DF5[0\EC5\F2\01\9E\F67\9C\AF2\A9(.[\BB\DB\EB\D34L\8F\F9\D6W`\0EH\89\A1\11Rr\98\1E,\F8\E4(\9D\DD\A5~N\04\E1\07K\F5\B0\B6\B0wJ`\8E\90\D9!g\85-\10'C\A5\FF\C8*@\09$J6\8A\B5\D1{\8E\81\B9\22\CCG\C3\B1\98\EC{ \14\FB+\E4\1C\83\DD\F00\7F\92&\E4$`\CA\C2}\9Cu*\0Cm\D9m^rw\A3\0B\06\A5__\91\C7\02\DFp\EF<\A0\0A\C2U\FEi\03\F7;\CBy\F6\7F8\A1\AA\E0\83\E9\DD\A3s18\92~-\F5s\C2\18\12>\FBn\A6\00;\00\9BY\A0\1C\13Av\FDX\E7\9D*\E0\1F\EDe\D5\8E;*\CD\E8S\82\9D\BF\94\80\1C\FF\04\1E\81\F3\98L\CA\D3{\0D\C2\BF\18\AA\EC\95:j\A9\D68\BAa<&\91\84^\98\22nE(76eu\0F\07\C3Xz\A9\97\CB\00\94uCB\B6\8F\91\93\05E\C0W/\99\B7.\B0\98X\FDZ\1C\C1\FB\AD\13j[a\AE\C5\EA\AE\FD\F1\F4^y\B6\1ArT\C0suK\1E\E3\1F\18\12}\E2\DF\C0\1A\B4N\FF\16\FA'O0.\E4,\C0\F0\9F`\A2I\D9\D7\F5\06qb\8A\A6\C7{\DEA6\B0w^\8D/e\9B+\08\9D@kt\11\01\DAl\CD\F6\\\D7\DB\DE(z\1Di@\8A\C0\1D\BEz\C7\86\0F\11B\C9H]\10\B0&\8D%\1B\C1x\FB\C6j\1D\12\F1\7FD \0Cg^Rx\AE\FA\07\E6\E2]\0E\86d\D6~V\09\CE\FD\07\D8\\+\08\D9\0F`\AB\AFs\951(\07N3\05`\E3n\01\9E\F7}P?l\80;n]yK\1Am1\9A>\E0\0B\AC\C1\D9J\80\F7MZ\AC\927\E8\02r\FAs\B7>\11\1D\906\08\92F\D7\0C\D0f=\DF?\1B\E5\B1\15\B1\E1\06\F4;\FF7#\CC\E3\EF\FD\0F\F8\A0\B9\DCr\DC\DFc\1C\14\8F\D1\A71\0B\12\98(\B0\9Ak\81\10\E5\9E\08\A2\019\B4\D1\D7f?\11\FC\D4\0B\C4$:|\D0O#8\14\CD\82\0DO.9\F8u9\CE=\18\BF\FD\01K@\CE\06\DFOA\98#\84/\E9r\C6\93\D5w\01z\B8\84\C5\801@\02xg\FD \0C\A9\08Vq5\F21\83\E1\C6\03\8E!\F8\F4\F1=\94\8A\EF\BA\BF\FB\D7|\DD\87v\F3H\8F\84a\F7\DC\E3\E6\9Cs\CE9\E7t\C3;\E4&\D6<~\0F\BD\FF9\F2\8C%\B1IK\00\0A\85\02\9A\DF>z\1C\00\B76\E5\8B\FDK\11\82\A7\12m\19\BC\CC\EE\E8\AD\10W\D6\D3\223\1B\1C\E8\7F5\AA$\87`A\A4\1E\A9\07\C4\06\99\F6c{'.\E0j\A2o#\A1O\03\C8\D1\CE\F8\1A1\87+xB\F7\08Z{}\16\8F6\EB\0B\01>\EEM\02L\E1\B2S \B2\F2\9A\BFk\22a\09\E7?\C6\E8_|~\B9\D8\97\A2\19LZU\BE\99!\FApd$\93o\16Ms\94\C1\BFW>\F7\06\01\F8\ED\17\A9e\EF\D3\EE\C6\E5w7\C8\8Ds\A3y\0Cj0m\91\A5V\F8\EE\06\E2\83\22\DC}D\8FS\CC#}4\A2\F9uw\C7\0A)\D85\9F\93Q\02\D4\02(\E1x\C1@\EC\B9\DF\F8\AA\96m\00\19\D5[\02y\C4\E1\C9\CE\FF\D3/\9C\BA0I\E8\FC\DB\FD9\8F\B7r'\0D\07\01\00|\12\C0\D8\FC\8D\01\A0Zo~\0F&\0D\9A>f#\F6HB3\F8|\06\8C?qO\0B\C0\EDg\16k\A3\0Cs\84\DB\FB\A2\93`t6\07\B0\F3\90s\9B\16v\B4O\AF\9D$\D1u\9F\F1%=\0C\1EE\EEs<\09\D9\0C\C2:\84k\F4\0CG$\83Q@[\C9\A6\02\B8\BD\D1\F97\98\BB\08nO?\CC9%c\07@\D4\FC~\CC\E5\DD\9F0f2o\91\05+@\B9\8E\C8:\0Eyo\09\11\82)g\CB\F5\CF@\1A\F7\80=\C7.\E1\B0\0E)\89\09\BD\14\EA8\9F\FDx\E6z\ECF\DE)w\F7\B0'\E0&\94\0E\0D\06gj\03Maz\DF\BD\AA;\89`\1A\F7\B9/\F7\13\1A\D770\BA\F6\D5\F5\B1\DF\CF\BF.\D2\F6\13\FAV'@\FA \C1[\1F\ACJ\87\AD\8B\EB#c\BBf\AF\84k\A7#\E1\FB\DEx\99H\B4\C0\99\CA\12\A8\12Z\BBKA\8F1+B\AF\F5~\88?[no\DF\D0Il\C5\1B\AF\BC\8F\08\CE\E8\18\EC3\EC\E8\0E\12\CF\AE\F7GM4\9A\AC\EC\9FQo\F0\FF\00?\90_1\B8WZ\1E\9E\7F\D1\AF\1B\CC?\E3\D9I\0C3\0DS;\16\12l\F0R\BC\82\D8\0C\90 z\B8\FB\F0\C0\04\CD\1C\A5\1B>2#\B6z\C1\F10\06\FA3\15\C4H\CD\D0V\91\16\EE\E1T\19\0D\8B\EA\1F\B9\BAF\1F\BCg\87\C0zi\C4!\E3_\F6\BF\\\DB>\F2\CD\C7=ah.\B1\CF\BB\FE\DE\1CvF~t\0F\E3\E2\83\7F\92\D0\CA\C4\F3\CF\E6\01^\C6\9D\899\02\D0l\C4\92\927\12\0E\8CM\17\13\95\9E+b\E6\C6\AC8\\\F0\85\8B\B4\B5s\10\D1W\1DQ\E71*$q1\0F\FB\99\FD{\A6\FF\E4\E6\F6\18\16\89\CFG\D1&:\F7\84\DD\996\AE\A0~x\8C\B8\92\D5\98\C7\BD/m\80b/\E2\FF*\14c\00\D1\03\EE)\81\D3\FD\D5\0B\E3\05\C3\09#c\E7\9F\8C\80A\82\91\B4\BC\EA]z\9Dq2\0E\D4\19\81@2S\E7\ECguw\8Cl\94;\1BB\A4\00\DA\C2G'\11\0C\88\C2~\D1\AF\F8\02\F7U\05\BC\9B\BF5j\C1\\[s\02\DF\9F\16\F2\ED\FD\9D\C6_\C3\AF\DBx/\F0\95\19S\03G\E7`G\D5\00\F8q=n\C1\C1W\08*,\17\F5\CA\BF\F5\05\CF?\EA\EC\A7p;\85\F7\80>\C5P\B4\C5\BC5\B3\F4\BDW;R\1A\80\17:pC_\FF<_.#\A5\AB\B85@9\9F\CDT\D0\0B\01\B6\FE\F9\E1Psh\E2\9F.\1E\ED\C1\D4\1F\E9g\FFY?\8F\DB\8D&>\B9f\06f\F4i\02\04\E55r\97\DD\B7f5\C9\A3:n\8B\86\FB\07\DF\F7m\88l\AC\E0\B8\AD\DC\F9\07p\9EL\FC2WT<j\1F\F5\EE\C0g\AC\C1O\C4\22\A0\DE+\A7H\9CI\A3QL#\DCH\B9X\EFV.\8E\D1\EA\84\D9;\E1\B7O\E6c;\E2[&\AC\128\AD\EF\AB\84\A2%<X\7F\92\CAF\D3\89G\E6\03\E8\15\D3\0Fm\0E\D5\17t\0C\A3\AF\F3\7F\7F|\98\01\9A\A7nw\0C\0E\B0\ED%\1F\E7\EF\CC\03\A4\E1\0B\FCk\1E \8F \B6\7F0L\B4\8D\A3#\E0i\EC\C0\02;\0972\C2]\D04\CF\13\C5\E0U\0D\A2E\D1AP5\81O\C70\E7\EB\B9\EF\D9\AF\AB\F1\F8\E0\C7\88\ECt*\8D\1F\1E2wP\07<\F6\1F\B0\DA\CF\BA\81e\C6o\02\F8<\17p\D3\06\90\BD \C7\FA\06\E3+\7F\1B\07x\C7\E0\C7\AB\E43\FD\14\C0o\D7_\AB\E7\DC[\E3\E8\14\8C\8AN'f\DE\09Ksv\B6\C1V\CC4;\B3\F4\B2\B8*_g(|\9F;\D9\C4\CD\F1\B6\05\FC\8C\F1\A67\D8b\7F&r\C4T\A6\8B:\80\96j\0DU\1EB\FF\EC\08>+\05\E7\12\DB'8\BA\B7\DB\CA=\D9~\EE\A3\CB\F0\BC\F7\7F)\E5\FCM\1D\A0\90\ADFo\0D\D0\B2:\\=\ED\A1\E7u{\80\B4\8B\B7Rtj\F9\D3\11\89\B5\068\98$\841\85\98\1B\BD>-\9A\19n\1Ff\0F]?\E80w\A8\D4\D3\1E\E0s\D6v!f:JdQ\C3\C0\08\C7a\F0o\9E]\00M\1Av\0B\CC\E031\F3_a\10\D0a[\C9\BD\EA\0EI\9B\15<\7F}\BF\E4\9E\921`\1F\F3\A2\84\A6\FFx\05t\00\93\CE<\A8\17\93X\87\AF\BC(\12J\89zb\81\AA\8A\A1\98\C9\C3:\F2\A4\17\A4cdaS<s\8B\87#\C8\E5\E6\D6\0D\1D\CFy \0DV\7F\82\10)\03s\0B\D9Yy\F1\FD \04\F1\EC\A0|\13\89\1E*\973.\BA\9F\E7k\0EI\0B\CF\F7\80*\9E\BF\BE;\CFs1l\FA\FD'D,\9D\7F_\FC\AB_@\1Ej\C6\06\B5\BC\802\CF\01\DB\14*\15Tn\DD\B9Jfy\87[U\B2z\15Fsr\13!<n\A9\0D\0C^\96\04\1A5\A0\B8\B2B\94X:\C3\0Dl\04\E2\D6\82s{\08\F7\DDj\0E\9DM\03\B8\A7\A8h\0A\E4\DFW\8A\CD\EB:\7FE~a\DC\1A|\CE\F1\AE\0C\C4n\CE\C1D22\D1k?\B1L\AE1D\D9y\15\7F\EF\BA=BO*\16\A6+\02d?\80\1DF\E2X\16\0E#h\F3\80\F8b&\D8V\EF\1D\A9\A53B\B7-\8C\AA}=\BFa\80>\A0\A6\EF\C8\D0u\CD\01`\C3}\E6\A0\9Ca\C3\AB\8B}C\E2s\88\E7\A6\9D\7F\99\DEF\D951\85\83\EF\C1\B5A5@o\04\EF\8Dm\A0\80\07\9A\CEU\F53\D1W\C2\F7\8A\DE\A1\89\99\E4\AD!\DE\06~@\B9!\0C5zgD\9CC\9D\A1\83\DB\BAP\B8\F0>\02\8D\C9\C1t\10c\FC\D2\C5k\1F\EC\FAX\CF_\EC\7F\9CiH\F3\AA9\C9u\EB\09\D0\1B\FEs\AF<\A9`\F0u\FE|Y\B3\D9\1D\90\BFj\01\B5\C2\9A)/\B5\B0\B4\D1q&\06\FC\A4\92\C8\F9_\C8\DCYA\1C_Y>\B7\D8\C5\DE\82\D0h%\01\EF\7F\07\A7\DB\9Av\C5\C8\CA|\A6\C9\C1\EE!l\C4\F4\1F\16$rw\FF@\FB\7FP\B7\E7\\\CC\E9\DF\EF$\07%\CA\17\FFO?pC\C8\D1\0A'\00\0F\03v\B3\93\F3\E7<\17@~\AD\F4'\12\DF\12\AF\1F\F0\DC\A2\AF\F1\DE\9B\C0\A7\AA\00\BF\D8\F5\C6E\A0\8B\18\F2<R\91\D2\B0\0Dj+\B9\0E\A7\06\EC6zq-%\E1w}\EA\FCKTa\0E\AA\C5}\8E\A7\BC@\E8\E6:\D2\E2\B7\CFz\C6\BB\1F\DC\FC\DF\F5\CF\DD\0C\CC\1B\1A\E5\D6%\DC\88\98=\90\F6\08\AD@|\10\E0O\F94\FA\D7r\AE\F2P\BFD\A8\F0&y\9D\CF\E5\0E\C5\06y~.\B4\FC\99\9D\C2RCSV\9FC\B3\22\020\89c\CFf\FC\A1j\A1\BA\17\A6\DF\F1\1Fe\CD\F4\C4\8E\93\FB[\94\82ZH#w\BB\D4\193\DC!\92\C1}#\96\8FC\D8=`o\D1\E3\18\DA\C0\E3\14\9E?\D3\00\EB\C7\FEI\BE\10q\C9\E8>\04\83\80`\D9\7F\B1!\DE\19x\C9\D5\E6R\01(\E7\87i@\18\BAd\\\AF\E8PrG\C9\E4\9E\99O\CE\E0wo\F7\C2ep\FD\EEq\17\BD\CA\C5\A3\B8\BB[G\B3xQ\0A\0E\\\8F\DC\AC\A4\DB\B2\DD%\0C\90?7\89\C5y\1E\A3\1B\0D\95n\AE\B9\98\1DA\B6\8E=\9F\EE\FC\09\AE\9D\F8\CC\CC\8C[=I\AB\EF\AA \EA\BE\A8:\01v\B1\8F\0FLb\C6~g\D9:\1D|\F2\A7p\22a\06\BE\CD\03\F4hNC\E2\EE\C7Y\1Eo\838\9B\BFv4g\F1\87n\85Mf\E0\DE=\81\22\E7\D6\CC\AA\80\A5\03\CD \FF\D4\D2\CA\C4l\1Ei=\F0\\r\080>07:\7F\94\CA^\D7/\BC 3\99a\F7\E23\10><H\93\99\D1\AD\F4{X\C5\BA\01u\A3v\F8\F7\16\E7\15t9r\D8\C7\F1\82Y\A1\8D`=d\BE\CDa\B5\83\DA\F6#\1Ca&W4u+\B8\\6@\99\DB\EC|\98\CB6\83\DF\CF\B7\F2\\m+v\96\B3\8E@\DA\CD\F7EW0=\E0\1B\9C\03t\8C['\00\DC\15Ne\FD\9A\11\C4\D9k\08\BA?+~O<\CFy\D6\FB+\A0\07O\AE\BE\0A\A8\D5\F9\AD\13\B4y\B9\90\05\E8\ED\10\8D\BD\CD\12\A7\BB\C8a\DE\BA\C1d\16\0E#\BA9\FF\EB\DEu\E3\ED\04\22\85\E3\83\87\FEO\C2\92\06\D6J2\8C&\C3\1BaF\07\9F\B4p\8D\8D\9C?x}\D1\1F\95\80\D0\C3\D0>G[\AB\9B\D0\86\D1\D7\C2Q\AE\CB\F9\B2\96\E8Sa)h\BD3J\12\E3\E68\FE\82\F80[\E3\1B\E5\93\16\D2b\CA\C7J1J&R\19\F8\E7\E9D\FC\A7]\00p\F3I\0B\16\1F\9C#\AA\80q\17\FD\809\C6#\03;r\19>\D1\9E\99\E0a\D1\F9}\90\8C\A6Q\F93\FEZ*\C8\10\D6\1Eq\18)9\DBl\BE\16\99\B9\00SB\9A\D0\F8\F3*\FCj\CE\07\BF\E4\0D\B4:\06\B6\F1\CBvP\EER\A3J\0Bm&\B7\09\EC&\10[9\A3`\10\CEa\80C\82\C8\8E\19\83\06\CFZ#\A9{w:\C1\90n\83$\1B\19[\12\98k\AD\11\B4\C9\D8\F3\FB\F9SO\EA\1E\0D\A0N\062\0FSs\87\A8\03\14<#\9EF\B1\F6\CE\AAv\B0\ED\D8\F2\92(5\9B\A99\94CX\11\C2\EA~ j\05\11\AF\B77f\E0\0E`L\8B+H\05\D7\22GE\C2\9D\F7\09\9FO\E7\9Am\03k\FAB\C6\DD?X#\17\A7R\06\AE\FDcz\E8c\95\C2f\81\BA\8F\E9\BE\B5\84\D6+\F9]\22O\89\DAW2\10LxM\0CWr9\09\F9C94\D2\81\1FE=\E0\84H]\86\C2\AD\BC?u}\D9\D36\B0Y\FB\AD\09\8E\15\04\CC\E7\0A<\B7\FE3\10gw&\9FC\CEA\C8\B6L\BE\FD\FCm\0A\10\82\08Gk$OsaF\C9\E0\ACp\EC\1D\C3nW\FE4hJX~\14BI\E2\FC\CE\C4\93\8A:\C0=\EFV\19a\F8\8E\82\04\0F\F0\02\D0\\\A3\07;\92\F3\11C\C4n\F5AUCn\A5a7\C8\9C\FB\CC\B42M\FA\05\E2\1A\F0\83\19p1O\D3\E3L\CB\972\C5\F4\1C\C23\EBr\\\A5_\09D\D6^\B3\A8-\9Fq\8B\15\85\1D\1E\1D\97\B9\9F\DE\A0~\E1\F9\ED9@L\A3\FAf\9F\B7\DE\1F\99H\1EL\D3x'9\AE\A2Fg\8E\E02\E7K\0FB4q\B6L\FD\BE:\83\AA\07\9E\E0?\DC\CF\E3\EEP\D9\E8eDa\FF\CD(\B1\91x`$U\E0 \AA\92@\93\C1R\BC}'\96\D1\FF_\E5\E0\BBR\8Fb\85?\B8\D2\E0\1F\09\FC-&d\8C\97\14\F4\B5\EC\9B\D4\B0\C5\CE!z\01\F8\BE\A8\A2B\DDf+gb\E2\10_\81\01\0D\D7\AD\8EU\EA\A2\F7!\DC+\ACz\9E@T\9B\CB\87\00\CC\BF\18\F1L\B9\A7\17x\ECs\D5m\B4\81h\13A\19[\C7\AFk\EC\E1=\19H\16\E6f\BB\D2\8E\\\C1H\84>\BF\D5Ny\EB\FErz\EFW\A0\85\03\CE\C3w\AC\B4\22jC\86<\ADO\ADN\D6\C9\88G\14I\99\D2\80\F2\08\D3{\8C\13(`\F1L\02\16\84\F9[xF\F3z\B7\EB\F4z?\1E$\D0\D9\1B\18\DF\14\04\F9\FF\BE\F8q$\9DN\07\D8\AF\92\A9\035\82\86\B0}BA\81\D9\F973t\CD\9CL\99\CD\DF\8F{\99w\96\AD\B9\8B\E9\DF\D2\F6\AE\F8\\\E5\9F\EA3\D4\92\B8ZJ\EA\D6di\0D\BF\85\A0\87\FF\CB\D1 \CF\C8\F6\F1\CF\BD\0C\F4\DD\EEau%\0B\BF\F27v\8A\D7\AD\02\90\1E&\E9\BCx\82\22\90Ca\EE\1F\EB=h3\BF\06C>'\09\9D?\E3_\F2\D7u\AF\80<\BF.;\1B\8C{y;s\C2\8B\A9\F7w\E2'w\17\DE\15u\E7:F\B9s3\FA\B2\ADW\D2\80Mc'\B3\FC\EFf4\11\0Bo\B89\DD9i\04\9FZ\C34s3B\DD\E7ud\94\A7\97\0A8\F3\04Fu\F2\C23\DD5\E8\A8\99\D7\080\0E\C2\9D\86 \0A@\8D!U\81\E4\B0\BB;\FEz\F5zm\\\FEh@$_T3\B7\FF\ECEAfn\B0\84\D2\DD\FB\AEm\F5\82Bu\0C\A6\C5\1B\A0F\01\E36\C3\D9,\DC\9C\ED,\9Fc\9E\F7(\0E\A3(:\E7~\8E\8D\E0\\cn\91\CA~\EE\B2\B3x}\8B\9E\F1/\17\14\DD\A8'w\19\99\1B\02Nb\86\10D\A2\99\DCP\D8\FF:\C0\AF\F1y\1A~)Z7z\8A\E0\96\83\E5\04^\97\\\FCVs3p\\+7\8A\B5\B5{\D0W\84\99\0B,\AA\B8\D6^f\CA\E1\1C\87\80\15J\D1\ED\FElW\D0@\173\D7\15\D3\06\0A\98\93\ED\B4\99\97\1E\BE,\F7\0E\90\9F1A\FEc\167\93\F8\E6\91\8C\1E\EA\1C\01y\08\B0}Cv\1B\9C_\89\14\9CZ\9D\CB\E7\B7\EB{U\03\E5\12)\0D\F4\0B\0D\89\DD\05\E8\17\95\F4\D0b\AA\FE\B0#\C1\FB\F3\A4\0E)\D6\DE\BD\04\0B\8A\F8\CA\8F\02\DD\FB\EF\F2:VN/\DA,\D3\E7J!\C22\0A\E9\AA2\05\F3\82AJ\D4\85%P\0E\99\9F\C3\B7\9F\E0\969\BFrk\E6v\EA\AF\ED\1F]\BB\BB\99<b\F0\09\0F\E0\18\D6\F8\D2\9C\97\F6p\C7\A5\9C?\D5\C2X\CE\\\80\82\E8<{\8At\CFY\CE\C7\A5\96\18|\87\7F5\92\E5\EDbH\9A?\EB+\90hU\B4\08 \0A7\87\0A\90\8B9\85\E4\1Cj\D9h\921\A7\C9\D4\90\AD!\8F\A2\A8t\\\B3\F9\AC\17\F0\B0\C2_\F6\B5\CB\B4\8DGD\A9\05\A0x\F7\D53\9FH\0A\BF\F0uD\DE\CDXZ\09\C82\FA)\07\E3>\B9\04\04b\94\B4\96\F7[\F4\E3\F5#L\EE\07\EE\DB\04n\1AH\C9\8B\14\AA\FB\D7=\F0\AA&\C6r\FA\0A\C3`\C3\89\F2\B7\E3\0D\96\E76&c\0A\DA\C1\F8>\0C\D8\961B\D3\F9\A5\80^n\FF\82\D9'\02\C1l\C8 \B8\03Czy\AFT\C0\22\A7\AD\DD\91\C2\EA\A8\9F\1B24BW\D7\00&\C31\8AZ\1F\8C\B7UT\00pD\CC<\14\C9\11N\A0\9C{\F6\14s\06$uYX}\22}\A9{5\7Fn\05\E5\0D\85Z\D5\A3|\A9?f\ECM\0A\DF\E6\8C\DDQ\E8\FC\C2\ACZ\AE\AD\16\E0\1E1\E5a$\9D~};\08R\19)q\AD\8C|7\08ZZ\C2\95\0E\EF\8Bv\E6e\AD\0An\99\08h\99\1B,A>\F7\16\CF1\D6\\\9FW\E41x\CDI\F33Q\94\1B\09U\CE\CA\AA\AA\7F6?6}\88v\F1\BE\C2s\EB\87\1A\DC\E6\FC<\12\08@g\9E$\82\D3\9E\A0g%\83\FD:7\18\1A\032bj}Wc\B2\D7$b\84\9Dtl**w$\7F\AE\96\CCl\D3y&~\CC\03\ED\BF\DB+HF^\9D\F2\EDsE\D1\09\80\DAJ\12\AB\07\8E\A0\A6\0C\AEi1\C8\BE\C5\F3}/\F6g\F2\EE*tV\0A \99I\1A\E0\0A\E7\E7\9B\BE\1A\9F\F2\ADh\133\E2\EA\0D\A8_\E1j\D1\A4F]#\B4[\F1C\F5\B2\08B$\81\C5\19\C21\12\F0\F1\A9d\ED:\A0\BC\9DKX\CE\D4^s\9C\8A\A9\AC&\F7\E5\BE\D2/\A4\BA\EA\14\80a\A6\8DB\C0\C4\08\E13260\9C\14DC\\;\F8g\9F\0F<\A3\85\7F|\AD\C7%\A6\9A:B\C0\BC\96\0A\03\C4\BB\DE\CCF\9D\83\18x\FFT\80\97\04\ED\1D_]\8E\E8\EE=\90\15_\88\83\B3X\9FH\03/\C60\F3\C1\95\C4\F1\DD\9E\7F;\CC\AA'\E08\BDO\8E\87\04\D7#\E7pi\E4\B1\AC\E0\184#\15K2\E7gH\C1o\B7\8E\06xO\FC]\D6\0A^\8C\1A\BE\DC)_\A0\9E\01\93'\FB\F6\DC\8C%\8A\F5\22B<\19\B9fS\C1\C0\11\80?\98\B7\A2\05\A0u\B6:\0C\FC%\89\C5\1F\FD\D0\C7i\1F\90)\\\E7\F9@\EE,\04\09BX\D7\F8!\16G\E8U\04V\898\B9s\88q\B3\8D\0F\FDL\1B-\D1\F4\98G\FE~\1F\19\1C\D8\C3s\8C\C06\11%\A5\9B>\BDu\98\92I\F3\C5MT\AFe\00\B8@\BE/}g\E3'F\D7v\17\9F\E5yNe\8F/\837\EDU\C0\BD\0B\CF\99\15\90\95\E8\F6{\C3\B9\9B\B1\224\E7\B9h\9E\0A Ult\DC\DE\00sA\0F\07\F8\A94~?n\D1UN Y\22\89\A2$\93D,\02\F61\A4\903\1D\BE\D3OK\CA\D5\FB\E3x\DCF\CC\02N\ED\82{N\17\B4\CD\83\DE\CF\9A\E5\F7}\B5\C5`gY\1D\11\D5\C0\C76\92\F0\0Ct\9DJ\BC&\812)C\10fH\9F r1\84V0\FAZu\0Eh[?UH\8E\96\0F\F4\17\7F\85K\C6\A4$6cn\0A\B0D\B3|\E2\EDj}\07[\00\CE4I\A5tV\E5\B7\F2\00\D1\87.j\FC\84\09\BC'\03\B6R\8E|U\F3\8Cj]\1CIch\8F\80<\E2I\05\\\A1I\190%\B0\89\A0\C8A\9C\E4\\I\22\DC\E2\B1\F7OvwNI\D4\E4\DD\BE\0F\98\13\C9\C8!\97\19\AEX\09\09\BC\CE\01\15\98\01~\91\1D\E8>\FA\89J\B9\97\A8\CB<CfZ\C0\94?]A\AEp\DDRE]j\A2\AEQ\90\9D\8BQ+\04\DB7\94h\DE\B9;\B9\EA+\AAD\DC\D9\E1E9\BC \08KPPe\ABO\C6\CC\CE\F9\89\E7)\13\D7\C0y$\FA\B4\8Fj69\DD9k\FC\0E\99\96$\12\84_\BA\BCs7\C3\9B\01\A2B8\95G\F3\AAS\B8\02\DD\D0OX@zF\AD\16\82)3\AF\9EE:\88c.\E4\DB\9A\DF>?Ne\D6In\DFs#\E3\03\EC!\C0\E3\16`\7F\A3d\83\A2\F3\E3wL3\C6\1F\DAG\F7\97$\18w\0Fg\A9\DE\B7\1E\DE7\1D\B9T;\F4\8AcS\E7\EC\84\B9\02\E0\87:\AD\0B\98t_\BD\F4\11\92\D1\D3\C7I[\11x\1Fc\8F\13\C6\953\86\06\EB\FDm\E4\9D0}\A5\07\F3l\91\A62\86?\83w\F4CC\C8P\994DS\18\0E\9D\1F\BD[o3\DAL\11\B8\0D0/\CB\93uS\96\85\96y\FA\12\03\DF\8D\E7\B4z\F0\C4\B4\9A7\B4\05\DE\E3\97y\BA\EE\1AF\D2X.4\C8\DA=\A4N\11\DD\891\D3\C3W'\CA\EB\08\D9\96\FB\E68\0DZB\CF\93\E9\93\AA\DB\E9\A39n\0D\E7\E0\8B\14\81\F3\A3h\1Cc\D4\E0\B5Yu\F3\B7\09\D5\03(\B6\EE!hg\BB\C70\CA\BE\8E\9AK)\FE\83\D7\CF\11\C2\CB\F2x+;\92Og\F4T\22\E4\02\C0\89\E2Z%I\BCy\E3\CB\11\8Dv\96-\DC\C5\03_\90q\14\16\C1\FB\FBLk(\D9\17A\C8q\D8\C3\F9\91\D4\D4\0E\AEi\D5\DB8y\F9\8A\AD[r\EAF\BDp\0AuP\CB>|\A3\EDT\8E_\F4\8EMs\04z\A6\A9\BA$AzQ\0C\D4\B9:\92j\97\8E\80lJ\90\D2\9A^<B\13M*\F6K\16\E3\16&g\AF\A3\B7\D1\B5\A1\87\99\C1E\FB\DE\DB\CD\DCyj\B4\C3\B3\DB\C9\9C\1FJ\FBg\D7\C6\A3\1B-\00\BA\1E\E9\95F[\BA\08\DC\8Ci\13\BB\1A3\C1\DEL\FD\E291\9FG\B6\B6\B8H\8F\F8:\09\D4\0B\82*\A6\0D\0A\BF\FD\CDje\17?k\DE\A8\FA/wn\104\AEfZ\F0\D55tJp_\8Ah\AE\C0n\83\B5\96\EE\F3C\F9\FB\FB)\F4\E7\DB\C0\FDZ\F5\EB\83\B8\\\D79\1C\E8\85\D2\DC\83\A5\F2(K\A8\11\DE\FDY\A0\8AQ\C4\F8=\13\94\12s\11qvR\F1a\BD\1D\06\15\\\EA\E7LU5\8F\95\FB\EF\D3\C6\80(\\@=\D1\AA\E6o\C19(X/\81:x~\F0\F5%\9E|\A1\1E\EA\82qq.1w\91\8D\817K\FA\06\C6\90\E0F]\19+h\B0\C2\1D\83+\BB\FE\D7\F1iq\EF\12Qd\ABY\10\B8\BA\99\DD\02\97\C0\88)\F5\AB\9DY\F1\17\E3\C8\A6mz\1C\19\C1\F5\D7CX\E6\AE\9C\CB5E=eA\F3W\E7Q:8\DF\7F3:\E2z^\A1w\AA\9E\FB\EA]1C$3\D1y\B1\A1D]\C6:\FA;\D5\B0\0AE\CC\D48\8E\8A\F7\96\83,+\DF \0EM8.\D93.\16e\0F*\F9\D0Y[\C8G\17\9Bg\18U\AF\CED\CE\03\EC\995\C8Fz\B9\9F\FE\90\16PI\E2\ED\95\FFb\EC>\B0\A4Wn\1D\00w\CDr\DEs\CE9\E7\1C\AE\F7\BF\93\96#\8E\A1\EF\E0\C8\BF\C3\1DM\B5J\AA\16I\10DQs\FF\8D\00\7FC\DE\89\12\D0\91\9D\BE\9E(\02m\D8\8B\B83\FC\AA\8A[\80]\AD^[~\8F\0E\8AI\CB\F1\FA\FD\82\D6\C1\DA\F1nr\F7\DEy*\97\E8j\849\DD\B7|\\L]\97\C2\B2\C1\A4\EF\0D~4\C9\B4\AD\BD\EEj\8A\89A\BB\BB\A0e\AB8]\AB\87y\AC\E7\B3|\A1\9Bq6@\9E\DA\19\AC\D8\AB\F1\18\EB\F8d\9B\BD\0F\D8\BD\D8G\E8\8C\CC\8B_Xo0\00\D6\EF~\A6\E7K\DF<\EEX\C4o\06\B6\E1r\8A \ED\E3\D5}\99h\C8Y1\7F\97{q\B2\98\BB\91\A2\B3\06\A0\DF\F2O\AD+J\FF\F9\8C20\C6\8D\01\E2\18\B2\FC~G\C0\FC|\E2Pc\86w;\99\DB\BB\7FK\9B\01G\DA\F8\1E\F8O\FB\05(t;\F9H%M\85\CC\CE\15\0Bw\04C\96\0B\F7\B7\CB\A85\81+\A2\B0\AE\DE$13:\9D\\\E7\AEM\BDK\12p#\FB\FCu\BA\EF\D1\007m\AFc\BD\12H\99\F5\83L\DF\19\B8VN\C5\D0O\CD\04cd\061\A4)\C5\09;E\A8*D\9D\EF\14\B4\CD[}\BE\DDD\92\9C[^\D2\EAB\C6\89\EC\BC\14\02\93\01\89\DE\9D\0A\AC\196\A5\AC\ED\E4z\18\B9h\A1Q\92M\D4\81\F3\97n\F9PwEw9\C8\C4A\0B\B0\A1\ECT\AC\02\80\B6\0D\B42>\91\\\8E2Q(\F14 \1C\CDR1\96)<\F6\8C\EC\F4\AE{Z\EC\D5\04\C8X\C6y]\81\B3\AE\DA\0F\A8\E2\92\E4UeD\A3\C3):\D8\F7\CD\8Cv\80?wGo\CC1\8D\A0\D6R\DF\82s\DB\E0g5k\D6\0A(\E2\EA8\9F\0B\DB\ED\08\C0|Z\B5\FA\DD\DFjp\9C\CEZ\CB]\F8!\D9\CBQ\C3\1A\84\B1\92c\FD\A1\8B\E6\AC\BD\00\CE\8A\A2\DF\F7\BD5\835\A1\DB\E8\A1X\D4|\D9\C6\B2s\FE\14\13\DC.\E6\8B\A0\87\0C\19w\E9\C0\A9\A8T\06\DA\EA\99\A9\A6s/\89B\80\06\1FH\1A\D9M4\12\C7\04\\\A1o_\C758y\EC\22\80\8AGA\0C\94\86T\E47\B2\C7\EB(1\1AwY\E5\9D\E8\DF\B2\EFy\D5\DA\22\C5\9C?\D2_W\99\9D\0D\D7j\C7\1C\DF\FE\DC\CD\\\C4\AE\F7\04\DA\19\DFUoX\A65%3iH\E0D\DA\1E\BE\D1\C6\83\FCS\A6\84\A7-h\BF\D3\93\AB#\BC~\0E\A5\B9f\22\05gU\AF\C6\17M]\AF\A4\C0\08`?r\FC\C2\84\B0\F8\16\8F\92\02\FE\A0&q\CF\EC\F5O\B89\AD\9A\86\C4\AD\96N\0D\01\CD\D3\90\84f}\D4Ry\92\03\19\C3\E0\B4\88+l*\E49\E7\EAV\AE\FC\917\0C^\A6\EE\18\CF\A7\E1\0A\BB\DD\9C+\9D\FF\BE\E3\A7k\B5k\18\CDm\88wK\D55\83t\11\CAY|\A0\1ACS\05\FC>>\D2|>\F1gyw\8F\C7\EBh\A6\CC\12E\DAy4j\F1\9D\0F\A2<\EE\05U\1E\FD\86<Dx\DB\D9\F1gX\8B\0D8\F2\BC\18s\CAP,w\95\8A\CB\EC\FDr\08)\A9\DF\E9\E9\EF\CBK\E1\A1\8E\15\F9\A4\93^\D1\F9\DD\15S\96\CC\D3\DD}di\B6\88)\0C}B\CD\E3\CF\ADo_\8E^\A3\E2Q~\1B\86\C1p\8BsH\02\B4oW\22\E5\D1\CFY^\CE@\FB'\A5\96\AC`\97\80M\EC*\0D\1C\DF3\EA\18\CF\AC\00{\0C\1Ec\1B\B9\AF+\EB\C8w8\BF\BD\A8\97\CB\0C\B0\A6\E2*\A7\ABl0\E2\98\0Cd\EDm\D2\FC\D6x\AD\F9:}\94\F1U\06\CEM`9\E3\8C\B5\93\DF\9B5g\18u\16\809\7Ft\BA\BE+\95\C4X$\84\02\E0\18\A3\DF\E7\7F\D1O\84\A0kE\91p\CC\D5\9A\EF\EB\BC\11\85\AA?\F1\FCF\8A\9CXV\E2\86\E7\83\0B\EE\C6uw!\D7\AF(\C5\0C\C6\EE\A9G\B3\E4\D7\B1\1DeSYzx\E3\B7\C5\C2\C1\C2v+\EF\C4\18\91[|\A2\0D^\C4\CE\B9\F53\0C$Y]$\096e\A3\B7\92\01]\01\FDY\92B*\8A\C6\DC\FB]\CE\AF\B3\A9\AB\02\D219\E0\1C8\85\DD\7Fd\06\F2\92\E8BJ\1C\FF\EB\FB\ED\84\84\93\D9\8EV\0E\DE\BBr\1A\EE\\V\09o\A8b\F1\FE\B8TU\DD\F1 \80\0B\A6Pm\1B\95\E9q\AC\C1\08rt\99D.\CC/\1D\CC\EFv\1F\9F8\EA\F9Uq\80\8B\87NQ\06\0D,\C28\9C\84B\B2\85\18\14\83\C3|\22\0B\CAv[U\A6-\E6\81\E4\E6\D5T\03\FA[\BA\15 \87}\BE\8E\BF\E1\9D\97\9D\BA\FD\96\88\0C\A2\FFV\803\8A-TR(\0A\C8\0A\D9G\8C\03\FCr\EA\1B\C6\E9\8B\12\EEt\F4e\18\15\B0\B3pR\8B\C6\8E\9C\D9\BB\F0\C2<\09$\F1WU\03\\\BD\8Ea\E1\9B\809\EA\F6o\9F\B8k\8E&\94d\EA\181=\05\C9\F3TC\C5C\F2\17\C2v\14\DB\E2\1D\C8oy\09I\98}\D1;\CB9\BF\B8n\EA\1E\A0z\14fz\BF\90\C7/\EF\07\A4\C9\B0\CE\09\B5\0405\A55a\0A\C8^\C9\E9Y(\8F\D0G\06j\86n\B4>}\AC\0F\9A\D8\B9\19\E2|\B6\1Dcg\DD\E8\22\E1T\CBh\B9G\F3\82\94\8E\95\00X\E7\F9\D9\95\BBC\E00\9F5<@\0Fz\18\E1\A7\E6x\EEf\06g\BA\0D\87\A3\E5$\D2\CE\BE\DF6\D6\83\B7\0D\A3y~\8F\BE\A3M\98o\C5\B6\FA\99\CFq\19\9A\BD\BA\19\C47\02\13\A7\02\7F/RQ9\E9\E2\FC\F4\22**6\89Tp\13NO\BAi)\87\94\A8\01s\A5\FC\EE}s\0DM\87\D1p\C1z\9F\E6#?\A9\D9p9\AE_\E7\1E\B5\FAw\BDQ\A8vWQ)\C6`~\94\FD\E1\A8\AB*i\0D\D1\22\AF\1B\CCuT\9C2A\F3\D3\AB\1E0\E69\0D\F3z\13U\BB\C6\D4 +v\AD\BF3^\BB\08\A3G\88\C8NZ\E2\CA\9A\B5\BE\95\EF\14!\A5\A6&\88\AE\B05\7F\E7ro\05E\CD\8En\C05\0F\16,\F6\DF\FF\B6\B1\10>r<O\9FUg^R\C0O\AA\0Cl.`z\AC]\02Y\C1\F66\B0\C0\22lG\AE\CF\ED\F4\AC6\B92\91\8E\14WY\1E\E7/\B2\13\B9F<\9A\DAc8\DC\B8\E5\CE\F5\DDj\DFnQ\A6A\D6\B8N\\\91G\9B\BB[\94f\BB\84\EDh\90\E8\9C\1F_d]\0C\9D\03\81[\B85{G\1Ev\170\F3OFs\1D\8Ck\BC\07\91\C4)\EF\DA\96|\A8\08\B8\9B\DF\C9,M/\01,\BF\C6s\B6\98\A0\\\84\01y\B2\BE\F7W\D7H\EE\1E\F79K\FDk=r\D5C\E7\87\17\EDYD\BE\0E0\B6IH\15\B5\00heGu\8FC\D6L2\A4\FA\FC3\D1\B0\EA\09~W\1C\EA\88\80\05j|\10!\8B\99\927\99\E9\EAj\A0AX\FE\B9\D9\AE=\FC\B9\93?S54yl\F7\03e\D8`:?$\AAV\D9uLM@e\8D\1B\A5\AFQD\03\EC\9A\86\BC}x\FADpw \BE6\E7\17\F6\DA\8E\9E\DFN\E7\F8\E8\0C \1B\DBwv\8E\C0\AC8\A3\C3\DF\F4B\9Cf\D4 \E8\01\98\B9Ic\D8\BF\F7??X%\92\CD\1F\AF\93\BB\99\DF\89\E5\ACOy\D9\CA\BEg\9Ek\98\9E/\A2\82\E9\9A\ED\0F\\\F1\EF\1C\7F\DBW~\C4\96\E9\C8D\BA\ABp\AF\B2\CCW\0C#\9B\BE3%\F5\C5f|\8B\1F\C1\BB\FC\AC\F3\CF\F7\A3\D8\F3\05\1A\CA\95t\FAHCsf\AE\E6\C2\A0y\98\0E\F7\8A\83\91\080\F22i3y^\C8\8C\E8\B6L{\DC\FDA`\C9K\FF%\BD\82[:\96)\A4\EB\FF\AD\FB\FB\CD6[P\DC\D1EF\CD\82\10\F4\BDI\81\D0\04-\F6\869\9F\D1\E2\08\E8\13oHO\03\A0\9D\93[I\CF\0F%\E6\C4\16\F8xF\8Dh\1F\F3c\BCEy\BB&\ED<f\CF\86f\EE\22\05-\80\A2\EE\CF\080_{\09%\0B\CB\04\CEw\88\CE\AAq\A8\08\1A~\AD\CDG\C5\8F\08,\8D\F4*\1Bk \\\AB\BEw;\17\90\9B?\F7\88\9E\E5\19\CA~\16\1EV\93\DBu\89\FD\AA\0D\F82m\E6\BD\A6\C9/\C0\B2\A4\92J3\B7N\A1\F3\1D\DF\B8\ED\C8\BB\A3\00-\1C\B4\8C\E6\D2m\A4\B8M8\C2\83J0_\FD \22\07mR\E8\B7oH\87\D9\09cE\EB3\B0\0E\80\B7\B4\9BTR5$q\B9\16\C0\1C\F1(c\C66\C2\B1\B3\09\93\F3\EDK\E8\DF\BC\DC5f!\1D\9B\8Et\FD db\EB\C78\CD9\C05\B8x>9\DE\CD\A5-\22\D9\97\EE\B9=f\1ER\19\D8\91\8E\01\91rM)\B4:\CF\D9\9E\ADE\EE\0C\9A\14\F0\AD\9E`4\0B\EC>h\A0]o\AD\ED\DBY9\00\F8\06s\EEf\E1W\BA\FEJ(\C5Iz\C4\EB\ECy\BA%\E7\80Z\CB|\C7D\A2\18#*\18\ED\CF\\\C3\BF\02`\C2\D1\DC9\DB\220{\16\E7\9B\8F\85\8F\9B\BB\8B$\11\C5;\C6j\90\1A\1C\172I\94\804\F6e\BB\868j\09\08\07\D3y\E1\E6;\D3J\E4\D4\ECe\F6\11n\DF4za\E2\9C\8D|$LW&\9F\16\92\80f\05lFs\BF\CC;\DF\A8\BC9K\98e\D2(\F3#*\D81\00;\EA\FC\07\12\B9E\18\CF\BB4\AE\89\A2\1D\15\17\95\A4J\CC&r\E0\01;>\DF\F3A[\FE\19\ABr\0B\A5\9D7\1C\94\C8\E1Zj\03\FD\A9\D8t\BEn\8F\B4I@\02Wj\BE\AC\01\F3\C1\1Bz/\EE)\9B\EFBpa\8B\F6i#\99\86\9Am\7Fx\AD\AC\E7\9F?\AB\DF(9\DB\DD\C06v\D6\9D\8D\1C\CD\83s\9D\91\86bj\B2y\DD\15#\EA\08r\05\DF\06Z\18\9F\19\E7k2N\08\DD\C6\07\9F>\0E\A2!1_\1C\F50\B6\A9\9C\1E\BE\9D\C1bs'\8D\F3\C4\\h\07$\81\F0\94\E6J\CEs\06\DF\9Fy\E52\E1\A3\0B\99\EDA!\B0\A4\8D\DEG\E7\AB\A4\80O<\02\22=\CA\AA\97\08\DC\B0/h\EF\CC\BB\D7g\FA\DCb\EDyr\16\EB\1D\D0\FD\C1p\82\A5\E7MW\DE5~\AE\17\1D0\99\DB\19\BA\8BQ\9F+\22#\93\8E|\BA\E7+\D7\A4|;\DB\B6\E1i\C7\C0\F0\BB\82fl\091=\17\8E\90\A3\E7\B2N\C2\E7\9D\8D\FA\8DPO\C9\C7#\B3\F7\CE\BD\8F\EB\1Ey\FB\19\FDN;h\BFsTo\10\CC5\02\CE\AF\F3\A5\EB<C\D4C\04\1E\C1\F59\DE\C6\A8\8F\BA\8BF\D9\83\C9\C7#\E7\98\02\C0\8A1\E7\D1\00\AD3\F5\C5\98\FF\A9x\BA\19\C5\F3\8A\B6+\DC\C0\B5z\0DF\C2\18B\FC\F9R.E\C4\ED\BD\01\CF\FCpt?>\E3\8B\CA\0B\B0\E7\BBb\C1\B6+wz,\D4\9A\91\93\EA\99?S\9B\EA\FCq\D4\CF3\86\D7B\D5\C8\D0\1D\DF\F3\9B>\E3It\BFPR\1De8\D8\F9\E2\06\AF\08\C3\E58\16|\96`\9A\98s\A5^;\12\E7\16\14gZ\C0[\D9?\EA\12\8FY\F98\EF\D9\A1%d\12\AC\AD\04\C6\F8\16{ON\BBW`\E9\89\CC\13\B7\8A\08t\06\AB9\E7\0Bh\1C\91\980\F0L\07\AD\DC\99{w\22\D0\09f\1C\0E'!AH\B6\F6f.\B7_}\BA\FF\C3\DC8\87\AA\84b\E5v\EB\EB\A4\F4\CD\D9q\0F6\B9\A4\85{\BC\8F@\92-b\D9\B6B1\FF\B9^\84\B1\DAw\B7\E1\0E\CA\C43\0314\FB3\D7\D8`g\89\A7\09\AFs\AAz\EF\B3wf\16/\9E\9D\C3o\D0_\B0#[R\B7U\C9m$\8E|\19c\99\F4rch\D7/`I\8D\9F\CF\B1w\C6I89\0F\D3\85=]E\FD\FF\D1\D8\CE\A5Me>\DA\E5\1C\91v\DA<\D2\CC\92|\14\BA\BBU%gT\0F\1E\F5\FAs\A6\1E\A8\C2c\AB\F7\FEwr\E07\1C g03\F7d<\C7\E7\FF\E3\F6\16^\AD\02\22\F9L\87\01\A4-(\BD\FE\F5\FA;\EB\E6\B5\1C\CB\11\C3\D0\C6\ABs\CE9\DB\FF\FF}\1Egs\8But4(\DD7i;,{\08\82h\0E7\1C]\B2vL\A54c\A5\19\9D\B3\A1\E9\00\06\8Ba\BEZ\06@\00\EA\F7\FB\FEt\10\AC=E\83 \03\FCF8\E5\BF\B9|r\82\AEc\09\C7\FB\D8\EDy\ED/\D6i\A5\81)\1F\A2\11\ADX\BFF\09\C8H\A9\05\A0.2\82\86\97\C0\99\0A\E1\CC\81\D8V\9E\1D[gm~Y\B4j\87\80\C6+\81\C6\91\98\9A\F52\22n\9CY\EC\F6G\AA\E0\11KP\FB\9A\9F'\DD\84\AB\E7_\D6\0E\96\9Ds.\8B~\EA\05\98Y\04\80\B9\01@\02\F8\07\00\E7Y\00<@\1CG\044$] \C6Y\D3SW\AF\ED\C5/\95\16\08\E2\15}nU\9By\B43\D7\ECX\BA\09\8B@\BC\93\DA\97\9C\9Fs8\A9l\90\CC\9A\FC,)\80#\01M\10\08\B1\A6>\9EEAP\EE\B1\B3\80\C3\90\E2\EB\E1\E8G\8D\C9Y!l\C6\F9\96\A0\0B\EBW\C9\07\AC\D9\EE\A7o\DA#\08y^\93\1F\D7\0FCy\AA\FE\07\05_\03\C71\E7n\F4\CF<\8C\9D\F56\06\C6T%\84\A2\96\A4\DBjW\A26+\E4:\DF\8F\13\90\C4{\88\97\F8\DA\E8V\8C\ED\F9\E1z\EA\B1\AD\BE\FEU(\DA]\C3g=\A1@4\EC\B7\08\AB3\00\B3=\8D\F9U\93/\AD\\_V\A0\CE\18q\C2\8C\F1C\B7\B8\83b\B2D<[\99\E96r}\E2\823?\\|\F4q$E\BD\A7\01\BE\13H\1F\DCh\05I(\C6\19\EE@\89\F2{s\CF\E1Q\0C\1C\8F@\C8\F5\EAnq\E3\C0\0Fv\85\B9\C8\86\F9\FE\BA\FB\A5D\EF\13\18n\FEu\E2\14\BF\BA\03z\8B\D8a\13\B2\B0\93>\22\E0\15rv\1E\B3\1F\C4\224Ox\AC\CF\D8\92*+}\C8\F5UKj\9B\09\F3\ED\15\1E\06\9B\B3\C5\DB.\F6:\82=J8O\9F\18\DF\9C\03\CA\00\AA\13\00\12\B6\12\F3\B9\A8w\8A;\07\DC\F4\E9\0FT\C0\0As\B0\9F\C0\84\22\9C7\DFB\D5\1CHo\818\94s\81\A69&\D9\18\1D\CFu\05\14\C4\F3Q\BB\EF\1D\AE\CE\99\D2\99/\B0\15\FD\E4\B1\04\0D\11\09\D7\B5[\09UfS\F4;\FC3\FD\8B\F9f\9EG\13\B7}\\#\C08U\F8\F1a|\D5\FEw\AB\C5\D4\F3\E1\81\E4\EC\0E\E4\EE<\F3\CB\7F\B6\CF\93\8D9l\98\C0\C5q\E6\1D\82KX\1A\CD\D7ClB\E4\8BbA\E0\CD'\F7Aa\F9\D8q|\8B\8C\01x\07\DDr%\D8\A5C\8Ee\E8\DF\D1\11\14\AD\85\EC[\AFd\94\99\0A\00\E7\AB\EBZ\0D\DExm+\8E\B6\EA\83\1B\97\FB\F5W\CD-6c\0BU\E8o\9C\B0\92{\F6\FA\83\B2\F5\89\FE\EF\8F\9D\F7\E4\C0C\80\85\AE\A1\0E\07\9E\91/\E9\0A\B5\94\F6j\DB*b\FA\10\B3\9CP\19Y\12\80\83-\C0P\B0F\F7\E5\88\16=\CDt\CB;\97\D6pI\AA\D8%\D7\EF$\06yU\BE\B8\C0)\F2e\D7\15\93-S\DB,aq8\0F\C7\14\F5\91\E8_\E1{\9D\C0\AF\8Br\A0\D3\98\B3\A8k\91>\09\F0'F\FD\00=\0E\\}\9B\B2\F7\C9\E7\0F\1D\80q\22u\C7\F9'\8B?\86S\DCuD\DE\FBN\A16pt7\B6\B3h\94\95\\,\86\BD0B\C5\FE{\DF(\CE\A6\02t>\BB\1A\1A;;\BEm\9E$\0Cx\95\8B\F3l\ADF#\CF\BB\93\1E4w\16\AE?\EAx\B6Y\95\82\08? \7F\D8\0F\D7\E6S._\94\11\EF\B9\C9q\EC;\22\84z'\A9<B\B1\1B\FC\E1\C8\C4\11HI\E8Ch4\C2\89\CF\A4\F7\12E\CA\A2\D6\D2s\F2\F1\95\C2L\A3\D7\1B\EB\B9$\DC\7F\BF\1F\DF\1F\0A\EA\FBf\FD\82v8?\DF\AD\D0\F9w\DD\91\9C#\97*\BE\1A\00p\B5\8E\DDj\D1\DDP:\9B\EB\EEu\FA,\C00R\F0\A4\87}\C7i\EE\BA\1E\FC\A5m\E7\D9@\CBG\D8\ACq\88x=+#u\93\16\A5\D9%\19\E6\DC\91|N\F1\FD\A3\E5\F3\A8\8D\92\C5s.\D0\FA\C59\95e\F8S\B0%\1F\DA\AB\D6\13Q\02\82;\E7\87l\A9\C6\D7\9Bx\C4\D0N\F8\B9@\04\9A+X\88\F5,\D0\B3T\EF\E4f\FE\AA\C2\CD\C0\07\D0\09t\D7\D5\1Ca\0A\03'\FFJ\1A\C9E\0B\\\BBN\A9\BB\F9\8D\BCt\A3\7F\EE\B03\BBx\A4>c\DE_\06\10u\A7?*\C3\A3\88nI\0C1\EAmGo2\06\15\B4\17\BC,\C1\08\F4u\8D\EFw*N`\90\E5=i\E7(\CD\8C\92]\C1,N\DA\BE\D6\89W\E1%\B2\A9\8Fv\87\12\96\BD}\1D\D4\19\F6;\01\BEe88\F2\8E\94v)_\D2\A7q\87\09\0C\9C\0F\B8\E3\E7%0\F2\CBc\C1\1C\AD\DBY\E6\85c\B8\D8\B9X=\E0X\00\B8\19\1F\E0\C6:\F6N\8A\C3\15W\AE\93\9A5Le\173\9A\A8\ED\C7'\AA\B5S\A0\07\F4\EC\9A\B7\FD\80=\E1a\8D\BF\DF\83\A1\D4[\CA\D2\CD\BF\C3\93bo\A7\90r\0F\9D\1C\DEK\EC\B0=\F2\96\A3\A8']\9F\D3\D3\BB\1C\AD\B7\A8\87w\AFx\EE\BB\CC\09\9DX\AF\B7\9A\05\EF0H\DE\B4\D7\A9\F3y\11\1B\A3\88\B9\C14\B5\A4\F3y\AF~\B7\82\F8\03\BF\02\F4\DDz\87\A90}\E9Y\F3\C6\E5\B4\D6Qy\9F\BF{\DA\F5\9C\D6\13\B5\CFvG\BE\18j\FD5\0E\CBn\EB6P0R^\BFl\F2\8A\\R\F0\E2Z1\BA\9B_\CF\AEA\99\D3\F3\8A\EF,y\BD\B4\BC\B9\96\FE\D1\BEY$8\10\C3@\D0\B5\1B\FE\FF\7F;\F7\90\92\1A\A6\FBHj0\DB?/a\B9\A5Z\B6\F5@\A7\96\CB\CF-\D2\E89\8B\98\19\08\8B\E8\BAhj\C1\CAU.\CA\FC\EA\D9\E5\CBs\0F\D4\D5\AE_-\0B}\F30rXv\FCN\07\97\88\B4\A2\E8e\FD\9F\C6P\F8\19b\F8\F3\118g\F82|\9C\F1+\12r\A9\1E\A1^\AC\8D\C3\10\A7b<}\F7Jx:!}T/p\1A\13V\EA\E7\225V\8E\19\A7\E8\D5e\A1X(\AB,\D6\B6>\0B\87,C\A8\F1\B3\A7\B1\01\FC\FC\A7/\8A\FC\C4i\0D\06\1A\DE\80\C3T\CA_v\01\B6\8C\1Fv\016\FD\DD\01e\B5d0\CA6PF\00\00\00\00IEND\AEB`\82\00", align 1
@src.png_hue = internal global { i8*, i64 } { i8* getelementptr inbounds ([3900 x i8], [3900 x i8]* @"csbs$3", i64 0, i64 0), i64 3899 }
@"csbs$3" = private unnamed_addr constant [3900 x i8] c"\89PNG\0D\0A\1A\0A\00\00\00\0DIHDR\00\00\00 \00\00\01\00\08\06\00\00\00\D2\A1tv\00\00\04\87zTXtRaw profile type exif\00\00x\DA\ADVm\92$)\08\FD\EF)\F6\08\02\22z\1C?#\F6\06{\FC}\98Y\D5U5=\B33\11[Fj\0AO y`wX\FF\FC\BD\C3_\F8Q\CA%$\B5\92k\CE\11\BFTS\E5\86\97\12\AF_=3\C5t\E6\F3\E3[\85\FD\9B<<_\19\AB`\95Ka\ED\C67\C8\F5\EB\C0\C3\07\F5wy(\B7\86\CBm\E8V<\\\8B{\F6\F7\F9\1A$\E4|\C9)\DD\86\EA\BA^r-\F6\1Aj\BF\0D\8D\1BxB\B9\9F\F4\0C\EBZ|\1F\DE\04\86,M\85#a^B\12\CF\\\AE\08\C4\1F\96\86U\CF\9C\81\03\06\EFI8\9C\E5\F1IH\C8\DB\E7=\D6\18_\13\F4m\F2\C3g\F6\7F\96|n\B7\\>r\99\1F\86\F2\F7\0A\D2\0F\B9<\DD\F0\ABc\B9\DF\02\C4o\8A\A21\FD\F09\F7\B3\F7,{\AF\EB\EBZ\CA\C8h\BE+\EAYG\C7\0C\80\1D)\97s,c\18\1E\C5\BB\9DQ1Jlq\80\F2\19G\EC\18\83*12\BE\03%\9A\D4h\D3:\EB\A0\81\10\13/6\AC\CC\83\E5\C8\8A\18W\1E\E2<%\1F\B4\D9\A4\CA\94\02&\07\AF \E2\E4=c\A1\E3\B7\1E\7F\83\0A<O\02\94\09\C6\E8\D0\FF\93\11~\A5\FC\93\11\F6\1E\9E\22\8A\E5\CA\13\1F\82\D9\CB\03a8s>\03\05\0Ah\DF\BC\E9I\F0c<\9B6\BE\10+\E0LO\9A\0B>\B0\C5~\99\E8J_\B5%\87g\01\CE\19\BE8\A6`\F36\80\14\C1\B7\22\18\120\103\89R\A6h\CCF\84<\16\10\D4\109K\E2\0E\06H\95'\82dtF\E6`\\\D8}\E3\8C\D1\C1\B2rf\17\E3n\02\11*Y\0C\DCTi +%E\FDX*\A8\A1\A6\A2IU\B3\9A\96\A0U[\96\9C\B2\E6\9C-\FB%\D7L,\99Z6\B3b\D5Z\91\92\8A\96\\\AC\94RK\AB\\\05w\A0\D6\\\AD\96Zkk\1C\1A\1C5\D8j\C07H:w\E9\A9k\CF\DDz\E9\B5\B7\81\F2\19i\E8\C8\C3F\19u\B4\C9S&\AE\89\99\A7\CD2\EBl\8B\C2\C2M\B1\D2\D2\95\97\AD\B2\EAj\1B\B5\B6e\A7\AD;o\DBe\D7\DD\9E\AC\D1\DD\B6\9F\E3\0FX\A3\9B5>L9\CE\9E\ACA\1A\CC\1E&\C8\AF\13u\CE\C0\18'\02\E3\E6\0C\A0\A0\D99\8B\85Rbg\CE9\8B\95\D1\14\CA\08R\9D\9B0\C9\19\03\85i\11\EB\A6'w_\CC\FD\16oA\CBo\F1\C6\FF\C5\\p\EA\FE\0F\E6\02\A8\FB\91\B7oX\9B\FEwn\1C\C6\AE.\F4\9CFA\F7-\DDk\D4\B0f\B2\89{\A5u3\EC\BF\B6\8B\F7\EA\112\DA\8A\BF\19\FDM\F9\C0\D6\9D\D3\CEMV\C7\E5\EF\B8\0F#&o\DB\91v\83=\A9\C7\E4\FE\16\1A\AE}\B5\99#\EC&|\DE\11\94\DD\D9\BA\22m\80\D5tfE\90\1D|\8C\B9g.\A3_\10\BA\82\0A3m\1C\E4r\CFy\0C\B7\A7iK.x`\B1\F6\B5\93\D5\AE\CD\BA\C8\D2\BEz\D1\F5\A9\0F\B5'\E8\E3F\BB\C0\EF\DA\D6\E4\CC\8DV\DE}^3\AA\E0\D8\B0\DBF\9F\AB\DA;,\\\CB\89\A3\A0N%\FAYj\92'\81\FD\A9\1B\D5 \00\CF6\8A\00\86\D8PL\13I\98\C8qkC\\S-\9C\03-_\9A\8DH[\ADc\8E\91\A4;\1EU=\8F\D5\AD\B29\AE\CCzAk\BF\\\A1XV\CB\99\C2\B7G\FC@7\18\9E\0BYW\04\8D\A6{\DD\DAd\9B:\D6D\C0\B5\F7\9D{\F0\A4\ACik\A3W\B0\7Fn\93\03=\F6L\FB\DD\E2\DB\D6\BAmE\09\D4p\B0\CB~\81E\88\16\DDs\B1WOZ\0D\F5\DF\A0\F6\D9BG)\A2\16P\A3\EA\F7\F3#\1A7\D4Q\DB\E65x\CD\B3\B4c/\EF\D1@-H\98K\95\C0%\EA\CD\D0\22\D0VO\B1W\DD\1B\00\CFD\95\B6\0C\C6\91\12\10\E13\FA\0E\FF\00\AA\D7v\85_\FF~7\11\DA\B1!\03]\D3\F4F\1E\04p\07\DD\93{\AAf\A3\A3\D2j\E62'\1A\00\9D\8D\CAL`\19u\8D;0l\1E\EE\BD\A0\DF\94\BA\D3?9\BA\8A\F9:P\EC(\BA7y/\966.\22\88\01\07\DD\CD\AD\DA\B4(\A1\A6\D2\0F\B2\D1\ED\A9&/\F3\FE\93\03\D0\EE\89\7Fm\C3\BFTk\E6\92r\BE\115\00\00\01\84iCCPICC profile\00\00x\9C}\91=H\C3@\1C\C5_Sk\8BT\1C\EC \E2\90\A1:\88\05Q\11G\ADB\11*\84Z\A1U\07\93K\BF\A0IC\92\E2\E2(\B8\16\1C\FCX\AC:\B88\EB\EA\E0*\08\82\1F \8ENN\8A.R\E2\FF\92B\8BX\0F\8E\FB\F1\EE\DE\E3\EE\1D \D4\CBL\B3\BA\C6\01M\B7\CDT\22.f\B2\ABb\F0\15\01t#\84Q@f\961'IIt\1C_\F7\F0\F1\F5.\C6\B3:\9F\FBs\F4\AA9\8B\01>\91x\96\19\A6M\BCA<\BDi\1B\9C\F7\89#\AC(\AB\C4\E7\C4c&]\90\F8\91\EB\8A\C7o\9C\0B.\0B<3b\A6S\F3\C4\11b\B1\D0\C6J\1B\B3\A2\A9\11O\11GUM\A7|!\E3\B1\CAy\8B\B3V\AE\B2\E6=\F9\0B\C39}e\99\EB4\87\90\C0\22\96 A\84\82*J(\C3F\8CV\9D\14\0B)\DA\8Fw\F0\0F\BA~\89\\\0A\B9J`\E4X@\05\1Ad\D7\0F\FE\07\BF\BB\B5\F2\93\13^R8\0E\04^\1C\E7c\18\08\EE\02\8D\9A\E3|\1F;N\E3\04\F0?\03Wz\CB_\A9\033\9F\A4\D7ZZ\F4\08\E8\DB\06.\AE[\9A\B2\07\\\EE\00\03O\86l\CA\AE\E4\A7)\E4\F3\C0\FB\19}S\16\E8\BF\05z\D6\BC\DE\9A\FB8}\00\D2\D4U\F2\0688\04F\0A\94\BD\DE\E1\DD\A1\F6\DE\FE=\D3\EC\EF\07\07\B6r|db\D0\8F\00\00\00\09pHYs\00\00\0B\13\00\00\0B\13\01\00\9A\9C\18\00\00\00\07tIME\07\E6\05\06\08+\00\99!.B\00\00\08\B7IDATx\DA\E5]]s\DB8\10\03;\B2\F3\FF\7Fn\ED\E9\F0\1E\EC$\A6D.\80%\1D\F5\EE\F2\D2N,K\CB\FD\00\97 \C4\94\0AT\9C\F8\B3\E1\0A\FC}\06T\00e\E1S\82\FBm\B8<\FFW\92\0FW\AE\AF\BBg4\06|\BCat\91Q\BB\CF\C69\F0ya`\FD\0A\EF<\0C\18=\E4\B5>\CA\E2\DCx\DE\8B\1BP\16\E6\82U\86u\D2\A0\FD\F5u\E7\C5\C6\03\10\B3x\EF%\C5\C8:\A8\B0a\08z7P\1F\AEz\E4\E5y\DF8\00\B1\9EK\A2\DE{\83\A8\11\0EDn\1By\A3ss%<\C7\1C\A8\04\19\0D\90\A1\1E\AA\A32t\1F\92xp;\17\F4\\\E7d\B8\83\9AC(.B\E6\F6\FE\15&\9C\C8s\8F$t\A0\18B\82\8E~\CA\F1\BA\EF\1C\88\B0\BE\06F\C0p}\E7\9A\B6\0A\22w3\03\D4\F0\EC\EE\C9\0D\80`\0C\02\CC'\F90n\C9X5\F4>\AF\C1\EFB(\EE$\874\C2\E8\F7\11\BC7\06|$f\BE\08#jP\01\9Ddl\AB\00\81'\0A\E9\90\94P\84]\B12\1DG\E1Q=\87\A8\0A\18\C8\047\92?\AF\BD\B6\\E1\B7J\82\07\7F\FE\AE]\98T\D3\88\22 e\0D\F2H\F6\80c\\\F5>;\E2\00s\A7\E0V\0A\\`H\E8\FE\14\B1Z\86\EB\82\0C\FEG\A8W\B5\0Ah\91\90$\CB\10X\94~\A0dzB5\DE\93\A1j\910\82\E0b&\A4hD\DB\13F\9EP\0C\99\A2hV\DD\D8\AC\88\F7\94a!+\AA\A6\1F\B8.L6V\A66M\F7\EE\B0\1C\80\E8\FFHT\96?u\DD\D83S\C2v\FB\89QF\06\DC'\C3\CF\D2\87U\E2\F6\DBl\F3W{\C5\0A\C1;\AArI\0Ed\F1\ABD\06LLpk<\E0\B4\F8J\F33\FA\AC1\A0pZO\9A\9D\1D\8F\849P&\D6\A4*s\B3\DD\F4u\A4\84t\AEG\BA@\C4n\12Q\05U\E8\EAB Rz\0A\A7\F1\05!\D4\B6{\10Oey\C7V\F2,'\BE<\A0dzf\B6c\FD\EDW\12:\\\04\08F(\F9\84\FD\\\A02p\10(A\C6g\A2\97\03\D5\18\B1R\96\8C.>@1\E3\18\\\BAX]\E57e\C8\E8b\B6P\8E\D6\AD\85y\C0)3\B6[\E3\DC\A3\A9\02\10^\92\D1\82\8C\F1\EDy\AB\81bw\AB\98m')\E49\ED\88\14\9C\8F\BC\C0\0Ci\90P)\1B\B2\13\1B\A2^\CF\D0\83\07\8A\98\07\8C6*\A2'\86I\C8\B2\9C\DD\B8\12`\FA\9A\0B\EEI\D8U\0CQ\E0z\BB\09l\1B\9B\A8\0Aan\A3\1C;$a5p\01\E4{\CA6C\D3\90\A8\E5\A360\10\066\C4\01v\13\C5S\100\E2\D0\11e&\A4\22V\10\ED\8A\9D\CDS%\DB\15\C0\0A\91pv.\90VF\F7\A0q(\C9\B8Z\06\DC\C4\CC\86\91\AC0r\A21@\D9\F6U\1E\EC|\7F\8A\A0X\11\86\A6)-\89\11\CC\86*\E5\81\95\9A\B6\1F\E1\09\C3E\ED\AFz\AE\A8\B5\A0n'\ABj\A7\D9\EA9\11\EA\02\03\E6\E0\C84`\05\FA\0FC\A0\DE\CC]\1F\D99\B0Z\D5L\0D\B8\98nu\FB\A2\E8\FA\8A\0D\87\CD\E3\EC\B4\A2rd\D8\1B\A0\84\C0\D1\EDyy1\A8\82\D8m\B1B\01B\8B\83\D58\A0t\08\FD\8Erg\00\1B\B9\D2\BAz,\C3\B3\0A\B2+~\96x\8C\D4\FB\0A\81C\B6\AC\E4J\9A\1C\88\08[`N\E7?N\DE'\0E0\05\8B\C2\FA\E5\CA\F3\E9\81\ACLR\E1\C1\E2\DC\09\CA0#,\06\F1\D4\10\07\14\0E\C4\D5\E9h\0A\C7\97\C9\88Y\CB6h  \E4\91\AA\18\84@!\E7\D4I'VG\EFfC$\EA]\F1\00\86I\FC\82\84\D1H#\EF\00\BA\08\E9\98\1F/H\E8\EC\180\CC`P]_\AB\E0C\9CB\AB\90\A00 \BDF\93\91\92\F1Q9*sI}\F5@M\96\1D\A0k9KT\86\0A\FC\BA\DE\88\BC4\9C\0B\00m\17P\AD\16\AEz\EC\B4\E5\D1\EC\A5J\ED\15\E6\B8\F6\FA\01\B6\D7\CDfH\D5\98aC\A2\AA\00\0Aa\8A!L\EF\D3]qfOu\B8.\C8\C0\EE\8Cv\06{$\CC\0A00q->\D7\05\97\A5\8C\8F\BE\91_\F6M\E9i\1C\D1e\81k\F3\E8\18tDu\811\FCZ\A3\0C3B\8D\AA$\A1\A3j]\AF0\\\B8<\CF\19^P\EB\C9L\E9\C9l\F5\9C\01YQ\A1e\80\AA\CDL\AA`\FF\85!p\B5\\\C4\9B\AD\01\AA\FA(\03\0D\83\A6\A8\EF\015\A1\D4\DF\87\F2\FE\1BI&GN\0B\A1M\\^\86H\18\DB\BCox3\FB\D0\15\B3vs\02\C3\1D\FE\1B\D4\D9y\A9[\05\BF'F\A3\D2GA\18\DA\10\00\\\9DP\13U\12\BE\F0x3JG\95P\19\B2\DB\BE\01\8C\B5\05\F8\B1\0F\8A@\1D\BD\10\00\BARMY\BB\90E\F4\A3\0A\22^\82\D1\C0\EC\C0\0Cr\A4\C8\B7\07\D4w\C5\94|\00d\FA\F9Q\86\8C\FC\D2h_\BE\8C\EC\96\E1=\E0&2\89\E5\BC\B7H\E7\02\F7\1DS\F5\04\96\06\8Ao\22\F3\EA\EA\F5\C4=\CF8\09\191\A2\C8\EFI\1E|\CF\05\C5\F4\80\A2ne\DE\AA\AF\B3!\A0\C9\AB\15v\D6\B8G?\093b\C1* `\C7\E0o\1C\88\DC\0C\D1\DD\EAO\B7\0C\1D\AER\85d\81D\7F\18P\8C\07+H\A8\C21FH\08=\86\B2\E8x`\E0\C3\03\CAAX\AA\B8\\\CD\8F!\12\AA\E2\07\F7L\92a\12\FE\86\BE?\ADn\92\1B\950nH\A0\8D@\CA\9F $^\08\9C\BD)\D1\13|i\96\15\9B#h`\0F\06\CC\88\A7&Ot\D4\16\A7+\D4]4\07f\F1=ihny\BEP\EF\B6\96\A4J\E0@\C16`J\7FH\D5W~\E1d\AA\F6\E4\03\18\1E\06\FC\AC\86\B2\8D\B0\EC\81UF\1E^\F5\BA\8A_\98\95\FC\8F\AE\DBV\A9\8A\95n\CDJ\C2\C4a\8B\D6\9CT\DF]\05\AA\F6nczJW\CE\9A\0A\81z\BA\AB\92\9C\AA\1CV*\C3Y\E1\B6\B2\86\D9\AEdT\99\E6\D7\09\85\85\84\CE+]\8AG\AA\92\84l9\00\81\0A\88\8C\DB\AE\F0DZN|\95\F5\EDv!T\B1[\0D.a\B2}Ldpf-\B2\FFl\BB\C4\14\0E\A5\FF\9C\90\F5\BE\D7x\C0}\A3\92\E1<\E3*\F1\E9\01G\13\AFd;\02.3,C\04\C4&\04\BA\10\D0\0Eh=\94\A1:\02\E7\90\03us\85\E6@d\8C&[\8D\C3H\AB\80m\05\C0D\CE\C3\11\10\1F\E0/\BA:\C9\A8\9E8\\FU\90\DD\B7,\C8\E9n7GE\04h[A\CAf\DB\A1\0A\D4\ED\00\C7\ED\8A\F7\B6\AB\01\C5\0E<+\CC\EE0\09\B3\ABUE\85\BA\BFv\BB\98\C96\BAa6\8FB(^q^\1D\DB\\\A3U\A0\94[\06%\E5\C5iV\F2\AE\1E\FA*\85@\A9ge\B4\BDk\B7\EBd\C6\FF7(\9Aw\8DR\F9\FE\94\07\B2\06v[\B2\95\AF08\06\A7<\B0\D2\C0\D3\93\B0\FCy\13S*\AB\FC*\EEg\9F?p;i\ECo3\C03\F0\04\03\D2\1Ep\A5\95\DA\84-\1A\B0\1A\9A\BE\B1\90\180\D3\FFh\8A\D7\17\03f5\9B\B9\DE\A8c\80\F3\B2B\A6_:\BC\EAu\13\D7\B4\F5-\B8\B0\01w\D2\BD9m\A8\7F\A0\E8\86P\C94\DB\F5\F1\EF>=\A0\FE\19/U\F1\A4\BF\1A\F6\CC\01W\BB\ADR\94\BCJ^B\C0\16]3\7FKd\FC\DD\97\10D,\80\ABpVBq\C0\01\F5pW\C6\8B)LR}\0D\C1M \D6\1C\DA\02p\DE\11\E8\CC\055Q\86\EA\F6V\F7\E5\F7\1Ba{\9CS'Y\A8\8E\D7?\AB@\A1\16Yv+\D2\EB\A37\06\D3\B1z@\E0(\01YU\94^\19\AAb@U,\A8\1D\A80\C8\01\D5\80hzf\15\D2\85bU\C58\F3\B7eJ\94\03\EA\9B\D5\8E\E6?\E6Z\06I8s\FA\86\C3\AD\95}?\00#\FB\11\18\C1\12\B7\EE\FB\81h4\AER\8DMR\87\13\99TA\A1S\86\BA\F0pri\E6Hj\FB\86/Z\1Bf\8E\D2\A5\06L\BE8 \1D8^^'#\08\F1SO\\\B2V\C7\F7\85\AE\86\88\1B\DD$\CC\FE\D9\E7L\A8\0E-\19\DE\E0\05\ED^B\0E\CCT\C4\F2\1C\C0\A2P4G\C1\B0\B9\00\A9\FAV\C1k\A1\07\A6I\AA3t\95\C0?vV\C5\1D\7Fc\BA\AC\00\00\00\00IEND\AEB`\82\00", align 1
@src.png_test = internal global { i8*, i64 } { i8* getelementptr inbounds ([247 x i8], [247 x i8]* @"csbs$4", i64 0, i64 0), i64 246 }
@"csbs$4" = private unnamed_addr constant [247 x i8] c"\89PNG\0D\0A\1A\0A\00\00\00\0DIHDR\00\00\00 \00\00\00 \08\06\00\00\00szz\F4\00\00\00\01sRGB\00\AE\CE\1C\E9\00\00\00\B0IDATX\85\C5\D61\0E\C4 \0C\05\D1\F1\1E\CB\F7\97\AF\E5\EDP\10\0E\A1\E1\9B2\92\F3Fn\C0\22\22)\8E\BB[\F5\FDy2\B3\9C\050\B3\CF\F9\88\C8_'\0E\B0\04(\F1%@\8DO\01\1D\F8\08\E8\C2\01>\07o\E2G\017qw\DF\FF\E06\0E\9B\0D(\F0\D7\00\15^\06(\F1%@\8DO\01\1D\F8\08\E8\C2\01\AC\13\87\E26T\E2\99Y\BF\07T8\14\1BP\E2K\80\1A\9F\02:\F0\11\D0\85\C3\E1{\E0\16~\14p\15\FFZ\FDm\1C6\1BP\E0\AF\01*\BC\0CP\E2K\80\1A\9F\02:\F0\11\D0\85\03X'\0E\F0\07q\B0\02\D9\92\D71L\00\00\00\00IEND\AEB`\82\00", align 1
@src.sb = internal global %src.Sidebar zeroinitializer
@src.panel_info = internal global %src.Panel* null
@src.mode_panel = internal global %src.Mode_Panel* null
@src.mode_panel_split = internal global %src.Split_Pane* null
@src.window_main = internal global %src.Window* null
@src.caret_rect = internal global %src.Rect zeroinitializer
@src.caret_lerp_speed_y = internal global float 1.000000e+00
@src.caret_lerp_speed_x = internal global float 1.000000e+00
@src.last_was_task_copy = internal global i8 0
@src.panel_goto = internal global %src.Panel_Floaty* null
@src.goto_saved_task_head = internal global i64 0
@src.goto_saved_task_tail = internal global i64 0
@src.goto_transition_animating = internal global i8 0
@src.goto_transition_unit = internal global float 0.000000e+00
@src.goto_transition_hide = internal global i8 0
@src.panel_search = internal global %src.Panel* null
@src.search_index = internal global i64 -1
@src.search_saved_task_head = internal global i64 0
@src.search_saved_task_tail = internal global i64 0
@src.search_saved_box_head = internal global i64 0
@src.search_saved_box_tail = internal global i64 0
@src.search_draw_index = internal global i64 0
@src.copy_text_data = internal global %strings.Builder zeroinitializer
@src.copy_task_data = internal global { %src.Copy_Task*, i64, i64, %runtime.Allocator } zeroinitializer
@src.search_results_mixed = internal global { %src.Search_Result_Mixed*, i64, i64, %runtime.Allocator } zeroinitializer
@src.font_options_header = internal global %src.Font_Options zeroinitializer
@src.font_options_bold = internal global %src.Font_Options zeroinitializer
@src.task_head = internal global i64 0
@src.task_tail = internal global i64 0
@src.old_task_head = internal global i64 0
@src.old_task_tail = internal global i64 0
@src.tasks_visible = internal global { %src.Task**, i64, i64, %runtime.Allocator } zeroinitializer
@src.drag_list = internal global { %src.Task**, i64, i64, %runtime.Allocator } zeroinitializer
@src.drag_panel = internal global %src.Panel_Floaty* null
@src.drag_label = internal global %src.Label* null
@src.dragging = internal global i8 0
@src.drag_index_at = internal global i64 0
@src.dirty = internal global i64 0
@src.dirty_saved = internal global i64 0
@src.bookmark_index = internal global i64 -1
@src.bookmarks = internal global { i64*, i64, i64, %runtime.Allocator } zeroinitializer
@src.theme_editor = internal global %src.Theme_Editor zeroinitializer
@src.bytes_file_signature = internal global [8 x i8] c"TODOOLFF"
@os.stdout = internal global i32 1
@os.stderr = internal global i32 2
@io.DIGITS_LOWER-2092 = internal global %..string { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @"csbs$5", i64 0, i64 0), i64 17 }
@"csbs$5" = private unnamed_addr constant [18 x i8] c"0123456789abcdefx\00", align 1
@time.days_before = internal global [13 x i32] [i32 0, i32 31, i32 59, i32 90, i32 120, i32 151, i32 181, i32 212, i32 243, i32 273, i32 304, i32 334, i32 365]
@log.Level_Headers = internal global [50 x %..string] [%..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$6", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$6", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$6", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$6", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$6", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$6", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$6", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$6", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$6", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$6", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$7", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$7", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$7", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$7", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$7", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$7", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$7", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$7", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$7", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$7", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$8", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$8", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$8", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$8", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$8", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$8", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$8", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$8", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$8", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$8", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$9", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$9", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$9", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$9", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$9", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$9", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$9", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$9", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$9", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$9", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$a", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$a", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$a", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$a", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$a", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$a", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$a", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$a", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$a", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$a", i64 0, i64 0), i64 12 }]
@"csbs$6" = private unnamed_addr constant [13 x i8] c"[DEBUG] --- \00", align 1
@"csbs$7" = private unnamed_addr constant [13 x i8] c"[INFO ] --- \00", align 1
@"csbs$8" = private unnamed_addr constant [13 x i8] c"[WARN ] --- \00", align 1
@"csbs$9" = private unnamed_addr constant [13 x i8] c"[ERROR] --- \00", align 1
@"csbs$a" = private unnamed_addr constant [13 x i8] c"[FATAL] --- \00", align 1
@utf8.accept_ranges = internal global [5 x %utf8.Accept_Range] [%utf8.Accept_Range { i8 -128, i8 -65 }, %utf8.Accept_Range { i8 -96, i8 -65 }, %utf8.Accept_Range { i8 -128, i8 -97 }, %utf8.Accept_Range { i8 -112, i8 -65 }, %utf8.Accept_Range { i8 -128, i8 -113 }]
@utf8.accept_sizes = internal global [256 x i8] c"\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F1\F1\F1\F1\F1\F1\F1\F1\F1\F1\F1\F1\F1\F1\F1\F1\F1\F1\F1\F1\F1\F1\F1\F1\F1\F1\F1\F1\F1\F1\F1\F1\F1\F1\F1\F1\F1\F1\F1\F1\F1\F1\F1\F1\F1\F1\F1\F1\F1\F1\F1\F1\F1\F1\F1\F1\F1\F1\F1\F1\F1\F1\F1\F1\F1\F1\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\13\03\03\03\03\03\03\03\03\03\03\03\03#\03\034\04\04\04D\F1\F1\F1\F1\F1\F1\F1\F1\F1\F1\F1"
@strconv.digits = internal global %..string { i8* getelementptr inbounds ([37 x i8], [37 x i8]* @"csbs$b", i64 0, i64 0), i64 36 }
@"csbs$b" = private unnamed_addr constant [37 x i8] c"0123456789abcdefghijklmnopqrstuvwxyz\00", align 1
@strconv._f16_info = internal global %strconv.Float_Info { i64 10, i64 5, i64 -15 }
@strconv._f32_info = internal global %strconv.Float_Info { i64 23, i64 8, i64 -127 }
@strconv._f64_info = internal global %strconv.Float_Info { i64 52, i64 11, i64 -1023 }
@fmt.__DIGITS_LOWER = internal global %..string { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @"csbs$5", i64 0, i64 0), i64 17 }
@fmt.__DIGITS_UPPER = internal global %..string { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @"csbs$c", i64 0, i64 0), i64 17 }
@"csbs$c" = private unnamed_addr constant [18 x i8] c"0123456789ABCDEFX\00", align 1
@unicode.alpha_ranges = internal global [304 x i32] [i32 216, i32 246, i32 248, i32 501, i32 592, i32 680, i32 910, i32 929, i32 931, i32 974, i32 976, i32 982, i32 994, i32 1011, i32 1168, i32 1220, i32 1377, i32 1415, i32 1488, i32 1514, i32 1520, i32 1522, i32 1569, i32 1594, i32 1600, i32 1610, i32 1649, i32 1719, i32 1722, i32 1726, i32 1728, i32 1742, i32 1744, i32 1747, i32 2309, i32 2361, i32 2392, i32 2401, i32 2437, i32 2444, i32 2447, i32 2448, i32 2451, i32 2472, i32 2474, i32 2480, i32 2486, i32 2489, i32 2524, i32 2525, i32 2527, i32 2529, i32 2544, i32 2545, i32 2565, i32 2570, i32 2575, i32 2576, i32 2579, i32 2600, i32 2602, i32 2608, i32 2610, i32 2611, i32 2613, i32 2614, i32 2616, i32 2617, i32 2649, i32 2652, i32 2693, i32 2699, i32 2703, i32 2705, i32 2707, i32 2728, i32 2730, i32 2736, i32 2738, i32 2739, i32 2741, i32 2745, i32 2821, i32 2828, i32 2831, i32 2832, i32 2835, i32 2856, i32 2858, i32 2864, i32 2866, i32 2867, i32 2870, i32 2873, i32 2908, i32 2909, i32 2911, i32 2913, i32 2949, i32 2954, i32 2958, i32 2960, i32 2962, i32 2965, i32 2969, i32 2970, i32 2974, i32 2975, i32 2979, i32 2980, i32 2984, i32 2986, i32 2990, i32 2997, i32 2999, i32 3001, i32 3077, i32 3084, i32 3086, i32 3088, i32 3090, i32 3112, i32 3114, i32 3123, i32 3125, i32 3129, i32 3168, i32 3169, i32 3205, i32 3212, i32 3214, i32 3216, i32 3218, i32 3240, i32 3242, i32 3251, i32 3253, i32 3257, i32 3296, i32 3297, i32 3333, i32 3340, i32 3342, i32 3344, i32 3346, i32 3368, i32 3370, i32 3385, i32 3424, i32 3425, i32 3585, i32 3632, i32 3634, i32 3635, i32 3648, i32 3654, i32 3674, i32 3675, i32 3713, i32 3714, i32 3719, i32 3720, i32 3732, i32 3735, i32 3737, i32 3743, i32 3745, i32 3747, i32 3754, i32 3755, i32 3757, i32 3758, i32 3762, i32 3763, i32 3776, i32 3780, i32 3804, i32 3805, i32 3864, i32 3865, i32 3904, i32 3911, i32 3913, i32 3945, i32 4304, i32 4342, i32 4352, i32 4441, i32 4447, i32 4514, i32 4520, i32 4601, i32 7680, i32 7835, i32 8016, i32 8023, i32 8064, i32 8116, i32 8118, i32 8124, i32 8130, i32 8132, i32 8134, i32 8140, i32 8144, i32 8147, i32 8150, i32 8155, i32 8160, i32 8172, i32 8178, i32 8180, i32 8182, i32 8188, i32 8458, i32 8467, i32 8469, i32 8477, i32 8480, i32 8482, i32 8490, i32 8497, i32 8499, i32 8504, i32 12353, i32 12436, i32 12449, i32 12538, i32 12549, i32 12588, i32 12593, i32 12686, i32 12690, i32 12703, i32 12896, i32 12923, i32 12938, i32 12976, i32 13008, i32 13054, i32 13056, i32 13143, i32 13169, i32 13174, i32 13179, i32 13204, i32 13209, i32 13214, i32 13225, i32 13229, i32 13232, i32 13249, i32 13251, i32 13253, i32 13255, i32 13271, i32 13273, i32 13277, i32 19968, i32 40959, i32 44032, i32 55203, i32 63744, i32 64262, i32 64275, i32 64279, i32 64287, i32 64296, i32 64298, i32 64310, i32 64312, i32 64316, i32 64320, i32 64321, i32 64323, i32 64324, i32 64326, i32 64433, i32 64467, i32 64829, i32 64848, i32 64911, i32 64914, i32 64967, i32 65008, i32 65017, i32 65136, i32 65138, i32 65142, i32 65276, i32 65382, i32 65391, i32 65393, i32 65437, i32 65440, i32 65470, i32 65474, i32 65479, i32 65482, i32 65487, i32 65490, i32 65495, i32 65498, i32 65500]
@unicode.alpha_singlets = internal global [32 x i32] [i32 170, i32 181, i32 186, i32 986, i32 988, i32 990, i32 992, i32 1749, i32 2482, i32 2654, i32 2701, i32 2784, i32 2972, i32 3294, i32 3663, i32 3716, i32 3722, i32 3725, i32 3749, i32 3751, i32 3760, i32 3773, i32 8126, i32 8319, i32 8360, i32 8450, i32 8455, i32 8484, i32 8486, i32 8488, i32 64318, i32 65140]
@unicode.to_upper_ranges = internal global [105 x i32] [i32 97, i32 122, i32 468, i32 224, i32 246, i32 468, i32 248, i32 254, i32 468, i32 598, i32 599, i32 295, i32 600, i32 601, i32 298, i32 650, i32 651, i32 283, i32 941, i32 943, i32 463, i32 945, i32 961, i32 468, i32 963, i32 971, i32 468, i32 973, i32 974, i32 437, i32 1072, i32 1103, i32 468, i32 1105, i32 1116, i32 420, i32 1118, i32 1119, i32 420, i32 1377, i32 1414, i32 452, i32 7936, i32 7943, i32 508, i32 7952, i32 7957, i32 508, i32 7968, i32 7975, i32 508, i32 7984, i32 7991, i32 508, i32 8000, i32 8005, i32 508, i32 8032, i32 8039, i32 508, i32 8048, i32 8049, i32 574, i32 8050, i32 8053, i32 586, i32 8054, i32 8055, i32 600, i32 8056, i32 8057, i32 628, i32 8058, i32 8059, i32 612, i32 8060, i32 8061, i32 626, i32 8064, i32 8071, i32 508, i32 8080, i32 8087, i32 508, i32 8096, i32 8103, i32 508, i32 8112, i32 8113, i32 508, i32 8144, i32 8145, i32 508, i32 8160, i32 8161, i32 508, i32 8560, i32 8575, i32 484, i32 9424, i32 9449, i32 474, i32 65345, i32 65370, i32 468]
@unicode.to_upper_singlets = internal global [680 x i32] [i32 255, i32 621, i32 257, i32 499, i32 259, i32 499, i32 261, i32 499, i32 263, i32 499, i32 265, i32 499, i32 267, i32 499, i32 269, i32 499, i32 271, i32 499, i32 273, i32 499, i32 275, i32 499, i32 277, i32 499, i32 279, i32 499, i32 281, i32 499, i32 283, i32 499, i32 285, i32 499, i32 287, i32 499, i32 289, i32 499, i32 291, i32 499, i32 293, i32 499, i32 295, i32 499, i32 297, i32 499, i32 299, i32 499, i32 301, i32 499, i32 303, i32 499, i32 305, i32 268, i32 307, i32 499, i32 309, i32 499, i32 311, i32 499, i32 314, i32 499, i32 316, i32 499, i32 318, i32 499, i32 320, i32 499, i32 322, i32 499, i32 324, i32 499, i32 326, i32 499, i32 328, i32 499, i32 331, i32 499, i32 333, i32 499, i32 335, i32 499, i32 337, i32 499, i32 339, i32 499, i32 341, i32 499, i32 343, i32 499, i32 345, i32 499, i32 347, i32 499, i32 349, i32 499, i32 351, i32 499, i32 353, i32 499, i32 355, i32 499, i32 357, i32 499, i32 359, i32 499, i32 361, i32 499, i32 363, i32 499, i32 365, i32 499, i32 367, i32 499, i32 369, i32 499, i32 371, i32 499, i32 373, i32 499, i32 375, i32 499, i32 378, i32 499, i32 380, i32 499, i32 382, i32 499, i32 383, i32 200, i32 387, i32 499, i32 389, i32 499, i32 392, i32 499, i32 396, i32 499, i32 402, i32 499, i32 409, i32 499, i32 417, i32 499, i32 419, i32 499, i32 421, i32 499, i32 424, i32 499, i32 429, i32 499, i32 432, i32 499, i32 436, i32 499, i32 438, i32 499, i32 441, i32 499, i32 445, i32 499, i32 453, i32 499, i32 454, i32 498, i32 456, i32 499, i32 457, i32 498, i32 459, i32 499, i32 460, i32 498, i32 462, i32 499, i32 464, i32 499, i32 466, i32 499, i32 468, i32 499, i32 470, i32 499, i32 472, i32 499, i32 474, i32 499, i32 476, i32 499, i32 479, i32 499, i32 481, i32 499, i32 483, i32 499, i32 485, i32 499, i32 487, i32 499, i32 489, i32 499, i32 491, i32 499, i32 493, i32 499, i32 495, i32 499, i32 498, i32 499, i32 499, i32 498, i32 501, i32 499, i32 507, i32 499, i32 509, i32 499, i32 511, i32 499, i32 513, i32 499, i32 515, i32 499, i32 517, i32 499, i32 519, i32 499, i32 521, i32 499, i32 523, i32 499, i32 525, i32 499, i32 527, i32 499, i32 529, i32 499, i32 531, i32 499, i32 533, i32 499, i32 535, i32 499, i32 595, i32 290, i32 596, i32 294, i32 603, i32 297, i32 608, i32 295, i32 611, i32 293, i32 616, i32 291, i32 617, i32 289, i32 623, i32 289, i32 626, i32 287, i32 643, i32 282, i32 648, i32 282, i32 658, i32 281, i32 940, i32 462, i32 972, i32 436, i32 976, i32 438, i32 977, i32 443, i32 981, i32 453, i32 982, i32 446, i32 995, i32 499, i32 997, i32 499, i32 999, i32 499, i32 1001, i32 499, i32 1003, i32 499, i32 1005, i32 499, i32 1007, i32 499, i32 1008, i32 414, i32 1009, i32 420, i32 1121, i32 499, i32 1123, i32 499, i32 1125, i32 499, i32 1127, i32 499, i32 1129, i32 499, i32 1131, i32 499, i32 1133, i32 499, i32 1135, i32 499, i32 1137, i32 499, i32 1139, i32 499, i32 1141, i32 499, i32 1143, i32 499, i32 1145, i32 499, i32 1147, i32 499, i32 1149, i32 499, i32 1151, i32 499, i32 1153, i32 499, i32 1169, i32 499, i32 1171, i32 499, i32 1173, i32 499, i32 1175, i32 499, i32 1177, i32 499, i32 1179, i32 499, i32 1181, i32 499, i32 1183, i32 499, i32 1185, i32 499, i32 1187, i32 499, i32 1189, i32 499, i32 1191, i32 499, i32 1193, i32 499, i32 1195, i32 499, i32 1197, i32 499, i32 1199, i32 499, i32 1201, i32 499, i32 1203, i32 499, i32 1205, i32 499, i32 1207, i32 499, i32 1209, i32 499, i32 1211, i32 499, i32 1213, i32 499, i32 1215, i32 499, i32 1218, i32 499, i32 1220, i32 499, i32 1224, i32 499, i32 1228, i32 499, i32 1233, i32 499, i32 1235, i32 499, i32 1237, i32 499, i32 1239, i32 499, i32 1241, i32 499, i32 1243, i32 499, i32 1245, i32 499, i32 1247, i32 499, i32 1249, i32 499, i32 1251, i32 499, i32 1253, i32 499, i32 1255, i32 499, i32 1257, i32 499, i32 1259, i32 499, i32 1263, i32 499, i32 1265, i32 499, i32 1267, i32 499, i32 1269, i32 499, i32 1273, i32 499, i32 7681, i32 499, i32 7683, i32 499, i32 7685, i32 499, i32 7687, i32 499, i32 7689, i32 499, i32 7691, i32 499, i32 7693, i32 499, i32 7695, i32 499, i32 7697, i32 499, i32 7699, i32 499, i32 7701, i32 499, i32 7703, i32 499, i32 7705, i32 499, i32 7707, i32 499, i32 7709, i32 499, i32 7711, i32 499, i32 7713, i32 499, i32 7715, i32 499, i32 7717, i32 499, i32 7719, i32 499, i32 7721, i32 499, i32 7723, i32 499, i32 7725, i32 499, i32 7727, i32 499, i32 7729, i32 499, i32 7731, i32 499, i32 7733, i32 499, i32 7735, i32 499, i32 7737, i32 499, i32 7739, i32 499, i32 7741, i32 499, i32 7743, i32 499, i32 7745, i32 499, i32 7747, i32 499, i32 7749, i32 499, i32 7751, i32 499, i32 7753, i32 499, i32 7755, i32 499, i32 7757, i32 499, i32 7759, i32 499, i32 7761, i32 499, i32 7763, i32 499, i32 7765, i32 499, i32 7767, i32 499, i32 7769, i32 499, i32 7771, i32 499, i32 7773, i32 499, i32 7775, i32 499, i32 7777, i32 499, i32 7779, i32 499, i32 7781, i32 499, i32 7783, i32 499, i32 7785, i32 499, i32 7787, i32 499, i32 7789, i32 499, i32 7791, i32 499, i32 7793, i32 499, i32 7795, i32 499, i32 7797, i32 499, i32 7799, i32 499, i32 7801, i32 499, i32 7803, i32 499, i32 7805, i32 499, i32 7807, i32 499, i32 7809, i32 499, i32 7811, i32 499, i32 7813, i32 499, i32 7815, i32 499, i32 7817, i32 499, i32 7819, i32 499, i32 7821, i32 499, i32 7823, i32 499, i32 7825, i32 499, i32 7827, i32 499, i32 7829, i32 499, i32 7841, i32 499, i32 7843, i32 499, i32 7845, i32 499, i32 7847, i32 499, i32 7849, i32 499, i32 7851, i32 499, i32 7853, i32 499, i32 7855, i32 499, i32 7857, i32 499, i32 7859, i32 499, i32 7861, i32 499, i32 7863, i32 499, i32 7865, i32 499, i32 7867, i32 499, i32 7869, i32 499, i32 7871, i32 499, i32 7873, i32 499, i32 7875, i32 499, i32 7877, i32 499, i32 7879, i32 499, i32 7881, i32 499, i32 7883, i32 499, i32 7885, i32 499, i32 7887, i32 499, i32 7889, i32 499, i32 7891, i32 499, i32 7893, i32 499, i32 7895, i32 499, i32 7897, i32 499, i32 7899, i32 499, i32 7901, i32 499, i32 7903, i32 499, i32 7905, i32 499, i32 7907, i32 499, i32 7909, i32 499, i32 7911, i32 499, i32 7913, i32 499, i32 7915, i32 499, i32 7917, i32 499, i32 7919, i32 499, i32 7921, i32 499, i32 7923, i32 499, i32 7925, i32 499, i32 7927, i32 499, i32 7929, i32 499, i32 8017, i32 508, i32 8019, i32 508, i32 8021, i32 508, i32 8023, i32 508, i32 8115, i32 509, i32 8131, i32 509, i32 8165, i32 507, i32 8179, i32 509]
@unicode.to_lower_ranges = internal global [108 x i32] [i32 65, i32 90, i32 532, i32 192, i32 214, i32 532, i32 216, i32 222, i32 532, i32 393, i32 394, i32 705, i32 398, i32 399, i32 702, i32 433, i32 434, i32 717, i32 904, i32 906, i32 537, i32 910, i32 911, i32 563, i32 913, i32 929, i32 532, i32 931, i32 939, i32 532, i32 1025, i32 1036, i32 580, i32 1038, i32 1039, i32 580, i32 1040, i32 1071, i32 532, i32 1329, i32 1366, i32 548, i32 4256, i32 4293, i32 548, i32 7944, i32 7951, i32 492, i32 7960, i32 7965, i32 492, i32 7976, i32 7983, i32 492, i32 7992, i32 7999, i32 492, i32 8008, i32 8013, i32 492, i32 8040, i32 8047, i32 492, i32 8072, i32 8079, i32 492, i32 8088, i32 8095, i32 492, i32 8104, i32 8111, i32 492, i32 8120, i32 8121, i32 492, i32 8122, i32 8123, i32 426, i32 8136, i32 8139, i32 414, i32 8152, i32 8153, i32 492, i32 8154, i32 8155, i32 400, i32 8168, i32 8169, i32 492, i32 8170, i32 8171, i32 388, i32 8184, i32 8185, i32 372, i32 8186, i32 8187, i32 374, i32 8544, i32 8559, i32 516, i32 9398, i32 9423, i32 526, i32 65313, i32 65338, i32 532]
@unicode.to_lower_singlets = internal global [666 x i32] [i32 256, i32 501, i32 258, i32 501, i32 260, i32 501, i32 262, i32 501, i32 264, i32 501, i32 266, i32 501, i32 268, i32 501, i32 270, i32 501, i32 272, i32 501, i32 274, i32 501, i32 276, i32 501, i32 278, i32 501, i32 280, i32 501, i32 282, i32 501, i32 284, i32 501, i32 286, i32 501, i32 288, i32 501, i32 290, i32 501, i32 292, i32 501, i32 294, i32 501, i32 296, i32 501, i32 298, i32 501, i32 300, i32 501, i32 302, i32 501, i32 304, i32 301, i32 306, i32 501, i32 308, i32 501, i32 310, i32 501, i32 313, i32 501, i32 315, i32 501, i32 317, i32 501, i32 319, i32 501, i32 321, i32 501, i32 323, i32 501, i32 325, i32 501, i32 327, i32 501, i32 330, i32 501, i32 332, i32 501, i32 334, i32 501, i32 336, i32 501, i32 338, i32 501, i32 340, i32 501, i32 342, i32 501, i32 344, i32 501, i32 346, i32 501, i32 348, i32 501, i32 350, i32 501, i32 352, i32 501, i32 354, i32 501, i32 356, i32 501, i32 358, i32 501, i32 360, i32 501, i32 362, i32 501, i32 364, i32 501, i32 366, i32 501, i32 368, i32 501, i32 370, i32 501, i32 372, i32 501, i32 374, i32 501, i32 376, i32 379, i32 377, i32 501, i32 379, i32 501, i32 381, i32 501, i32 385, i32 710, i32 386, i32 501, i32 388, i32 501, i32 390, i32 706, i32 391, i32 501, i32 395, i32 501, i32 400, i32 703, i32 401, i32 501, i32 403, i32 705, i32 404, i32 707, i32 406, i32 711, i32 407, i32 709, i32 408, i32 501, i32 412, i32 711, i32 413, i32 713, i32 416, i32 501, i32 418, i32 501, i32 420, i32 501, i32 423, i32 501, i32 425, i32 718, i32 428, i32 501, i32 430, i32 718, i32 431, i32 501, i32 435, i32 501, i32 437, i32 501, i32 439, i32 719, i32 440, i32 501, i32 444, i32 501, i32 452, i32 502, i32 453, i32 501, i32 455, i32 502, i32 456, i32 501, i32 458, i32 502, i32 459, i32 501, i32 461, i32 501, i32 463, i32 501, i32 465, i32 501, i32 467, i32 501, i32 469, i32 501, i32 471, i32 501, i32 473, i32 501, i32 475, i32 501, i32 478, i32 501, i32 480, i32 501, i32 482, i32 501, i32 484, i32 501, i32 486, i32 501, i32 488, i32 501, i32 490, i32 501, i32 492, i32 501, i32 494, i32 501, i32 497, i32 502, i32 498, i32 501, i32 500, i32 501, i32 506, i32 501, i32 508, i32 501, i32 510, i32 501, i32 512, i32 501, i32 514, i32 501, i32 516, i32 501, i32 518, i32 501, i32 520, i32 501, i32 522, i32 501, i32 524, i32 501, i32 526, i32 501, i32 528, i32 501, i32 530, i32 501, i32 532, i32 501, i32 534, i32 501, i32 902, i32 538, i32 908, i32 564, i32 994, i32 501, i32 996, i32 501, i32 998, i32 501, i32 1000, i32 501, i32 1002, i32 501, i32 1004, i32 501, i32 1006, i32 501, i32 1120, i32 501, i32 1122, i32 501, i32 1124, i32 501, i32 1126, i32 501, i32 1128, i32 501, i32 1130, i32 501, i32 1132, i32 501, i32 1134, i32 501, i32 1136, i32 501, i32 1138, i32 501, i32 1140, i32 501, i32 1142, i32 501, i32 1144, i32 501, i32 1146, i32 501, i32 1148, i32 501, i32 1150, i32 501, i32 1152, i32 501, i32 1168, i32 501, i32 1170, i32 501, i32 1172, i32 501, i32 1174, i32 501, i32 1176, i32 501, i32 1178, i32 501, i32 1180, i32 501, i32 1182, i32 501, i32 1184, i32 501, i32 1186, i32 501, i32 1188, i32 501, i32 1190, i32 501, i32 1192, i32 501, i32 1194, i32 501, i32 1196, i32 501, i32 1198, i32 501, i32 1200, i32 501, i32 1202, i32 501, i32 1204, i32 501, i32 1206, i32 501, i32 1208, i32 501, i32 1210, i32 501, i32 1212, i32 501, i32 1214, i32 501, i32 1217, i32 501, i32 1219, i32 501, i32 1223, i32 501, i32 1227, i32 501, i32 1232, i32 501, i32 1234, i32 501, i32 1236, i32 501, i32 1238, i32 501, i32 1240, i32 501, i32 1242, i32 501, i32 1244, i32 501, i32 1246, i32 501, i32 1248, i32 501, i32 1250, i32 501, i32 1252, i32 501, i32 1254, i32 501, i32 1256, i32 501, i32 1258, i32 501, i32 1262, i32 501, i32 1264, i32 501, i32 1266, i32 501, i32 1268, i32 501, i32 1272, i32 501, i32 7680, i32 501, i32 7682, i32 501, i32 7684, i32 501, i32 7686, i32 501, i32 7688, i32 501, i32 7690, i32 501, i32 7692, i32 501, i32 7694, i32 501, i32 7696, i32 501, i32 7698, i32 501, i32 7700, i32 501, i32 7702, i32 501, i32 7704, i32 501, i32 7706, i32 501, i32 7708, i32 501, i32 7710, i32 501, i32 7712, i32 501, i32 7714, i32 501, i32 7716, i32 501, i32 7718, i32 501, i32 7720, i32 501, i32 7722, i32 501, i32 7724, i32 501, i32 7726, i32 501, i32 7728, i32 501, i32 7730, i32 501, i32 7732, i32 501, i32 7734, i32 501, i32 7736, i32 501, i32 7738, i32 501, i32 7740, i32 501, i32 7742, i32 501, i32 7744, i32 501, i32 7746, i32 501, i32 7748, i32 501, i32 7750, i32 501, i32 7752, i32 501, i32 7754, i32 501, i32 7756, i32 501, i32 7758, i32 501, i32 7760, i32 501, i32 7762, i32 501, i32 7764, i32 501, i32 7766, i32 501, i32 7768, i32 501, i32 7770, i32 501, i32 7772, i32 501, i32 7774, i32 501, i32 7776, i32 501, i32 7778, i32 501, i32 7780, i32 501, i32 7782, i32 501, i32 7784, i32 501, i32 7786, i32 501, i32 7788, i32 501, i32 7790, i32 501, i32 7792, i32 501, i32 7794, i32 501, i32 7796, i32 501, i32 7798, i32 501, i32 7800, i32 501, i32 7802, i32 501, i32 7804, i32 501, i32 7806, i32 501, i32 7808, i32 501, i32 7810, i32 501, i32 7812, i32 501, i32 7814, i32 501, i32 7816, i32 501, i32 7818, i32 501, i32 7820, i32 501, i32 7822, i32 501, i32 7824, i32 501, i32 7826, i32 501, i32 7828, i32 501, i32 7840, i32 501, i32 7842, i32 501, i32 7844, i32 501, i32 7846, i32 501, i32 7848, i32 501, i32 7850, i32 501, i32 7852, i32 501, i32 7854, i32 501, i32 7856, i32 501, i32 7858, i32 501, i32 7860, i32 501, i32 7862, i32 501, i32 7864, i32 501, i32 7866, i32 501, i32 7868, i32 501, i32 7870, i32 501, i32 7872, i32 501, i32 7874, i32 501, i32 7876, i32 501, i32 7878, i32 501, i32 7880, i32 501, i32 7882, i32 501, i32 7884, i32 501, i32 7886, i32 501, i32 7888, i32 501, i32 7890, i32 501, i32 7892, i32 501, i32 7894, i32 501, i32 7896, i32 501, i32 7898, i32 501, i32 7900, i32 501, i32 7902, i32 501, i32 7904, i32 501, i32 7906, i32 501, i32 7908, i32 501, i32 7910, i32 501, i32 7912, i32 501, i32 7914, i32 501, i32 7916, i32 501, i32 7918, i32 501, i32 7920, i32 501, i32 7922, i32 501, i32 7924, i32 501, i32 7926, i32 501, i32 7928, i32 501, i32 8025, i32 492, i32 8027, i32 492, i32 8029, i32 492, i32 8031, i32 492, i32 8124, i32 491, i32 8140, i32 491, i32 8172, i32 493, i32 8188, i32 491]
@fontstash.fa = internal global %fontstash.Font_Atlas zeroinitializer
@cutf8.utf8d-3980 = internal global [400 x i8] c
@image._internal_loaders-10114 = internal global [22 x i8*] zeroinitializer
@image._internal_destroyers = internal global [22 x i8*] zeroinitializer
@png.ADAM7_X_ORIG = internal global { i64*, i64 } { i64* getelementptr inbounds ([7 x i64], [7 x i64]* @"csba$d", i64 0, i64 0), i64 7 }
@"csba$d" = global [7 x i64] [i64 0, i64 4, i64 0, i64 2, i64 0, i64 1, i64 0]
@png.ADAM7_Y_ORIG = internal global { i64*, i64 } { i64* getelementptr inbounds ([7 x i64], [7 x i64]* @"csba$e", i64 0, i64 0), i64 7 }
@"csba$e" = global [7 x i64] [i64 0, i64 0, i64 4, i64 0, i64 2, i64 0, i64 1]
@png.ADAM7_X_SPACING = internal global { i64*, i64 } { i64* getelementptr inbounds ([7 x i64], [7 x i64]* @"csba$f", i64 0, i64 0), i64 7 }
@"csba$f" = global [7 x i64] [i64 8, i64 8, i64 4, i64 4, i64 2, i64 2, i64 1]
@png.ADAM7_Y_SPACING = internal global { i64*, i64 } { i64* getelementptr inbounds ([7 x i64], [7 x i64]* @"csba$10", i64 0, i64 0), i64 7 }
@"csba$10" = global [7 x i64] [i64 8, i64 8, i64 8, i64 4, i64 4, i64 2, i64 2]
@odin_gl.loaded_up_to = internal global [2 x i64] zeroinitializer
@odin_gl.loaded_up_to_major = internal global i64 0
@odin_gl.loaded_up_to_minor = internal global i64 0
@odin_gl.impl_CullFace = internal global i8* null
@odin_gl.impl_FrontFace = internal global i8* null
@odin_gl.impl_Hint = internal global i8* null
@odin_gl.impl_LineWidth = internal global i8* null
@odin_gl.impl_PointSize = internal global i8* null
@odin_gl.impl_PolygonMode = internal global i8* null
@odin_gl.impl_Scissor = internal global i8* null
@odin_gl.impl_TexParameterf = internal global i8* null
@odin_gl.impl_TexParameterfv = internal global i8* null
@odin_gl.impl_TexParameteri = internal global i8* null
@odin_gl.impl_TexParameteriv = internal global i8* null
@odin_gl.impl_TexImage1D = internal global i8* null
@odin_gl.impl_TexImage2D = internal global i8* null
@odin_gl.impl_DrawBuffer = internal global i8* null
@odin_gl.impl_Clear = internal global i8* null
@odin_gl.impl_ClearColor = internal global i8* null
@odin_gl.impl_ClearStencil = internal global i8* null
@odin_gl.impl_ClearDepth = internal global i8* null
@odin_gl.impl_StencilMask = internal global i8* null
@odin_gl.impl_ColorMask = internal global i8* null
@odin_gl.impl_DepthMask = internal global i8* null
@odin_gl.impl_Disable = internal global i8* null
@odin_gl.impl_Enable = internal global i8* null
@odin_gl.impl_Finish = internal global i8* null
@odin_gl.impl_Flush = internal global i8* null
@odin_gl.impl_BlendFunc = internal global i8* null
@odin_gl.impl_LogicOp = internal global i8* null
@odin_gl.impl_StencilFunc = internal global i8* null
@odin_gl.impl_StencilOp = internal global i8* null
@odin_gl.impl_DepthFunc = internal global i8* null
@odin_gl.impl_PixelStoref = internal global i8* null
@odin_gl.impl_PixelStorei = internal global i8* null
@odin_gl.impl_ReadBuffer = internal global i8* null
@odin_gl.impl_ReadPixels = internal global i8* null
@odin_gl.impl_GetBooleanv = internal global i8* null
@odin_gl.impl_GetDoublev = internal global i8* null
@odin_gl.impl_GetError = internal global i8* null
@odin_gl.impl_GetFloatv = internal global i8* null
@odin_gl.impl_GetIntegerv = internal global i8* null
@odin_gl.impl_GetString = internal global i8* null
@odin_gl.impl_GetTexImage = internal global i8* null
@odin_gl.impl_GetTexParameterfv = internal global i8* null
@odin_gl.impl_GetTexParameteriv = internal global i8* null
@odin_gl.impl_GetTexLevelParameterfv = internal global i8* null
@odin_gl.impl_GetTexLevelParameteriv = internal global i8* null
@odin_gl.impl_IsEnabled = internal global i8* null
@odin_gl.impl_DepthRange = internal global i8* null
@odin_gl.impl_Viewport = internal global i8* null
@odin_gl.impl_DrawArrays = internal global i8* null
@odin_gl.impl_DrawElements = internal global i8* null
@odin_gl.impl_PolygonOffset = internal global i8* null
@odin_gl.impl_CopyTexImage1D = internal global i8* null
@odin_gl.impl_CopyTexImage2D = internal global i8* null
@odin_gl.impl_CopyTexSubImage1D = internal global i8* null
@odin_gl.impl_CopyTexSubImage2D = internal global i8* null
@odin_gl.impl_TexSubImage1D = internal global i8* null
@odin_gl.impl_TexSubImage2D = internal global i8* null
@odin_gl.impl_BindTexture = internal global i8* null
@odin_gl.impl_DeleteTextures = internal global i8* null
@odin_gl.impl_GenTextures = internal global i8* null
@odin_gl.impl_IsTexture = internal global i8* null
@odin_gl.impl_DrawRangeElements = internal global i8* null
@odin_gl.impl_TexImage3D = internal global i8* null
@odin_gl.impl_TexSubImage3D = internal global i8* null
@odin_gl.impl_CopyTexSubImage3D = internal global i8* null
@odin_gl.impl_ActiveTexture = internal global i8* null
@odin_gl.impl_SampleCoverage = internal global i8* null
@odin_gl.impl_CompressedTexImage3D = internal global i8* null
@odin_gl.impl_CompressedTexImage2D = internal global i8* null
@odin_gl.impl_CompressedTexImage1D = internal global i8* null
@odin_gl.impl_CompressedTexSubImage3D = internal global i8* null
@odin_gl.impl_CompressedTexSubImage2D = internal global i8* null
@odin_gl.impl_CompressedTexSubImage1D = internal global i8* null
@odin_gl.impl_GetCompressedTexImage = internal global i8* null
@odin_gl.impl_BlendFuncSeparate = internal global i8* null
@odin_gl.impl_MultiDrawArrays = internal global i8* null
@odin_gl.impl_MultiDrawElements = internal global i8* null
@odin_gl.impl_PointParameterf = internal global i8* null
@odin_gl.impl_PointParameterfv = internal global i8* null
@odin_gl.impl_PointParameteri = internal global i8* null
@odin_gl.impl_PointParameteriv = internal global i8* null
@odin_gl.impl_BlendColor = internal global i8* null
@odin_gl.impl_BlendEquation = internal global i8* null
@odin_gl.impl_GenQueries = internal global i8* null
@odin_gl.impl_DeleteQueries = internal global i8* null
@odin_gl.impl_IsQuery = internal global i8* null
@odin_gl.impl_BeginQuery = internal global i8* null
@odin_gl.impl_EndQuery = internal global i8* null
@odin_gl.impl_GetQueryiv = internal global i8* null
@odin_gl.impl_GetQueryObjectiv = internal global i8* null
@odin_gl.impl_GetQueryObjectuiv = internal global i8* null
@odin_gl.impl_BindBuffer = internal global i8* null
@odin_gl.impl_DeleteBuffers = internal global i8* null
@odin_gl.impl_GenBuffers = internal global i8* null
@odin_gl.impl_IsBuffer = internal global i8* null
@odin_gl.impl_BufferData = internal global i8* null
@odin_gl.impl_BufferSubData = internal global i8* null
@odin_gl.impl_GetBufferSubData = internal global i8* null
@odin_gl.impl_MapBuffer = internal global i8* null
@odin_gl.impl_UnmapBuffer = internal global i8* null
@odin_gl.impl_GetBufferParameteriv = internal global i8* null
@odin_gl.impl_GetBufferPointerv = internal global i8* null
@odin_gl.impl_BlendEquationSeparate = internal global i8* null
@odin_gl.impl_DrawBuffers = internal global i8* null
@odin_gl.impl_StencilOpSeparate = internal global i8* null
@odin_gl.impl_StencilFuncSeparate = internal global i8* null
@odin_gl.impl_StencilMaskSeparate = internal global i8* null
@odin_gl.impl_AttachShader = internal global i8* null
@odin_gl.impl_BindAttribLocation = internal global i8* null
@odin_gl.impl_CompileShader = internal global i8* null
@odin_gl.impl_CreateProgram = internal global i8* null
@odin_gl.impl_CreateShader = internal global i8* null
@odin_gl.impl_DeleteProgram = internal global i8* null
@odin_gl.impl_DeleteShader = internal global i8* null
@odin_gl.impl_DetachShader = internal global i8* null
@odin_gl.impl_DisableVertexAttribArray = internal global i8* null
@odin_gl.impl_EnableVertexAttribArray = internal global i8* null
@odin_gl.impl_GetActiveAttrib = internal global i8* null
@odin_gl.impl_GetActiveUniform = internal global i8* null
@odin_gl.impl_GetAttachedShaders = internal global i8* null
@odin_gl.impl_GetAttribLocation = internal global i8* null
@odin_gl.impl_GetProgramiv = internal global i8* null
@odin_gl.impl_GetProgramInfoLog = internal global i8* null
@odin_gl.impl_GetShaderiv = internal global i8* null
@odin_gl.impl_GetShaderInfoLog = internal global i8* null
@odin_gl.impl_GetShaderSource = internal global i8* null
@odin_gl.impl_GetUniformLocation = internal global i8* null
@odin_gl.impl_GetUniformfv = internal global i8* null
@odin_gl.impl_GetUniformiv = internal global i8* null
@odin_gl.impl_GetVertexAttribdv = internal global i8* null
@odin_gl.impl_GetVertexAttribfv = internal global i8* null
@odin_gl.impl_GetVertexAttribiv = internal global i8* null
@odin_gl.impl_GetVertexAttribPointerv = internal global i8* null
@odin_gl.impl_IsProgram = internal global i8* null
@odin_gl.impl_IsShader = internal global i8* null
@odin_gl.impl_LinkProgram = internal global i8* null
@odin_gl.impl_ShaderSource = internal global i8* null
@odin_gl.impl_UseProgram = internal global i8* null
@odin_gl.impl_Uniform1f = internal global i8* null
@odin_gl.impl_Uniform2f = internal global i8* null
@odin_gl.impl_Uniform3f = internal global i8* null
@odin_gl.impl_Uniform4f = internal global i8* null
@odin_gl.impl_Uniform1i = internal global i8* null
@odin_gl.impl_Uniform2i = internal global i8* null
@odin_gl.impl_Uniform3i = internal global i8* null
@odin_gl.impl_Uniform4i = internal global i8* null
@odin_gl.impl_Uniform1fv = internal global i8* null
@odin_gl.impl_Uniform2fv = internal global i8* null
@odin_gl.impl_Uniform3fv = internal global i8* null
@odin_gl.impl_Uniform4fv = internal global i8* null
@odin_gl.impl_Uniform1iv = internal global i8* null
@odin_gl.impl_Uniform2iv = internal global i8* null
@odin_gl.impl_Uniform3iv = internal global i8* null
@odin_gl.impl_Uniform4iv = internal global i8* null
@odin_gl.impl_UniformMatrix2fv = internal global i8* null
@odin_gl.impl_UniformMatrix3fv = internal global i8* null
@odin_gl.impl_UniformMatrix4fv = internal global i8* null
@odin_gl.impl_ValidateProgram = internal global i8* null
@odin_gl.impl_VertexAttrib1d = internal global i8* null
@odin_gl.impl_VertexAttrib1dv = internal global i8* null
@odin_gl.impl_VertexAttrib1f = internal global i8* null
@odin_gl.impl_VertexAttrib1fv = internal global i8* null
@odin_gl.impl_VertexAttrib1s = internal global i8* null
@odin_gl.impl_VertexAttrib1sv = internal global i8* null
@odin_gl.impl_VertexAttrib2d = internal global i8* null
@odin_gl.impl_VertexAttrib2dv = internal global i8* null
@odin_gl.impl_VertexAttrib2f = internal global i8* null
@odin_gl.impl_VertexAttrib2fv = internal global i8* null
@odin_gl.impl_VertexAttrib2s = internal global i8* null
@odin_gl.impl_VertexAttrib2sv = internal global i8* null
@odin_gl.impl_VertexAttrib3d = internal global i8* null
@odin_gl.impl_VertexAttrib3dv = internal global i8* null
@odin_gl.impl_VertexAttrib3f = internal global i8* null
@odin_gl.impl_VertexAttrib3fv = internal global i8* null
@odin_gl.impl_VertexAttrib3s = internal global i8* null
@odin_gl.impl_VertexAttrib3sv = internal global i8* null
@odin_gl.impl_VertexAttrib4Nbv = internal global i8* null
@odin_gl.impl_VertexAttrib4Niv = internal global i8* null
@odin_gl.impl_VertexAttrib4Nsv = internal global i8* null
@odin_gl.impl_VertexAttrib4Nub = internal global i8* null
@odin_gl.impl_VertexAttrib4Nubv = internal global i8* null
@odin_gl.impl_VertexAttrib4Nuiv = internal global i8* null
@odin_gl.impl_VertexAttrib4Nusv = internal global i8* null
@odin_gl.impl_VertexAttrib4bv = internal global i8* null
@odin_gl.impl_VertexAttrib4d = internal global i8* null
@odin_gl.impl_VertexAttrib4dv = internal global i8* null
@odin_gl.impl_VertexAttrib4f = internal global i8* null
@odin_gl.impl_VertexAttrib4fv = internal global i8* null
@odin_gl.impl_VertexAttrib4iv = internal global i8* null
@odin_gl.impl_VertexAttrib4s = internal global i8* null
@odin_gl.impl_VertexAttrib4sv = internal global i8* null
@odin_gl.impl_VertexAttrib4ubv = internal global i8* null
@odin_gl.impl_VertexAttrib4uiv = internal global i8* null
@odin_gl.impl_VertexAttrib4usv = internal global i8* null
@odin_gl.impl_VertexAttribPointer = internal global i8* null
@odin_gl.impl_UniformMatrix2x3fv = internal global i8* null
@odin_gl.impl_UniformMatrix3x2fv = internal global i8* null
@odin_gl.impl_UniformMatrix2x4fv = internal global i8* null
@odin_gl.impl_UniformMatrix4x2fv = internal global i8* null
@odin_gl.impl_UniformMatrix3x4fv = internal global i8* null
@odin_gl.impl_UniformMatrix4x3fv = internal global i8* null
@odin_gl.impl_ColorMaski = internal global i8* null
@odin_gl.impl_GetBooleani_v = internal global i8* null
@odin_gl.impl_GetIntegeri_v = internal global i8* null
@odin_gl.impl_Enablei = internal global i8* null
@odin_gl.impl_Disablei = internal global i8* null
@odin_gl.impl_IsEnabledi = internal global i8* null
@odin_gl.impl_BeginTransformFeedback = internal global i8* null
@odin_gl.impl_EndTransformFeedback = internal global i8* null
@odin_gl.impl_BindBufferRange = internal global i8* null
@odin_gl.impl_BindBufferBase = internal global i8* null
@odin_gl.impl_TransformFeedbackVaryings = internal global i8* null
@odin_gl.impl_GetTransformFeedbackVarying = internal global i8* null
@odin_gl.impl_ClampColor = internal global i8* null
@odin_gl.impl_BeginConditionalRender = internal global i8* null
@odin_gl.impl_EndConditionalRender = internal global i8* null
@odin_gl.impl_VertexAttribIPointer = internal global i8* null
@odin_gl.impl_GetVertexAttribIiv = internal global i8* null
@odin_gl.impl_GetVertexAttribIuiv = internal global i8* null
@odin_gl.impl_VertexAttribI1i = internal global i8* null
@odin_gl.impl_VertexAttribI2i = internal global i8* null
@odin_gl.impl_VertexAttribI3i = internal global i8* null
@odin_gl.impl_VertexAttribI4i = internal global i8* null
@odin_gl.impl_VertexAttribI1ui = internal global i8* null
@odin_gl.impl_VertexAttribI2ui = internal global i8* null
@odin_gl.impl_VertexAttribI3ui = internal global i8* null
@odin_gl.impl_VertexAttribI4ui = internal global i8* null
@odin_gl.impl_VertexAttribI1iv = internal global i8* null
@odin_gl.impl_VertexAttribI2iv = internal global i8* null
@odin_gl.impl_VertexAttribI3iv = internal global i8* null
@odin_gl.impl_VertexAttribI4iv = internal global i8* null
@odin_gl.impl_VertexAttribI1uiv = internal global i8* null
@odin_gl.impl_VertexAttribI2uiv = internal global i8* null
@odin_gl.impl_VertexAttribI3uiv = internal global i8* null
@odin_gl.impl_VertexAttribI4uiv = internal global i8* null
@odin_gl.impl_VertexAttribI4bv = internal global i8* null
@odin_gl.impl_VertexAttribI4sv = internal global i8* null
@odin_gl.impl_VertexAttribI4ubv = internal global i8* null
@odin_gl.impl_VertexAttribI4usv = internal global i8* null
@odin_gl.impl_GetUniformuiv = internal global i8* null
@odin_gl.impl_BindFragDataLocation = internal global i8* null
@odin_gl.impl_GetFragDataLocation = internal global i8* null
@odin_gl.impl_Uniform1ui = internal global i8* null
@odin_gl.impl_Uniform2ui = internal global i8* null
@odin_gl.impl_Uniform3ui = internal global i8* null
@odin_gl.impl_Uniform4ui = internal global i8* null
@odin_gl.impl_Uniform1uiv = internal global i8* null
@odin_gl.impl_Uniform2uiv = internal global i8* null
@odin_gl.impl_Uniform3uiv = internal global i8* null
@odin_gl.impl_Uniform4uiv = internal global i8* null
@odin_gl.impl_TexParameterIiv = internal global i8* null
@odin_gl.impl_TexParameterIuiv = internal global i8* null
@odin_gl.impl_GetTexParameterIiv = internal global i8* null
@odin_gl.impl_GetTexParameterIuiv = internal global i8* null
@odin_gl.impl_ClearBufferiv = internal global i8* null
@odin_gl.impl_ClearBufferuiv = internal global i8* null
@odin_gl.impl_ClearBufferfv = internal global i8* null
@odin_gl.impl_ClearBufferfi = internal global i8* null
@odin_gl.impl_GetStringi = internal global i8* null
@odin_gl.impl_IsRenderbuffer = internal global i8* null
@odin_gl.impl_BindRenderbuffer = internal global i8* null
@odin_gl.impl_DeleteRenderbuffers = internal global i8* null
@odin_gl.impl_GenRenderbuffers = internal global i8* null
@odin_gl.impl_RenderbufferStorage = internal global i8* null
@odin_gl.impl_GetRenderbufferParameteriv = internal global i8* null
@odin_gl.impl_IsFramebuffer = internal global i8* null
@odin_gl.impl_BindFramebuffer = internal global i8* null
@odin_gl.impl_DeleteFramebuffers = internal global i8* null
@odin_gl.impl_GenFramebuffers = internal global i8* null
@odin_gl.impl_CheckFramebufferStatus = internal global i8* null
@odin_gl.impl_FramebufferTexture1D = internal global i8* null
@odin_gl.impl_FramebufferTexture2D = internal global i8* null
@odin_gl.impl_FramebufferTexture3D = internal global i8* null
@odin_gl.impl_FramebufferRenderbuffer = internal global i8* null
@odin_gl.impl_GetFramebufferAttachmentParameteriv = internal global i8* null
@odin_gl.impl_GenerateMipmap = internal global i8* null
@odin_gl.impl_BlitFramebuffer = internal global i8* null
@odin_gl.impl_RenderbufferStorageMultisample = internal global i8* null
@odin_gl.impl_FramebufferTextureLayer = internal global i8* null
@odin_gl.impl_MapBufferRange = internal global i8* null
@odin_gl.impl_FlushMappedBufferRange = internal global i8* null
@odin_gl.impl_BindVertexArray = internal global i8* null
@odin_gl.impl_DeleteVertexArrays = internal global i8* null
@odin_gl.impl_GenVertexArrays = internal global i8* null
@odin_gl.impl_IsVertexArray = internal global i8* null
@odin_gl.impl_DrawArraysInstanced = internal global i8* null
@odin_gl.impl_DrawElementsInstanced = internal global i8* null
@odin_gl.impl_TexBuffer = internal global i8* null
@odin_gl.impl_PrimitiveRestartIndex = internal global i8* null
@odin_gl.impl_CopyBufferSubData = internal global i8* null
@odin_gl.impl_GetUniformIndices = internal global i8* null
@odin_gl.impl_GetActiveUniformsiv = internal global i8* null
@odin_gl.impl_GetActiveUniformName = internal global i8* null
@odin_gl.impl_GetUniformBlockIndex = internal global i8* null
@odin_gl.impl_GetActiveUniformBlockiv = internal global i8* null
@odin_gl.impl_GetActiveUniformBlockName = internal global i8* null
@odin_gl.impl_UniformBlockBinding = internal global i8* null
@odin_gl.impl_DrawElementsBaseVertex = internal global i8* null
@odin_gl.impl_DrawRangeElementsBaseVertex = internal global i8* null
@odin_gl.impl_DrawElementsInstancedBaseVertex = internal global i8* null
@odin_gl.impl_MultiDrawElementsBaseVertex = internal global i8* null
@odin_gl.impl_ProvokingVertex = internal global i8* null
@odin_gl.impl_FenceSync = internal global i8* null
@odin_gl.impl_IsSync = internal global i8* null
@odin_gl.impl_DeleteSync = internal global i8* null
@odin_gl.impl_ClientWaitSync = internal global i8* null
@odin_gl.impl_WaitSync = internal global i8* null
@odin_gl.impl_GetInteger64v = internal global i8* null
@odin_gl.impl_GetSynciv = internal global i8* null
@odin_gl.impl_GetInteger64i_v = internal global i8* null
@odin_gl.impl_GetBufferParameteri64v = internal global i8* null
@odin_gl.impl_FramebufferTexture = internal global i8* null
@odin_gl.impl_TexImage2DMultisample = internal global i8* null
@odin_gl.impl_TexImage3DMultisample = internal global i8* null
@odin_gl.impl_GetMultisamplefv = internal global i8* null
@odin_gl.impl_SampleMaski = internal global i8* null
@odin_gl.impl_BindFragDataLocationIndexed = internal global i8* null
@odin_gl.impl_GetFragDataIndex = internal global i8* null
@odin_gl.impl_GenSamplers = internal global i8* null
@odin_gl.impl_DeleteSamplers = internal global i8* null
@odin_gl.impl_IsSampler = internal global i8* null
@odin_gl.impl_BindSampler = internal global i8* null
@odin_gl.impl_SamplerParameteri = internal global i8* null
@odin_gl.impl_SamplerParameteriv = internal global i8* null
@odin_gl.impl_SamplerParameterf = internal global i8* null
@odin_gl.impl_SamplerParameterfv = internal global i8* null
@odin_gl.impl_SamplerParameterIiv = internal global i8* null
@odin_gl.impl_SamplerParameterIuiv = internal global i8* null
@odin_gl.impl_GetSamplerParameteriv = internal global i8* null
@odin_gl.impl_GetSamplerParameterIiv = internal global i8* null
@odin_gl.impl_GetSamplerParameterfv = internal global i8* null
@odin_gl.impl_GetSamplerParameterIuiv = internal global i8* null
@odin_gl.impl_QueryCounter = internal global i8* null
@odin_gl.impl_GetQueryObjecti64v = internal global i8* null
@odin_gl.impl_GetQueryObjectui64v = internal global i8* null
@odin_gl.impl_VertexAttribDivisor = internal global i8* null
@odin_gl.impl_VertexAttribP1ui = internal global i8* null
@odin_gl.impl_VertexAttribP1uiv = internal global i8* null
@odin_gl.impl_VertexAttribP2ui = internal global i8* null
@odin_gl.impl_VertexAttribP2uiv = internal global i8* null
@odin_gl.impl_VertexAttribP3ui = internal global i8* null
@odin_gl.impl_VertexAttribP3uiv = internal global i8* null
@odin_gl.impl_VertexAttribP4ui = internal global i8* null
@odin_gl.impl_VertexAttribP4uiv = internal global i8* null
@odin_gl.impl_VertexP2ui = internal global i8* null
@odin_gl.impl_VertexP2uiv = internal global i8* null
@odin_gl.impl_VertexP3ui = internal global i8* null
@odin_gl.impl_VertexP3uiv = internal global i8* null
@odin_gl.impl_VertexP4ui = internal global i8* null
@odin_gl.impl_VertexP4uiv = internal global i8* null
@odin_gl.impl_TexCoordP1ui = internal global i8* null
@odin_gl.impl_TexCoordP1uiv = internal global i8* null
@odin_gl.impl_TexCoordP2ui = internal global i8* null
@odin_gl.impl_TexCoordP2uiv = internal global i8* null
@odin_gl.impl_TexCoordP3ui = internal global i8* null
@odin_gl.impl_TexCoordP3uiv = internal global i8* null
@odin_gl.impl_TexCoordP4ui = internal global i8* null
@odin_gl.impl_TexCoordP4uiv = internal global i8* null
@odin_gl.impl_MultiTexCoordP1ui = internal global i8* null
@odin_gl.impl_MultiTexCoordP1uiv = internal global i8* null
@odin_gl.impl_MultiTexCoordP2ui = internal global i8* null
@odin_gl.impl_MultiTexCoordP2uiv = internal global i8* null
@odin_gl.impl_MultiTexCoordP3ui = internal global i8* null
@odin_gl.impl_MultiTexCoordP3uiv = internal global i8* null
@odin_gl.impl_MultiTexCoordP4ui = internal global i8* null
@odin_gl.impl_MultiTexCoordP4uiv = internal global i8* null
@odin_gl.impl_NormalP3ui = internal global i8* null
@odin_gl.impl_NormalP3uiv = internal global i8* null
@odin_gl.impl_ColorP3ui = internal global i8* null
@odin_gl.impl_ColorP3uiv = internal global i8* null
@odin_gl.impl_ColorP4ui = internal global i8* null
@odin_gl.impl_ColorP4uiv = internal global i8* null
@odin_gl.impl_SecondaryColorP3ui = internal global i8* null
@odin_gl.impl_SecondaryColorP3uiv = internal global i8* null
@odin_gl.impl_MinSampleShading = internal global i8* null
@odin_gl.impl_BlendEquationi = internal global i8* null
@odin_gl.impl_BlendEquationSeparatei = internal global i8* null
@odin_gl.impl_BlendFunci = internal global i8* null
@odin_gl.impl_BlendFuncSeparatei = internal global i8* null
@odin_gl.impl_DrawArraysIndirect = internal global i8* null
@odin_gl.impl_DrawElementsIndirect = internal global i8* null
@odin_gl.impl_Uniform1d = internal global i8* null
@odin_gl.impl_Uniform2d = internal global i8* null
@odin_gl.impl_Uniform3d = internal global i8* null
@odin_gl.impl_Uniform4d = internal global i8* null
@odin_gl.impl_Uniform1dv = internal global i8* null
@odin_gl.impl_Uniform2dv = internal global i8* null
@odin_gl.impl_Uniform3dv = internal global i8* null
@odin_gl.impl_Uniform4dv = internal global i8* null
@odin_gl.impl_UniformMatrix2dv = internal global i8* null
@odin_gl.impl_UniformMatrix3dv = internal global i8* null
@odin_gl.impl_UniformMatrix4dv = internal global i8* null
@odin_gl.impl_UniformMatrix2x3dv = internal global i8* null
@odin_gl.impl_UniformMatrix2x4dv = internal global i8* null
@odin_gl.impl_UniformMatrix3x2dv = internal global i8* null
@odin_gl.impl_UniformMatrix3x4dv = internal global i8* null
@odin_gl.impl_UniformMatrix4x2dv = internal global i8* null
@odin_gl.impl_UniformMatrix4x3dv = internal global i8* null
@odin_gl.impl_GetUniformdv = internal global i8* null
@odin_gl.impl_GetSubroutineUniformLocation = internal global i8* null
@odin_gl.impl_GetSubroutineIndex = internal global i8* null
@odin_gl.impl_GetActiveSubroutineUniformiv = internal global i8* null
@odin_gl.impl_GetActiveSubroutineUniformName = internal global i8* null
@odin_gl.impl_GetActiveSubroutineName = internal global i8* null
@odin_gl.impl_UniformSubroutinesuiv = internal global i8* null
@odin_gl.impl_GetUniformSubroutineuiv = internal global i8* null
@odin_gl.impl_GetProgramStageiv = internal global i8* null
@odin_gl.impl_PatchParameteri = internal global i8* null
@odin_gl.impl_PatchParameterfv = internal global i8* null
@odin_gl.impl_BindTransformFeedback = internal global i8* null
@odin_gl.impl_DeleteTransformFeedbacks = internal global i8* null
@odin_gl.impl_GenTransformFeedbacks = internal global i8* null
@odin_gl.impl_IsTransformFeedback = internal global i8* null
@odin_gl.impl_PauseTransformFeedback = internal global i8* null
@odin_gl.impl_ResumeTransformFeedback = internal global i8* null
@odin_gl.impl_DrawTransformFeedback = internal global i8* null
@odin_gl.impl_DrawTransformFeedbackStream = internal global i8* null
@odin_gl.impl_BeginQueryIndexed = internal global i8* null
@odin_gl.impl_EndQueryIndexed = internal global i8* null
@odin_gl.impl_GetQueryIndexediv = internal global i8* null
@odin_gl.impl_GetTextureHandleARB = internal global i8* null
@odin_gl.impl_GetTextureSamplerHandleARB = internal global i8* null
@odin_gl.impl_GetImageHandleARB = internal global i8* null
@odin_gl.impl_MakeTextureHandleResidentARB = internal global i8* null
@odin_gl.impl_MakeImageHandleResidentARB = internal global i8* null
@odin_gl.impl_MakeTextureHandleNonResidentARB = internal global i8* null
@odin_gl.impl_MakeImageHandleNonResidentARB = internal global i8* null
@odin_gl.impl_ReleaseShaderCompiler = internal global i8* null
@odin_gl.impl_ShaderBinary = internal global i8* null
@odin_gl.impl_GetShaderPrecisionFormat = internal global i8* null
@odin_gl.impl_DepthRangef = internal global i8* null
@odin_gl.impl_ClearDepthf = internal global i8* null
@odin_gl.impl_GetProgramBinary = internal global i8* null
@odin_gl.impl_ProgramBinary = internal global i8* null
@odin_gl.impl_ProgramParameteri = internal global i8* null
@odin_gl.impl_UseProgramStages = internal global i8* null
@odin_gl.impl_ActiveShaderProgram = internal global i8* null
@odin_gl.impl_CreateShaderProgramv = internal global i8* null
@odin_gl.impl_BindProgramPipeline = internal global i8* null
@odin_gl.impl_DeleteProgramPipelines = internal global i8* null
@odin_gl.impl_GenProgramPipelines = internal global i8* null
@odin_gl.impl_IsProgramPipeline = internal global i8* null
@odin_gl.impl_GetProgramPipelineiv = internal global i8* null
@odin_gl.impl_ProgramUniform1i = internal global i8* null
@odin_gl.impl_ProgramUniform1iv = internal global i8* null
@odin_gl.impl_ProgramUniform1f = internal global i8* null
@odin_gl.impl_ProgramUniform1fv = internal global i8* null
@odin_gl.impl_ProgramUniform1d = internal global i8* null
@odin_gl.impl_ProgramUniform1dv = internal global i8* null
@odin_gl.impl_ProgramUniform1ui = internal global i8* null
@odin_gl.impl_ProgramUniform1uiv = internal global i8* null
@odin_gl.impl_ProgramUniform2i = internal global i8* null
@odin_gl.impl_ProgramUniform2iv = internal global i8* null
@odin_gl.impl_ProgramUniform2f = internal global i8* null
@odin_gl.impl_ProgramUniform2fv = internal global i8* null
@odin_gl.impl_ProgramUniform2d = internal global i8* null
@odin_gl.impl_ProgramUniform2dv = internal global i8* null
@odin_gl.impl_ProgramUniform2ui = internal global i8* null
@odin_gl.impl_ProgramUniform2uiv = internal global i8* null
@odin_gl.impl_ProgramUniform3i = internal global i8* null
@odin_gl.impl_ProgramUniform3iv = internal global i8* null
@odin_gl.impl_ProgramUniform3f = internal global i8* null
@odin_gl.impl_ProgramUniform3fv = internal global i8* null
@odin_gl.impl_ProgramUniform3d = internal global i8* null
@odin_gl.impl_ProgramUniform3dv = internal global i8* null
@odin_gl.impl_ProgramUniform3ui = internal global i8* null
@odin_gl.impl_ProgramUniform3uiv = internal global i8* null
@odin_gl.impl_ProgramUniform4i = internal global i8* null
@odin_gl.impl_ProgramUniform4iv = internal global i8* null
@odin_gl.impl_ProgramUniform4f = internal global i8* null
@odin_gl.impl_ProgramUniform4fv = internal global i8* null
@odin_gl.impl_ProgramUniform4d = internal global i8* null
@odin_gl.impl_ProgramUniform4dv = internal global i8* null
@odin_gl.impl_ProgramUniform4ui = internal global i8* null
@odin_gl.impl_ProgramUniform4uiv = internal global i8* null
@odin_gl.impl_ProgramUniformMatrix2fv = internal global i8* null
@odin_gl.impl_ProgramUniformMatrix3fv = internal global i8* null
@odin_gl.impl_ProgramUniformMatrix4fv = internal global i8* null
@odin_gl.impl_ProgramUniformMatrix2dv = internal global i8* null
@odin_gl.impl_ProgramUniformMatrix3dv = internal global i8* null
@odin_gl.impl_ProgramUniformMatrix4dv = internal global i8* null
@odin_gl.impl_ProgramUniformMatrix2x3fv = internal global i8* null
@odin_gl.impl_ProgramUniformMatrix3x2fv = internal global i8* null
@odin_gl.impl_ProgramUniformMatrix2x4fv = internal global i8* null
@odin_gl.impl_ProgramUniformMatrix4x2fv = internal global i8* null
@odin_gl.impl_ProgramUniformMatrix3x4fv = internal global i8* null
@odin_gl.impl_ProgramUniformMatrix4x3fv = internal global i8* null
@odin_gl.impl_ProgramUniformMatrix2x3dv = internal global i8* null
@odin_gl.impl_ProgramUniformMatrix3x2dv = internal global i8* null
@odin_gl.impl_ProgramUniformMatrix2x4dv = internal global i8* null
@odin_gl.impl_ProgramUniformMatrix4x2dv = internal global i8* null
@odin_gl.impl_ProgramUniformMatrix3x4dv = internal global i8* null
@odin_gl.impl_ProgramUniformMatrix4x3dv = internal global i8* null
@odin_gl.impl_ValidateProgramPipeline = internal global i8* null
@odin_gl.impl_GetProgramPipelineInfoLog = internal global i8* null
@odin_gl.impl_VertexAttribL1d = internal global i8* null
@odin_gl.impl_VertexAttribL2d = internal global i8* null
@odin_gl.impl_VertexAttribL3d = internal global i8* null
@odin_gl.impl_VertexAttribL4d = internal global i8* null
@odin_gl.impl_VertexAttribL1dv = internal global i8* null
@odin_gl.impl_VertexAttribL2dv = internal global i8* null
@odin_gl.impl_VertexAttribL3dv = internal global i8* null
@odin_gl.impl_VertexAttribL4dv = internal global i8* null
@odin_gl.impl_VertexAttribLPointer = internal global i8* null
@odin_gl.impl_GetVertexAttribLdv = internal global i8* null
@odin_gl.impl_ViewportArrayv = internal global i8* null
@odin_gl.impl_ViewportIndexedf = internal global i8* null
@odin_gl.impl_ViewportIndexedfv = internal global i8* null
@odin_gl.impl_ScissorArrayv = internal global i8* null
@odin_gl.impl_ScissorIndexed = internal global i8* null
@odin_gl.impl_ScissorIndexedv = internal global i8* null
@odin_gl.impl_DepthRangeArrayv = internal global i8* null
@odin_gl.impl_DepthRangeIndexed = internal global i8* null
@odin_gl.impl_GetFloati_v = internal global i8* null
@odin_gl.impl_GetDoublei_v = internal global i8* null
@odin_gl.impl_DrawArraysInstancedBaseInstance = internal global i8* null
@odin_gl.impl_DrawElementsInstancedBaseInstance = internal global i8* null
@odin_gl.impl_DrawElementsInstancedBaseVertexBaseInstance = internal global i8* null
@odin_gl.impl_GetInternalformativ = internal global i8* null
@odin_gl.impl_GetActiveAtomicCounterBufferiv = internal global i8* null
@odin_gl.impl_BindImageTexture = internal global i8* null
@odin_gl.impl_MemoryBarrier = internal global i8* null
@odin_gl.impl_TexStorage1D = internal global i8* null
@odin_gl.impl_TexStorage2D = internal global i8* null
@odin_gl.impl_TexStorage3D = internal global i8* null
@odin_gl.impl_DrawTransformFeedbackInstanced = internal global i8* null
@odin_gl.impl_DrawTransformFeedbackStreamInstanced = internal global i8* null
@odin_gl.impl_ClearBufferData = internal global i8* null
@odin_gl.impl_ClearBufferSubData = internal global i8* null
@odin_gl.impl_DispatchCompute = internal global i8* null
@odin_gl.impl_DispatchComputeIndirect = internal global i8* null
@odin_gl.impl_CopyImageSubData = internal global i8* null
@odin_gl.impl_FramebufferParameteri = internal global i8* null
@odin_gl.impl_GetFramebufferParameteriv = internal global i8* null
@odin_gl.impl_GetInternalformati64v = internal global i8* null
@odin_gl.impl_InvalidateTexSubImage = internal global i8* null
@odin_gl.impl_InvalidateTexImage = internal global i8* null
@odin_gl.impl_InvalidateBufferSubData = internal global i8* null
@odin_gl.impl_InvalidateBufferData = internal global i8* null
@odin_gl.impl_InvalidateFramebuffer = internal global i8* null
@odin_gl.impl_InvalidateSubFramebuffer = internal global i8* null
@odin_gl.impl_MultiDrawArraysIndirect = internal global i8* null
@odin_gl.impl_MultiDrawElementsIndirect = internal global i8* null
@odin_gl.impl_GetProgramInterfaceiv = internal global i8* null
@odin_gl.impl_GetProgramResourceIndex = internal global i8* null
@odin_gl.impl_GetProgramResourceName = internal global i8* null
@odin_gl.impl_GetProgramResourceiv = internal global i8* null
@odin_gl.impl_GetProgramResourceLocation = internal global i8* null
@odin_gl.impl_GetProgramResourceLocationIndex = internal global i8* null
@odin_gl.impl_ShaderStorageBlockBinding = internal global i8* null
@odin_gl.impl_TexBufferRange = internal global i8* null
@odin_gl.impl_TexStorage2DMultisample = internal global i8* null
@odin_gl.impl_TexStorage3DMultisample = internal global i8* null
@odin_gl.impl_TextureView = internal global i8* null
@odin_gl.impl_BindVertexBuffer = internal global i8* null
@odin_gl.impl_VertexAttribFormat = internal global i8* null
@odin_gl.impl_VertexAttribIFormat = internal global i8* null
@odin_gl.impl_VertexAttribLFormat = internal global i8* null
@odin_gl.impl_VertexAttribBinding = internal global i8* null
@odin_gl.impl_VertexBindingDivisor = internal global i8* null
@odin_gl.impl_DebugMessageControl = internal global i8* null
@odin_gl.impl_DebugMessageInsert = internal global i8* null
@odin_gl.impl_DebugMessageCallback = internal global i8* null
@odin_gl.impl_GetDebugMessageLog = internal global i8* null
@odin_gl.impl_PushDebugGroup = internal global i8* null
@odin_gl.impl_PopDebugGroup = internal global i8* null
@odin_gl.impl_ObjectLabel = internal global i8* null
@odin_gl.impl_GetObjectLabel = internal global i8* null
@odin_gl.impl_ObjectPtrLabel = internal global i8* null
@odin_gl.impl_GetObjectPtrLabel = internal global i8* null
@odin_gl.impl_BufferStorage = internal global i8* null
@odin_gl.impl_ClearTexImage = internal global i8* null
@odin_gl.impl_ClearTexSubImage = internal global i8* null
@odin_gl.impl_BindBuffersBase = internal global i8* null
@odin_gl.impl_BindBuffersRange = internal global i8* null
@odin_gl.impl_BindTextures = internal global i8* null
@odin_gl.impl_BindSamplers = internal global i8* null
@odin_gl.impl_BindImageTextures = internal global i8* null
@odin_gl.impl_BindVertexBuffers = internal global i8* null
@odin_gl.impl_ClipControl = internal global i8* null
@odin_gl.impl_CreateTransformFeedbacks = internal global i8* null
@odin_gl.impl_TransformFeedbackBufferBase = internal global i8* null
@odin_gl.impl_TransformFeedbackBufferRange = internal global i8* null
@odin_gl.impl_GetTransformFeedbackiv = internal global i8* null
@odin_gl.impl_GetTransformFeedbacki_v = internal global i8* null
@odin_gl.impl_GetTransformFeedbacki64_v = internal global i8* null
@odin_gl.impl_CreateBuffers = internal global i8* null
@odin_gl.impl_NamedBufferStorage = internal global i8* null
@odin_gl.impl_NamedBufferData = internal global i8* null
@odin_gl.impl_NamedBufferSubData = internal global i8* null
@odin_gl.impl_CopyNamedBufferSubData = internal global i8* null
@odin_gl.impl_ClearNamedBufferData = internal global i8* null
@odin_gl.impl_ClearNamedBufferSubData = internal global i8* null
@odin_gl.impl_MapNamedBuffer = internal global i8* null
@odin_gl.impl_MapNamedBufferRange = internal global i8* null
@odin_gl.impl_UnmapNamedBuffer = internal global i8* null
@odin_gl.impl_FlushMappedNamedBufferRange = internal global i8* null
@odin_gl.impl_GetNamedBufferParameteriv = internal global i8* null
@odin_gl.impl_GetNamedBufferParameteri64v = internal global i8* null
@odin_gl.impl_GetNamedBufferPointerv = internal global i8* null
@odin_gl.impl_GetNamedBufferSubData = internal global i8* null
@odin_gl.impl_CreateFramebuffers = internal global i8* null
@odin_gl.impl_NamedFramebufferRenderbuffer = internal global i8* null
@odin_gl.impl_NamedFramebufferParameteri = internal global i8* null
@odin_gl.impl_NamedFramebufferTexture = internal global i8* null
@odin_gl.impl_NamedFramebufferTextureLayer = internal global i8* null
@odin_gl.impl_NamedFramebufferDrawBuffer = internal global i8* null
@odin_gl.impl_NamedFramebufferDrawBuffers = internal global i8* null
@odin_gl.impl_NamedFramebufferReadBuffer = internal global i8* null
@odin_gl.impl_InvalidateNamedFramebufferData = internal global i8* null
@odin_gl.impl_InvalidateNamedFramebufferSubData = internal global i8* null
@odin_gl.impl_ClearNamedFramebufferiv = internal global i8* null
@odin_gl.impl_ClearNamedFramebufferuiv = internal global i8* null
@odin_gl.impl_ClearNamedFramebufferfv = internal global i8* null
@odin_gl.impl_ClearNamedFramebufferfi = internal global i8* null
@odin_gl.impl_BlitNamedFramebuffer = internal global i8* null
@odin_gl.impl_CheckNamedFramebufferStatus = internal global i8* null
@odin_gl.impl_GetNamedFramebufferParameteriv = internal global i8* null
@odin_gl.impl_GetNamedFramebufferAttachmentParameteriv = internal global i8* null
@odin_gl.impl_CreateRenderbuffers = internal global i8* null
@odin_gl.impl_NamedRenderbufferStorage = internal global i8* null
@odin_gl.impl_NamedRenderbufferStorageMultisample = internal global i8* null
@odin_gl.impl_GetNamedRenderbufferParameteriv = internal global i8* null
@odin_gl.impl_CreateTextures = internal global i8* null
@odin_gl.impl_TextureBuffer = internal global i8* null
@odin_gl.impl_TextureBufferRange = internal global i8* null
@odin_gl.impl_TextureStorage1D = internal global i8* null
@odin_gl.impl_TextureStorage2D = internal global i8* null
@odin_gl.impl_TextureStorage3D = internal global i8* null
@odin_gl.impl_TextureStorage2DMultisample = internal global i8* null
@odin_gl.impl_TextureStorage3DMultisample = internal global i8* null
@odin_gl.impl_TextureSubImage1D = internal global i8* null
@odin_gl.impl_TextureSubImage2D = internal global i8* null
@odin_gl.impl_TextureSubImage3D = internal global i8* null
@odin_gl.impl_CompressedTextureSubImage1D = internal global i8* null
@odin_gl.impl_CompressedTextureSubImage2D = internal global i8* null
@odin_gl.impl_CompressedTextureSubImage3D = internal global i8* null
@odin_gl.impl_CopyTextureSubImage1D = internal global i8* null
@odin_gl.impl_CopyTextureSubImage2D = internal global i8* null
@odin_gl.impl_CopyTextureSubImage3D = internal global i8* null
@odin_gl.impl_TextureParameterf = internal global i8* null
@odin_gl.impl_TextureParameterfv = internal global i8* null
@odin_gl.impl_TextureParameteri = internal global i8* null
@odin_gl.impl_TextureParameterIiv = internal global i8* null
@odin_gl.impl_TextureParameterIuiv = internal global i8* null
@odin_gl.impl_TextureParameteriv = internal global i8* null
@odin_gl.impl_GenerateTextureMipmap = internal global i8* null
@odin_gl.impl_BindTextureUnit = internal global i8* null
@odin_gl.impl_GetTextureImage = internal global i8* null
@odin_gl.impl_GetCompressedTextureImage = internal global i8* null
@odin_gl.impl_GetTextureLevelParameterfv = internal global i8* null
@odin_gl.impl_GetTextureLevelParameteriv = internal global i8* null
@odin_gl.impl_GetTextureParameterfv = internal global i8* null
@odin_gl.impl_GetTextureParameterIiv = internal global i8* null
@odin_gl.impl_GetTextureParameterIuiv = internal global i8* null
@odin_gl.impl_GetTextureParameteriv = internal global i8* null
@odin_gl.impl_CreateVertexArrays = internal global i8* null
@odin_gl.impl_DisableVertexArrayAttrib = internal global i8* null
@odin_gl.impl_EnableVertexArrayAttrib = internal global i8* null
@odin_gl.impl_VertexArrayElementBuffer = internal global i8* null
@odin_gl.impl_VertexArrayVertexBuffer = internal global i8* null
@odin_gl.impl_VertexArrayVertexBuffers = internal global i8* null
@odin_gl.impl_VertexArrayAttribBinding = internal global i8* null
@odin_gl.impl_VertexArrayAttribFormat = internal global i8* null
@odin_gl.impl_VertexArrayAttribIFormat = internal global i8* null
@odin_gl.impl_VertexArrayAttribLFormat = internal global i8* null
@odin_gl.impl_VertexArrayBindingDivisor = internal global i8* null
@odin_gl.impl_GetVertexArrayiv = internal global i8* null
@odin_gl.impl_GetVertexArrayIndexediv = internal global i8* null
@odin_gl.impl_GetVertexArrayIndexed64iv = internal global i8* null
@odin_gl.impl_CreateSamplers = internal global i8* null
@odin_gl.impl_CreateProgramPipelines = internal global i8* null
@odin_gl.impl_CreateQueries = internal global i8* null
@odin_gl.impl_GetQueryBufferObjecti64v = internal global i8* null
@odin_gl.impl_GetQueryBufferObjectiv = internal global i8* null
@odin_gl.impl_GetQueryBufferObjectui64v = internal global i8* null
@odin_gl.impl_GetQueryBufferObjectuiv = internal global i8* null
@odin_gl.impl_MemoryBarrierByRegion = internal global i8* null
@odin_gl.impl_GetTextureSubImage = internal global i8* null
@odin_gl.impl_GetCompressedTextureSubImage = internal global i8* null
@odin_gl.impl_GetGraphicsResetStatus = internal global i8* null
@odin_gl.impl_GetnCompressedTexImage = internal global i8* null
@odin_gl.impl_GetnTexImage = internal global i8* null
@odin_gl.impl_GetnUniformdv = internal global i8* null
@odin_gl.impl_GetnUniformfv = internal global i8* null
@odin_gl.impl_GetnUniformiv = internal global i8* null
@odin_gl.impl_GetnUniformuiv = internal global i8* null
@odin_gl.impl_ReadnPixels = internal global i8* null
@odin_gl.impl_GetnMapdv = internal global i8* null
@odin_gl.impl_GetnMapfv = internal global i8* null
@odin_gl.impl_GetnMapiv = internal global i8* null
@odin_gl.impl_GetnPixelMapusv = internal global i8* null
@odin_gl.impl_GetnPixelMapfv = internal global i8* null
@odin_gl.impl_GetnPixelMapuiv = internal global i8* null
@odin_gl.impl_GetnPolygonStipple = internal global i8* null
@odin_gl.impl_GetnColorTable = internal global i8* null
@odin_gl.impl_GetnConvolutionFilter = internal global i8* null
@odin_gl.impl_GetnSeparableFilter = internal global i8* null
@odin_gl.impl_GetnHistogram = internal global i8* null
@odin_gl.impl_GetnMinmax = internal global i8* null
@odin_gl.impl_TextureBarrier = internal global i8* null
@odin_gl.impl_GetUnsignedBytevEXT = internal global i8* null
@odin_gl.impl_TexPageCommitmentARB = internal global i8* null
@odin_gl.impl_SpecializeShader = internal global i8* null
@odin_gl.impl_MultiDrawArraysIndirectCount = internal global i8* null
@odin_gl.impl_MultiDrawElementsIndirectCount = internal global i8* null
@odin_gl.impl_PolygonOffsetClamp = internal global i8* null
@odin_gl.last_compile_error_message-11628 = internal thread_local global { i8*, i64 } zeroinitializer
@odin_gl.last_link_error_message-11629 = internal thread_local global { i8*, i64 } zeroinitializer
@odin_gl.last_link_error_type-11631 = internal thread_local global i32 0
@zlib.Z_LENGTH_BASE = internal global [31 x i16] [i16 3, i16 4, i16 5, i16 6, i16 7, i16 8, i16 9, i16 10, i16 11, i16 13, i16 15, i16 17, i16 19, i16 23, i16 27, i16 31, i16 35, i16 43, i16 51, i16 59, i16 67, i16 83, i16 99, i16 115, i16 131, i16 163, i16 195, i16 227, i16 258, i16 0, i16 0]
@zlib.Z_LENGTH_EXTRA = internal global [31 x i8] c"\00\00\00\00\00\00\00\00\01\01\01\01\02\02\02\02\03\03\03\03\04\04\04\04\05\05\05\05\00\00\00"
@zlib.Z_DIST_BASE = internal global [32 x i16] [i16 1, i16 2, i16 3, i16 4, i16 5, i16 7, i16 9, i16 13, i16 17, i16 25, i16 33, i16 49, i16 65, i16 97, i16 129, i16 193, i16 257, i16 385, i16 513, i16 769, i16 1025, i16 1537, i16 2049, i16 3073, i16 4097, i16 6145, i16 8193, i16 12289, i16 16385, i16 24577, i16 0, i16 0]
@zlib.Z_DIST_EXTRA = internal global [32 x i8] c"\00\00\00\00\01\01\02\02\03\03\04\04\05\05\06\06\07\07\08\08\09\09\0A\0A\0B\0B\0C\0C\0D\0D\00\00"
@zlib.Z_LENGTH_DEZIGZAG = internal global { i8*, i64 } { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @"csba$11", i64 0, i64 0), i64 19 }
@"csba$11" = global [19 x i8] c"\10\11\12\00\08\07\09\06\0A\05\0B\04\0C\03\0D\02\0E\01\0F"
@zlib.Z_FIXED_LENGTH = internal global [288 x i8] c
@zlib.Z_FIXED_DIST = internal global [32 x i8] c"\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05"
@hash.crc32_table-12475 = internal global [8 x [256 x i32]] [[256 x i32] [i32 0, i32 1996959894, i32 -301047508, i32 -1727442502, i32 124634137, i32 1886057615, i32 -379345611, i32 -1637575261, i32 249268274, i32 2044508324, i32 -522852066, i32 -1747789432, i32 162941995, i32 2125561021, i32 -407360249, i32 -1866523247, i32 498536548, i32 1789927666, i32 -205950648, i32 -2067906082, i32 450548861, i32 1843258603, i32 -187386543, i32 -2083289657, i32 325883990, i32 1684777152, i32 -43845254, i32 -1973040660, i32 335633487, i32 1661365465, i32 -99664541, i32 -1928851979, i32 997073096, i32 1281953886, i32 -715111964, i32 -1570279054, i32 1006888145, i32 1258607687, i32 -770865667, i32 -1526024853, i32 901097722, i32 1119000684, i32 -608450090, i32 -1396901568, i32 853044451, i32 1172266101, i32 -589951537, i32 -1412350631, i32 651767980, i32 1373503546, i32 -925412992, i32 -1076862698, i32 565507253, i32 1454621731, i32 -809855591, i32 -1195530993, i32 671266974, i32 1594198024, i32 -972236366, i32 -1324619484, i32 795835527, i32 1483230225, i32 -1050600021, i32 -1234817731, i32 1994146192, i32 31158534, i32 -1731059524, i32 -271249366, i32 1907459465, i32 112637215, i32 -1614814043, i32 -390540237, i32 2013776290, i32 251722036, i32 -1777751922, i32 -519137256, i32 2137656763, i32 141376813, i32 -1855689577, i32 -429695999, i32 1802195444, i32 476864866, i32 -2056965928, i32 -228458418, i32 1812370925, i32 453092731, i32 -2113342271, i32 -183516073, i32 1706088902, i32 314042704, i32 -1950435094, i32 -54949764, i32 1658658271, i32 366619977, i32 -1932296973, i32 -69972891, i32 1303535960, i32 984961486, i32 -1547960204, i32 -725929758, i32 1256170817, i32 1037604311, i32 -1529756563, i32 -740887301, i32 1131014506, i32 879679996, i32 -1385723834, i32 -631195440, i32 1141124467, i32 855842277, i32 -1442165665, i32 -586318647, i32 1342533948, i32 654459306, i32 -1106571248, i32 -921952122, i32 1466479909, i32 544179635, i32 -1184443383, i32 -832445281, i32 1591671054, i32 702138776, i32 -1328506846, i32 -942167884, i32 1504918807, i32 783551873, i32 -1212326853, i32 -1061524307, i32 -306674912, i32 -1698712650, i32 62317068, i32 1957810842, i32 -355121351, i32 -1647151185, i32 81470997, i32 1943803523, i32 -480048366, i32 -1805370492, i32 225274430, i32 2053790376, i32 -468791541, i32 -1828061283, i32 167816743, i32 2097651377, i32 -267414716, i32 -2029476910, i32 503444072, i32 1762050814, i32 -144550051, i32 -2140837941, i32 426522225, i32 1852507879, i32 -19653770, i32 -1982649376, i32 282753626, i32 1742555852, i32 -105259153, i32 -1900089351, i32 397917763, i32 1622183637, i32 -690576408, i32 -1580100738, i32 953729732, i32 1340076626, i32 -776247311, i32 -1497606297, i32 1068828381, i32 1219638859, i32 -670225446, i32 -1358292148, i32 906185462, i32 1090812512, i32 -547295293, i32 -1469587627, i32 829329135, i32 1181335161, i32 -882789492, i32 -1134132454, i32 628085408, i32 1382605366, i32 -871598187, i32 -1156888829, i32 570562233, i32 1426400815, i32 -977650754, i32 -1296233688, i32 733239954, i32 1555261956, i32 -1026031705, i32 -1244606671, i32 752459403, i32 1541320221, i32 -1687895376, i32 -328994266, i32 1969922972, i32 40735498, i32 -1677130071, i32 -351390145, i32 1913087877, i32 83908371, i32 -1782625662, i32 -491226604, i32 2075208622, i32 213261112, i32 -1831694693, i32 -438977011, i32 2094854071, i32 198958881, i32 -2032938284, i32 -237706686, i32 1759359992, i32 534414190, i32 -2118248755, i32 -155638181, i32 1873836001, i32 414664567, i32 -2012718362, i32 -15766928, i32 1711684554, i32 285281116, i32 -1889165569, i32 -127750551, i32 1634467795, i32 376229701, i32 -1609899400, i32 -686959890, i32 1308918612, i32 956543938, i32 -1486412191, i32 -799009033, i32 1231636301, i32 1047427035, i32 -1362007478, i32 -640263460, i32 1088359270, i32 936918000, i32 -1447252397, i32 -558129467, i32 1202900863, i32 817233897, i32 -1111625188, i32 -893730166, i32 1404277552, i32 615818150, i32 -1160759803, i32 -841546093, i32 1423857449, i32 601450431, i32 -1285129682, i32 -1000256840, i32 1567103746, i32 711928724, i32 -1274298825, i32 -1022587231, i32 1510334235, i32 755167117], [256 x i32] [i32 0, i32 421212481, i32 842424962, i32 724390851, i32 1684849924, i32 2105013317, i32 1448781702, i32 1329698503, i32 -925267448, i32 -775767223, i32 -84940662, i32 -470492725, i32 -1397403892, i32 -1246855603, i32 -1635570290, i32 -2020074289, i32 1254232657, i32 1406739216, i32 2029285587, i32 1643069842, i32 783210325, i32 934667796, i32 479770071, i32 92505238, i32 -2112120743, i32 -1694455528, i32 -1339163941, i32 -1456026726, i32 -428384931, i32 -9671652, i32 -733921313, i32 -849736034, i32 -1786501982, i32 -1935731229, i32 -1481488864, i32 -1096190111, i32 -236396122, i32 -386674457, i32 -1008827612, i32 -624577947, i32 1566420650, i32 1145479147, i32 1869335592, i32 1987116393, i32 959540142, i32 539646703, i32 185010476, i32 303839341, i32 -549046541, i32 -966981710, i32 -311405455, i32 -194288336, i32 -1154812937, i32 -1573797194, i32 -1994616459, i32 -1878548428, i32 396344571, i32 243568058, i32 631889529, i32 1018359608, i32 1945336319, i32 1793607870, i32 1103436669, i32 1490954812, i32 -260485371, i32 -379421116, i32 -1034998393, i32 -615244602, i32 -1810527743, i32 -1928414400, i32 -1507596157, i32 -1086793278, i32 950060301, i32 565965900, i32 177645455, i32 328046286, i32 1556873225, i32 1171730760, i32 1861902987, i32 2011255754, i32 -1162125996, i32 -1549767659, i32 -2004009002, i32 -1852436841, i32 -556296112, i32 -942888687, i32 -320734510, i32 -168113261, i32 1919080284, i32 1803150877, i32 1079293406, i32 1498383519, i32 370020952, i32 253043481, i32 607678682, i32 1025720731, i32 1711106983, i32 2095471334, i32 1472923941, i32 1322268772, i32 26324643, i32 411738082, i32 866634785, i32 717028704, i32 -1390091857, i32 -1270886162, i32 -1626176723, i32 -2046184852, i32 -918018901, i32 -799861270, i32 -75610583, i32 -496666776, i32 792689142, i32 908347575, i32 487136116, i32 68299317, i32 1263779058, i32 1380486579, i32 2036719216, i32 1618931505, i32 -404294658, i32 -16923969, i32 -707751556, i32 -859070403, i32 -2088093958, i32 -1701771333, i32 -1313057672, i32 -1465424583, i32 998479947, i32 580430090, i32 162921161, i32 279890824, i32 1609522511, i32 1190423566, i32 1842954189, i32 1958874764, i32 -212200893, i32 -364829950, i32 -1049857855, i32 -663273088, i32 -1758013625, i32 -1909594618, i32 -1526680123, i32 -1139047292, i32 1900120602, i32 1750776667, i32 1131931800, i32 1517083097, i32 355290910, i32 204897887, i32 656092572, i32 1040194781, i32 -1181220846, i32 -1602014893, i32 -1951505776, i32 -1833610287, i32 -571161322, i32 -990907305, i32 -272455788, i32 -153512235, i32 -1375224599, i32 -1222865496, i32 -1674453397, i32 -2060783830, i32 -898926099, i32 -747616084, i32 -128115857, i32 -515495378, i32 1725839073, i32 2143618976, i32 1424512099, i32 1307796770, i32 45282277, i32 464110244, i32 813994343, i32 698327078, i32 -456806728, i32 -35741703, i32 -688665542, i32 -806814341, i32 -2136380484, i32 -1716364547, i32 -1298200258, i32 -1417398145, i32 740041904, i32 889656817, i32 506086962, i32 120682355, i32 1215357364, i32 1366020341, i32 2051441462, i32 1667084919, i32 -872753330, i32 -756947441, i32 -104024628, i32 -522746739, i32 -1349119414, i32 -1232264437, i32 -1650429752, i32 -2068102775, i32 52649286, i32 439905287, i32 823476164, i32 672009861, i32 1733269570, i32 2119477507, i32 1434057408, i32 1281543041, i32 -2126985953, i32 -1742474146, i32 -1290885219, i32 -1441425700, i32 -447479781, i32 -61918886, i32 -681418087, i32 -830909480, i32 1239502615, i32 1358593622, i32 2077699477, i32 1657543892, i32 764250643, i32 882293586, i32 532408465, i32 111204816, i32 1585378284, i32 1197851309, i32 1816695150, i32 1968414767, i32 974272232, i32 587794345, i32 136598634, i32 289367339, i32 -1767409180, i32 -1883486043, i32 -1533994138, i32 -1115018713, i32 -221528864, i32 -338653791, i32 -1057104286, i32 -639176925, i32 347922877, i32 229101820, i32 646611775, i32 1066513022, i32 1892689081, i32 1774917112, i32 1122387515, i32 1543337850, i32 -597333067, i32 -981574924, i32 -296548041, i32 -146261898, i32 -1207325007, i32 -1592614928, i32 -1975530445, i32 -1826292366], [256 x i32] [i32 0, i32 29518391, i32 59036782, i32 38190681, i32 118073564, i32 114017003, i32 76381362, i32 89069189, i32 236147128, i32 265370511, i32 228034006, i32 206958561, i32 152762724, i32 148411219, i32 178138378, i32 190596925, i32 472294256, i32 501532999, i32 530741022, i32 509615401, i32 456068012, i32 451764635, i32 413917122, i32 426358261, i32 305525448, i32 334993663, i32 296822438, i32 275991697, i32 356276756, i32 352202787, i32 381193850, i32 393929805, i32 944588512, i32 965684439, i32 1003065998, i32 973863097, i32 1061482044, i32 1049003019, i32 1019230802, i32 1023561829, i32 912136024, i32 933002607, i32 903529270, i32 874031361, i32 827834244, i32 815125939, i32 852716522, i32 856752605, i32 611050896, i32 631869351, i32 669987326, i32 640506825, i32 593644876, i32 580921211, i32 551983394, i32 556069653, i32 712553512, i32 733666847, i32 704405574, i32 675154545, i32 762387700, i32 749958851, i32 787859610, i32 792175277, i32 1889177024, i32 1901651959, i32 1931368878, i32 1927033753, i32 2006131996, i32 1985040171, i32 1947726194, i32 1976933189, i32 2122964088, i32 2135668303, i32 2098006038, i32 2093965857, i32 2038461604, i32 2017599123, i32 2047123658, i32 2076625661, i32 1824272048, i32 1836991623, i32 1866005214, i32 1861914857, i32 1807058540, i32 1786244187, i32 1748062722, i32 1777547317, i32 1655668488, i32 1668093247, i32 1630251878, i32 1625932113, i32 1705433044, i32 1684323811, i32 1713505210, i32 1742760333, i32 1222101792, i32 1226154263, i32 1263738702, i32 1251046777, i32 1339974652, i32 1310460363, i32 1281013650, i32 1301863845, i32 1187289752, i32 1191637167, i32 1161842422, i32 1149379777, i32 1103966788, i32 1074747507, i32 1112139306, i32 1133218845, i32 1425107024, i32 1429406311, i32 1467333694, i32 1454888457, i32 1408811148, i32 1379576507, i32 1350309090, i32 1371438805, i32 1524775400, i32 1528845279, i32 1499917702, i32 1487177649, i32 1575719220, i32 1546255107, i32 1584350554, i32 1605185389, i32 -516613248, i32 -520654409, i32 -491663378, i32 -478960167, i32 -432229540, i32 -402728597, i32 -440899790, i32 -461763323, i32 -282703304, i32 -287039473, i32 -324886954, i32 -312413087, i32 -399514908, i32 -370308909, i32 -341100918, i32 -362193731, i32 -49039120, i32 -53357881, i32 -23630690, i32 -11204951, i32 -98955220, i32 -69699045, i32 -107035582, i32 -128143755, i32 -218044088, i32 -222133377, i32 -259769050, i32 -247048431, i32 -200719980, i32 -171234397, i32 -141715974, i32 -162529331, i32 -646423200, i32 -658884777, i32 -620984050, i32 -616635591, i32 -562956868, i32 -541876341, i32 -571137582, i32 -600355867, i32 -680850216, i32 -693541137, i32 -722478922, i32 -718425471, i32 -798841852, i32 -777990605, i32 -739872662, i32 -769385891, i32 -983630320, i32 -996371417, i32 -958780802, i32 -954711991, i32 -1034463540, i32 -1013629701, i32 -1043103070, i32 -1072568171, i32 -884101208, i32 -896547425, i32 -926319674, i32 -922021391, i32 -867956876, i32 -846828221, i32 -809446630, i32 -838682323, i32 -1850763712, i32 -1871840137, i32 -1842658770, i32 -1813436391, i32 -1767489892, i32 -1755032405, i32 -1792873742, i32 -1797226299, i32 -1615017992, i32 -1635865137, i32 -1674046570, i32 -1644529247, i32 -1732939996, i32 -1720253165, i32 -1691239606, i32 -1695297155, i32 -1920387792, i32 -1941217529, i32 -1911692962, i32 -1882223767, i32 -1971282452, i32 -1958545445, i32 -1996207742, i32 -2000280651, i32 -2087033720, i32 -2108158273, i32 -2145472282, i32 -2116232495, i32 -2070688684, i32 -2058246557, i32 -2028529606, i32 -2032831987, i32 -1444753248, i32 -1474250089, i32 -1436154674, i32 -1415287047, i32 -1360299908, i32 -1356262837, i32 -1385190382, i32 -1397897691, i32 -1477345000, i32 -1506546897, i32 -1535814282, i32 -1514717375, i32 -1594349116, i32 -1590017037, i32 -1552089686, i32 -1564567651, i32 -1245416496, i32 -1274668569, i32 -1237276738, i32 -1216164471, i32 -1295131892, i32 -1290817221, i32 -1320611998, i32 -1333041835, i32 -1143528856, i32 -1173010337, i32 -1202457082, i32 -1181639631, i32 -1126266188, i32 -1122180989, i32 -1084596518, i32 -1097321235], [256 x i32] [i32 0, i32 -1195612315, i32 -1442199413, i32 313896942, i32 -1889364137, i32 937357362, i32 627793884, i32 -1646839623, i32 -978048785, i32 2097696650, i32 1874714724, i32 -687765759, i32 1255587768, i32 -227878691, i32 -522225869, i32 1482887254, i32 1343838111, i32 -391827206, i32 -99573996, i32 1118632049, i32 -545537848, i32 1741137837, i32 1970407491, i32 -842109146, i32 -1783791760, i32 756094997, i32 1067759611, i32 -2028416866, i32 449832999, i32 -1569484990, i32 -1329192788, i32 142231497, i32 -1607291074, i32 412010587, i32 171665333, i32 -1299775280, i32 793786473, i32 -1746116852, i32 -2057703198, i32 1038456711, i32 1703315409, i32 -583343948, i32 -812691622, i32 1999841343, i32 -354152314, i32 1381529571, i32 1089329165, i32 -128860312, i32 -265553759, i32 1217896388, i32 1512189994, i32 -492939441, i32 2135519222, i32 -940242797, i32 -717183107, i32 1845280792, i32 899665998, i32 -1927039189, i32 -1617553211, i32 657096608, i32 -1157806311, i32 37822588, i32 284462994, i32 -1471616777, i32 -1693165507, i32 598228824, i32 824021174, i32 -1985873965, i32 343330666, i32 -1396004849, i32 -1098971167, i32 113467524, i32 1587572946, i32 -434366537, i32 -190203815, i32 1276501820, i32 -775755899, i32 1769898208, i32 2076913422, i32 -1015592853, i32 -888336478, i32 1941006535, i32 1627703081, i32 -642211764, i32 1148164341, i32 -53215344, i32 -295284610, i32 1457141531, i32 247015245, i32 -1241169880, i32 -1531908154, i32 470583459, i32 -2116308966, i32 963106687, i32 735213713, i32 -1821499404, i32 992409347, i32 -2087022490, i32 -1859174520, i32 697522413, i32 -1270587308, i32 217581361, i32 508405983, i32 -1494102086, i32 -23928852, i32 1177467017, i32 1419450215, i32 -332959742, i32 1911572667, i32 -917753890, i32 -604405712, i32 1665525589, i32 1799331996, i32 -746338311, i32 -1053399017, i32 2039091058, i32 -463652917, i32 1558270126, i32 1314193216, i32 -152528859, i32 -1366587277, i32 372764438, i32 75645176, i32 -1136777315, i32 568925988, i32 -1722451903, i32 -1948198993, i32 861712586, i32 -312887749, i32 1441124702, i32 1196457648, i32 -1304107, i32 1648042348, i32 -628668919, i32 -936187417, i32 1888390786, i32 686661332, i32 -1873675855, i32 -2098964897, i32 978858298, i32 -1483798141, i32 523464422, i32 226935048, i32 -1254447507, i32 -1119821404, i32 100435649, i32 390670639, i32 -1342878134, i32 841119475, i32 -1969352298, i32 -1741963656, i32 546822429, i32 2029308235, i32 -1068978642, i32 -755170880, i32 1782671013, i32 -141140452, i32 1328167289, i32 1570739863, i32 -450629134, i32 1298864389, i32 -170426784, i32 -412954226, i32 1608431339, i32 -1039561134, i32 2058742071, i32 1744848601, i32 -792976964, i32 -1998638614, i32 811816591, i32 584513889, i32 -1704288764, i32 129869501, i32 -1090403880, i32 -1380684234, i32 352848211, i32 494030490, i32 -1513215489, i32 -1216641519, i32 264757620, i32 -1844389427, i32 715964072, i32 941166918, i32 -2136639965, i32 -658086283, i32 1618608400, i32 1926213374, i32 -898381413, i32 1470427426, i32 -283601337, i32 -38979159, i32 1158766284, i32 1984818694, i32 -823031453, i32 -599513459, i32 1693991400, i32 -114329263, i32 1100160564, i32 1395044826, i32 -342174017, i32 -1275476247, i32 189112716, i32 435162722, i32 -1588827897, i32 1016811966, i32 -2077804837, i32 -1768777419, i32 774831696, i32 643086745, i32 -1628905732, i32 -1940033262, i32 887166583, i32 -1456066866, i32 294275499, i32 54519365, i32 -1149009632, i32 -471821962, i32 1532818963, i32 1240029693, i32 -246071656, i32 1820460577, i32 -734109372, i32 -963916118, i32 2117577167, i32 -696303304, i32 1858283101, i32 2088143283, i32 -993333546, i32 1495127663, i32 -509497078, i32 -216785180, i32 1269332353, i32 332098007, i32 -1418260814, i32 -1178427044, i32 25085497, i32 -1666580864, i32 605395429, i32 916469259, i32 -1910746770, i32 -2040129881, i32 1054503362, i32 745528876, i32 -1798063799, i32 151290352, i32 -1313282411, i32 -1559410309, i32 464596510, i32 1137851976, i32 -76654291, i32 -371460413, i32 1365741990, i32 -860837601, i32 1946996346, i32 1723425172, i32 -570095887], [256 x i32] [i32 0, i32 1029712304, i32 2059424608, i32 1201699536, i32 -176118080, i32 -924807312, i32 -1891568224, i32 -1306469360, i32 812665793, i32 219177585, i32 1253054625, i32 2010132753, i32 -974066431, i32 -124730191, i32 -1087324575, i32 -2108647471, i32 1625331586, i32 1568718386, i32 438355170, i32 658566482, i32 -1788858046, i32 -1476388622, i32 -274701790, i32 -759149678, i32 1351670851, i32 1844508147, i32 709922595, i32 389064339, i32 -1525646717, i32 -1737469133, i32 -540005917, i32 -491782061, i32 -1044304124, i32 -56555852, i32 -1157530524, i32 -2040441388, i32 876710340, i32 153198708, i32 1317132964, i32 1944187668, i32 -240032571, i32 -858698379, i32 -1955514459, i32 -1240392171, i32 70369797, i32 961670069, i32 2129760613, i32 1133623509, i32 -1591625594, i32 -1673424586, i32 -605951002, i32 -427703722, i32 1419845190, i32 1774270454, i32 778128678, i32 318858390, i32 -1856900281, i32 -1406018825, i32 -342777817, i32 -688813673, i32 1691440519, i32 1504803895, i32 504432359, i32 594620247, i32 1492342857, i32 1704161785, i32 573770537, i32 525542041, i32 -1384907127, i32 -1877747911, i32 -676090391, i32 -355236775, i32 1753420680, i32 1440954936, i32 306397416, i32 790849880, i32 -1660701368, i32 -1604084488, i32 -406591960, i32 -626798696, i32 940822475, i32 91481723, i32 1121164459, i32 2142483739, i32 -845977333, i32 -252493637, i32 -1219282325, i32 -1976364069, i32 140739594, i32 889433530, i32 1923340138, i32 1338244826, i32 -35446070, i32 -1065153670, i32 -2027720278, i32 -1169991654, i32 -1724745907, i32 -1538105603, i32 -470670291, i32 -560853603, i32 1823658381, i32 1372780605, i32 376603373, i32 722643805, i32 -1455276916, i32 -1809705668, i32 -746426388, i32 -287160740, i32 1556257356, i32 1638052860, i32 637716780, i32 459464860, i32 -103620401, i32 -994915969, i32 -2095926353, i32 -1099785697, i32 206718479, i32 825388991, i32 1989285231, i32 1274166495, i32 -912086258, i32 -188579138, i32 -1285359506, i32 -1912417826, i32 1008864718, i32 21111934, i32 1189240494, i32 2072147742, i32 -1310281582, i32 -1937336030, i32 -886643726, i32 -163132862, i32 1147541074, i32 2030452706, i32 1051084082, i32 63335554, i32 -2120811693, i32 -1124674845, i32 -78206925, i32 -969506429, i32 1947622803, i32 1232499747, i32 248909555, i32 867575619, i32 -788125936, i32 -328855904, i32 -1413057424, i32 -1767481920, i32 612794832, i32 434546784, i32 1581699760, i32 1663499008, i32 -512332591, i32 -602520223, i32 -1682554959, i32 -1495919103, i32 351717905, i32 697754529, i32 1849071985, i32 1398190273, i32 1881644950, i32 1296545318, i32 182963446, i32 931652934, i32 -2052638378, i32 -1194913562, i32 -9999818, i32 -1039711354, i32 1079497815, i32 2100821479, i32 983009079, i32 133672583, i32 -1244171625, i32 -2001249497, i32 -820567561, i32 -227080121, i32 281479188, i32 765927844, i32 1778867060, i32 1466397380, i32 -448287020, i32 -668498076, i32 -1618477644, i32 -1561865212, i32 548881365, i32 500656741, i32 1517752501, i32 1729575173, i32 -717757163, i32 -396899163, i32 -1342720395, i32 -1835556923, i32 -384440101, i32 -730480277, i32 -1814709317, i32 -1363832309, i32 479546907, i32 569730987, i32 1716854139, i32 1530213579, i32 -647650534, i32 -469398870, i32 -1549406086, i32 -1631200822, i32 753206746, i32 293940330, i32 1445287610, i32 1799716618, i32 -1980399783, i32 -1265281303, i32 -214619079, i32 -833288823, i32 2088098201, i32 1091956777, i32 112560889, i32 1003856713, i32 -1182452584, i32 -2065359576, i32 -1018861576, i32 -31109560, i32 1275433560, i32 1902492648, i32 918929720, i32 195422344, i32 685033439, i32 364179055, i32 1377080511, i32 1869921551, i32 -581672673, i32 -533444433, i32 -1483459969, i32 -1695278129, i32 413436958, i32 633644462, i32 1650777982, i32 1594160846, i32 -316396834, i32 -800849042, i32 -1746634306, i32 -1434169330, i32 1211387997, i32 1968470509, i32 854852413, i32 261368461, i32 -1112213859, i32 -2133532883, i32 -948656643, i32 -99316659, i32 2017729436, i32 1160000044, i32 42223868, i32 1071931724, i32 -1916486308, i32 -1331391252, i32 -150671812, i32 -899364980], [256 x i32] [i32 0, i32 -883108955, i32 1304994059, i32 -2037091666, i32 -1684979178, i32 1355649459, i32 -698752227, i32 486879416, i32 -330071443, i32 655315400, i32 -1583668378, i32 1791488195, i32 2009251963, i32 -1130490914, i32 973758832, i32 -245976363, i32 64357019, i32 -930426562, i32 1310630800, i32 -2059243467, i32 -1740160883, i32 1394316072, i32 -711990906, i32 517157411, i32 -276463370, i32 618222419, i32 -1572003331, i32 1762783832, i32 1947517664, i32 -1085796027, i32 970744811, i32 -226447282, i32 128714038, i32 -856631661, i32 1248109629, i32 -2127005800, i32 -1673705696, i32 1466012805, i32 -772413909, i32 447296910, i32 -335575205, i32 547575038, i32 -1506335152, i32 1835791861, i32 1886307661, i32 -1154345240, i32 1034314822, i32 -151341085, i32 75106221, i32 -819538936, i32 1236444838, i32 -2098301693, i32 -1611971141, i32 1421317662, i32 -769399632, i32 427767573, i32 -399931968, i32 594892389, i32 -1511971637, i32 1857943406, i32 1941489622, i32 -1193012109, i32 1047553757, i32 -181619336, i32 257428076, i32 -1006315063, i32 1116777319, i32 -1983088446, i32 -1798748038, i32 1603640287, i32 -654186127, i32 308099796, i32 -485783551, i32 676813732, i32 -1362941686, i32 1704983215, i32 2023410199, i32 -1278862926, i32 894593820, i32 -32589639, i32 210634999, i32 -942482606, i32 1095150076, i32 -1977976231, i32 -1759556895, i32 1547934020, i32 -623383574, i32 294336591, i32 -522351974, i32 729897279, i32 -1391121519, i32 1716123700, i32 2068629644, i32 -1341121751, i32 914647431, i32 -36128222, i32 150212442, i32 -1012343553, i32 1161604689, i32 -1906278924, i32 -1822077620, i32 1480171241, i32 -559027129, i32 368132066, i32 -458781385, i32 805002898, i32 -1452331972, i32 1647574937, i32 2134298401, i32 -1268114300, i32 855535146, i32 -106775153, i32 186781121, i32 -1065427356, i32 1189784778, i32 -1917419665, i32 -1867296809, i32 1542429810, i32 -579080484, i32 371670393, i32 -411988052, i32 741170185, i32 -1430704473, i32 1642462466, i32 2095107514, i32 -1212408289, i32 824732849, i32 -93012204, i32 514856152, i32 -705902723, i32 1400419795, i32 -1742444938, i32 -2061412658, i32 1316849003, i32 -924190779, i32 62202976, i32 -219965771, i32 968836368, i32 -1087686722, i32 1954014235, i32 1769133219, i32 -1574041850, i32 616199592, i32 -270096883, i32 493229635, i32 -700791322, i32 1353627464, i32 -1678613267, i32 -2030611371, i32 1303087088, i32 -885000866, i32 6498043, i32 -248146898, i32 979978123, i32 -1124256475, i32 2007099008, i32 1789187640, i32 -1577581155, i32 661419827, i32 -332356458, i32 421269998, i32 -767507893, i32 1423225061, i32 -1618451648, i32 -2104667144, i32 1238466653, i32 -817499405, i32 68755798, i32 -179334269, i32 1041448998, i32 -1199099256, i32 1943789869, i32 1860096405, i32 -1518206416, i32 588673182, i32 -397761733, i32 449450869, i32 -778649392, i32 1459794558, i32 -1671536165, i32 -2124721821, i32 1242006214, i32 -862719896, i32 131015629, i32 -157708008, i32 1036337853, i32 -1152307181, i32 1879958454, i32 1829294862, i32 -1504444245, i32 549483013, i32 -342056544, i32 300424884, i32 -625685231, i32 1545650111, i32 -1753453542, i32 -1971757918, i32 1092980487, i32 -944636503, i32 216870412, i32 -38036263, i32 921128828, i32 -1334624814, i32 2066738807, i32 1714085583, i32 -1384772246, i32 736264132, i32 -524374943, i32 306060335, i32 -647835766, i32 1610005796, i32 -1800769919, i32 -1984995783, i32 1123257756, i32 -999817422, i32 255536279, i32 -26370494, i32 892423655, i32 -1281015991, i32 2029645036, i32 1711070292, i32 -1365241871, i32 674528607, i32 -479678726, i32 373562242, i32 -585578457, i32 1535949449, i32 -1865389780, i32 -1915397740, i32 1183418929, i32 -1071777633, i32 188820282, i32 -99116561, i32 827017802, i32 -1210107676, i32 2089020225, i32 1636228089, i32 -1428551588, i32 743340786, i32 -418207401, i32 361896217, i32 -556873028, i32 1482340370, i32 -1828295753, i32 -1912382705, i32 1163888810, i32 -1010042364, i32 144124321, i32 -104752268, i32 849168593, i32 -1274463617, i32 2136336858, i32 1649465698, i32 -1458828601, i32 798521449, i32 -456873012], [256 x i32] [i32 0, i32 -1502147660, i32 -1751183063, i32 837294749, i32 -196140013, i32 1379413927, i32 1674589498, i32 -978895218, i32 871321191, i32 -1785182765, i32 -1536139442, i32 34034938, i32 -945788300, i32 1641505216, i32 1346337629, i32 -163024663, i32 1742642382, i32 -1045850246, i32 -264139289, i32 1446413907, i32 -1819166499, i32 904311657, i32 68069876, i32 -1569086912, i32 1412551337, i32 -230237923, i32 -1011956864, i32 1708771380, i32 -1602292038, i32 101317902, i32 937551763, i32 -1852380121, i32 -809682532, i32 1774858792, i32 1478633653, i32 -27974911, i32 1005723023, i32 -1652222405, i32 -1402139482, i32 169477906, i32 -61704197, i32 1512406095, i32 1808623314, i32 -843420314, i32 136139752, i32 -1368762276, i32 -1618853183, i32 972376437, i32 -1469864622, i32 236236518, i32 1073525883, i32 -1718894641, i32 1546420545, i32 -94663947, i32 -877424536, i32 1841601500, i32 -1685263563, i32 1039917185, i32 202635804, i32 -1436225112, i32 1875103526, i32 -910900078, i32 -128131569, i32 1579931067, i32 1141601657, i32 -495157555, i32 -745249712, i32 1977839588, i32 -1337699990, i32 372464350, i32 668680259, i32 -2119414793, i32 2011446046, i32 -778882902, i32 -528799177, i32 1175200131, i32 -2085937395, i32 635180217, i32 338955812, i32 -1304230512, i32 601221559, i32 -2052922877, i32 -1270155106, i32 306049834, i32 -677720668, i32 1911408144, i32 1074125965, i32 -428681415, i32 272279504, i32 -1236423580, i32 -2019182855, i32 567459149, i32 -462060605, i32 1107462263, i32 1944752874, i32 -711091874, i32 -1950987035, i32 767641425, i32 472473036, i32 -1168222600, i32 2147051766, i32 -644979902, i32 -395937313, i32 1309766251, i32 -1202126206, i32 506333494, i32 801510315, i32 -1984882657, i32 1276520081, i32 -362730203, i32 -611764296, i32 2113813516, i32 -328675285, i32 1243601823, i32 2079834370, i32 -578762058, i32 405271608, i32 -1101987956, i32 -1883708143, i32 701492901, i32 -544760244, i32 2045810168, i32 1209569125, i32 -294681391, i32 734575199, i32 -1916816917, i32 -1135105162, i32 438345922, i32 -2011763982, i32 778166598, i32 529136603, i32 -1174474641, i32 2086260449, i32 -634469035, i32 -339288120, i32 1303499900, i32 -1141267307, i32 495890209, i32 744928700, i32 -1978548728, i32 1337360518, i32 -373191886, i32 -668364369, i32 2120129051, i32 -272075204, i32 1237286280, i32 2018993941, i32 -568300383, i32 461853231, i32 -1108321893, i32 -1944567034, i32 711936178, i32 -601409445, i32 2052076527, i32 1270360434, i32 -305192250, i32 677911624, i32 -1910564868, i32 -1074328223, i32 427820757, i32 1202443118, i32 -505620262, i32 -801848761, i32 1984154099, i32 -1276840067, i32 362020041, i32 612099668, i32 -2113081888, i32 1950653705, i32 -768371011, i32 -472151008, i32 1168934804, i32 -2146715366, i32 645706414, i32 395618355, i32 -1310481529, i32 544559008, i32 -2046671852, i32 -1209377143, i32 295523645, i32 -734368845, i32 1917673479, i32 1134918298, i32 -439193298, i32 328860103, i32 -1242756493, i32 -2080042770, i32 577903450, i32 -405461548, i32 1101147744, i32 1883911421, i32 -700629175, i32 -870473845, i32 1785369663, i32 1535282850, i32 -34241258, i32 944946072, i32 -1641697236, i32 -1345475919, i32 163225861, i32 -863764, i32 1501944408, i32 1752023237, i32 -837104783, i32 196998655, i32 -1379205557, i32 -1675434794, i32 978710370, i32 -1413283003, i32 229902577, i32 1012666988, i32 -1708451368, i32 1603020630, i32 -100979486, i32 -938264961, i32 1852063179, i32 -1741927134, i32 1046169238, i32 263412747, i32 -1446750273, i32 1818454321, i32 -904633723, i32 -67340264, i32 1569420204, i32 60859927, i32 -1512591965, i32 -1807763650, i32 843627658, i32 -135298556, i32 1368951216, i32 1617990445, i32 -972580711, i32 810543216, i32 -1774656572, i32 -1479476903, i32 27783917, i32 -1006580637, i32 1652017111, i32 1402985802, i32 -169289986, i32 1685994201, i32 -1039584915, i32 -203346960, i32 1435902020, i32 -1875829046, i32 910562686, i32 128847843, i32 -1579613097, i32 1469150398, i32 -236552438, i32 -1072798313, i32 1719234083, i32 -1545711443, i32 94984985, i32 876691844, i32 -1841935824], [256 x i32] [i32 0, i32 -861273954, i32 1109723005, i32 -1903228957, i32 -2075521286, i32 1222643300, i32 -965801593, i32 180685081, i32 -739959883, i32 525277995, i32 -1849680696, i32 1567235158, i32 1471092047, i32 -1694165551, i32 361370162, i32 -652209492, i32 2092642603, i32 -1341050443, i32 1050555990, i32 -231459128, i32 -118407215, i32 878395215, i32 -1160496980, i32 1987983410, i32 -1352783202, i32 1676945920, i32 -310694429, i32 567356797, i32 722740324, i32 -406969094, i32 1764827929, i32 -1516559481, i32 -109682090, i32 903635656, i32 -1152162517, i32 2012833205, i32 2101111980, i32 -1315541966, i32 1058630609, i32 -206345393, i32 714308067, i32 -432440963, i32 1756790430, i32 -1541636608, i32 -1361479911, i32 1651734407, i32 -319000476, i32 542535930, i32 -2050141315, i32 1231508451, i32 -941075456, i32 188896414, i32 25648519, i32 -852665063, i32 1134713594, i32 -1895277980, i32 1445480648, i32 -1702737834, i32 336416693, i32 -660123861, i32 -765311438, i32 516441772, i32 -1874378417, i32 1559052753, i32 698204909, i32 -449330573, i32 1807271312, i32 -1491942130, i32 -1378366441, i32 1635634313, i32 -269300886, i32 593021940, i32 -92743336, i32 919787974, i32 -1201807835, i32 1962401467, i32 2117261218, i32 -1298606276, i32 1008193759, i32 -255995839, i32 1428616134, i32 -1718815912, i32 386135227, i32 -609618907, i32 -781386436, i32 499580322, i32 -1823868351, i32 1608776415, i32 -2033981325, i32 1248454893, i32 -991498482, i32 139259792, i32 42591881, i32 -836508137, i32 1085071860, i32 -1945706134, i32 -789864261, i32 474062885, i32 -1831950394, i32 1583654744, i32 1419882049, i32 -1744064801, i32 377792828, i32 -634476126, i32 51297038, i32 -811287664, i32 1093385331, i32 -1920877331, i32 -2025540108, i32 1273935210, i32 -983453047, i32 164344343, i32 -1404006000, i32 1627033870, i32 -294283539, i32 585078387, i32 672833386, i32 -458186764, i32 1782552599, i32 -1500145527, i32 2142603813, i32 -1289778501, i32 1032883544, i32 -247820858, i32 -67140385, i32 928351297, i32 -1176861790, i32 1970307900, i32 1396409818, i32 -1617853116, i32 287212199, i32 -575372743, i32 -680424672, i32 467372990, i32 -1789621155, i32 1509854403, i32 -2132894097, i32 1282711281, i32 -1023698670, i32 240228748, i32 76845205, i32 -935423989, i32 1186043880, i32 -1977903242, i32 796964081, i32 -483740561, i32 1839575948, i32 -1592806638, i32 -1412777461, i32 1734392469, i32 -370164362, i32 625327592, i32 -60444860, i32 818917338, i32 -1103058887, i32 1927981223, i32 2016387518, i32 -1266310880, i32 973776579, i32 -157243811, i32 -1437735028, i32 1726474002, i32 -395779855, i32 616751215, i32 772270454, i32 -491918872, i32 1814228491, i32 -1601638763, i32 2041117753, i32 -1258095449, i32 999160644, i32 -148374566, i32 -35458365, i32 826864221, i32 -1077414466, i32 1936586016, i32 -688466265, i32 442291769, i32 -1798057510, i32 1484378436, i32 1388107869, i32 -1642669885, i32 278519584, i32 -600580162, i32 85183762, i32 -910570100, i32 1194773103, i32 -1952658703, i32 -2124823576, i32 1307820918, i32 -1015233387, i32 265733131, i32 2057717559, i32 -1240709207, i32 948125770, i32 -198623020, i32 -18069043, i32 843467091, i32 -1127657808, i32 1885556270, i32 -1455203198, i32 1709792284, i32 -345613313, i32 667704161, i32 755585656, i32 -509390106, i32 1865176325, i32 -1551477349, i32 102594076, i32 -893946238, i32 1144549729, i32 -2003668481, i32 -2108196634, i32 1325234296, i32 -1066238053, i32 215514885, i32 -705139287, i32 424832311, i32 -1747096876, i32 1534552650, i32 1370645331, i32 -1659345971, i32 328688686, i32 -549624656, i32 -2083510943, i32 1333405183, i32 -1040899556, i32 224338562, i32 127544219, i32 -886035707, i32 1170156774, i32 -1995101064, i32 1345666772, i32 -1667285430, i32 303053225, i32 -558221001, i32 -729862098, i32 416624816, i32 -1772472493, i32 1525692365, i32 -9759670, i32 868291796, i32 -1118956745, i32 1910772649, i32 2065767088, i32 -1215620562, i32 956571085, i32 -173138605, i32 747507711, i32 -534507679, i32 1856702594, i32 -1576990692, i32 -1463549691, i32 1684930971, i32 -354351496, i32 642451174]]
@src.tag_show_text = internal global [3 x %..string] [%..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$12", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$13", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$14", i64 0, i64 0), i64 4 }]
@"csbs$12" = private unnamed_addr constant [13 x i8] c"Text & Color\00", align 1
@"csbs$13" = private unnamed_addr constant [6 x i8] c"Color\00", align 1
@"csbs$14" = private unnamed_addr constant [5 x i8] c"None\00", align 1
@fmt._user_formatters = internal global { { i64*, i64 }, { i8*, i64, i64, %runtime.Allocator } }* null
@src.theme = internal global %src.Theme { [3 x [4 x i8]] [[4 x i8] c"\C8\C8\C8\FF", [4 x i8] c"\DC\DC\DC\FF", [4 x i8] c"\F0\F0\F0\FF"], [3 x [4 x i8]] [[4 x i8] c"\E6\E6\E6\FF", [4 x i8] c"\FFdd\FF", [4 x i8] c"\FF\FF\FF\FF"], [4 x i8] c"\00\00\00\FF", [4 x i8] c"\19\C8\19\FF", [4 x i8] c"\C8\19\19\FF", [4 x i8] c"KKK\FF", [4 x i8] c"\00\00\00\FF", [4 x i8] c"\00\00\FF\FF", [4 x i8] c"\FF\00\00\FF", [4 x i8] c"\00\FF\00\FF", [8 x [4 x i8]] [[4 x i8] c"\FF\00\00\FF", [4 x i8] c"\FF\BF\00\FF", [4 x i8] c"\7F\FF\00\FF", [4 x i8] c"\00\FF#\FF", [4 x i8] c"\00\FF\FF\FF", [4 x i8] c"\FF\00\BF\FF", [4 x i8] c"\C7c\00\FF", [4 x i8] c"\C7c\00\FF"] }
@rand.global_rand-3738 = internal global %rand.Rand zeroinitializer
@strings._builder_stream_vtable-1811 = internal global %io.Stream_VTable* @"ggv$7d"
@unicode.char_properties = internal global [256 x i8] c
@os._file_stream_vtable-1647 = internal global %io.Stream_VTable* @"ggv$7f"
@"csbs$15" = private unnamed_addr constant [5 x i8] c"sdl2\00", align 1
@"csbs$16" = private unnamed_addr constant [63 x i8] c"/home/skytrias/Schreibtisch/Odin/vendor/sdl2/sdl_scancode.odin\00", align 1
@"csbs$17" = private unnamed_addr constant [9 x i8] c"Scancode\00", align 1
@"ggv$0" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$17", i64 0, i64 0), i64 8 }, %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 207), %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$15", i64 0, i64 0), i64 4 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([63 x i8], [63 x i8]* @"csbs$16", i64 0, i64 0), i64 62 }, i32 5, i32 1, %..string zeroinitializer } }
@"$enum_names-207" = private unnamed_addr global [244 x %..string] [%..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$18", i64 0, i64 0), i64 7 }, %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$19", i64 0, i64 0), i64 1 }, %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$1a", i64 0, i64 0), i64 1 }, %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$1b", i64 0, i64 0), i64 1 }, %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$1c", i64 0, i64 0), i64 1 }, %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$1d", i64 0, i64 0), i64 1 }, %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$1e", i64 0, i64 0), i64 1 }, %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$1f", i64 0, i64 0), i64 1 }, %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$20", i64 0, i64 0), i64 1 }, %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$21", i64 0, i64 0), i64 1 }, %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$22", i64 0, i64 0), i64 1 }, %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$23", i64 0, i64 0), i64 1 }, %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$24", i64 0, i64 0), i64 1 }, %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$25", i64 0, i64 0), i64 1 }, %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$26", i64 0, i64 0), i64 1 }, %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$27", i64 0, i64 0), i64 1 }, %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$28", i64 0, i64 0), i64 1 }, %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$29", i64 0, i64 0), i64 1 }, %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$2a", i64 0, i64 0), i64 1 }, %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$2b", i64 0, i64 0), i64 1 }, %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$2c", i64 0, i64 0), i64 1 }, %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$2d", i64 0, i64 0), i64 1 }, %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$2e", i64 0, i64 0), i64 1 }, %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$2f", i64 0, i64 0), i64 1 }, %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$30", i64 0, i64 0), i64 1 }, %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$31", i64 0, i64 0), i64 1 }, %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$32", i64 0, i64 0), i64 1 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$33", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$34", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$35", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$36", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$37", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$38", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$39", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$3a", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$3b", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$3c", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$3d", i64 0, i64 0), i64 6 }, %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$3e", i64 0, i64 0), i64 6 }, %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$3f", i64 0, i64 0), i64 9 }, %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$40", i64 0, i64 0), i64 3 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$41", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$42", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$43", i64 0, i64 0), i64 6 }, %..string { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"csbs$44", i64 0, i64 0), i64 11 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$45", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$46", i64 0, i64 0), i64 9 }, %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$47", i64 0, i64 0), i64 9 }, %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$48", i64 0, i64 0), i64 9 }, %..string { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"csbs$49", i64 0, i64 0), i64 10 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$4a", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$4b", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$4c", i64 0, i64 0), i64 6 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$4d", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$4e", i64 0, i64 0), i64 8 }, %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$4f", i64 0, i64 0), i64 2 }, %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$50", i64 0, i64 0), i64 2 }, %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$51", i64 0, i64 0), i64 2 }, %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$52", i64 0, i64 0), i64 2 }, %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$53", i64 0, i64 0), i64 2 }, %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$54", i64 0, i64 0), i64 2 }, %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$55", i64 0, i64 0), i64 2 }, %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$56", i64 0, i64 0), i64 2 }, %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$57", i64 0, i64 0), i64 2 }, %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$58", i64 0, i64 0), i64 3 }, %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$59", i64 0, i64 0), i64 3 }, %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$5a", i64 0, i64 0), i64 3 }, %..string { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"csbs$5b", i64 0, i64 0), i64 11 }, %..string { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"csbs$5c", i64 0, i64 0), i64 10 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$5d", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$5e", i64 0, i64 0), i64 6 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$5f", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$60", i64 0, i64 0), i64 6 }, %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$61", i64 0, i64 0), i64 6 }, %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$62", i64 0, i64 0), i64 3 }, %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$63", i64 0, i64 0), i64 8 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$64", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$65", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$66", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$67", i64 0, i64 0), i64 2 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$68", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$69", i64 0, i64 0), i64 9 }, %..string { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"csbs$6a", i64 0, i64 0), i64 11 }, %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$6b", i64 0, i64 0), i64 8 }, %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$6c", i64 0, i64 0), i64 7 }, %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$6d", i64 0, i64 0), i64 8 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$6e", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$6f", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$70", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$71", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$72", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$73", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$74", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$75", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$76", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$77", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$78", i64 0, i64 0), i64 9 }, %..string { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"csbs$79", i64 0, i64 0), i64 14 }, %..string { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"csbs$7a", i64 0, i64 0), i64 11 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$7b", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$7c", i64 0, i64 0), i64 9 }, %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$7d", i64 0, i64 0), i64 3 }, %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$7e", i64 0, i64 0), i64 3 }, %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$7f", i64 0, i64 0), i64 3 }, %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$80", i64 0, i64 0), i64 3 }, %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$81", i64 0, i64 0), i64 3 }, %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$82", i64 0, i64 0), i64 3 }, %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$83", i64 0, i64 0), i64 3 }, %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$84", i64 0, i64 0), i64 3 }, %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$85", i64 0, i64 0), i64 3 }, %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$86", i64 0, i64 0), i64 3 }, %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$87", i64 0, i64 0), i64 3 }, %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$88", i64 0, i64 0), i64 3 }, %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$89", i64 0, i64 0), i64 7 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$8a", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$8b", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$8c", i64 0, i64 0), i64 6 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$8d", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$8e", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$8f", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$90", i64 0, i64 0), i64 3 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$91", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$92", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$93", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$94", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$95", i64 0, i64 0), i64 8 }, %..string { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"csbs$96", i64 0, i64 0), i64 10 }, %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$97", i64 0, i64 0), i64 8 }, %..string { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"csbs$98", i64 0, i64 0), i64 14 }, %..string { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"csbs$99", i64 0, i64 0), i64 14 }, %..string { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"csbs$9a", i64 0, i64 0), i64 14 }, %..string { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"csbs$9b", i64 0, i64 0), i64 14 }, %..string { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"csbs$9c", i64 0, i64 0), i64 14 }, %..string { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"csbs$9d", i64 0, i64 0), i64 14 }, %..string { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"csbs$9e", i64 0, i64 0), i64 14 }, %..string { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"csbs$9f", i64 0, i64 0), i64 14 }, %..string { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"csbs$a0", i64 0, i64 0), i64 14 }, %..string { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"csbs$a1", i64 0, i64 0), i64 14 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$a2", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$a3", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$a4", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$a5", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$a6", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$a7", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$a8", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$a9", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$aa", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$ab", i64 0, i64 0), i64 8 }, %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$ac", i64 0, i64 0), i64 6 }, %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$ad", i64 0, i64 0), i64 6 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$ae", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$af", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$b0", i64 0, i64 0), i64 7 }, %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$b1", i64 0, i64 0), i64 9 }, %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$b2", i64 0, i64 0), i64 3 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$b3", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"csbs$b4", i64 0, i64 0), i64 10 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$b5", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$b6", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$b7", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$b8", i64 0, i64 0), i64 6 }, %..string { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @"csbs$b9", i64 0, i64 0), i64 18 }, %..string { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"csbs$ba", i64 0, i64 0), i64 16 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$bb", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @"csbs$bc", i64 0, i64 0), i64 15 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$bd", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @"csbs$be", i64 0, i64 0), i64 13 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$bf", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @"csbs$c0", i64 0, i64 0), i64 13 }, %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$c1", i64 0, i64 0), i64 6 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$c2", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$c3", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$c4", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$c5", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$c6", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$c7", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$c8", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$c9", i64 0, i64 0), i64 6 }, %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$ca", i64 0, i64 0), i64 8 }, %..string { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"csbs$cb", i64 0, i64 0), i64 10 }, %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$cc", i64 0, i64 0), i64 7 }, %..string { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"csbs$cd", i64 0, i64 0), i64 10 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$ce", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @"csbs$cf", i64 0, i64 0), i64 15 }, %..string { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"csbs$d0", i64 0, i64 0), i64 14 }, %..string { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @"csbs$d1", i64 0, i64 0), i64 17 }, %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$d2", i64 0, i64 0), i64 8 }, %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$d3", i64 0, i64 0), i64 7 }, %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$d4", i64 0, i64 0), i64 8 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$d5", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$d6", i64 0, i64 0), i64 9 }, %..string { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"csbs$d7", i64 0, i64 0), i64 11 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$d8", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"csbs$d9", i64 0, i64 0), i64 11 }, %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$da", i64 0, i64 0), i64 9 }, %..string { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"csbs$db", i64 0, i64 0), i64 14 }, %..string { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"csbs$dc", i64 0, i64 0), i64 14 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$dd", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$de", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$df", i64 0, i64 0), i64 8 }, %..string { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @"csbs$e0", i64 0, i64 0), i64 13 }, %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$e1", i64 0, i64 0), i64 9 }, %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$e2", i64 0, i64 0), i64 8 }, %..string { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"csbs$e3", i64 0, i64 0), i64 10 }, %..string { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"csbs$e4", i64 0, i64 0), i64 14 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$e5", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$e6", i64 0, i64 0), i64 6 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$e7", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$e8", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$e9", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$ea", i64 0, i64 0), i64 6 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$eb", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$ec", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$ed", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$ee", i64 0, i64 0), i64 9 }, %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$ef", i64 0, i64 0), i64 9 }, %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$f0", i64 0, i64 0), i64 9 }, %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$f1", i64 0, i64 0), i64 9 }, %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$f2", i64 0, i64 0), i64 9 }, %..string { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"csbs$f3", i64 0, i64 0), i64 11 }, %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$f4", i64 0, i64 0), i64 3 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$f5", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"csbs$f6", i64 0, i64 0), i64 10 }, %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$f7", i64 0, i64 0), i64 8 }, %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$f8", i64 0, i64 0), i64 9 }, %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$f9", i64 0, i64 0), i64 7 }, %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$fa", i64 0, i64 0), i64 7 }, %..string { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"csbs$fb", i64 0, i64 0), i64 10 }, %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$fc", i64 0, i64 0), i64 7 }, %..string { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"csbs$fd", i64 0, i64 0), i64 10 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$fe", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"csbs$ff", i64 0, i64 0), i64 14 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$100", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @"csbs$101", i64 0, i64 0), i64 13 }, %..string { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"csbs$102", i64 0, i64 0), i64 14 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$103", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"csbs$104", i64 0, i64 0), i64 10 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$105", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$106", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$107", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$108", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"csbs$109", i64 0, i64 0), i64 11 }, %..string { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"csbs$10a", i64 0, i64 0), i64 16 }, %..string { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @"csbs$10b", i64 0, i64 0), i64 13 }]
@"$enum_values-207" = private unnamed_addr global [244 x i64] [i64 0, i64 4, i64 5, i64 6, i64 7, i64 8, i64 9, i64 10, i64 11, i64 12, i64 13, i64 14, i64 15, i64 16, i64 17, i64 18, i64 19, i64 20, i64 21, i64 22, i64 23, i64 24, i64 25, i64 26, i64 27, i64 28, i64 29, i64 30, i64 31, i64 32, i64 33, i64 34, i64 35, i64 36, i64 37, i64 38, i64 39, i64 40, i64 41, i64 42, i64 43, i64 44, i64 45, i64 46, i64 47, i64 48, i64 49, i64 50, i64 51, i64 52, i64 53, i64 54, i64 55, i64 56, i64 57, i64 58, i64 59, i64 60, i64 61, i64 62, i64 63, i64 64, i64 65, i64 66, i64 67, i64 68, i64 69, i64 70, i64 71, i64 72, i64 73, i64 74, i64 75, i64 76, i64 77, i64 78, i64 79, i64 80, i64 81, i64 82, i64 83, i64 84, i64 85, i64 86, i64 87, i64 88, i64 89, i64 90, i64 91, i64 92, i64 93, i64 94, i64 95, i64 96, i64 97, i64 98, i64 99, i64 100, i64 101, i64 102, i64 103, i64 104, i64 105, i64 106, i64 107, i64 108, i64 109, i64 110, i64 111, i64 112, i64 113, i64 114, i64 115, i64 116, i64 117, i64 118, i64 119, i64 120, i64 121, i64 122, i64 123, i64 124, i64 125, i64 126, i64 127, i64 128, i64 129, i64 133, i64 134, i64 135, i64 136, i64 137, i64 138, i64 139, i64 140, i64 141, i64 142, i64 143, i64 144, i64 145, i64 146, i64 147, i64 148, i64 149, i64 150, i64 151, i64 152, i64 153, i64 154, i64 155, i64 156, i64 157, i64 158, i64 159, i64 160, i64 161, i64 162, i64 163, i64 164, i64 176, i64 177, i64 178, i64 179, i64 180, i64 181, i64 182, i64 183, i64 184, i64 185, i64 186, i64 187, i64 188, i64 189, i64 190, i64 191, i64 192, i64 193, i64 194, i64 195, i64 196, i64 197, i64 198, i64 199, i64 200, i64 201, i64 202, i64 203, i64 204, i64 205, i64 206, i64 207, i64 208, i64 209, i64 210, i64 211, i64 212, i64 213, i64 214, i64 215, i64 216, i64 217, i64 218, i64 219, i64 220, i64 221, i64 224, i64 225, i64 226, i64 227, i64 228, i64 229, i64 230, i64 231, i64 257, i64 258, i64 259, i64 260, i64 261, i64 262, i64 263, i64 264, i64 265, i64 266, i64 267, i64 268, i64 269, i64 270, i64 271, i64 272, i64 273, i64 274, i64 275, i64 276, i64 277, i64 278, i64 279, i64 280, i64 281, i64 282, i64 283, i64 284, i64 285, i64 286, i64 512]
@"csbs$18" = private unnamed_addr constant [8 x i8] c"UNKNOWN\00", align 1
@"csbs$19" = private unnamed_addr constant [2 x i8] c"A\00", align 1
@"csbs$1a" = private unnamed_addr constant [2 x i8] c"B\00", align 1
@"csbs$1b" = private unnamed_addr constant [2 x i8] c"C\00", align 1
@"csbs$1c" = private unnamed_addr constant [2 x i8] c"D\00", align 1
@"csbs$1d" = private unnamed_addr constant [2 x i8] c"E\00", align 1
@"csbs$1e" = private unnamed_addr constant [2 x i8] c"F\00", align 1
@"csbs$1f" = private unnamed_addr constant [2 x i8] c"G\00", align 1
@"csbs$20" = private unnamed_addr constant [2 x i8] c"H\00", align 1
@"csbs$21" = private unnamed_addr constant [2 x i8] c"I\00", align 1
@"csbs$22" = private unnamed_addr constant [2 x i8] c"J\00", align 1
@"csbs$23" = private unnamed_addr constant [2 x i8] c"K\00", align 1
@"csbs$24" = private unnamed_addr constant [2 x i8] c"L\00", align 1
@"csbs$25" = private unnamed_addr constant [2 x i8] c"M\00", align 1
@"csbs$26" = private unnamed_addr constant [2 x i8] c"N\00", align 1
@"csbs$27" = private unnamed_addr constant [2 x i8] c"O\00", align 1
@"csbs$28" = private unnamed_addr constant [2 x i8] c"P\00", align 1
@"csbs$29" = private unnamed_addr constant [2 x i8] c"Q\00", align 1
@"csbs$2a" = private unnamed_addr constant [2 x i8] c"R\00", align 1
@"csbs$2b" = private unnamed_addr constant [2 x i8] c"S\00", align 1
@"csbs$2c" = private unnamed_addr constant [2 x i8] c"T\00", align 1
@"csbs$2d" = private unnamed_addr constant [2 x i8] c"U\00", align 1
@"csbs$2e" = private unnamed_addr constant [2 x i8] c"V\00", align 1
@"csbs$2f" = private unnamed_addr constant [2 x i8] c"W\00", align 1
@"csbs$30" = private unnamed_addr constant [2 x i8] c"X\00", align 1
@"csbs$31" = private unnamed_addr constant [2 x i8] c"Y\00", align 1
@"csbs$32" = private unnamed_addr constant [2 x i8] c"Z\00", align 1
@"csbs$33" = private unnamed_addr constant [5 x i8] c"NUM1\00", align 1
@"csbs$34" = private unnamed_addr constant [5 x i8] c"NUM2\00", align 1
@"csbs$35" = private unnamed_addr constant [5 x i8] c"NUM3\00", align 1
@"csbs$36" = private unnamed_addr constant [5 x i8] c"NUM4\00", align 1
@"csbs$37" = private unnamed_addr constant [5 x i8] c"NUM5\00", align 1
@"csbs$38" = private unnamed_addr constant [5 x i8] c"NUM6\00", align 1
@"csbs$39" = private unnamed_addr constant [5 x i8] c"NUM7\00", align 1
@"csbs$3a" = private unnamed_addr constant [5 x i8] c"NUM8\00", align 1
@"csbs$3b" = private unnamed_addr constant [5 x i8] c"NUM9\00", align 1
@"csbs$3c" = private unnamed_addr constant [5 x i8] c"NUM0\00", align 1
@"csbs$3d" = private unnamed_addr constant [7 x i8] c"RETURN\00", align 1
@"csbs$3e" = private unnamed_addr constant [7 x i8] c"ESCAPE\00", align 1
@"csbs$3f" = private unnamed_addr constant [10 x i8] c"BACKSPACE\00", align 1
@"csbs$40" = private unnamed_addr constant [4 x i8] c"TAB\00", align 1
@"csbs$41" = private unnamed_addr constant [6 x i8] c"SPACE\00", align 1
@"csbs$42" = private unnamed_addr constant [6 x i8] c"MINUS\00", align 1
@"csbs$43" = private unnamed_addr constant [7 x i8] c"EQUALS\00", align 1
@"csbs$44" = private unnamed_addr constant [12 x i8] c"LEFTBRACKET\00", align 1
@"csbs$45" = private unnamed_addr constant [13 x i8] c"RIGHTBRACKET\00", align 1
@"csbs$46" = private unnamed_addr constant [10 x i8] c"BACKSLASH\00", align 1
@"csbs$47" = private unnamed_addr constant [10 x i8] c"NONUSHASH\00", align 1
@"csbs$48" = private unnamed_addr constant [10 x i8] c"SEMICOLON\00", align 1
@"csbs$49" = private unnamed_addr constant [11 x i8] c"APOSTROPHE\00", align 1
@"csbs$4a" = private unnamed_addr constant [6 x i8] c"GRAVE\00", align 1
@"csbs$4b" = private unnamed_addr constant [6 x i8] c"COMMA\00", align 1
@"csbs$4c" = private unnamed_addr constant [7 x i8] c"PERIOD\00", align 1
@"csbs$4d" = private unnamed_addr constant [6 x i8] c"SLASH\00", align 1
@"csbs$4e" = private unnamed_addr constant [9 x i8] c"CAPSLOCK\00", align 1
@"csbs$4f" = private unnamed_addr constant [3 x i8] c"F1\00", align 1
@"csbs$50" = private unnamed_addr constant [3 x i8] c"F2\00", align 1
@"csbs$51" = private unnamed_addr constant [3 x i8] c"F3\00", align 1
@"csbs$52" = private unnamed_addr constant [3 x i8] c"F4\00", align 1
@"csbs$53" = private unnamed_addr constant [3 x i8] c"F5\00", align 1
@"csbs$54" = private unnamed_addr constant [3 x i8] c"F6\00", align 1
@"csbs$55" = private unnamed_addr constant [3 x i8] c"F7\00", align 1
@"csbs$56" = private unnamed_addr constant [3 x i8] c"F8\00", align 1
@"csbs$57" = private unnamed_addr constant [3 x i8] c"F9\00", align 1
@"csbs$58" = private unnamed_addr constant [4 x i8] c"F10\00", align 1
@"csbs$59" = private unnamed_addr constant [4 x i8] c"F11\00", align 1
@"csbs$5a" = private unnamed_addr constant [4 x i8] c"F12\00", align 1
@"csbs$5b" = private unnamed_addr constant [12 x i8] c"PRINTSCREEN\00", align 1
@"csbs$5c" = private unnamed_addr constant [11 x i8] c"SCROLLLOCK\00", align 1
@"csbs$5d" = private unnamed_addr constant [6 x i8] c"PAUSE\00", align 1
@"csbs$5e" = private unnamed_addr constant [7 x i8] c"INSERT\00", align 1
@"csbs$5f" = private unnamed_addr constant [5 x i8] c"HOME\00", align 1
@"csbs$60" = private unnamed_addr constant [7 x i8] c"PAGEUP\00", align 1
@"csbs$61" = private unnamed_addr constant [7 x i8] c"DELETE\00", align 1
@"csbs$62" = private unnamed_addr constant [4 x i8] c"END\00", align 1
@"csbs$63" = private unnamed_addr constant [9 x i8] c"PAGEDOWN\00", align 1
@"csbs$64" = private unnamed_addr constant [6 x i8] c"RIGHT\00", align 1
@"csbs$65" = private unnamed_addr constant [5 x i8] c"LEFT\00", align 1
@"csbs$66" = private unnamed_addr constant [5 x i8] c"DOWN\00", align 1
@"csbs$67" = private unnamed_addr constant [3 x i8] c"UP\00", align 1
@"csbs$68" = private unnamed_addr constant [13 x i8] c"NUMLOCKCLEAR\00", align 1
@"csbs$69" = private unnamed_addr constant [10 x i8] c"KP_DIVIDE\00", align 1
@"csbs$6a" = private unnamed_addr constant [12 x i8] c"KP_MULTIPLY\00", align 1
@"csbs$6b" = private unnamed_addr constant [9 x i8] c"KP_MINUS\00", align 1
@"csbs$6c" = private unnamed_addr constant [8 x i8] c"KP_PLUS\00", align 1
@"csbs$6d" = private unnamed_addr constant [9 x i8] c"KP_ENTER\00", align 1
@"csbs$6e" = private unnamed_addr constant [5 x i8] c"KP_1\00", align 1
@"csbs$6f" = private unnamed_addr constant [5 x i8] c"KP_2\00", align 1
@"csbs$70" = private unnamed_addr constant [5 x i8] c"KP_3\00", align 1
@"csbs$71" = private unnamed_addr constant [5 x i8] c"KP_4\00", align 1
@"csbs$72" = private unnamed_addr constant [5 x i8] c"KP_5\00", align 1
@"csbs$73" = private unnamed_addr constant [5 x i8] c"KP_6\00", align 1
@"csbs$74" = private unnamed_addr constant [5 x i8] c"KP_7\00", align 1
@"csbs$75" = private unnamed_addr constant [5 x i8] c"KP_8\00", align 1
@"csbs$76" = private unnamed_addr constant [5 x i8] c"KP_9\00", align 1
@"csbs$77" = private unnamed_addr constant [5 x i8] c"KP_0\00", align 1
@"csbs$78" = private unnamed_addr constant [10 x i8] c"KP_PERIOD\00", align 1
@"csbs$79" = private unnamed_addr constant [15 x i8] c"NONUSBACKSLASH\00", align 1
@"csbs$7a" = private unnamed_addr constant [12 x i8] c"APPLICATION\00", align 1
@"csbs$7b" = private unnamed_addr constant [6 x i8] c"POWER\00", align 1
@"csbs$7c" = private unnamed_addr constant [10 x i8] c"KP_EQUALS\00", align 1
@"csbs$7d" = private unnamed_addr constant [4 x i8] c"F13\00", align 1
@"csbs$7e" = private unnamed_addr constant [4 x i8] c"F14\00", align 1
@"csbs$7f" = private unnamed_addr constant [4 x i8] c"F15\00", align 1
@"csbs$80" = private unnamed_addr constant [4 x i8] c"F16\00", align 1
@"csbs$81" = private unnamed_addr constant [4 x i8] c"F17\00", align 1
@"csbs$82" = private unnamed_addr constant [4 x i8] c"F18\00", align 1
@"csbs$83" = private unnamed_addr constant [4 x i8] c"F19\00", align 1
@"csbs$84" = private unnamed_addr constant [4 x i8] c"F20\00", align 1
@"csbs$85" = private unnamed_addr constant [4 x i8] c"F21\00", align 1
@"csbs$86" = private unnamed_addr constant [4 x i8] c"F22\00", align 1
@"csbs$87" = private unnamed_addr constant [4 x i8] c"F23\00", align 1
@"csbs$88" = private unnamed_addr constant [4 x i8] c"F24\00", align 1
@"csbs$89" = private unnamed_addr constant [8 x i8] c"EXECUTE\00", align 1
@"csbs$8a" = private unnamed_addr constant [5 x i8] c"HELP\00", align 1
@"csbs$8b" = private unnamed_addr constant [5 x i8] c"MENU\00", align 1
@"csbs$8c" = private unnamed_addr constant [7 x i8] c"SELECT\00", align 1
@"csbs$8d" = private unnamed_addr constant [5 x i8] c"STOP\00", align 1
@"csbs$8e" = private unnamed_addr constant [6 x i8] c"AGAIN\00", align 1
@"csbs$8f" = private unnamed_addr constant [5 x i8] c"UNDO\00", align 1
@"csbs$90" = private unnamed_addr constant [4 x i8] c"CUT\00", align 1
@"csbs$91" = private unnamed_addr constant [5 x i8] c"COPY\00", align 1
@"csbs$92" = private unnamed_addr constant [6 x i8] c"PASTE\00", align 1
@"csbs$93" = private unnamed_addr constant [5 x i8] c"FIND\00", align 1
@"csbs$94" = private unnamed_addr constant [5 x i8] c"MUTE\00", align 1
@"csbs$95" = private unnamed_addr constant [9 x i8] c"VOLUMEUP\00", align 1
@"csbs$96" = private unnamed_addr constant [11 x i8] c"VOLUMEDOWN\00", align 1
@"csbs$97" = private unnamed_addr constant [9 x i8] c"KP_COMMA\00", align 1
@"csbs$98" = private unnamed_addr constant [15 x i8] c"KP_EQUALSAS400\00", align 1
@"csbs$99" = private unnamed_addr constant [15 x i8] c"INTERNATIONAL1\00", align 1
@"csbs$9a" = private unnamed_addr constant [15 x i8] c"INTERNATIONAL2\00", align 1
@"csbs$9b" = private unnamed_addr constant [15 x i8] c"INTERNATIONAL3\00", align 1
@"csbs$9c" = private unnamed_addr constant [15 x i8] c"INTERNATIONAL4\00", align 1
@"csbs$9d" = private unnamed_addr constant [15 x i8] c"INTERNATIONAL5\00", align 1
@"csbs$9e" = private unnamed_addr constant [15 x i8] c"INTERNATIONAL6\00", align 1
@"csbs$9f" = private unnamed_addr constant [15 x i8] c"INTERNATIONAL7\00", align 1
@"csbs$a0" = private unnamed_addr constant [15 x i8] c"INTERNATIONAL8\00", align 1
@"csbs$a1" = private unnamed_addr constant [15 x i8] c"INTERNATIONAL9\00", align 1
@"csbs$a2" = private unnamed_addr constant [6 x i8] c"LANG1\00", align 1
@"csbs$a3" = private unnamed_addr constant [6 x i8] c"LANG2\00", align 1
@"csbs$a4" = private unnamed_addr constant [6 x i8] c"LANG3\00", align 1
@"csbs$a5" = private unnamed_addr constant [6 x i8] c"LANG4\00", align 1
@"csbs$a6" = private unnamed_addr constant [6 x i8] c"LANG5\00", align 1
@"csbs$a7" = private unnamed_addr constant [6 x i8] c"LANG6\00", align 1
@"csbs$a8" = private unnamed_addr constant [6 x i8] c"LANG7\00", align 1
@"csbs$a9" = private unnamed_addr constant [6 x i8] c"LANG8\00", align 1
@"csbs$aa" = private unnamed_addr constant [6 x i8] c"LANG9\00", align 1
@"csbs$ab" = private unnamed_addr constant [9 x i8] c"ALTERASE\00", align 1
@"csbs$ac" = private unnamed_addr constant [7 x i8] c"SYSREQ\00", align 1
@"csbs$ad" = private unnamed_addr constant [7 x i8] c"CANCEL\00", align 1
@"csbs$ae" = private unnamed_addr constant [6 x i8] c"CLEAR\00", align 1
@"csbs$af" = private unnamed_addr constant [6 x i8] c"PRIOR\00", align 1
@"csbs$b0" = private unnamed_addr constant [8 x i8] c"RETURN2\00", align 1
@"csbs$b1" = private unnamed_addr constant [10 x i8] c"SEPARATOR\00", align 1
@"csbs$b2" = private unnamed_addr constant [4 x i8] c"OUT\00", align 1
@"csbs$b3" = private unnamed_addr constant [5 x i8] c"OPER\00", align 1
@"csbs$b4" = private unnamed_addr constant [11 x i8] c"CLEARAGAIN\00", align 1
@"csbs$b5" = private unnamed_addr constant [6 x i8] c"CRSEL\00", align 1
@"csbs$b6" = private unnamed_addr constant [6 x i8] c"EXSEL\00", align 1
@"csbs$b7" = private unnamed_addr constant [6 x i8] c"KP_00\00", align 1
@"csbs$b8" = private unnamed_addr constant [7 x i8] c"KP_000\00", align 1
@"csbs$b9" = private unnamed_addr constant [19 x i8] c"THOUSANDSSEPARATOR\00", align 1
@"csbs$ba" = private unnamed_addr constant [17 x i8] c"DECIMALSEPARATOR\00", align 1
@"csbs$bb" = private unnamed_addr constant [13 x i8] c"CURRENCYUNIT\00", align 1
@"csbs$bc" = private unnamed_addr constant [16 x i8] c"CURRENCYSUBUNIT\00", align 1
@"csbs$bd" = private unnamed_addr constant [13 x i8] c"KP_LEFTPAREN\00", align 1
@"csbs$be" = private unnamed_addr constant [14 x i8] c"KP_RIGHTPAREN\00", align 1
@"csbs$bf" = private unnamed_addr constant [13 x i8] c"KP_LEFTBRACE\00", align 1
@"csbs$c0" = private unnamed_addr constant [14 x i8] c"KP_RIGHTBRACE\00", align 1
@"csbs$c1" = private unnamed_addr constant [7 x i8] c"KP_TAB\00", align 1
@"csbs$c2" = private unnamed_addr constant [13 x i8] c"KP_BACKSPACE\00", align 1
@"csbs$c3" = private unnamed_addr constant [5 x i8] c"KP_A\00", align 1
@"csbs$c4" = private unnamed_addr constant [5 x i8] c"KP_B\00", align 1
@"csbs$c5" = private unnamed_addr constant [5 x i8] c"KP_C\00", align 1
@"csbs$c6" = private unnamed_addr constant [5 x i8] c"KP_D\00", align 1
@"csbs$c7" = private unnamed_addr constant [5 x i8] c"KP_E\00", align 1
@"csbs$c8" = private unnamed_addr constant [5 x i8] c"KP_F\00", align 1
@"csbs$c9" = private unnamed_addr constant [7 x i8] c"KP_XOR\00", align 1
@"csbs$ca" = private unnamed_addr constant [9 x i8] c"KP_POWER\00", align 1
@"csbs$cb" = private unnamed_addr constant [11 x i8] c"KP_PERCENT\00", align 1
@"csbs$cc" = private unnamed_addr constant [8 x i8] c"KP_LESS\00", align 1
@"csbs$cd" = private unnamed_addr constant [11 x i8] c"KP_GREATER\00", align 1
@"csbs$ce" = private unnamed_addr constant [13 x i8] c"KP_AMPERSAND\00", align 1
@"csbs$cf" = private unnamed_addr constant [16 x i8] c"KP_DBLAMPERSAND\00", align 1
@"csbs$d0" = private unnamed_addr constant [15 x i8] c"KP_VERTICALBAR\00", align 1
@"csbs$d1" = private unnamed_addr constant [18 x i8] c"KP_DBLVERTICALBAR\00", align 1
@"csbs$d2" = private unnamed_addr constant [9 x i8] c"KP_COLON\00", align 1
@"csbs$d3" = private unnamed_addr constant [8 x i8] c"KP_HASH\00", align 1
@"csbs$d4" = private unnamed_addr constant [9 x i8] c"KP_SPACE\00", align 1
@"csbs$d5" = private unnamed_addr constant [6 x i8] c"KP_AT\00", align 1
@"csbs$d6" = private unnamed_addr constant [10 x i8] c"KP_EXCLAM\00", align 1
@"csbs$d7" = private unnamed_addr constant [12 x i8] c"KP_MEMSTORE\00", align 1
@"csbs$d8" = private unnamed_addr constant [13 x i8] c"KP_MEMRECALL\00", align 1
@"csbs$d9" = private unnamed_addr constant [12 x i8] c"KP_MEMCLEAR\00", align 1
@"csbs$da" = private unnamed_addr constant [10 x i8] c"KP_MEMADD\00", align 1
@"csbs$db" = private unnamed_addr constant [15 x i8] c"KP_MEMSUBTRACT\00", align 1
@"csbs$dc" = private unnamed_addr constant [15 x i8] c"KP_MEMMULTIPLY\00", align 1
@"csbs$dd" = private unnamed_addr constant [13 x i8] c"KP_MEMDIVIDE\00", align 1
@"csbs$de" = private unnamed_addr constant [13 x i8] c"KP_PLUSMINUS\00", align 1
@"csbs$df" = private unnamed_addr constant [9 x i8] c"KP_CLEAR\00", align 1
@"csbs$e0" = private unnamed_addr constant [14 x i8] c"KP_CLEARENTRY\00", align 1
@"csbs$e1" = private unnamed_addr constant [10 x i8] c"KP_BINARY\00", align 1
@"csbs$e2" = private unnamed_addr constant [9 x i8] c"KP_OCTAL\00", align 1
@"csbs$e3" = private unnamed_addr constant [11 x i8] c"KP_DECIMAL\00", align 1
@"csbs$e4" = private unnamed_addr constant [15 x i8] c"KP_HEXADECIMAL\00", align 1
@"csbs$e5" = private unnamed_addr constant [6 x i8] c"LCTRL\00", align 1
@"csbs$e6" = private unnamed_addr constant [7 x i8] c"LSHIFT\00", align 1
@"csbs$e7" = private unnamed_addr constant [5 x i8] c"LALT\00", align 1
@"csbs$e8" = private unnamed_addr constant [5 x i8] c"LGUI\00", align 1
@"csbs$e9" = private unnamed_addr constant [6 x i8] c"RCTRL\00", align 1
@"csbs$ea" = private unnamed_addr constant [7 x i8] c"RSHIFT\00", align 1
@"csbs$eb" = private unnamed_addr constant [5 x i8] c"RALT\00", align 1
@"csbs$ec" = private unnamed_addr constant [5 x i8] c"RGUI\00", align 1
@"csbs$ed" = private unnamed_addr constant [5 x i8] c"MODE\00", align 1
@"csbs$ee" = private unnamed_addr constant [10 x i8] c"AUDIONEXT\00", align 1
@"csbs$ef" = private unnamed_addr constant [10 x i8] c"AUDIOPREV\00", align 1
@"csbs$f0" = private unnamed_addr constant [10 x i8] c"AUDIOSTOP\00", align 1
@"csbs$f1" = private unnamed_addr constant [10 x i8] c"AUDIOPLAY\00", align 1
@"csbs$f2" = private unnamed_addr constant [10 x i8] c"AUDIOMUTE\00", align 1
@"csbs$f3" = private unnamed_addr constant [12 x i8] c"MEDIASELECT\00", align 1
@"csbs$f4" = private unnamed_addr constant [4 x i8] c"WWW\00", align 1
@"csbs$f5" = private unnamed_addr constant [5 x i8] c"MAIL\00", align 1
@"csbs$f6" = private unnamed_addr constant [11 x i8] c"CALCULATOR\00", align 1
@"csbs$f7" = private unnamed_addr constant [9 x i8] c"COMPUTER\00", align 1
@"csbs$f8" = private unnamed_addr constant [10 x i8] c"AC_SEARCH\00", align 1
@"csbs$f9" = private unnamed_addr constant [8 x i8] c"AC_HOME\00", align 1
@"csbs$fa" = private unnamed_addr constant [8 x i8] c"AC_BACK\00", align 1
@"csbs$fb" = private unnamed_addr constant [11 x i8] c"AC_FORWARD\00", align 1
@"csbs$fc" = private unnamed_addr constant [8 x i8] c"AC_STOP\00", align 1
@"csbs$fd" = private unnamed_addr constant [11 x i8] c"AC_REFRESH\00", align 1
@"csbs$fe" = private unnamed_addr constant [13 x i8] c"AC_BOOKMARKS\00", align 1
@"csbs$ff" = private unnamed_addr constant [15 x i8] c"BRIGHTNESSDOWN\00", align 1
@"csbs$100" = private unnamed_addr constant [13 x i8] c"BRIGHTNESSUP\00", align 1
@"csbs$101" = private unnamed_addr constant [14 x i8] c"DISPLAYSWITCH\00", align 1
@"csbs$102" = private unnamed_addr constant [15 x i8] c"KBDILLUMTOGGLE\00", align 1
@"csbs$103" = private unnamed_addr constant [13 x i8] c"KBDILLUMDOWN\00", align 1
@"csbs$104" = private unnamed_addr constant [11 x i8] c"KBDILLUMUP\00", align 1
@"csbs$105" = private unnamed_addr constant [6 x i8] c"EJECT\00", align 1
@"csbs$106" = private unnamed_addr constant [6 x i8] c"SLEEP\00", align 1
@"csbs$107" = private unnamed_addr constant [5 x i8] c"APP1\00", align 1
@"csbs$108" = private unnamed_addr constant [5 x i8] c"APP2\00", align 1
@"csbs$109" = private unnamed_addr constant [12 x i8] c"AUDIOREWIND\00", align 1
@"csbs$10a" = private unnamed_addr constant [17 x i8] c"AUDIOFASTFORWARD\00", align 1
@"csbs$10b" = private unnamed_addr constant [14 x i8] c"NUM_SCANCODES\00", align 1
@"csbs$10c" = private unnamed_addr constant [8 x i8] c"runtime\00", align 1
@"csbs$10d" = private unnamed_addr constant [56 x i8] c"/home/skytrias/Schreibtisch/Odin/core/runtime/core.odin\00", align 1
@"csbs$10e" = private unnamed_addr constant [13 x i8] c"Logger_Level\00", align 1
@"ggv$1" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$10e", i64 0, i64 0), i64 12 }, %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 156), %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$10c", i64 0, i64 0), i64 7 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([56 x i8], [56 x i8]* @"csbs$10d", i64 0, i64 0), i64 55 }, i32 335, i32 1, %..string zeroinitializer } }
@"$enum_names-156" = private unnamed_addr global [5 x %..string] [%..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$10f", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$110", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$111", i64 0, i64 0), i64 7 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$112", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$113", i64 0, i64 0), i64 5 }]
@"$enum_values-156" = private unnamed_addr global [5 x i64] [i64 0, i64 10, i64 20, i64 30, i64 40]
@"csbs$10f" = private unnamed_addr constant [6 x i8] c"Debug\00", align 1
@"csbs$110" = private unnamed_addr constant [5 x i8] c"Info\00", align 1
@"csbs$111" = private unnamed_addr constant [8 x i8] c"Warning\00", align 1
@"csbs$112" = private unnamed_addr constant [6 x i8] c"Error\00", align 1
@"csbs$113" = private unnamed_addr constant [6 x i8] c"Fatal\00", align 1
@"csbs$114" = private unnamed_addr constant [5 x i8] c"json\00", align 1
@"csbs$115" = private unnamed_addr constant [63 x i8] c"/home/skytrias/Schreibtisch/Odin/core/encoding/json/types.odin\00", align 1
@"csbs$116" = private unnamed_addr constant [14 x i8] c"Specification\00", align 1
@"ggv$2" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @"csbs$116", i64 0, i64 0), i64 13 }, %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 235), %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$114", i64 0, i64 0), i64 4 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([63 x i8], [63 x i8]* @"csbs$115", i64 0, i64 0), i64 62 }, i32 33, i32 1, %..string zeroinitializer } }
@"$enum_names-235" = private unnamed_addr global [5 x %..string] [%..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$117", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$118", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$119", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$11a", i64 0, i64 0), i64 8 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$11b", i64 0, i64 0), i64 5 }]
@"$enum_values-235" = private unnamed_addr global [5 x i64] [i64 0, i64 1, i64 2, i64 2, i64 2]
@"csbs$117" = private unnamed_addr constant [5 x i8] c"JSON\00", align 1
@"csbs$118" = private unnamed_addr constant [6 x i8] c"JSON5\00", align 1
@"csbs$119" = private unnamed_addr constant [6 x i8] c"SJSON\00", align 1
@"csbs$11a" = private unnamed_addr constant [9 x i8] c"Bitsquid\00", align 1
@"csbs$11b" = private unnamed_addr constant [6 x i8] c"MJSON\00", align 1
@"csbs$11c" = private unnamed_addr constant [5 x i8] c"name\00", align 1
@"csbs$11d" = private unnamed_addr constant [5 x i8] c"type\00", align 1
@"csbs$11e" = private unnamed_addr constant [4 x i8] c"tag\00", align 1
@"csbs$11f" = private unnamed_addr constant [7 x i8] c"offset\00", align 1
@"csbs$120" = private unnamed_addr constant [9 x i8] c"is_using\00", align 1
@"ggv$3" = private unnamed_addr constant %runtime.Type_Info_Struct { { %runtime.Type_Info**, i64 } { %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 0), i64 6 }, { %..string*, i64 } { %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 0), i64 6 }, { i64*, i64 } { i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 0), i64 6 }, { i8*, i64 } { i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 0), i64 6 }, { %..string*, i64 } { %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_tags_data", i64 0, i64 0), i64 6 }, i8 0, i8 0, i8 0, [5 x i8] zeroinitializer, i8* null, i8 2, [7 x i8] zeroinitializer, %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 246), i64 -1 }
@"csbs$121" = private unnamed_addr constant [10 x i8] c"Type_Info\00", align 1
@"ggv$4" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$121", i64 0, i64 0), i64 9 }, %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 22), %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$10c", i64 0, i64 0), i64 7 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([56 x i8], [56 x i8]* @"csbs$10d", i64 0, i64 0), i64 55 }, i32 189, i32 1, %..string zeroinitializer } }
@"csbs$122" = private unnamed_addr constant [5 x i8] c"size\00", align 1
@"csbs$123" = private unnamed_addr constant [6 x i8] c"align\00", align 1
@"csbs$124" = private unnamed_addr constant [6 x i8] c"flags\00", align 1
@"csbs$125" = private unnamed_addr constant [3 x i8] c"id\00", align 1
@"csbs$126" = private unnamed_addr constant [8 x i8] c"variant\00", align 1
@"ggv$5" = private unnamed_addr constant %runtime.Type_Info_Struct { { %runtime.Type_Info**, i64 } { %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 6), i64 5 }, { %..string*, i64 } { %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 6), i64 5 }, { i64*, i64 } { i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 6), i64 5 }, { i8*, i64 } { i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 6), i64 5 }, { %..string*, i64 } { %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_tags_data", i64 0, i64 6), i64 5 }, i8 0, i8 0, i8 0, [5 x i8] zeroinitializer, i8* null, i8 0, [7 x i8] zeroinitializer, %runtime.Type_Info* null, i64 0 }
@"csbs$127" = private unnamed_addr constant [16 x i8] c"Type_Info_Flags\00", align 1
@"ggv$6" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @"csbs$127", i64 0, i64 0), i64 15 }, %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 24), %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$10c", i64 0, i64 0), i64 7 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([56 x i8], [56 x i8]* @"csbs$10d", i64 0, i64 0), i64 55 }, i32 187, i32 1, %..string zeroinitializer } }
@"csbs$128" = private unnamed_addr constant [15 x i8] c"Type_Info_Flag\00", align 1
@"ggv$7" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"csbs$128", i64 0, i64 0), i64 14 }, %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 26), %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$10c", i64 0, i64 0), i64 7 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([56 x i8], [56 x i8]* @"csbs$10d", i64 0, i64 0), i64 55 }, i32 183, i32 1, %..string zeroinitializer } }
@"$enum_names-26" = private unnamed_addr global [2 x %..string] [%..string { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"csbs$129", i64 0, i64 0), i64 10 }, %..string { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"csbs$12a", i64 0, i64 0), i64 14 }]
@"$enum_values-26" = private unnamed_addr global [2 x i64] [i64 0, i64 1]
@"csbs$129" = private unnamed_addr constant [11 x i8] c"Comparable\00", align 1
@"csbs$12a" = private unnamed_addr constant [15 x i8] c"Simple_Compare\00", align 1
@"csbs$12b" = private unnamed_addr constant [16 x i8] c"Type_Info_Named\00", align 1
@"ggv$8" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @"csbs$12b", i64 0, i64 0), i64 15 }, %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 16), %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$10c", i64 0, i64 0), i64 7 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([56 x i8], [56 x i8]* @"csbs$10d", i64 0, i64 0), i64 55 }, i32 64, i32 1, %..string zeroinitializer } }
@"csbs$12c" = private unnamed_addr constant [5 x i8] c"base\00", align 1
@"csbs$12d" = private unnamed_addr constant [4 x i8] c"pkg\00", align 1
@"csbs$12e" = private unnamed_addr constant [4 x i8] c"loc\00", align 1
@"ggv$9" = private unnamed_addr constant %runtime.Type_Info_Struct { { %runtime.Type_Info**, i64 } { %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 39), i64 4 }, { %..string*, i64 } { %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 11), i64 4 }, { i64*, i64 } { i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 11), i64 4 }, { i8*, i64 } { i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 11), i64 4 }, { %..string*, i64 } { %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_tags_data", i64 0, i64 11), i64 4 }, i8 0, i8 0, i8 0, [5 x i8] zeroinitializer, i8* bitcast (i8 (i8*, i8*)* @"__$equal1" to i8*), i8 0, [7 x i8] zeroinitializer, %runtime.Type_Info* null, i64 0 }
@"csbs$12f" = private unnamed_addr constant [21 x i8] c"Source_Code_Location\00", align 1
@"ggv$a" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @"csbs$12f", i64 0, i64 0), i64 20 }, %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 29), %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$10c", i64 0, i64 0), i64 7 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([56 x i8], [56 x i8]* @"csbs$10d", i64 0, i64 0), i64 55 }, i32 290, i32 1, %..string zeroinitializer } }
@"csbs$130" = private unnamed_addr constant [10 x i8] c"file_path\00", align 1
@"csbs$131" = private unnamed_addr constant [5 x i8] c"line\00", align 1
@"csbs$132" = private unnamed_addr constant [7 x i8] c"column\00", align 1
@"csbs$133" = private unnamed_addr constant [10 x i8] c"procedure\00", align 1
@"ggv$b" = private unnamed_addr constant %runtime.Type_Info_Struct { { %runtime.Type_Info**, i64 } { %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 43), i64 4 }, { %..string*, i64 } { %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 15), i64 4 }, { i64*, i64 } { i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 15), i64 4 }, { i8*, i64 } { i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 15), i64 4 }, { %..string*, i64 } { %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_tags_data", i64 0, i64 15), i64 4 }, i8 0, i8 0, i8 0, [5 x i8] zeroinitializer, i8* bitcast (i8 (i8*, i8*)* @"__$equal2" to i8*), i8 0, [7 x i8] zeroinitializer, %runtime.Type_Info* null, i64 0 }
@"csbs$134" = private unnamed_addr constant [18 x i8] c"Type_Info_Integer\00", align 1
@"ggv$c" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @"csbs$134", i64 0, i64 0), i64 17 }, %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 32), %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$10c", i64 0, i64 0), i64 7 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([56 x i8], [56 x i8]* @"csbs$10d", i64 0, i64 0), i64 55 }, i32 70, i32 1, %..string zeroinitializer } }
@"csbs$135" = private unnamed_addr constant [7 x i8] c"signed\00", align 1
@"csbs$136" = private unnamed_addr constant [11 x i8] c"endianness\00", align 1
@"ggv$d" = private unnamed_addr constant %runtime.Type_Info_Struct { { %runtime.Type_Info**, i64 } { %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 47), i64 2 }, { %..string*, i64 } { %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 19), i64 2 }, { i64*, i64 } { i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 19), i64 2 }, { i8*, i64 } { i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 19), i64 2 }, { %..string*, i64 } { %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_tags_data", i64 0, i64 19), i64 2 }, i8 0, i8 0, i8 0, [5 x i8] zeroinitializer, i8* null, i8 0, [7 x i8] zeroinitializer, %runtime.Type_Info* null, i64 0 }
@"csbs$137" = private unnamed_addr constant [20 x i8] c"Platform_Endianness\00", align 1
@"ggv$e" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @"csbs$137", i64 0, i64 0), i64 19 }, %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 35), %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$10c", i64 0, i64 0), i64 7 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([56 x i8], [56 x i8]* @"csbs$10d", i64 0, i64 0), i64 55 }, i32 45, i32 1, %..string zeroinitializer } }
@"$enum_names-35" = private unnamed_addr global [3 x %..string] [%..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$138", i64 0, i64 0), i64 8 }, %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$139", i64 0, i64 0), i64 6 }, %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$13a", i64 0, i64 0), i64 3 }]
@"$enum_values-35" = private unnamed_addr global [3 x i64] [i64 0, i64 1, i64 2]
@"csbs$138" = private unnamed_addr constant [9 x i8] c"Platform\00", align 1
@"csbs$139" = private unnamed_addr constant [7 x i8] c"Little\00", align 1
@"csbs$13a" = private unnamed_addr constant [4 x i8] c"Big\00", align 1
@"csbs$13b" = private unnamed_addr constant [15 x i8] c"Type_Info_Rune\00", align 1
@"ggv$f" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"csbs$13b", i64 0, i64 0), i64 14 }, %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 37), %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$10c", i64 0, i64 0), i64 7 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([56 x i8], [56 x i8]* @"csbs$10d", i64 0, i64 0), i64 55 }, i32 71, i32 1, %..string zeroinitializer } }
@"csbs$13c" = private unnamed_addr constant [16 x i8] c"Type_Info_Float\00", align 1
@"ggv$10" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @"csbs$13c", i64 0, i64 0), i64 15 }, %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 39), %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$10c", i64 0, i64 0), i64 7 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([56 x i8], [56 x i8]* @"csbs$10d", i64 0, i64 0), i64 55 }, i32 72, i32 1, %..string zeroinitializer } }
@"ggv$11" = private unnamed_addr constant %runtime.Type_Info_Struct { { %runtime.Type_Info**, i64 } { %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 49), i64 1 }, { %..string*, i64 } { %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 21), i64 1 }, { i64*, i64 } { i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 21), i64 1 }, { i8*, i64 } { i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 21), i64 1 }, { %..string*, i64 } { %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_tags_data", i64 0, i64 21), i64 1 }, i8 0, i8 0, i8 0, [5 x i8] zeroinitializer, i8* null, i8 0, [7 x i8] zeroinitializer, %runtime.Type_Info* null, i64 0 }
@"csbs$13d" = private unnamed_addr constant [18 x i8] c"Type_Info_Complex\00", align 1
@"ggv$12" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @"csbs$13d", i64 0, i64 0), i64 17 }, %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 37), %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$10c", i64 0, i64 0), i64 7 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([56 x i8], [56 x i8]* @"csbs$10d", i64 0, i64 0), i64 55 }, i32 73, i32 1, %..string zeroinitializer } }
@"csbs$13e" = private unnamed_addr constant [21 x i8] c"Type_Info_Quaternion\00", align 1
@"ggv$13" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @"csbs$13e", i64 0, i64 0), i64 20 }, %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 37), %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$10c", i64 0, i64 0), i64 7 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([56 x i8], [56 x i8]* @"csbs$10d", i64 0, i64 0), i64 55 }, i32 74, i32 1, %..string zeroinitializer } }
@"csbs$13f" = private unnamed_addr constant [17 x i8] c"Type_Info_String\00", align 1
@"ggv$14" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"csbs$13f", i64 0, i64 0), i64 16 }, %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 43), %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$10c", i64 0, i64 0), i64 7 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([56 x i8], [56 x i8]* @"csbs$10d", i64 0, i64 0), i64 55 }, i32 75, i32 1, %..string zeroinitializer } }
@"csbs$140" = private unnamed_addr constant [11 x i8] c"is_cstring\00", align 1
@"ggv$15" = private unnamed_addr constant %runtime.Type_Info_Struct { { %runtime.Type_Info**, i64 } { %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 50), i64 1 }, { %..string*, i64 } { %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 22), i64 1 }, { i64*, i64 } { i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 22), i64 1 }, { i8*, i64 } { i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 22), i64 1 }, { %..string*, i64 } { %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_tags_data", i64 0, i64 22), i64 1 }, i8 0, i8 0, i8 0, [5 x i8] zeroinitializer, i8* null, i8 0, [7 x i8] zeroinitializer, %runtime.Type_Info* null, i64 0 }
@"csbs$141" = private unnamed_addr constant [18 x i8] c"Type_Info_Boolean\00", align 1
@"ggv$16" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @"csbs$141", i64 0, i64 0), i64 17 }, %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 37), %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$10c", i64 0, i64 0), i64 7 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([56 x i8], [56 x i8]* @"csbs$10d", i64 0, i64 0), i64 55 }, i32 76, i32 1, %..string zeroinitializer } }
@"csbs$142" = private unnamed_addr constant [14 x i8] c"Type_Info_Any\00", align 1
@"ggv$17" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @"csbs$142", i64 0, i64 0), i64 13 }, %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 37), %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$10c", i64 0, i64 0), i64 7 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([56 x i8], [56 x i8]* @"csbs$10d", i64 0, i64 0), i64 55 }, i32 77, i32 1, %..string zeroinitializer } }
@"csbs$143" = private unnamed_addr constant [18 x i8] c"Type_Info_Type_Id\00", align 1
@"ggv$18" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @"csbs$143", i64 0, i64 0), i64 17 }, %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 37), %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$10c", i64 0, i64 0), i64 7 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([56 x i8], [56 x i8]* @"csbs$10d", i64 0, i64 0), i64 55 }, i32 78, i32 1, %..string zeroinitializer } }
@"csbs$144" = private unnamed_addr constant [18 x i8] c"Type_Info_Pointer\00", align 1
@"ggv$19" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @"csbs$144", i64 0, i64 0), i64 17 }, %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 48), %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$10c", i64 0, i64 0), i64 7 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([56 x i8], [56 x i8]* @"csbs$10d", i64 0, i64 0), i64 55 }, i32 79, i32 1, %..string zeroinitializer } }
@"csbs$145" = private unnamed_addr constant [5 x i8] c"elem\00", align 1
@"ggv$1a" = private unnamed_addr constant %runtime.Type_Info_Struct { { %runtime.Type_Info**, i64 } { %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 51), i64 1 }, { %..string*, i64 } { %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 23), i64 1 }, { i64*, i64 } { i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 23), i64 1 }, { i8*, i64 } { i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 23), i64 1 }, { %..string*, i64 } { %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_tags_data", i64 0, i64 23), i64 1 }, i8 0, i8 0, i8 0, [5 x i8] zeroinitializer, i8* null, i8 0, [7 x i8] zeroinitializer, %runtime.Type_Info* null, i64 0 }
@"csbs$146" = private unnamed_addr constant [24 x i8] c"Type_Info_Multi_Pointer\00", align 1
@"ggv$1b" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([24 x i8], [24 x i8]* @"csbs$146", i64 0, i64 0), i64 23 }, %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 48), %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$10c", i64 0, i64 0), i64 7 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([56 x i8], [56 x i8]* @"csbs$10d", i64 0, i64 0), i64 55 }, i32 82, i32 1, %..string zeroinitializer } }
@"csbs$147" = private unnamed_addr constant [20 x i8] c"Type_Info_Procedure\00", align 1
@"ggv$1c" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @"csbs$147", i64 0, i64 0), i64 19 }, %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 51), %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$10c", i64 0, i64 0), i64 7 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([56 x i8], [56 x i8]* @"csbs$10d", i64 0, i64 0), i64 55 }, i32 85, i32 1, %..string zeroinitializer } }
@"csbs$148" = private unnamed_addr constant [7 x i8] c"params\00", align 1
@"csbs$149" = private unnamed_addr constant [8 x i8] c"results\00", align 1
@"csbs$14a" = private unnamed_addr constant [9 x i8] c"variadic\00", align 1
@"csbs$14b" = private unnamed_addr constant [11 x i8] c"convention\00", align 1
@"ggv$1d" = private unnamed_addr constant %runtime.Type_Info_Struct { { %runtime.Type_Info**, i64 } { %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 52), i64 4 }, { %..string*, i64 } { %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 24), i64 4 }, { i64*, i64 } { i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 24), i64 4 }, { i8*, i64 } { i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 24), i64 4 }, { %..string*, i64 } { %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_tags_data", i64 0, i64 24), i64 4 }, i8 0, i8 0, i8 0, [5 x i8] zeroinitializer, i8* null, i8 0, [7 x i8] zeroinitializer, %runtime.Type_Info* null, i64 0 }
@"csbs$14c" = private unnamed_addr constant [19 x i8] c"Calling_Convention\00", align 1
@"ggv$1e" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @"csbs$14c", i64 0, i64 0), i64 18 }, %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 53), %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$10c", i64 0, i64 0), i64 7 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([56 x i8], [56 x i8]* @"csbs$10d", i64 0, i64 0), i64 55 }, i32 26, i32 1, %..string zeroinitializer } }
@"$enum_names-53" = private unnamed_addr global [10 x %..string] [%..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$14d", i64 0, i64 0), i64 7 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$14e", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"csbs$14f", i64 0, i64 0), i64 11 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$150", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$151", i64 0, i64 0), i64 8 }, %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$152", i64 0, i64 0), i64 9 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$14", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$153", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$154", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$155", i64 0, i64 0), i64 4 }]
@"$enum_values-53" = private unnamed_addr global [10 x i64] [i64 0, i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 7, i64 9, i64 10]
@"csbs$14d" = private unnamed_addr constant [8 x i8] c"Invalid\00", align 1
@"csbs$14e" = private unnamed_addr constant [5 x i8] c"Odin\00", align 1
@"csbs$14f" = private unnamed_addr constant [12 x i8] c"Contextless\00", align 1
@"csbs$150" = private unnamed_addr constant [6 x i8] c"CDecl\00", align 1
@"csbs$151" = private unnamed_addr constant [9 x i8] c"Std_Call\00", align 1
@"csbs$152" = private unnamed_addr constant [10 x i8] c"Fast_Call\00", align 1
@"csbs$153" = private unnamed_addr constant [6 x i8] c"Naked\00", align 1
@"csbs$154" = private unnamed_addr constant [6 x i8] c"Win64\00", align 1
@"csbs$155" = private unnamed_addr constant [5 x i8] c"SysV\00", align 1
@"csbs$156" = private unnamed_addr constant [16 x i8] c"Type_Info_Array\00", align 1
@"ggv$1f" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @"csbs$156", i64 0, i64 0), i64 15 }, %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 55), %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$10c", i64 0, i64 0), i64 7 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([56 x i8], [56 x i8]* @"csbs$10d", i64 0, i64 0), i64 55 }, i32 91, i32 1, %..string zeroinitializer } }
@"csbs$157" = private unnamed_addr constant [10 x i8] c"elem_size\00", align 1
@"csbs$158" = private unnamed_addr constant [6 x i8] c"count\00", align 1
@"ggv$20" = private unnamed_addr constant %runtime.Type_Info_Struct { { %runtime.Type_Info**, i64 } { %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 56), i64 3 }, { %..string*, i64 } { %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 28), i64 3 }, { i64*, i64 } { i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 28), i64 3 }, { i8*, i64 } { i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 28), i64 3 }, { %..string*, i64 } { %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_tags_data", i64 0, i64 28), i64 3 }, i8 0, i8 0, i8 0, [5 x i8] zeroinitializer, i8* null, i8 0, [7 x i8] zeroinitializer, %runtime.Type_Info* null, i64 0 }
@"csbs$159" = private unnamed_addr constant [27 x i8] c"Type_Info_Enumerated_Array\00", align 1
@"ggv$21" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([27 x i8], [27 x i8]* @"csbs$159", i64 0, i64 0), i64 26 }, %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 57), %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$10c", i64 0, i64 0), i64 7 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([56 x i8], [56 x i8]* @"csbs$10d", i64 0, i64 0), i64 55 }, i32 96, i32 1, %..string zeroinitializer } }
@"csbs$15a" = private unnamed_addr constant [6 x i8] c"index\00", align 1
@"csbs$15b" = private unnamed_addr constant [10 x i8] c"min_value\00", align 1
@"csbs$15c" = private unnamed_addr constant [10 x i8] c"max_value\00", align 1
@"csbs$15d" = private unnamed_addr constant [10 x i8] c"is_sparse\00", align 1
@"ggv$22" = private unnamed_addr constant %runtime.Type_Info_Struct { { %runtime.Type_Info**, i64 } { %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 59), i64 7 }, { %..string*, i64 } { %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 31), i64 7 }, { i64*, i64 } { i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 31), i64 7 }, { i8*, i64 } { i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 31), i64 7 }, { %..string*, i64 } { %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_tags_data", i64 0, i64 31), i64 7 }, i8 0, i8 0, i8 0, [5 x i8] zeroinitializer, i8* null, i8 0, [7 x i8] zeroinitializer, %runtime.Type_Info* null, i64 0 }
@"csbs$15e" = private unnamed_addr constant [21 x i8] c"Type_Info_Enum_Value\00", align 1
@"ggv$23" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @"csbs$15e", i64 0, i64 0), i64 20 }, %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 59), %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$10c", i64 0, i64 0), i64 7 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([56 x i8], [56 x i8]* @"csbs$10d", i64 0, i64 0), i64 55 }, i32 43, i32 1, %..string zeroinitializer } }
@"csbs$15f" = private unnamed_addr constant [24 x i8] c"Type_Info_Dynamic_Array\00", align 1
@"ggv$24" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([24 x i8], [24 x i8]* @"csbs$15f", i64 0, i64 0), i64 23 }, %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 61), %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$10c", i64 0, i64 0), i64 7 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([56 x i8], [56 x i8]* @"csbs$10d", i64 0, i64 0), i64 55 }, i32 105, i32 1, %..string zeroinitializer } }
@"ggv$25" = private unnamed_addr constant %runtime.Type_Info_Struct { { %runtime.Type_Info**, i64 } { %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 66), i64 2 }, { %..string*, i64 } { %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 38), i64 2 }, { i64*, i64 } { i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 38), i64 2 }, { i8*, i64 } { i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 38), i64 2 }, { %..string*, i64 } { %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_tags_data", i64 0, i64 38), i64 2 }, i8 0, i8 0, i8 0, [5 x i8] zeroinitializer, i8* null, i8 0, [7 x i8] zeroinitializer, %runtime.Type_Info* null, i64 0 }
@"csbs$160" = private unnamed_addr constant [16 x i8] c"Type_Info_Slice\00", align 1
@"ggv$26" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @"csbs$160", i64 0, i64 0), i64 15 }, %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 61), %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$10c", i64 0, i64 0), i64 7 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([56 x i8], [56 x i8]* @"csbs$10d", i64 0, i64 0), i64 55 }, i32 106, i32 1, %..string zeroinitializer } }
@"csbs$161" = private unnamed_addr constant [16 x i8] c"Type_Info_Tuple\00", align 1
@"ggv$27" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @"csbs$161", i64 0, i64 0), i64 15 }, %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 64), %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$10c", i64 0, i64 0), i64 7 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([56 x i8], [56 x i8]* @"csbs$10d", i64 0, i64 0), i64 55 }, i32 107, i32 1, %..string zeroinitializer } }
@"csbs$162" = private unnamed_addr constant [6 x i8] c"types\00", align 1
@"csbs$163" = private unnamed_addr constant [6 x i8] c"names\00", align 1
@"ggv$28" = private unnamed_addr constant %runtime.Type_Info_Struct { { %runtime.Type_Info**, i64 } { %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 68), i64 2 }, { %..string*, i64 } { %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 40), i64 2 }, { i64*, i64 } { i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 40), i64 2 }, { i8*, i64 } { i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 40), i64 2 }, { %..string*, i64 } { %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_tags_data", i64 0, i64 40), i64 2 }, i8 0, i8 0, i8 0, [5 x i8] zeroinitializer, i8* null, i8 0, [7 x i8] zeroinitializer, %runtime.Type_Info* null, i64 0 }
@"csbs$164" = private unnamed_addr constant [17 x i8] c"Type_Info_Struct\00", align 1
@"ggv$29" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"csbs$164", i64 0, i64 0), i64 16 }, %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 70), %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$10c", i64 0, i64 0), i64 7 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([56 x i8], [56 x i8]* @"csbs$10d", i64 0, i64 0), i64 55 }, i32 112, i32 1, %..string zeroinitializer } }
@"csbs$165" = private unnamed_addr constant [8 x i8] c"offsets\00", align 1
@"csbs$166" = private unnamed_addr constant [7 x i8] c"usings\00", align 1
@"csbs$167" = private unnamed_addr constant [5 x i8] c"tags\00", align 1
@"csbs$168" = private unnamed_addr constant [10 x i8] c"is_packed\00", align 1
@"csbs$169" = private unnamed_addr constant [13 x i8] c"is_raw_union\00", align 1
@"csbs$16a" = private unnamed_addr constant [13 x i8] c"custom_align\00", align 1
@"csbs$16b" = private unnamed_addr constant [6 x i8] c"equal\00", align 1
@"csbs$16c" = private unnamed_addr constant [9 x i8] c"soa_kind\00", align 1
@"csbs$16d" = private unnamed_addr constant [14 x i8] c"soa_base_type\00", align 1
@"csbs$16e" = private unnamed_addr constant [8 x i8] c"soa_len\00", align 1
@"ggv$2a" = private unnamed_addr constant %runtime.Type_Info_Struct { { %runtime.Type_Info**, i64 } { %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 70), i64 12 }, { %..string*, i64 } { %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 42), i64 12 }, { i64*, i64 } { i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 42), i64 12 }, { i8*, i64 } { i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 42), i64 12 }, { %..string*, i64 } { %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_tags_data", i64 0, i64 42), i64 12 }, i8 0, i8 0, i8 0, [5 x i8] zeroinitializer, i8* null, i8 0, [7 x i8] zeroinitializer, %runtime.Type_Info* null, i64 0 }
@"csbs$16f" = private unnamed_addr constant [11 x i8] c"Equal_Proc\00", align 1
@"ggv$2b" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"csbs$16f", i64 0, i64 0), i64 10 }, %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 77), %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$10c", i64 0, i64 0), i64 7 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([56 x i8], [56 x i8]* @"csbs$10d", i64 0, i64 0), i64 55 }, i32 52, i32 1, %..string zeroinitializer } }
@"csbs$170" = private unnamed_addr constant [2 x i8] c"_\00", align 1
@"csbs$171" = private unnamed_addr constant [26 x i8] c"Type_Info_Struct_Soa_Kind\00", align 1
@"ggv$2c" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([26 x i8], [26 x i8]* @"csbs$171", i64 0, i64 0), i64 25 }, %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 82), %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$10c", i64 0, i64 0), i64 7 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([56 x i8], [56 x i8]* @"csbs$10d", i64 0, i64 0), i64 55 }, i32 56, i32 1, %..string zeroinitializer } }
@"$enum_names-82" = private unnamed_addr global [4 x %..string] [%..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$14", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$172", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$173", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$174", i64 0, i64 0), i64 7 }]
@"$enum_values-82" = private unnamed_addr global [4 x i64] [i64 0, i64 1, i64 2, i64 3]
@"csbs$172" = private unnamed_addr constant [6 x i8] c"Fixed\00", align 1
@"csbs$173" = private unnamed_addr constant [6 x i8] c"Slice\00", align 1
@"csbs$174" = private unnamed_addr constant [8 x i8] c"Dynamic\00", align 1
@"csbs$175" = private unnamed_addr constant [16 x i8] c"Type_Info_Union\00", align 1
@"ggv$2d" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @"csbs$175", i64 0, i64 0), i64 15 }, %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 84), %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$10c", i64 0, i64 0), i64 7 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([56 x i8], [56 x i8]* @"csbs$10d", i64 0, i64 0), i64 55 }, i32 129, i32 1, %..string zeroinitializer } }
@"csbs$176" = private unnamed_addr constant [9 x i8] c"variants\00", align 1
@"csbs$177" = private unnamed_addr constant [11 x i8] c"tag_offset\00", align 1
@"csbs$178" = private unnamed_addr constant [9 x i8] c"tag_type\00", align 1
@"csbs$179" = private unnamed_addr constant [7 x i8] c"no_nil\00", align 1
@"csbs$17a" = private unnamed_addr constant [11 x i8] c"shared_nil\00", align 1
@"ggv$2e" = private unnamed_addr constant %runtime.Type_Info_Struct { { %runtime.Type_Info**, i64 } { %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 85), i64 7 }, { %..string*, i64 } { %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 57), i64 7 }, { i64*, i64 } { i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 54), i64 7 }, { i8*, i64 } { i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 54), i64 7 }, { %..string*, i64 } { %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_tags_data", i64 0, i64 54), i64 7 }, i8 0, i8 0, i8 0, [5 x i8] zeroinitializer, i8* null, i8 0, [7 x i8] zeroinitializer, %runtime.Type_Info* null, i64 0 }
@"csbs$17b" = private unnamed_addr constant [15 x i8] c"Type_Info_Enum\00", align 1
@"ggv$2f" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"csbs$17b", i64 0, i64 0), i64 14 }, %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 86), %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$10c", i64 0, i64 0), i64 7 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([56 x i8], [56 x i8]* @"csbs$10d", i64 0, i64 0), i64 55 }, i32 140, i32 1, %..string zeroinitializer } }
@"csbs$17c" = private unnamed_addr constant [7 x i8] c"values\00", align 1
@"ggv$30" = private unnamed_addr constant %runtime.Type_Info_Struct { { %runtime.Type_Info**, i64 } { %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 92), i64 3 }, { %..string*, i64 } { %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 64), i64 3 }, { i64*, i64 } { i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 61), i64 3 }, { i8*, i64 } { i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 61), i64 3 }, { %..string*, i64 } { %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_tags_data", i64 0, i64 61), i64 3 }, i8 0, i8 0, i8 0, [5 x i8] zeroinitializer, i8* null, i8 0, [7 x i8] zeroinitializer, %runtime.Type_Info* null, i64 0 }
@"csbs$17d" = private unnamed_addr constant [14 x i8] c"Type_Info_Map\00", align 1
@"ggv$31" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @"csbs$17d", i64 0, i64 0), i64 13 }, %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 90), %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$10c", i64 0, i64 0), i64 7 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([56 x i8], [56 x i8]* @"csbs$10d", i64 0, i64 0), i64 55 }, i32 145, i32 1, %..string zeroinitializer } }
@"csbs$17e" = private unnamed_addr constant [4 x i8] c"key\00", align 1
@"csbs$17f" = private unnamed_addr constant [6 x i8] c"value\00", align 1
@"csbs$180" = private unnamed_addr constant [17 x i8] c"generated_struct\00", align 1
@"csbs$181" = private unnamed_addr constant [10 x i8] c"key_equal\00", align 1
@"csbs$182" = private unnamed_addr constant [11 x i8] c"key_hasher\00", align 1
@"ggv$32" = private unnamed_addr constant %runtime.Type_Info_Struct { { %runtime.Type_Info**, i64 } { %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 95), i64 5 }, { %..string*, i64 } { %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 67), i64 5 }, { i64*, i64 } { i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 64), i64 5 }, { i8*, i64 } { i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 64), i64 5 }, { %..string*, i64 } { %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_tags_data", i64 0, i64 64), i64 5 }, i8 0, i8 0, i8 0, [5 x i8] zeroinitializer, i8* null, i8 0, [7 x i8] zeroinitializer, %runtime.Type_Info* null, i64 0 }
@"csbs$183" = private unnamed_addr constant [12 x i8] c"Hasher_Proc\00", align 1
@"ggv$33" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"csbs$183", i64 0, i64 0), i64 11 }, %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 92), %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$10c", i64 0, i64 0), i64 7 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([56 x i8], [56 x i8]* @"csbs$10d", i64 0, i64 0), i64 55 }, i32 54, i32 1, %..string zeroinitializer } }
@"csbs$184" = private unnamed_addr constant [5 x i8] c"data\00", align 1
@"csbs$185" = private unnamed_addr constant [5 x i8] c"seed\00", align 1
@"csbs$186" = private unnamed_addr constant [18 x i8] c"Type_Info_Bit_Set\00", align 1
@"ggv$34" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @"csbs$186", i64 0, i64 0), i64 17 }, %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 96), %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$10c", i64 0, i64 0), i64 7 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([56 x i8], [56 x i8]* @"csbs$10d", i64 0, i64 0), i64 55 }, i32 152, i32 1, %..string zeroinitializer } }
@"csbs$187" = private unnamed_addr constant [11 x i8] c"underlying\00", align 1
@"csbs$188" = private unnamed_addr constant [6 x i8] c"lower\00", align 1
@"csbs$189" = private unnamed_addr constant [6 x i8] c"upper\00", align 1
@"ggv$35" = private unnamed_addr constant %runtime.Type_Info_Struct { { %runtime.Type_Info**, i64 } { %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 103), i64 4 }, { %..string*, i64 } { %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 75), i64 4 }, { i64*, i64 } { i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 69), i64 4 }, { i8*, i64 } { i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 69), i64 4 }, { %..string*, i64 } { %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_tags_data", i64 0, i64 69), i64 4 }, i8 0, i8 0, i8 0, [5 x i8] zeroinitializer, i8* null, i8 0, [7 x i8] zeroinitializer, %runtime.Type_Info* null, i64 0 }
@"csbs$18a" = private unnamed_addr constant [22 x i8] c"Type_Info_Simd_Vector\00", align 1
@"ggv$36" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @"csbs$18a", i64 0, i64 0), i64 21 }, %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 55), %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$10c", i64 0, i64 0), i64 7 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([56 x i8], [56 x i8]* @"csbs$10d", i64 0, i64 0), i64 55 }, i32 158, i32 1, %..string zeroinitializer } }
@"csbs$18b" = private unnamed_addr constant [27 x i8] c"Type_Info_Relative_Pointer\00", align 1
@"ggv$37" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([27 x i8], [27 x i8]* @"csbs$18b", i64 0, i64 0), i64 26 }, %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 99), %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$10c", i64 0, i64 0), i64 7 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([56 x i8], [56 x i8]* @"csbs$10d", i64 0, i64 0), i64 55 }, i32 163, i32 1, %..string zeroinitializer } }
@"csbs$18c" = private unnamed_addr constant [8 x i8] c"pointer\00", align 1
@"csbs$18d" = private unnamed_addr constant [13 x i8] c"base_integer\00", align 1
@"ggv$38" = private unnamed_addr constant %runtime.Type_Info_Struct { { %runtime.Type_Info**, i64 } { %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 107), i64 2 }, { %..string*, i64 } { %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 79), i64 2 }, { i64*, i64 } { i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 73), i64 2 }, { i8*, i64 } { i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 73), i64 2 }, { %..string*, i64 } { %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_tags_data", i64 0, i64 73), i64 2 }, i8 0, i8 0, i8 0, [5 x i8] zeroinitializer, i8* null, i8 0, [7 x i8] zeroinitializer, %runtime.Type_Info* null, i64 0 }
@"csbs$18e" = private unnamed_addr constant [25 x i8] c"Type_Info_Relative_Slice\00", align 1
@"ggv$39" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([25 x i8], [25 x i8]* @"csbs$18e", i64 0, i64 0), i64 24 }, %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 101), %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$10c", i64 0, i64 0), i64 7 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([56 x i8], [56 x i8]* @"csbs$10d", i64 0, i64 0), i64 55 }, i32 167, i32 1, %..string zeroinitializer } }
@"csbs$18f" = private unnamed_addr constant [6 x i8] c"slice\00", align 1
@"ggv$3a" = private unnamed_addr constant %runtime.Type_Info_Struct { { %runtime.Type_Info**, i64 } { %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 109), i64 2 }, { %..string*, i64 } { %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 81), i64 2 }, { i64*, i64 } { i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 75), i64 2 }, { i8*, i64 } { i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 75), i64 2 }, { %..string*, i64 } { %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_tags_data", i64 0, i64 75), i64 2 }, i8 0, i8 0, i8 0, [5 x i8] zeroinitializer, i8* null, i8 0, [7 x i8] zeroinitializer, %runtime.Type_Info* null, i64 0 }
@"csbs$190" = private unnamed_addr constant [17 x i8] c"Type_Info_Matrix\00", align 1
@"ggv$3b" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"csbs$190", i64 0, i64 0), i64 16 }, %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 103), %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$10c", i64 0, i64 0), i64 7 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([56 x i8], [56 x i8]* @"csbs$10d", i64 0, i64 0), i64 55 }, i32 171, i32 1, %..string zeroinitializer } }
@"csbs$191" = private unnamed_addr constant [12 x i8] c"elem_stride\00", align 1
@"csbs$192" = private unnamed_addr constant [10 x i8] c"row_count\00", align 1
@"csbs$193" = private unnamed_addr constant [13 x i8] c"column_count\00", align 1
@"ggv$3c" = private unnamed_addr constant %runtime.Type_Info_Struct { { %runtime.Type_Info**, i64 } { %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 111), i64 5 }, { %..string*, i64 } { %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 83), i64 5 }, { i64*, i64 } { i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 77), i64 5 }, { i8*, i64 } { i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 77), i64 5 }, { %..string*, i64 } { %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_tags_data", i64 0, i64 77), i64 5 }, i8 0, i8 0, i8 0, [5 x i8] zeroinitializer, i8* null, i8 0, [7 x i8] zeroinitializer, %runtime.Type_Info* null, i64 0 }
@"csbs$194" = private unnamed_addr constant [22 x i8] c"Type_Info_Soa_Pointer\00", align 1
@"ggv$3d" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @"csbs$194", i64 0, i64 0), i64 21 }, %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 48), %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$10c", i64 0, i64 0), i64 7 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([56 x i8], [56 x i8]* @"csbs$10d", i64 0, i64 0), i64 55 }, i32 179, i32 1, %..string zeroinitializer } }
@"csbs$195" = private unnamed_addr constant [8 x i8] c"reflect\00", align 1
@"csbs$196" = private unnamed_addr constant [59 x i8] c"/home/skytrias/Schreibtisch/Odin/core/reflect/reflect.odin\00", align 1
@"csbs$197" = private unnamed_addr constant [11 x i8] c"Struct_Tag\00", align 1
@"ggv$3e" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"csbs$197", i64 0, i64 0), i64 10 }, %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 17), %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$195", i64 0, i64 0), i64 7 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([59 x i8], [59 x i8]* @"csbs$196", i64 0, i64 0), i64 58 }, i32 391, i32 1, %..string zeroinitializer } }
@"csbs$198" = private unnamed_addr constant [13 x i8] c"Struct_Field\00", align 1
@"ggv$3f" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$198", i64 0, i64 0), i64 12 }, %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 247), %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$195", i64 0, i64 0), i64 7 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([59 x i8], [59 x i8]* @"csbs$196", i64 0, i64 0), i64 58 }, i32 393, i32 1, %..string zeroinitializer } }
@"ggv$40" = private unnamed_addr constant %runtime.Type_Info_Struct { { %runtime.Type_Info**, i64 } { %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 116), i64 5 }, { %..string*, i64 } { %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 88), i64 5 }, { i64*, i64 } { i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 82), i64 5 }, { i8*, i64 } { i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 82), i64 5 }, { %..string*, i64 } { %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_tags_data", i64 0, i64 82), i64 5 }, i8 0, i8 0, i8 0, [5 x i8] zeroinitializer, i8* bitcast (i8 (i8*, i8*)* @"__$equal3" to i8*), i8 0, [7 x i8] zeroinitializer, %runtime.Type_Info* null, i64 0 }
@"csbs$199" = private unnamed_addr constant [4 x i8] c"src\00", align 1
@"csbs$19a" = private unnamed_addr constant [57 x i8] c"/home/skytrias/Schreibtisch/todool_rmgui/src/global.odin\00", align 1
@"csbs$19b" = private unnamed_addr constant [7 x i8] c"Cursor\00", align 1
@"ggv$41" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$19b", i64 0, i64 0), i64 6 }, %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 217), %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$199", i64 0, i64 0), i64 3 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([57 x i8], [57 x i8]* @"csbs$19a", i64 0, i64 0), i64 56 }, i32 122, i32 1, %..string zeroinitializer } }
@"$enum_names-217" = private unnamed_addr global [6 x %..string] [%..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$19c", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$19d", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$19e", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @"csbs$19f", i64 0, i64 0), i64 15 }, %..string { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @"csbs$1a0", i64 0, i64 0), i64 17 }, %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$1a1", i64 0, i64 0), i64 9 }]
@"$enum_values-217" = private unnamed_addr global [6 x i64] [i64 0, i64 1, i64 2, i64 3, i64 4, i64 5]
@"csbs$19c" = private unnamed_addr constant [6 x i8] c"Arrow\00", align 1
@"csbs$19d" = private unnamed_addr constant [6 x i8] c"IBeam\00", align 1
@"csbs$19e" = private unnamed_addr constant [5 x i8] c"Hand\00", align 1
@"csbs$19f" = private unnamed_addr constant [16 x i8] c"Resize_Vertical\00", align 1
@"csbs$1a0" = private unnamed_addr constant [18 x i8] c"Resize_Horizontal\00", align 1
@"csbs$1a1" = private unnamed_addr constant [10 x i8] c"Crosshair\00", align 1
@"csbs$1a2" = private unnamed_addr constant [58 x i8] c"/home/skytrias/Schreibtisch/todool_rmgui/src/element.odin\00", align 1
@"csbs$1a3" = private unnamed_addr constant [13 x i8] c"Element_Flag\00", align 1
@"ggv$42" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$1a3", i64 0, i64 0), i64 12 }, %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 213), %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$199", i64 0, i64 0), i64 3 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([58 x i8], [58 x i8]* @"csbs$1a2", i64 0, i64 0), i64 57 }, i32 94, i32 1, %..string zeroinitializer } }
@"$enum_names-213" = private unnamed_addr global [20 x %..string] [%..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$14d", i64 0, i64 0), i64 7 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$1a4", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$1a5", i64 0, i64 0), i64 7 }, %..string { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @"csbs$1a6", i64 0, i64 0), i64 18 }, %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$1a7", i64 0, i64 0), i64 8 }, %..string { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @"csbs$1a8", i64 0, i64 0), i64 13 }, %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$1a9", i64 0, i64 0), i64 2 }, %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$1aa", i64 0, i64 0), i64 2 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$1ab", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @"csbs$1ac", i64 0, i64 0), i64 20 }, %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$1ad", i64 0, i64 0), i64 8 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$1ae", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @"csbs$1af", i64 0, i64 0), i64 13 }, %..string { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"csbs$1b0", i64 0, i64 0), i64 16 }, %..string { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @"csbs$1b1", i64 0, i64 0), i64 13 }, %..string { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"csbs$1b2", i64 0, i64 0), i64 16 }, %..string { i8* getelementptr inbounds ([25 x i8], [25 x i8]* @"csbs$1b3", i64 0, i64 0), i64 24 }, %..string { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @"csbs$1b4", i64 0, i64 0), i64 19 }, %..string { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @"csbs$1b5", i64 0, i64 0), i64 18 }, %..string { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @"csbs$1b6", i64 0, i64 0), i64 20 }]
@"$enum_values-213" = private unnamed_addr global [20 x i64] [i64 0, i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 7, i64 8, i64 9, i64 10, i64 11, i64 12, i64 13, i64 14, i64 15, i64 16, i64 17, i64 18, i64 19]
@"csbs$1a4" = private unnamed_addr constant [5 x i8] c"Hide\00", align 1
@"csbs$1a5" = private unnamed_addr constant [8 x i8] c"Destroy\00", align 1
@"csbs$1a6" = private unnamed_addr constant [19 x i8] c"Destroy_Descendent\00", align 1
@"csbs$1a7" = private unnamed_addr constant [9 x i8] c"Disabled\00", align 1
@"csbs$1a8" = private unnamed_addr constant [14 x i8] c"Layout_Ignore\00", align 1
@"csbs$1a9" = private unnamed_addr constant [3 x i8] c"VF\00", align 1
@"csbs$1aa" = private unnamed_addr constant [3 x i8] c"HF\00", align 1
@"csbs$1ab" = private unnamed_addr constant [13 x i8] c"Panel_Expand\00", align 1
@"csbs$1ac" = private unnamed_addr constant [21 x i8] c"Tab_Movement_Allowed\00", align 1
@"csbs$1ad" = private unnamed_addr constant [9 x i8] c"Tab_Stop\00", align 1
@"csbs$1ae" = private unnamed_addr constant [13 x i8] c"Label_Center\00", align 1
@"csbs$1af" = private unnamed_addr constant [14 x i8] c"Box_Can_Focus\00", align 1
@"csbs$1b0" = private unnamed_addr constant [17 x i8] c"Panel_Horizontal\00", align 1
@"csbs$1b1" = private unnamed_addr constant [14 x i8] c"Panel_Panable\00", align 1
@"csbs$1b2" = private unnamed_addr constant [17 x i8] c"Panel_Scrollable\00", align 1
@"csbs$1b3" = private unnamed_addr constant [25 x i8] c"Panel_Default_Background\00", align 1
@"csbs$1b4" = private unnamed_addr constant [20 x i8] c"Split_Pane_Vertical\00", align 1
@"csbs$1b5" = private unnamed_addr constant [19 x i8] c"Split_Pane_Hidable\00", align 1
@"csbs$1b6" = private unnamed_addr constant [21 x i8] c"Scrollbar_Horizontal\00", align 1
@"csbs$1b7" = private unnamed_addr constant [60 x i8] c"/home/skytrias/Schreibtisch/Odin/vendor/sdl2/sdl_mouse.odin\00", align 1
@"csbs$1b8" = private unnamed_addr constant [24 x i8] c"SDL_MouseWheelDirection\00", align 1
@"ggv$43" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([24 x i8], [24 x i8]* @"csbs$1b8", i64 0, i64 0), i64 23 }, %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 263), %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$15", i64 0, i64 0), i64 4 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([60 x i8], [60 x i8]* @"csbs$1b7", i64 0, i64 0), i64 59 }, i32 41, i32 1, %..string zeroinitializer } }
@"$enum_names-263" = private unnamed_addr global [2 x %..string] [%..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$1b9", i64 0, i64 0), i64 6 }, %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$1ba", i64 0, i64 0), i64 7 }]
@"$enum_values-263" = private unnamed_addr global [2 x i64] [i64 0, i64 1]
@"csbs$1b9" = private unnamed_addr constant [7 x i8] c"NORMAL\00", align 1
@"csbs$1ba" = private unnamed_addr constant [8 x i8] c"FLIPPED\00", align 1
@"csbs$1bb" = private unnamed_addr constant [59 x i8] c"/home/skytrias/Schreibtisch/todool_rmgui/src/renderer.odin\00", align 1
@"csbs$1bc" = private unnamed_addr constant [13 x i8] c"Texture_Kind\00", align 1
@"ggv$44" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$1bc", i64 0, i64 0), i64 12 }, %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 211), %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$199", i64 0, i64 0), i64 3 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([59 x i8], [59 x i8]* @"csbs$1bb", i64 0, i64 0), i64 58 }, i32 69, i32 1, %..string zeroinitializer } }
@"$enum_names-211" = private unnamed_addr global [4 x %..string] [%..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$1bd", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$1be", i64 0, i64 0), i64 2 }, %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$1bf", i64 0, i64 0), i64 3 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$1c0", i64 0, i64 0), i64 4 }]
@"$enum_values-211" = private unnamed_addr global [4 x i64] [i64 0, i64 1, i64 2, i64 3]
@"csbs$1bd" = private unnamed_addr constant [6 x i8] c"Fonts\00", align 1
@"csbs$1be" = private unnamed_addr constant [3 x i8] c"SV\00", align 1
@"csbs$1bf" = private unnamed_addr constant [4 x i8] c"HUE\00", align 1
@"csbs$1c0" = private unnamed_addr constant [5 x i8] c"TEST\00", align 1
@"csbs$1c1" = private unnamed_addr constant [14 x i8] c"Render_Vertex\00", align 1
@"ggv$45" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @"csbs$1c1", i64 0, i64 0), i64 13 }, %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 266), %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$199", i64 0, i64 0), i64 3 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([59 x i8], [59 x i8]* @"csbs$1bb", i64 0, i64 0), i64 58 }, i32 98, i32 1, %..string zeroinitializer } }
@"csbs$1c2" = private unnamed_addr constant [7 x i8] c"pos_xy\00", align 1
@"csbs$1c3" = private unnamed_addr constant [6 x i8] c"uv_xy\00", align 1
@"csbs$1c4" = private unnamed_addr constant [6 x i8] c"color\00", align 1
@"csbs$1c5" = private unnamed_addr constant [10 x i8] c"roundness\00", align 1
@"csbs$1c6" = private unnamed_addr constant [10 x i8] c"thickness\00", align 1
@"csbs$1c7" = private unnamed_addr constant [11 x i8] c"additional\00", align 1
@"csbs$1c8" = private unnamed_addr constant [5 x i8] c"kind\00", align 1
@"ggv$46" = private unnamed_addr constant %runtime.Type_Info_Struct { { %runtime.Type_Info**, i64 } { %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 121), i64 7 }, { %..string*, i64 } { %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 93), i64 7 }, { i64*, i64 } { i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 87), i64 7 }, { i8*, i64 } { i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 87), i64 7 }, { %..string*, i64 } { %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_tags_data", i64 0, i64 87), i64 7 }, i8 1, i8 0, i8 0, [5 x i8] zeroinitializer, i8* null, i8 0, [7 x i8] zeroinitializer, %runtime.Type_Info* null, i64 0 }
@"csbs$1c9" = private unnamed_addr constant [12 x i8] c"Render_Kind\00", align 1
@"ggv$47" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"csbs$1c9", i64 0, i64 0), i64 11 }, %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 219), %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$199", i64 0, i64 0), i64 3 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([59 x i8], [59 x i8]* @"csbs$1bb", i64 0, i64 0), i64 58 }, i32 87, i32 1, %..string zeroinitializer } }
@"$enum_names-219" = private unnamed_addr global [8 x %..string] [%..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$14d", i64 0, i64 0), i64 7 }, %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$1ca", i64 0, i64 0), i64 9 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$1cb", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"csbs$1cc", i64 0, i64 0), i64 11 }, %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$1be", i64 0, i64 0), i64 2 }, %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$1bf", i64 0, i64 0), i64 3 }, %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$1cd", i64 0, i64 0), i64 7 }, %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$1ce", i64 0, i64 0), i64 3 }]
@"$enum_values-219" = private unnamed_addr global [8 x i64] [i64 0, i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 7]
@"csbs$1ca" = private unnamed_addr constant [10 x i8] c"Rectangle\00", align 1
@"csbs$1cb" = private unnamed_addr constant [6 x i8] c"Glyph\00", align 1
@"csbs$1cc" = private unnamed_addr constant [12 x i8] c"Drop_Shadow\00", align 1
@"csbs$1cd" = private unnamed_addr constant [8 x i8] c"Texture\00", align 1
@"csbs$1ce" = private unnamed_addr constant [4 x i8] c"Arc\00", align 1
@"csbs$1cf" = private unnamed_addr constant [55 x i8] c"/home/skytrias/Schreibtisch/todool_rmgui/src/save.odin\00", align 1
@"csbs$1d0" = private unnamed_addr constant [15 x i8] c"Misc_Save_Load\00", align 1
@"ggv$48" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"csbs$1d0", i64 0, i64 0), i64 14 }, %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 221), %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$199", i64 0, i64 0), i64 3 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([55 x i8], [55 x i8]* @"csbs$1cf", i64 0, i64 0), i64 54 }, i32 286, i32 1, %..string zeroinitializer } }
@"csbs$1d1" = private unnamed_addr constant [6 x i8] c"scale\00", align 1
@"csbs$1d2" = private unnamed_addr constant [11 x i8] c"mode_index\00", align 1
@"csbs$1d3" = private unnamed_addr constant [8 x i8] c"options\00", align 1
@"csbs$1d4" = private unnamed_addr constant [9 x i8] c"pomodoro\00", align 1
@"csbs$1d5" = private unnamed_addr constant [11 x i8] c"statistics\00", align 1
@"csbs$1d6" = private unnamed_addr constant [6 x i8] c"theme\00", align 1
@"ggv$49" = private unnamed_addr constant %runtime.Type_Info_Struct { { %runtime.Type_Info**, i64 } { %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 128), i64 7 }, { %..string*, i64 } { %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 100), i64 7 }, { i64*, i64 } { i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 94), i64 7 }, { i8*, i64 } { i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 94), i64 7 }, { %..string*, i64 } { %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_tags_data", i64 0, i64 94), i64 7 }, i8 0, i8 0, i8 0, [5 x i8] zeroinitializer, i8* bitcast (i8 (i8*, i8*)* @"__$equal4" to i8*), i8 0, [7 x i8] zeroinitializer, %runtime.Type_Info* null, i64 0 }
@"csbs$1d7" = private unnamed_addr constant [4 x i8] c"tab\00", align 1
@"csbs$1d8" = private unnamed_addr constant [9 x i8] c"autosave\00", align 1
@"csbs$1d9" = private unnamed_addr constant [9 x i8] c"invert_x\00", align 1
@"csbs$1da" = private unnamed_addr constant [9 x i8] c"invert_y\00", align 1
@"csbs$1db" = private unnamed_addr constant [15 x i8] c"uppercase_word\00", align 1
@"csbs$1dc" = private unnamed_addr constant [15 x i8] c"use_animations\00", align 1
@"csbs$1dd" = private unnamed_addr constant [9 x i8] c"wrapping\00", align 1
@"ggv$4a" = private unnamed_addr constant %runtime.Type_Info_Struct { { %runtime.Type_Info**, i64 } { %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 135), i64 7 }, { %..string*, i64 } { %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 107), i64 7 }, { i64*, i64 } { i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 101), i64 7 }, { i8*, i64 } { i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 101), i64 7 }, { %..string*, i64 } { %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_tags_data", i64 0, i64 101), i64 7 }, i8 0, i8 0, i8 0, [5 x i8] zeroinitializer, i8* null, i8 0, [7 x i8] zeroinitializer, %runtime.Type_Info* null, i64 0 }
@"csbs$1de" = private unnamed_addr constant [9 x i8] c"tag_mode\00", align 1
@"ggv$4b" = private unnamed_addr constant %runtime.Type_Info_Struct { { %runtime.Type_Info**, i64 } { %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 142), i64 2 }, { %..string*, i64 } { %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 114), i64 2 }, { i64*, i64 } { i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 108), i64 2 }, { i8*, i64 } { i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 108), i64 2 }, { %..string*, i64 } { %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_tags_data", i64 0, i64 108), i64 2 }, i8 0, i8 0, i8 0, [5 x i8] zeroinitializer, i8* bitcast (i8 (i8*, i8*)* @"__$equal5" to i8*), i8 0, [7 x i8] zeroinitializer, %runtime.Type_Info* null, i64 0 }
@"csbs$1df" = private unnamed_addr constant [5 x i8] c"work\00", align 1
@"csbs$1e0" = private unnamed_addr constant [12 x i8] c"short_break\00", align 1
@"csbs$1e1" = private unnamed_addr constant [11 x i8] c"long_break\00", align 1
@"csbs$1e2" = private unnamed_addr constant [18 x i8] c"stopwatch_running\00", align 1
@"csbs$1e3" = private unnamed_addr constant [23 x i8] c"stopwatch_acuumulation\00", align 1
@"ggv$4c" = private unnamed_addr constant %runtime.Type_Info_Struct { { %runtime.Type_Info**, i64 } { %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 144), i64 6 }, { %..string*, i64 } { %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 116), i64 6 }, { i64*, i64 } { i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 110), i64 6 }, { i8*, i64 } { i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 110), i64 6 }, { %..string*, i64 } { %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_tags_data", i64 0, i64 110), i64 6 }, i8 0, i8 0, i8 0, [5 x i8] zeroinitializer, i8* null, i8 0, [7 x i8] zeroinitializer, %runtime.Type_Info* null, i64 0 }
@"csbs$1e4" = private unnamed_addr constant [12 x i8] c"accumulated\00", align 1
@"csbs$1e5" = private unnamed_addr constant [10 x i8] c"work_goal\00", align 1
@"ggv$4d" = private unnamed_addr constant %runtime.Type_Info_Struct { { %runtime.Type_Info**, i64 } { %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 150), i64 2 }, { %..string*, i64 } { %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 122), i64 2 }, { i64*, i64 } { i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 116), i64 2 }, { i8*, i64 } { i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 116), i64 2 }, { %..string*, i64 } { %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_tags_data", i64 0, i64 116), i64 2 }, i8 0, i8 0, i8 0, [5 x i8] zeroinitializer, i8* null, i8 0, [7 x i8] zeroinitializer, %runtime.Type_Info* null, i64 0 }
@"csbs$1e6" = private unnamed_addr constant [56 x i8] c"/home/skytrias/Schreibtisch/todool_rmgui/src/theme.odin\00", align 1
@"csbs$1e7" = private unnamed_addr constant [16 x i8] c"Theme_Save_Load\00", align 1
@"ggv$4e" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @"csbs$1e7", i64 0, i64 0), i64 15 }, %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 228), %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$199", i64 0, i64 0), i64 3 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([56 x i8], [56 x i8]* @"csbs$1e6", i64 0, i64 0), i64 55 }, i32 54, i32 1, %..string zeroinitializer } }
@"csbs$1e8" = private unnamed_addr constant [11 x i8] c"background\00", align 1
@"csbs$1e9" = private unnamed_addr constant [6 x i8] c"panel\00", align 1
@"csbs$1ea" = private unnamed_addr constant [13 x i8] c"text_default\00", align 1
@"csbs$1eb" = private unnamed_addr constant [10 x i8] c"text_good\00", align 1
@"csbs$1ec" = private unnamed_addr constant [9 x i8] c"text_bad\00", align 1
@"csbs$1ed" = private unnamed_addr constant [11 x i8] c"text_blank\00", align 1
@"csbs$1ee" = private unnamed_addr constant [7 x i8] c"shadow\00", align 1
@"csbs$1ef" = private unnamed_addr constant [6 x i8] c"caret\00", align 1
@"csbs$1f0" = private unnamed_addr constant [16 x i8] c"caret_highlight\00", align 1
@"csbs$1f1" = private unnamed_addr constant [16 x i8] c"caret_selection\00", align 1
@"ggv$4f" = private unnamed_addr constant %runtime.Type_Info_Struct { { %runtime.Type_Info**, i64 } { %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 152), i64 11 }, { %..string*, i64 } { %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 124), i64 11 }, { i64*, i64 } { i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 118), i64 11 }, { i8*, i64 } { i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 118), i64 11 }, { %..string*, i64 } { %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_tags_data", i64 0, i64 118), i64 11 }, i8 0, i8 0, i8 0, [5 x i8] zeroinitializer, i8* null, i8 0, [7 x i8] zeroinitializer, %runtime.Type_Info* null, i64 0 }
@"csbs$1f2" = private unnamed_addr constant [58 x i8] c"/home/skytrias/Schreibtisch/todool_rmgui/src/sidebar.odin\00", align 1
@"csbs$1f3" = private unnamed_addr constant [13 x i8] c"Sidebar_Mode\00", align 1
@"ggv$50" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$1f3", i64 0, i64 0), i64 12 }, %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 233), %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$199", i64 0, i64 0), i64 3 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([58 x i8], [58 x i8]* @"csbs$1f2", i64 0, i64 0), i64 57 }, i32 13, i32 1, %..string zeroinitializer } }
@"$enum_names-233" = private unnamed_addr global [2 x %..string] [%..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$1f4", i64 0, i64 0), i64 7 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$1f5", i64 0, i64 0), i64 4 }]
@"$enum_values-233" = private unnamed_addr global [2 x i64] [i64 0, i64 1]
@"csbs$1f4" = private unnamed_addr constant [8 x i8] c"Options\00", align 1
@"csbs$1f5" = private unnamed_addr constant [5 x i8] c"Tags\00", align 1
@"csbs$1f6" = private unnamed_addr constant [15 x i8] c"Allocator_Mode\00", align 1
@"ggv$51" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"csbs$1f6", i64 0, i64 0), i64 14 }, %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 143), %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$10c", i64 0, i64 0), i64 7 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([56 x i8], [56 x i8]* @"csbs$10d", i64 0, i64 0), i64 55 }, i32 299, i32 1, %..string zeroinitializer } }
@"$enum_names-143" = private unnamed_addr global [6 x %..string] [%..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$1f7", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$1f8", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$1f9", i64 0, i64 0), i64 8 }, %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$1fa", i64 0, i64 0), i64 6 }, %..string { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"csbs$1fb", i64 0, i64 0), i64 14 }, %..string { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"csbs$1fc", i64 0, i64 0), i64 10 }]
@"$enum_values-143" = private unnamed_addr global [6 x i64] [i64 0, i64 1, i64 2, i64 3, i64 4, i64 5]
@"csbs$1f7" = private unnamed_addr constant [6 x i8] c"Alloc\00", align 1
@"csbs$1f8" = private unnamed_addr constant [5 x i8] c"Free\00", align 1
@"csbs$1f9" = private unnamed_addr constant [9 x i8] c"Free_All\00", align 1
@"csbs$1fa" = private unnamed_addr constant [7 x i8] c"Resize\00", align 1
@"csbs$1fb" = private unnamed_addr constant [15 x i8] c"Query_Features\00", align 1
@"csbs$1fc" = private unnamed_addr constant [11 x i8] c"Query_Info\00", align 1
@"csbs$1fd" = private unnamed_addr constant [5 x i8] c"time\00", align 1
@"csbs$1fe" = private unnamed_addr constant [53 x i8] c"/home/skytrias/Schreibtisch/Odin/core/time/time.odin\00", align 1
@"csbs$1ff" = private unnamed_addr constant [6 x i8] c"Month\00", align 1
@"ggv$52" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$1ff", i64 0, i64 0), i64 5 }, %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 158), %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$1fd", i64 0, i64 0), i64 4 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([53 x i8], [53 x i8]* @"csbs$1fe", i64 0, i64 0), i64 52 }, i32 23, i32 1, %..string zeroinitializer } }
@"$enum_names-158" = private unnamed_addr global [12 x %..string] [%..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$200", i64 0, i64 0), i64 7 }, %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$201", i64 0, i64 0), i64 8 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$202", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$203", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$204", i64 0, i64 0), i64 3 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$205", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$206", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$207", i64 0, i64 0), i64 6 }, %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$208", i64 0, i64 0), i64 9 }, %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$209", i64 0, i64 0), i64 7 }, %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$20a", i64 0, i64 0), i64 8 }, %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$20b", i64 0, i64 0), i64 8 }]
@"$enum_values-158" = private unnamed_addr global [12 x i64] [i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 7, i64 8, i64 9, i64 10, i64 11, i64 12]
@"csbs$200" = private unnamed_addr constant [8 x i8] c"January\00", align 1
@"csbs$201" = private unnamed_addr constant [9 x i8] c"February\00", align 1
@"csbs$202" = private unnamed_addr constant [6 x i8] c"March\00", align 1
@"csbs$203" = private unnamed_addr constant [6 x i8] c"April\00", align 1
@"csbs$204" = private unnamed_addr constant [4 x i8] c"May\00", align 1
@"csbs$205" = private unnamed_addr constant [5 x i8] c"June\00", align 1
@"csbs$206" = private unnamed_addr constant [5 x i8] c"July\00", align 1
@"csbs$207" = private unnamed_addr constant [7 x i8] c"August\00", align 1
@"csbs$208" = private unnamed_addr constant [10 x i8] c"September\00", align 1
@"csbs$209" = private unnamed_addr constant [8 x i8] c"October\00", align 1
@"csbs$20a" = private unnamed_addr constant [9 x i8] c"November\00", align 1
@"csbs$20b" = private unnamed_addr constant [9 x i8] c"December\00", align 1
@"csbs$20c" = private unnamed_addr constant [6 x i8] c"Value\00", align 1
@"ggv$53" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$20c", i64 0, i64 0), i64 5 }, %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 249), %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$114", i64 0, i64 0), i64 4 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([63 x i8], [63 x i8]* @"csbs$115", i64 0, i64 0), i64 62 }, i32 54, i32 1, %..string zeroinitializer } }
@"csbs$20d" = private unnamed_addr constant [5 x i8] c"Null\00", align 1
@"ggv$54" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$20d", i64 0, i64 0), i64 4 }, %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 79), %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$114", i64 0, i64 0), i64 4 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([63 x i8], [63 x i8]* @"csbs$115", i64 0, i64 0), i64 62 }, i32 46, i32 1, %..string zeroinitializer } }
@"csbs$20e" = private unnamed_addr constant [6 x i8] c"Array\00", align 1
@"ggv$55" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$20e", i64 0, i64 0), i64 5 }, %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 252), %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$114", i64 0, i64 0), i64 4 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([63 x i8], [63 x i8]* @"csbs$115", i64 0, i64 0), i64 62 }, i32 51, i32 1, %..string zeroinitializer } }
@"csbs$20f" = private unnamed_addr constant [10 x i8] c"Allocator\00", align 1
@"ggv$56" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$20f", i64 0, i64 0), i64 9 }, %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 138), %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$10c", i64 0, i64 0), i64 7 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([56 x i8], [56 x i8]* @"csbs$10d", i64 0, i64 0), i64 55 }, i32 328, i32 1, %..string zeroinitializer } }
@"ggv$57" = private unnamed_addr constant %runtime.Type_Info_Struct { { %runtime.Type_Info**, i64 } { %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 170), i64 2 }, { %..string*, i64 } { %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 135), i64 2 }, { i64*, i64 } { i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 129), i64 2 }, { i8*, i64 } { i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 129), i64 2 }, { %..string*, i64 } { %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_tags_data", i64 0, i64 129), i64 2 }, i8 0, i8 0, i8 0, [5 x i8] zeroinitializer, i8* null, i8 0, [7 x i8] zeroinitializer, %runtime.Type_Info* null, i64 0 }
@"csbs$210" = private unnamed_addr constant [15 x i8] c"Allocator_Proc\00", align 1
@"ggv$58" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"csbs$210", i64 0, i64 0), i64 14 }, %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 140), %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$10c", i64 0, i64 0), i64 7 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([56 x i8], [56 x i8]* @"csbs$10d", i64 0, i64 0), i64 55 }, i32 324, i32 1, %..string zeroinitializer } }
@"csbs$211" = private unnamed_addr constant [15 x i8] c"allocator_data\00", align 1
@"csbs$212" = private unnamed_addr constant [5 x i8] c"mode\00", align 1
@"csbs$213" = private unnamed_addr constant [10 x i8] c"alignment\00", align 1
@"csbs$214" = private unnamed_addr constant [11 x i8] c"old_memory\00", align 1
@"csbs$215" = private unnamed_addr constant [9 x i8] c"old_size\00", align 1
@"csbs$216" = private unnamed_addr constant [9 x i8] c"location\00", align 1
@"csbs$217" = private unnamed_addr constant [16 x i8] c"Allocator_Error\00", align 1
@"ggv$59" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @"csbs$217", i64 0, i64 0), i64 15 }, %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 146), %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$10c", i64 0, i64 0), i64 7 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([56 x i8], [56 x i8]* @"csbs$10d", i64 0, i64 0), i64 55 }, i32 316, i32 1, %..string zeroinitializer } }
@"$enum_names-146" = private unnamed_addr global [5 x %..string] [%..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$14", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @"csbs$218", i64 0, i64 0), i64 13 }, %..string { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @"csbs$219", i64 0, i64 0), i64 15 }, %..string { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"csbs$21a", i64 0, i64 0), i64 16 }, %..string { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @"csbs$21b", i64 0, i64 0), i64 20 }]
@"$enum_values-146" = private unnamed_addr global [5 x i64] [i64 0, i64 1, i64 2, i64 3, i64 4]
@"csbs$218" = private unnamed_addr constant [14 x i8] c"Out_Of_Memory\00", align 1
@"csbs$219" = private unnamed_addr constant [16 x i8] c"Invalid_Pointer\00", align 1
@"csbs$21a" = private unnamed_addr constant [17 x i8] c"Invalid_Argument\00", align 1
@"csbs$21b" = private unnamed_addr constant [21 x i8] c"Mode_Not_Implemented\00", align 1
@"csbs$21c" = private unnamed_addr constant [7 x i8] c"Object\00", align 1
@"ggv$5a" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$21c", i64 0, i64 0), i64 6 }, %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 255), %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$114", i64 0, i64 0), i64 4 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([63 x i8], [63 x i8]* @"csbs$115", i64 0, i64 0), i64 62 }, i32 52, i32 1, %..string zeroinitializer } }
@"csbs$21d" = private unnamed_addr constant [7 x i8] c"hashes\00", align 1
@"csbs$21e" = private unnamed_addr constant [8 x i8] c"entries\00", align 1
@"ggv$5b" = private unnamed_addr constant %runtime.Type_Info_Struct { { %runtime.Type_Info**, i64 } { %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 181), i64 2 }, { %..string*, i64 } { %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 146), i64 2 }, { i64*, i64 } { i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 131), i64 2 }, { i8*, i64 } { i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 131), i64 2 }, { %..string*, i64 } { %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_tags_data", i64 0, i64 131), i64 2 }, i8 0, i8 0, i8 0, [5 x i8] zeroinitializer, i8* null, i8 0, [7 x i8] zeroinitializer, %runtime.Type_Info* null, i64 0 }
@"csbs$21f" = private unnamed_addr constant [5 x i8] c"hash\00", align 1
@"csbs$220" = private unnamed_addr constant [5 x i8] c"next\00", align 1
@"ggv$5c" = private unnamed_addr constant %runtime.Type_Info_Struct { { %runtime.Type_Info**, i64 } { %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 183), i64 4 }, { %..string*, i64 } { %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 148), i64 4 }, { i64*, i64 } { i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 133), i64 4 }, { i8*, i64 } { i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 133), i64 4 }, { %..string*, i64 } { %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_tags_data", i64 0, i64 133), i64 4 }, i8 0, i8 0, i8 0, [5 x i8] zeroinitializer, i8* null, i8 0, [7 x i8] zeroinitializer, %runtime.Type_Info* null, i64 0 }
@"csbs$221" = private unnamed_addr constant [64 x i8] c"/home/skytrias/Schreibtisch/Odin/core/runtime/core_builtin.odin\00", align 1
@"csbs$222" = private unnamed_addr constant [11 x i8] c"Maybe(int)\00", align 1
@"ggv$5d" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"csbs$222", i64 0, i64 0), i64 10 }, %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 160), %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$10c", i64 0, i64 0), i64 7 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([64 x i8], [64 x i8]* @"csbs$221", i64 0, i64 0), i64 63 }, i32 6, i32 10, %..string zeroinitializer } }
@"csbs$223" = private unnamed_addr constant [9 x i8] c"Duration\00", align 1
@"ggv$5e" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$223", i64 0, i64 0), i64 8 }, %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 59), %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$1fd", i64 0, i64 0), i64 4 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([53 x i8], [53 x i8]* @"csbs$1fe", i64 0, i64 0), i64 52 }, i32 5, i32 1, %..string zeroinitializer } }
@"csbs$224" = private unnamed_addr constant [5 x i8] c"Time\00", align 1
@"ggv$5f" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$224", i64 0, i64 0), i64 4 }, %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 165), %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$1fd", i64 0, i64 0), i64 4 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([53 x i8], [53 x i8]* @"csbs$1fe", i64 0, i64 0), i64 52 }, i32 19, i32 1, %..string zeroinitializer } }
@"csbs$225" = private unnamed_addr constant [6 x i8] c"_nsec\00", align 1
@"ggv$60" = private unnamed_addr constant %runtime.Type_Info_Struct { { %runtime.Type_Info**, i64 } { %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 189), i64 1 }, { %..string*, i64 } { %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 153), i64 1 }, { i64*, i64 } { i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 137), i64 1 }, { i8*, i64 } { i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 137), i64 1 }, { %..string*, i64 } { %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_tags_data", i64 0, i64 137), i64 1 }, i8 0, i8 0, i8 0, [5 x i8] zeroinitializer, i8* null, i8 0, [7 x i8] zeroinitializer, %runtime.Type_Info* null, i64 0 }
@"csbs$226" = private unnamed_addr constant [20 x i8] c"Maybe(RGB_Pixel_16)\00", align 1
@"ggv$61" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @"csbs$226", i64 0, i64 0), i64 19 }, %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 7), %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$199", i64 0, i64 0), i64 3 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([64 x i8], [64 x i8]* @"csbs$221", i64 0, i64 0), i64 63 }, i32 6, i32 10, %..string zeroinitializer } }
@"csbs$227" = private unnamed_addr constant [6 x i8] c"image\00", align 1
@"csbs$228" = private unnamed_addr constant [56 x i8] c"/home/skytrias/Schreibtisch/Odin/core/image/common.odin\00", align 1
@"csbs$229" = private unnamed_addr constant [10 x i8] c"PNG_Error\00", align 1
@"ggv$62" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$229", i64 0, i64 0), i64 9 }, %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 5), %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$227", i64 0, i64 0), i64 5 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([56 x i8], [56 x i8]* @"csbs$228", i64 0, i64 0), i64 55 }, i32 239, i32 1, %..string zeroinitializer } }
@"$enum_names-5" = private unnamed_addr global [20 x %..string] [%..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$14", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @"csbs$22a", i64 0, i64 0), i64 20 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$22b", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$22c", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([24 x i8], [24 x i8]* @"csbs$22d", i64 0, i64 0), i64 23 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$22e", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @"csbs$22f", i64 0, i64 0), i64 19 }, %..string { i8* getelementptr inbounds ([30 x i8], [30 x i8]* @"csbs$230", i64 0, i64 0), i64 29 }, %..string { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @"csbs$231", i64 0, i64 0), i64 19 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$232", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([30 x i8], [30 x i8]* @"csbs$233", i64 0, i64 0), i64 29 }, %..string { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @"csbs$234", i64 0, i64 0), i64 19 }, %..string { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @"csbs$235", i64 0, i64 0), i64 19 }, %..string { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @"csbs$236", i64 0, i64 0), i64 18 }, %..string { i8* getelementptr inbounds ([30 x i8], [30 x i8]* @"csbs$237", i64 0, i64 0), i64 29 }, %..string { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @"csbs$238", i64 0, i64 0), i64 21 }, %..string { i8* getelementptr inbounds ([25 x i8], [25 x i8]* @"csbs$239", i64 0, i64 0), i64 24 }, %..string { i8* getelementptr inbounds ([30 x i8], [30 x i8]* @"csbs$23a", i64 0, i64 0), i64 29 }, %..string { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @"csbs$23b", i64 0, i64 0), i64 21 }, %..string { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @"csbs$23c", i64 0, i64 0), i64 20 }]
@"$enum_values-5" = private unnamed_addr global [20 x i64] [i64 0, i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 7, i64 8, i64 9, i64 10, i64 11, i64 12, i64 13, i64 14, i64 15, i64 16, i64 17, i64 18, i64 19]
@"csbs$22a" = private unnamed_addr constant [21 x i8] c"IHDR_Not_First_Chunk\00", align 1
@"csbs$22b" = private unnamed_addr constant [13 x i8] c"IHDR_Corrupt\00", align 1
@"csbs$22c" = private unnamed_addr constant [13 x i8] c"IDAT_Missing\00", align 1
@"csbs$22d" = private unnamed_addr constant [24 x i8] c"IDAT_Must_Be_Contiguous\00", align 1
@"csbs$22e" = private unnamed_addr constant [13 x i8] c"IDAT_Corrupt\00", align 1
@"csbs$22f" = private unnamed_addr constant [20 x i8] c"IDAT_Size_Too_Large\00", align 1
@"csbs$230" = private unnamed_addr constant [30 x i8] c"PLTE_Encountered_Unexpectedly\00", align 1
@"csbs$231" = private unnamed_addr constant [20 x i8] c"PLTE_Invalid_Length\00", align 1
@"csbs$232" = private unnamed_addr constant [13 x i8] c"PLTE_Missing\00", align 1
@"csbs$233" = private unnamed_addr constant [30 x i8] c"TRNS_Encountered_Unexpectedly\00", align 1
@"csbs$234" = private unnamed_addr constant [20 x i8] c"TNRS_Invalid_Length\00", align 1
@"csbs$235" = private unnamed_addr constant [20 x i8] c"BKGD_Invalid_Length\00", align 1
@"csbs$236" = private unnamed_addr constant [19 x i8] c"Unknown_Color_Type\00", align 1
@"csbs$237" = private unnamed_addr constant [30 x i8] c"Invalid_Color_Bit_Depth_Combo\00", align 1
@"csbs$238" = private unnamed_addr constant [22 x i8] c"Unknown_Filter_Method\00", align 1
@"csbs$239" = private unnamed_addr constant [25 x i8] c"Unknown_Interlace_Method\00", align 1
@"csbs$23a" = private unnamed_addr constant [30 x i8] c"Requested_Channel_Not_Present\00", align 1
@"csbs$23b" = private unnamed_addr constant [22 x i8] c"Post_Processing_Error\00", align 1
@"csbs$23c" = private unnamed_addr constant [21 x i8] c"Invalid_Chunk_Length\00", align 1
@"csbs$23d" = private unnamed_addr constant [9 x i8] c"compress\00", align 1
@"csbs$23e" = private unnamed_addr constant [59 x i8] c"/home/skytrias/Schreibtisch/Odin/core/compress/common.odin\00", align 1
@"csbs$23f" = private unnamed_addr constant [14 x i8] c"General_Error\00", align 1
@"ggv$63" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @"csbs$23f", i64 0, i64 0), i64 13 }, %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 2), %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$23d", i64 0, i64 0), i64 8 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([59 x i8], [59 x i8]* @"csbs$23e", i64 0, i64 0), i64 58 }, i32 60, i32 1, %..string zeroinitializer } }
@"$enum_names-2" = private unnamed_addr global [12 x %..string] [%..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$14", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"csbs$240", i64 0, i64 0), i64 14 }, %..string { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"csbs$241", i64 0, i64 0), i64 16 }, %..string { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"csbs$242", i64 0, i64 0), i64 14 }, %..string { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"csbs$243", i64 0, i64 0), i64 16 }, %..string { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"csbs$244", i64 0, i64 0), i64 16 }, %..string { i8* getelementptr inbounds ([27 x i8], [27 x i8]* @"csbs$245", i64 0, i64 0), i64 26 }, %..string { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @"csbs$246", i64 0, i64 0), i64 15 }, %..string { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @"csbs$247", i64 0, i64 0), i64 20 }, %..string { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @"csbs$248", i64 0, i64 0), i64 13 }, %..string { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @"csbs$249", i64 0, i64 0), i64 17 }, %..string { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @"csbs$24a", i64 0, i64 0), i64 13 }]
@"$enum_values-2" = private unnamed_addr global [12 x i64] [i64 0, i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 7, i64 8, i64 9, i64 10, i64 11]
@"csbs$240" = private unnamed_addr constant [15 x i8] c"File_Not_Found\00", align 1
@"csbs$241" = private unnamed_addr constant [17 x i8] c"Cannot_Open_File\00", align 1
@"csbs$242" = private unnamed_addr constant [15 x i8] c"File_Too_Short\00", align 1
@"csbs$243" = private unnamed_addr constant [17 x i8] c"Stream_Too_Short\00", align 1
@"csbs$244" = private unnamed_addr constant [17 x i8] c"Output_Too_Short\00", align 1
@"csbs$245" = private unnamed_addr constant [27 x i8] c"Unknown_Compression_Method\00", align 1
@"csbs$246" = private unnamed_addr constant [16 x i8] c"Checksum_Failed\00", align 1
@"csbs$247" = private unnamed_addr constant [21 x i8] c"Incompatible_Options\00", align 1
@"csbs$248" = private unnamed_addr constant [14 x i8] c"Unimplemented\00", align 1
@"csbs$249" = private unnamed_addr constant [18 x i8] c"Allocation_Failed\00", align 1
@"csbs$24a" = private unnamed_addr constant [14 x i8] c"Resize_Failed\00", align 1
@"csbs$24b" = private unnamed_addr constant [15 x i8] c"Image_Metadata\00", align 1
@"ggv$64" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"csbs$24b", i64 0, i64 0), i64 14 }, %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 107), %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$227", i64 0, i64 0), i64 5 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([56 x i8], [56 x i8]* @"csbs$228", i64 0, i64 0), i64 55 }, i32 60, i32 1, %..string zeroinitializer } }
@"csbs$24c" = private unnamed_addr constant [12 x i8] c"Netpbm_Info\00", align 1
@"ggv$65" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"csbs$24c", i64 0, i64 0), i64 11 }, %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 110), %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$227", i64 0, i64 0), i64 5 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([56 x i8], [56 x i8]* @"csbs$228", i64 0, i64 0), i64 55 }, i32 216, i32 1, %..string zeroinitializer } }
@"csbs$24d" = private unnamed_addr constant [7 x i8] c"header\00", align 1
@"ggv$66" = private unnamed_addr constant %runtime.Type_Info_Struct { { %runtime.Type_Info**, i64 } { %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 195), i64 1 }, { %..string*, i64 } { %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 155), i64 1 }, { i64*, i64 } { i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 138), i64 1 }, { i8*, i64 } { i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 138), i64 1 }, { %..string*, i64 } { %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_tags_data", i64 0, i64 138), i64 1 }, i8 0, i8 0, i8 0, [5 x i8] zeroinitializer, i8* bitcast (i8 (i8*, i8*)* @"__$equal8" to i8*), i8 0, [7 x i8] zeroinitializer, %runtime.Type_Info* null, i64 0 }
@"csbs$24e" = private unnamed_addr constant [14 x i8] c"Netpbm_Header\00", align 1
@"ggv$67" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @"csbs$24e", i64 0, i64 0), i64 13 }, %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 112), %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$227", i64 0, i64 0), i64 5 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([56 x i8], [56 x i8]* @"csbs$228", i64 0, i64 0), i64 55 }, i32 204, i32 1, %..string zeroinitializer } }
@"csbs$24f" = private unnamed_addr constant [7 x i8] c"format\00", align 1
@"csbs$250" = private unnamed_addr constant [6 x i8] c"width\00", align 1
@"csbs$251" = private unnamed_addr constant [7 x i8] c"height\00", align 1
@"csbs$252" = private unnamed_addr constant [9 x i8] c"channels\00", align 1
@"csbs$253" = private unnamed_addr constant [6 x i8] c"depth\00", align 1
@"csbs$254" = private unnamed_addr constant [7 x i8] c"maxval\00", align 1
@"csbs$255" = private unnamed_addr constant [9 x i8] c"tupltype\00", align 1
@"csbs$256" = private unnamed_addr constant [14 x i8] c"little_endian\00", align 1
@"ggv$68" = private unnamed_addr constant %runtime.Type_Info_Struct { { %runtime.Type_Info**, i64 } { %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 196), i64 9 }, { %..string*, i64 } { %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 156), i64 9 }, { i64*, i64 } { i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 139), i64 9 }, { i8*, i64 } { i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 139), i64 9 }, { %..string*, i64 } { %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_tags_data", i64 0, i64 139), i64 9 }, i8 0, i8 0, i8 0, [5 x i8] zeroinitializer, i8* bitcast (i8 (i8*, i8*)* @"__$equal9" to i8*), i8 0, [7 x i8] zeroinitializer, %runtime.Type_Info* null, i64 0 }
@"csbs$257" = private unnamed_addr constant [14 x i8] c"Netpbm_Format\00", align 1
@"ggv$69" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @"csbs$257", i64 0, i64 0), i64 13 }, %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 114), %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$227", i64 0, i64 0), i64 5 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([56 x i8], [56 x i8]* @"csbs$228", i64 0, i64 0), i64 55 }, i32 200, i32 1, %..string zeroinitializer } }
@"$enum_names-114" = private unnamed_addr global [9 x %..string] [%..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$258", i64 0, i64 0), i64 2 }, %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$259", i64 0, i64 0), i64 2 }, %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$25a", i64 0, i64 0), i64 2 }, %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$25b", i64 0, i64 0), i64 2 }, %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$25c", i64 0, i64 0), i64 2 }, %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$25d", i64 0, i64 0), i64 2 }, %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$25e", i64 0, i64 0), i64 2 }, %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$25f", i64 0, i64 0), i64 2 }, %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$260", i64 0, i64 0), i64 2 }]
@"$enum_values-114" = private unnamed_addr global [9 x i64] [i64 0, i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 7, i64 8]
@"csbs$258" = private unnamed_addr constant [3 x i8] c"P1\00", align 1
@"csbs$259" = private unnamed_addr constant [3 x i8] c"P2\00", align 1
@"csbs$25a" = private unnamed_addr constant [3 x i8] c"P3\00", align 1
@"csbs$25b" = private unnamed_addr constant [3 x i8] c"P4\00", align 1
@"csbs$25c" = private unnamed_addr constant [3 x i8] c"P5\00", align 1
@"csbs$25d" = private unnamed_addr constant [3 x i8] c"P6\00", align 1
@"csbs$25e" = private unnamed_addr constant [3 x i8] c"P7\00", align 1
@"csbs$25f" = private unnamed_addr constant [3 x i8] c"Pf\00", align 1
@"csbs$260" = private unnamed_addr constant [3 x i8] c"PF\00", align 1
@"csbs$261" = private unnamed_addr constant [9 x i8] c"PNG_Info\00", align 1
@"ggv$6a" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$261", i64 0, i64 0), i64 8 }, %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 118), %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$227", i64 0, i64 0), i64 5 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([56 x i8], [56 x i8]* @"csbs$228", i64 0, i64 0), i64 55 }, i32 262, i32 1, %..string zeroinitializer } }
@"csbs$262" = private unnamed_addr constant [7 x i8] c"chunks\00", align 1
@"ggv$6b" = private unnamed_addr constant %runtime.Type_Info_Struct { { %runtime.Type_Info**, i64 } { %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 205), i64 2 }, { %..string*, i64 } { %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 165), i64 2 }, { i64*, i64 } { i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 148), i64 2 }, { i8*, i64 } { i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 148), i64 2 }, { %..string*, i64 } { %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_tags_data", i64 0, i64 148), i64 2 }, i8 0, i8 0, i8 0, [5 x i8] zeroinitializer, i8* null, i8 0, [7 x i8] zeroinitializer, %runtime.Type_Info* null, i64 0 }
@"csbs$263" = private unnamed_addr constant [9 x i8] c"PNG_IHDR\00", align 1
@"ggv$6c" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$263", i64 0, i64 0), i64 8 }, %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 120), %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$227", i64 0, i64 0), i64 5 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([56 x i8], [56 x i8]* @"csbs$228", i64 0, i64 0), i64 55 }, i32 327, i32 1, %..string zeroinitializer } }
@"csbs$264" = private unnamed_addr constant [10 x i8] c"bit_depth\00", align 1
@"csbs$265" = private unnamed_addr constant [11 x i8] c"color_type\00", align 1
@"csbs$266" = private unnamed_addr constant [19 x i8] c"compression_method\00", align 1
@"csbs$267" = private unnamed_addr constant [14 x i8] c"filter_method\00", align 1
@"csbs$268" = private unnamed_addr constant [17 x i8] c"interlace_method\00", align 1
@"ggv$6d" = private unnamed_addr constant %runtime.Type_Info_Struct { { %runtime.Type_Info**, i64 } { %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 207), i64 7 }, { %..string*, i64 } { %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 167), i64 7 }, { i64*, i64 } { i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 150), i64 7 }, { i8*, i64 } { i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 150), i64 7 }, { %..string*, i64 } { %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_tags_data", i64 0, i64 150), i64 7 }, i8 1, i8 0, i8 0, [5 x i8] zeroinitializer, i8* null, i8 0, [7 x i8] zeroinitializer, %runtime.Type_Info* null, i64 0 }
@"csbs$269" = private unnamed_addr constant [15 x i8] c"PNG_Color_Type\00", align 1
@"ggv$6e" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"csbs$269", i64 0, i64 0), i64 14 }, %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 123), %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$227", i64 0, i64 0), i64 5 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([56 x i8], [56 x i8]* @"csbs$228", i64 0, i64 0), i64 55 }, i32 344, i32 1, %..string zeroinitializer } }
@"csbs$26a" = private unnamed_addr constant [16 x i8] c"PNG_Color_Value\00", align 1
@"ggv$6f" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @"csbs$26a", i64 0, i64 0), i64 15 }, %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 125), %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$227", i64 0, i64 0), i64 5 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([56 x i8], [56 x i8]* @"csbs$228", i64 0, i64 0), i64 55 }, i32 339, i32 1, %..string zeroinitializer } }
@"$enum_names-125" = private unnamed_addr global [3 x %..string] [%..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$26b", i64 0, i64 0), i64 8 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$13", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$26c", i64 0, i64 0), i64 5 }]
@"$enum_values-125" = private unnamed_addr global [3 x i64] [i64 0, i64 1, i64 2]
@"csbs$26b" = private unnamed_addr constant [9 x i8] c"Paletted\00", align 1
@"csbs$26c" = private unnamed_addr constant [6 x i8] c"Alpha\00", align 1
@"csbs$26d" = private unnamed_addr constant [21 x i8] c"PNG_Interlace_Method\00", align 1
@"ggv$70" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @"csbs$26d", i64 0, i64 0), i64 20 }, %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 127), %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$227", i64 0, i64 0), i64 5 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([56 x i8], [56 x i8]* @"csbs$228", i64 0, i64 0), i64 55 }, i32 346, i32 1, %..string zeroinitializer } }
@"$enum_names-127" = private unnamed_addr global [2 x %..string] [%..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$14", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$26e", i64 0, i64 0), i64 5 }]
@"$enum_values-127" = private unnamed_addr global [2 x i64] [i64 0, i64 1]
@"csbs$26e" = private unnamed_addr constant [6 x i8] c"Adam7\00", align 1
@"csbs$26f" = private unnamed_addr constant [10 x i8] c"PNG_Chunk\00", align 1
@"ggv$71" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$26f", i64 0, i64 0), i64 9 }, %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 130), %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$227", i64 0, i64 0), i64 5 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([56 x i8], [56 x i8]* @"csbs$228", i64 0, i64 0), i64 55 }, i32 272, i32 1, %..string zeroinitializer } }
@"csbs$270" = private unnamed_addr constant [4 x i8] c"crc\00", align 1
@"ggv$72" = private unnamed_addr constant %runtime.Type_Info_Struct { { %runtime.Type_Info**, i64 } { %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 214), i64 3 }, { %..string*, i64 } { %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 174), i64 3 }, { i64*, i64 } { i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 157), i64 3 }, { i8*, i64 } { i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 157), i64 3 }, { %..string*, i64 } { %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_tags_data", i64 0, i64 157), i64 3 }, i8 1, i8 0, i8 0, [5 x i8] zeroinitializer, i8* null, i8 0, [7 x i8] zeroinitializer, %runtime.Type_Info* null, i64 0 }
@"csbs$271" = private unnamed_addr constant [17 x i8] c"PNG_Chunk_Header\00", align 1
@"ggv$73" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"csbs$271", i64 0, i64 0), i64 16 }, %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 132), %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$227", i64 0, i64 0), i64 5 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([56 x i8], [56 x i8]* @"csbs$228", i64 0, i64 0), i64 55 }, i32 267, i32 1, %..string zeroinitializer } }
@"csbs$272" = private unnamed_addr constant [7 x i8] c"length\00", align 1
@"ggv$74" = private unnamed_addr constant %runtime.Type_Info_Struct { { %runtime.Type_Info**, i64 } { %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 217), i64 2 }, { %..string*, i64 } { %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 177), i64 2 }, { i64*, i64 } { i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 160), i64 2 }, { i8*, i64 } { i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 160), i64 2 }, { %..string*, i64 } { %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_tags_data", i64 0, i64 160), i64 2 }, i8 1, i8 0, i8 0, [5 x i8] zeroinitializer, i8* null, i8 0, [7 x i8] zeroinitializer, %runtime.Type_Info* null, i64 0 }
@"csbs$273" = private unnamed_addr constant [15 x i8] c"PNG_Chunk_Type\00", align 1
@"ggv$75" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"csbs$273", i64 0, i64 0), i64 14 }, %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 134), %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$227", i64 0, i64 0), i64 5 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([56 x i8], [56 x i8]* @"csbs$228", i64 0, i64 0), i64 55 }, i32 278, i32 1, %..string zeroinitializer } }
@"$enum_names-134" = private unnamed_addr global [21 x %..string] [%..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$274", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$275", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$276", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$277", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$278", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$279", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$27a", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$27b", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$27c", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$27d", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$27e", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$27f", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$280", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$281", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$282", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$283", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$284", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$285", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$286", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$287", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$288", i64 0, i64 0), i64 4 }]
@"$enum_values-134" = private unnamed_addr global [21 x i64] [i64 1229472850, i64 1347179589, i64 1649100612, i64 1951551059, i64 1229209940, i64 1767135348, i64 1950701684, i64 2052348020, i64 1766015824, i64 1883789683, i64 1732332865, i64 1950960965, i64 1934642260, i64 1934772034, i64 1749635924, i64 1665684045, i64 1933723988, i64 1700284774, i64 1229278788, i64 1766084436, i64 1130840649]
@"csbs$274" = private unnamed_addr constant [5 x i8] c"IHDR\00", align 1
@"csbs$275" = private unnamed_addr constant [5 x i8] c"PLTE\00", align 1
@"csbs$276" = private unnamed_addr constant [5 x i8] c"bKGD\00", align 1
@"csbs$277" = private unnamed_addr constant [5 x i8] c"tRNS\00", align 1
@"csbs$278" = private unnamed_addr constant [5 x i8] c"IDAT\00", align 1
@"csbs$279" = private unnamed_addr constant [5 x i8] c"iTXt\00", align 1
@"csbs$27a" = private unnamed_addr constant [5 x i8] c"tEXt\00", align 1
@"csbs$27b" = private unnamed_addr constant [5 x i8] c"zTXt\00", align 1
@"csbs$27c" = private unnamed_addr constant [5 x i8] c"iCCP\00", align 1
@"csbs$27d" = private unnamed_addr constant [5 x i8] c"pHYs\00", align 1
@"csbs$27e" = private unnamed_addr constant [5 x i8] c"gAMA\00", align 1
@"csbs$27f" = private unnamed_addr constant [5 x i8] c"tIME\00", align 1
@"csbs$280" = private unnamed_addr constant [5 x i8] c"sPLT\00", align 1
@"csbs$281" = private unnamed_addr constant [5 x i8] c"sRGB\00", align 1
@"csbs$282" = private unnamed_addr constant [5 x i8] c"hIST\00", align 1
@"csbs$283" = private unnamed_addr constant [5 x i8] c"cHRM\00", align 1
@"csbs$284" = private unnamed_addr constant [5 x i8] c"sBIT\00", align 1
@"csbs$285" = private unnamed_addr constant [5 x i8] c"eXIf\00", align 1
@"csbs$286" = private unnamed_addr constant [5 x i8] c"IEND\00", align 1
@"csbs$287" = private unnamed_addr constant [5 x i8] c"iDOT\00", align 1
@"csbs$288" = private unnamed_addr constant [5 x i8] c"CgBI\00", align 1
@"csbs$289" = private unnamed_addr constant [9 x i8] c"QOI_Info\00", align 1
@"ggv$76" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$289", i64 0, i64 0), i64 8 }, %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 149), %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$227", i64 0, i64 0), i64 5 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([56 x i8], [56 x i8]* @"csbs$228", i64 0, i64 0), i64 55 }, i32 375, i32 1, %..string zeroinitializer } }
@"ggv$77" = private unnamed_addr constant %runtime.Type_Info_Struct { { %runtime.Type_Info**, i64 } { %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 219), i64 1 }, { %..string*, i64 } { %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 179), i64 1 }, { i64*, i64 } { i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 162), i64 1 }, { i8*, i64 } { i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 162), i64 1 }, { %..string*, i64 } { %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_tags_data", i64 0, i64 162), i64 1 }, i8 0, i8 0, i8 0, [5 x i8] zeroinitializer, i8* null, i8 0, [7 x i8] zeroinitializer, %runtime.Type_Info* null, i64 0 }
@"csbs$28a" = private unnamed_addr constant [11 x i8] c"QOI_Header\00", align 1
@"ggv$78" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"csbs$28a", i64 0, i64 0), i64 10 }, %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 151), %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$227", i64 0, i64 0), i64 5 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([56 x i8], [56 x i8]* @"csbs$228", i64 0, i64 0), i64 55 }, i32 366, i32 1, %..string zeroinitializer } }
@"csbs$28b" = private unnamed_addr constant [6 x i8] c"magic\00", align 1
@"csbs$28c" = private unnamed_addr constant [12 x i8] c"color_space\00", align 1
@"ggv$79" = private unnamed_addr constant %runtime.Type_Info_Struct { { %runtime.Type_Info**, i64 } { %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 220), i64 5 }, { %..string*, i64 } { %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 180), i64 5 }, { i64*, i64 } { i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 163), i64 5 }, { i8*, i64 } { i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 163), i64 5 }, { %..string*, i64 } { %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_tags_data", i64 0, i64 163), i64 5 }, i8 1, i8 0, i8 0, [5 x i8] zeroinitializer, i8* null, i8 0, [7 x i8] zeroinitializer, %runtime.Type_Info* null, i64 0 }
@"csbs$28d" = private unnamed_addr constant [16 x i8] c"QOI_Color_Space\00", align 1
@"ggv$7a" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @"csbs$28d", i64 0, i64 0), i64 15 }, %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 153), %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$227", i64 0, i64 0), i64 5 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([56 x i8], [56 x i8]* @"csbs$228", i64 0, i64 0), i64 55 }, i32 361, i32 1, %..string zeroinitializer } }
@"$enum_names-153" = private unnamed_addr global [2 x %..string] [%..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$281", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$28e", i64 0, i64 0), i64 6 }]
@"$enum_values-153" = private unnamed_addr global [2 x i64] [i64 0, i64 1]
@"csbs$28e" = private unnamed_addr constant [7 x i8] c"Linear\00", align 1
@"csbs$28f" = private unnamed_addr constant [8 x i8] c"odin_gl\00", align 1
@"csbs$290" = private unnamed_addr constant [60 x i8] c"/home/skytrias/Schreibtisch/Odin/vendor/OpenGL/helpers.odin\00", align 1
@"csbs$291" = private unnamed_addr constant [12 x i8] c"Shader_Type\00", align 1
@"ggv$7b" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"csbs$291", i64 0, i64 0), i64 11 }, %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 209), %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$28f", i64 0, i64 0), i64 7 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([60 x i8], [60 x i8]* @"csbs$290", i64 0, i64 0), i64 59 }, i32 10, i32 1, %..string zeroinitializer } }
@"$enum_names-209" = private unnamed_addr global [8 x %..string] [%..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$292", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @"csbs$293", i64 0, i64 0), i64 15 }, %..string { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @"csbs$294", i64 0, i64 0), i64 13 }, %..string { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @"csbs$295", i64 0, i64 0), i64 15 }, %..string { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"csbs$296", i64 0, i64 0), i64 14 }, %..string { i8* getelementptr inbounds ([23 x i8], [23 x i8]* @"csbs$297", i64 0, i64 0), i64 22 }, %..string { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @"csbs$298", i64 0, i64 0), i64 19 }, %..string { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"csbs$299", i64 0, i64 0), i64 11 }]
@"$enum_values-209" = private unnamed_addr global [8 x i64] [i64 0, i64 35632, i64 35633, i64 36313, i64 37305, i64 36487, i64 36488, i64 -1]
@"csbs$292" = private unnamed_addr constant [5 x i8] c"NONE\00", align 1
@"csbs$293" = private unnamed_addr constant [16 x i8] c"FRAGMENT_SHADER\00", align 1
@"csbs$294" = private unnamed_addr constant [14 x i8] c"VERTEX_SHADER\00", align 1
@"csbs$295" = private unnamed_addr constant [16 x i8] c"GEOMETRY_SHADER\00", align 1
@"csbs$296" = private unnamed_addr constant [15 x i8] c"COMPUTE_SHADER\00", align 1
@"csbs$297" = private unnamed_addr constant [23 x i8] c"TESS_EVALUATION_SHADER\00", align 1
@"csbs$298" = private unnamed_addr constant [20 x i8] c"TESS_CONTROL_SHADER\00", align 1
@"csbs$299" = private unnamed_addr constant [12 x i8] c"SHADER_LINK\00", align 1
@"csbs$29a" = private unnamed_addr constant [3 x i8] c"io\00", align 1
@"csbs$29b" = private unnamed_addr constant [49 x i8] c"/home/skytrias/Schreibtisch/Odin/core/io/io.odin\00", align 1
@"ggv$7c" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$112", i64 0, i64 0), i64 5 }, %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 215), %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$29a", i64 0, i64 0), i64 2 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([49 x i8], [49 x i8]* @"csbs$29b", i64 0, i64 0), i64 48 }, i32 16, i32 1, %..string zeroinitializer } }
@"$enum_names-215" = private unnamed_addr global [16 x %..string] [%..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$14", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$29c", i64 0, i64 0), i64 3 }, %..string { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"csbs$29d", i64 0, i64 0), i64 14 }, %..string { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"csbs$29e", i64 0, i64 0), i64 11 }, %..string { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @"csbs$29f", i64 0, i64 0), i64 13 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$2a0", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"csbs$2a1", i64 0, i64 0), i64 11 }, %..string { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"csbs$2a2", i64 0, i64 0), i64 14 }, %..string { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"csbs$2a3", i64 0, i64 0), i64 14 }, %..string { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"csbs$2a4", i64 0, i64 0), i64 14 }, %..string { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @"csbs$2a5", i64 0, i64 0), i64 13 }, %..string { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"csbs$2a6", i64 0, i64 0), i64 14 }, %..string { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"csbs$2a7", i64 0, i64 0), i64 14 }, %..string { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"csbs$2a8", i64 0, i64 0), i64 11 }, %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$2a9", i64 0, i64 0), i64 7 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$2aa", i64 0, i64 0), i64 5 }]
@"$enum_values-215" = private unnamed_addr global [16 x i64] [i64 0, i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 7, i64 8, i64 9, i64 10, i64 11, i64 12, i64 13, i64 14, i64 -1]
@"csbs$29c" = private unnamed_addr constant [4 x i8] c"EOF\00", align 1
@"csbs$29d" = private unnamed_addr constant [15 x i8] c"Unexpected_EOF\00", align 1
@"csbs$29e" = private unnamed_addr constant [12 x i8] c"Short_Write\00", align 1
@"csbs$29f" = private unnamed_addr constant [14 x i8] c"Invalid_Write\00", align 1
@"csbs$2a0" = private unnamed_addr constant [13 x i8] c"Short_Buffer\00", align 1
@"csbs$2a1" = private unnamed_addr constant [12 x i8] c"No_Progress\00", align 1
@"csbs$2a2" = private unnamed_addr constant [15 x i8] c"Invalid_Whence\00", align 1
@"csbs$2a3" = private unnamed_addr constant [15 x i8] c"Invalid_Offset\00", align 1
@"csbs$2a4" = private unnamed_addr constant [15 x i8] c"Invalid_Unread\00", align 1
@"csbs$2a5" = private unnamed_addr constant [14 x i8] c"Negative_Read\00", align 1
@"csbs$2a6" = private unnamed_addr constant [15 x i8] c"Negative_Write\00", align 1
@"csbs$2a7" = private unnamed_addr constant [15 x i8] c"Negative_Count\00", align 1
@"csbs$2a8" = private unnamed_addr constant [12 x i8] c"Buffer_Full\00", align 1
@"csbs$2a9" = private unnamed_addr constant [8 x i8] c"Unknown\00", align 1
@"csbs$2aa" = private unnamed_addr constant [6 x i8] c"Empty\00", align 1
@"ggv$7d" = global %io.Stream_VTable { i8* null, i8* null, i8* null, i8* bitcast (i64 ({ i64, i64 }, i8*)* @"_proclit$anon-2" to i8*), i8* null, i8* null, i8* null, i8* null, i8* null, i8* bitcast ({ i64, i64 } ({ i64, i64 }, { i64, i64 }, i8*)* @"_proclit$anon-0" to i8*), i8* null, i8* bitcast (i32 ({ i64, i64 }, i8, i8*)* @"_proclit$anon-1" to i8*), i8* null, i8* null, i8* null, i8* null, i8* bitcast (i32 ({ i64, i64 }, i8*)* @"_proclit$anon-3" to i8*) }
@"ggv$7e" = private unnamed_addr constant %io.Stream_VTable { i8* null, i8* null, i8* null, i8* bitcast (i64 ({ i64, i64 }, i8*)* @"_proclit$anon-2" to i8*), i8* null, i8* null, i8* null, i8* null, i8* null, i8* bitcast ({ i64, i64 } ({ i64, i64 }, { i64, i64 }, i8*)* @"_proclit$anon-0" to i8*), i8* null, i8* bitcast (i32 ({ i64, i64 }, i8, i8*)* @"_proclit$anon-1" to i8*), i8* null, i8* null, i8* null, i8* null, i8* bitcast (i32 ({ i64, i64 }, i8*)* @"_proclit$anon-3" to i8*) }
@"ggv$7f" = global %io.Stream_VTable { i8* bitcast (i32 ({ i64, i64 }, i8*)* @"_proclit$anon-11" to i8*), i8* bitcast (i32 ({ i64, i64 }, i8*)* @"_proclit$anon-10" to i8*), i8* bitcast ({ i64, i64 } ({ i64, i64 }, i64, i64, i8*)* @"_proclit$anon-8" to i8*), i8* bitcast (i64 ({ i64, i64 }, i8*)* @"_proclit$anon-9" to i8*), i8* bitcast ({ i64, i64 } ({ i64, i64 }, { i64, i64 }, i8*)* @"_proclit$anon-4" to i8*), i8* bitcast ({ i64, i64 } ({ i64, i64 }, { i64, i64 }, i64, i8*)* @"_proclit$anon-5" to i8*), i8* null, i8* null, i8* null, i8* bitcast ({ i64, i64 } ({ i64, i64 }, { i64, i64 }, i8*)* @"_proclit$anon-6" to i8*), i8* bitcast ({ i64, i64 } ({ i64, i64 }, { i64, i64 }, i64, i8*)* @"_proclit$anon-7" to i8*), i8* null, i8* null, i8* null, i8* null, i8* null, i8* null }
@"ggv$80" = private unnamed_addr constant %io.Stream_VTable { i8* bitcast (i32 ({ i64, i64 }, i8*)* @"_proclit$anon-11" to i8*), i8* bitcast (i32 ({ i64, i64 }, i8*)* @"_proclit$anon-10" to i8*), i8* bitcast ({ i64, i64 } ({ i64, i64 }, i64, i64, i8*)* @"_proclit$anon-8" to i8*), i8* bitcast (i64 ({ i64, i64 }, i8*)* @"_proclit$anon-9" to i8*), i8* bitcast ({ i64, i64 } ({ i64, i64 }, { i64, i64 }, i8*)* @"_proclit$anon-4" to i8*), i8* bitcast ({ i64, i64 } ({ i64, i64 }, { i64, i64 }, i64, i8*)* @"_proclit$anon-5" to i8*), i8* null, i8* null, i8* null, i8* bitcast ({ i64, i64 } ({ i64, i64 }, { i64, i64 }, i8*)* @"_proclit$anon-6" to i8*), i8* bitcast ({ i64, i64 } ({ i64, i64 }, { i64, i64 }, i64, i8*)* @"_proclit$anon-7" to i8*), i8* null, i8* null, i8* null, i8* null, i8* null, i8* null }
@"csbs$2ab" = private unnamed_addr constant [59 x i8] c"/home/skytrias/Schreibtisch/Odin/core/strings/builder.odin\00", align 1
@"csbs$2ac" = private unnamed_addr constant [16 x i8] c"_proclit$anon-3\00", align 1
@"csbs$2ad" = private unnamed_addr constant [2 x i8] c" \00", align 1
@"csbs$2ae" = private unnamed_addr constant [3 x i8] c": \00", align 1
@"csbs$2af" = private unnamed_addr constant [6 x i8] c"panic\00", align 1
@"csbs$2b0" = private unnamed_addr constant [20 x i8] c"not yet implemented\00", align 1
@"csbs$2b1" = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@"csbs$2b2" = private unnamed_addr constant [74 x i8] c"/home/skytrias/Schreibtisch/Odin/core/runtime/dynamic_array_internal.odin\00", align 1
@"csbs$2b3" = private unnamed_addr constant [24 x i8] c"__dynamic_array_reserve\00", align 1
@"csbs$2b4" = private unnamed_addr constant [31 x i8] c"__dynamic_array_append_nothing\00", align 1
@"csbs$2b5" = private unnamed_addr constant [72 x i8] c"/home/skytrias/Schreibtisch/Odin/core/runtime/dynamic_map_internal.odin\00", align 1
@"csbs$2b6" = private unnamed_addr constant [24 x i8] c" Invalid slice indices \00", align 1
@"csbs$2b7" = private unnamed_addr constant [2 x i8] c":\00", align 1
@"csbs$2b8" = private unnamed_addr constant [22 x i8] c" is out of range 0..<\00", align 1
@"csbs$2b9" = private unnamed_addr constant [60 x i8] c"/home/skytrias/Schreibtisch/Odin/core/runtime/internal.odin\00", align 1
@"csbs$2ba" = private unnamed_addr constant [18 x i8] c"align_forward_int\00", align 1
@"csbs$2bb" = private unnamed_addr constant [22 x i8] c"align_forward_uintptr\00", align 1
@runtime.string_decode_rune-.accept_sizes-47188 = internal global [256 x i8] c
@runtime.string_decode_rune-.accept_ranges-47189 = internal global [5 x %runtime.string_decode_rune.Accept_Range-1] [%runtime.string_decode_rune.Accept_Range-1 { i8 -128, i8 -65 }, %runtime.string_decode_rune.Accept_Range-1 { i8 -96, i8 -65 }, %runtime.string_decode_rune.Accept_Range-1 { i8 -128, i8 -97 }, %runtime.string_decode_rune.Accept_Range-1 { i8 -112, i8 -65 }, %runtime.string_decode_rune.Accept_Range-1 { i8 -128, i8 -113 }]
@"csbs$2bc" = private unnamed_addr constant [3 x i8] c"\\a\00", align 1
@"csbs$2bd" = private unnamed_addr constant [3 x i8] c"\\b\00", align 1
@"csbs$2be" = private unnamed_addr constant [3 x i8] c"\\e\00", align 1
@"csbs$2bf" = private unnamed_addr constant [3 x i8] c"\\f\00", align 1
@"csbs$2c0" = private unnamed_addr constant [3 x i8] c"\\n\00", align 1
@"csbs$2c1" = private unnamed_addr constant [3 x i8] c"\\r\00", align 1
@"csbs$2c2" = private unnamed_addr constant [3 x i8] c"\\t\00", align 1
@"csbs$2c3" = private unnamed_addr constant [3 x i8] c"\\v\00", align 1
@"csbs$2c4" = private unnamed_addr constant [5 x i8] c"\\x00\00", align 1
@"csbs$2c5" = private unnamed_addr constant [3 x i8] c"\\x\00", align 1
@"csbs$2c6" = private unnamed_addr constant [57 x i8] c"/home/skytrias/Schreibtisch/Odin/core/runtime/print.odin\00", align 1
@"csbs$2c7" = private unnamed_addr constant [4 x i8] c"nil\00", align 1
@"csbs$2c8" = private unnamed_addr constant [4 x i8] c"int\00", align 1
@"csbs$2c9" = private unnamed_addr constant [5 x i8] c"uint\00", align 1
@"csbs$2ca" = private unnamed_addr constant [8 x i8] c"uintptr\00", align 1
@"csbs$2cb" = private unnamed_addr constant [5 x i8] c"rune\00", align 1
@"csbs$2cc" = private unnamed_addr constant [8 x i8] c"complex\00", align 1
@"csbs$2cd" = private unnamed_addr constant [11 x i8] c"quaternion\00", align 1
@"csbs$2ce" = private unnamed_addr constant [7 x i8] c"string\00", align 1
@"csbs$2cf" = private unnamed_addr constant [5 x i8] c"bool\00", align 1
@"csbs$2d0" = private unnamed_addr constant [4 x i8] c"any\00", align 1
@"csbs$2d1" = private unnamed_addr constant [7 x i8] c"typeid\00", align 1
@"csbs$2d2" = private unnamed_addr constant [7 x i8] c"rawptr\00", align 1
@"csbs$2d3" = private unnamed_addr constant [2 x i8] c"^\00", align 1
@"csbs$2d4" = private unnamed_addr constant [4 x i8] c"[^]\00", align 1
@"csbs$2d5" = private unnamed_addr constant [7 x i8] c"#soa ^\00", align 1
@"csbs$2d6" = private unnamed_addr constant [5 x i8] c"proc\00", align 1
@"csbs$2d7" = private unnamed_addr constant [3 x i8] c"()\00", align 1
@"csbs$2d8" = private unnamed_addr constant [3 x i8] c", \00", align 1
@"csbs$2d9" = private unnamed_addr constant [2 x i8] c")\00", align 1
@"csbs$2da" = private unnamed_addr constant [5 x i8] c" -> \00", align 1
@"csbs$2db" = private unnamed_addr constant [8 x i8] c"#sparse\00", align 1
@"csbs$2dc" = private unnamed_addr constant [10 x i8] c"[dynamic]\00", align 1
@"csbs$2dd" = private unnamed_addr constant [3 x i8] c"[]\00", align 1
@"csbs$2de" = private unnamed_addr constant [5 x i8] c"map[\00", align 1
@"csbs$2df" = private unnamed_addr constant [6 x i8] c"#soa[\00", align 1
@"csbs$2e0" = private unnamed_addr constant [7 x i8] c"#soa[]\00", align 1
@"csbs$2e1" = private unnamed_addr constant [14 x i8] c"#soa[dynamic]\00", align 1
@"csbs$2e2" = private unnamed_addr constant [8 x i8] c"struct \00", align 1
@"csbs$2e3" = private unnamed_addr constant [9 x i8] c"#packed \00", align 1
@"csbs$2e4" = private unnamed_addr constant [12 x i8] c"#raw_union \00", align 1
@"csbs$2e5" = private unnamed_addr constant [8 x i8] c"#align \00", align 1
@"csbs$2e6" = private unnamed_addr constant [7 x i8] c"union \00", align 1
@"csbs$2e7" = private unnamed_addr constant [9 x i8] c"#no_nil \00", align 1
@"csbs$2e8" = private unnamed_addr constant [2 x i8] c"}\00", align 1
@"csbs$2e9" = private unnamed_addr constant [6 x i8] c"enum \00", align 1
@"csbs$2ea" = private unnamed_addr constant [3 x i8] c" {\00", align 1
@"csbs$2eb" = private unnamed_addr constant [9 x i8] c"bit_set[\00", align 1
@"csbs$2ec" = private unnamed_addr constant [3 x i8] c"..\00", align 1
@"csbs$2ed" = private unnamed_addr constant [3 x i8] c"; \00", align 1
@"csbs$2ee" = private unnamed_addr constant [7 x i8] c"#simd[\00", align 1
@"csbs$2ef" = private unnamed_addr constant [11 x i8] c"#relative(\00", align 1
@"csbs$2f0" = private unnamed_addr constant [3 x i8] c") \00", align 1
@"csbs$2f1" = private unnamed_addr constant [8 x i8] c"matrix[\00", align 1
@"csbs$2f2" = private unnamed_addr constant [2 x i8] c"]\00", align 1
@"csbs$2f3" = private unnamed_addr constant [54 x i8] c"/home/skytrias/Schreibtisch/todool_rmgui/src/box.odin\00", align 1
@"csbs$2f4" = private unnamed_addr constant [17 x i8] c"text_box_message\00", align 1
@"csbs$2f5" = private unnamed_addr constant [17 x i8] c"task_box_message\00", align 1
@"csbs$2f6" = private unnamed_addr constant [16 x i8] c"ctrl+shift+left\00", align 1
@"csbs$2f7" = private unnamed_addr constant [10 x i8] c"ctrl+left\00", align 1
@"csbs$2f8" = private unnamed_addr constant [11 x i8] c"shift+left\00", align 1
@"csbs$2f9" = private unnamed_addr constant [5 x i8] c"left\00", align 1
@"csbs$2fa" = private unnamed_addr constant [17 x i8] c"ctrl+shift+right\00", align 1
@"csbs$2fb" = private unnamed_addr constant [11 x i8] c"ctrl+right\00", align 1
@"csbs$2fc" = private unnamed_addr constant [12 x i8] c"shift+right\00", align 1
@"csbs$2fd" = private unnamed_addr constant [6 x i8] c"right\00", align 1
@"csbs$2fe" = private unnamed_addr constant [11 x i8] c"shift+home\00", align 1
@"csbs$2ff" = private unnamed_addr constant [5 x i8] c"home\00", align 1
@"csbs$300" = private unnamed_addr constant [10 x i8] c"shift+end\00", align 1
@"csbs$301" = private unnamed_addr constant [4 x i8] c"end\00", align 1
@"csbs$302" = private unnamed_addr constant [15 x i8] c"ctrl+backspace\00", align 1
@"csbs$303" = private unnamed_addr constant [16 x i8] c"shift+backspace\00", align 1
@"csbs$304" = private unnamed_addr constant [10 x i8] c"backspace\00", align 1
@"csbs$305" = private unnamed_addr constant [12 x i8] c"ctrl+delete\00", align 1
@"csbs$306" = private unnamed_addr constant [7 x i8] c"delete\00", align 1
@"csbs$307" = private unnamed_addr constant [7 x i8] c"ctrl+a\00", align 1
@"csbs$308" = private unnamed_addr constant [7 x i8] c"ctrl+c\00", align 1
@"csbs$309" = private unnamed_addr constant [7 x i8] c"ctrl+v\00", align 1
@"csbs$30a" = private unnamed_addr constant [39 x i8] c"UI: text box unsupported caret setting\00", align 1
@"csbs$30b" = private unnamed_addr constant [14 x i8] c"box_set_caret\00", align 1
@"csbs$30c" = private unnamed_addr constant [20 x i8] c"builder_append_rune\00", align 1
@"csbs$30d" = private unnamed_addr constant [17 x i8] c"box_layout_caret\00", align 1
@"csbs$30e" = private unnamed_addr constant [54 x i8] c"/home/skytrias/Schreibtisch/todool_rmgui/src/cam.odin\00", align 1
@"csbs$30f" = private unnamed_addr constant [4 x i8] c"yup\00", align 1
@"csbs$310" = private unnamed_addr constant [56 x i8] c"/home/skytrias/Schreibtisch/todool_rmgui/src/color.odin\00", align 1
@"csbs$311" = private unnamed_addr constant [17 x i8] c"color_hsv_to_rgb\00", align 1
@"csbs$312" = private unnamed_addr constant [6 x i8] c"space\00", align 1
@"csbs$313" = private unnamed_addr constant [7 x i8] c"return\00", align 1
@"csbs$314" = private unnamed_addr constant [24 x i8] c"element_animation_start\00", align 1
@"csbs$315" = private unnamed_addr constant [23 x i8] c"element_animation_stop\00", align 1
@"csbs$316" = private unnamed_addr constant [19 x i8] c"element_deallocate\00", align 1
@"csbs$317" = private unnamed_addr constant [15 x i8] c"button_message\00", align 1
@"csbs$318" = private unnamed_addr constant [14 x i8] c"label_message\00", align 1
@"csbs$319" = private unnamed_addr constant [5 x i8] c"%.1f\00", align 1
@"csbs$31a" = private unnamed_addr constant [15 x i8] c"slider_message\00", align 1
@"csbs$31b" = private unnamed_addr constant [24 x i8] c"toggle_selector_message\00", align 1
@"csbs$31c" = private unnamed_addr constant [21 x i8] c"toggle_selector_init\00", align 1
@"csbs$31d" = private unnamed_addr constant [19 x i8] c"enum_panel_message\00", align 1
@"csbs$31e" = private unnamed_addr constant [17 x i8] c"Lato-Regular.ttf\00", align 1
@"csbs$31f" = private unnamed_addr constant [14 x i8] c"Lato-Bold.ttf\00", align 1
@"csbs$320" = private unnamed_addr constant [12 x i8] c"icofont.ttf\00", align 1
@"csbs$321" = private unnamed_addr constant [20 x i8] c"window_add_shortcut\00", align 1
@"csbs$322" = private unnamed_addr constant [38 x i8] c"SDL2: error during window creation %v\00", align 1
@"csbs$323" = private unnamed_addr constant [12 x i8] c"window_init\00", align 1
@"csbs$324" = private unnamed_addr constant [10 x i8] c"shift+tab\00", align 1
@"csbs$325" = private unnamed_addr constant [3 x i8] c"up\00", align 1
@"csbs$326" = private unnamed_addr constant [5 x i8] c"down\00", align 1
@"csbs$327" = private unnamed_addr constant [40 x i8] c"ELEMENT_NEXT_OR_PREVIOUS_SIBLING FAILED\00", align 1
@"csbs$328" = private unnamed_addr constant [33 x i8] c"element_next_or_previous_sibling\00", align 1
@"csbs$329" = private unnamed_addr constant [15 x i8] c"window_destroy\00", align 1
@"csbs$32a" = private unnamed_addr constant [6 x i8] c"ctrl+\00", align 1
@"csbs$32b" = private unnamed_addr constant [7 x i8] c"shift+\00", align 1
@"csbs$32c" = private unnamed_addr constant [5 x i8] c"alt+\00", align 1
@"csbs$32d" = private unnamed_addr constant [20 x i8] c"window_handle_event\00", align 1
@"csbs$32e" = private unnamed_addr constant [8 x i8] c"gs_init\00", align 1
@"csbs$32f" = private unnamed_addr constant [30 x i8] c"SDL2: failed to initialize %d\00", align 1
@"csbs$330" = private unnamed_addr constant [39 x i8] c"SDL_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR\00", align 1
@"csbs$331" = private unnamed_addr constant [2 x i8] c"0\00", align 1
@"csbs$332" = private unnamed_addr constant [9 x i8] c"skytrias\00", align 1
@"csbs$333" = private unnamed_addr constant [7 x i8] c"todool\00", align 1
@"csbs$334" = private unnamed_addr constant [3 x i8] c".\\\00", align 1
@"csbs$335" = private unnamed_addr constant [33 x i8] c"MIXER: couldnt load audio format\00", align 1
@"csbs$336" = private unnamed_addr constant [22 x i8] c"MIXER: failed loading\00", align 1
@"csbs$337" = private unnamed_addr constant [23 x i8] c"sounds/timer_start.wav\00", align 1
@"csbs$338" = private unnamed_addr constant [22 x i8] c"sounds/timer_stop.wav\00", align 1
@"csbs$339" = private unnamed_addr constant [24 x i8] c"sounds/timer_resume.wav\00", align 1
@"csbs$33a" = private unnamed_addr constant [23 x i8] c"sounds/timer_ended.wav\00", align 1
@"csbs$33b" = private unnamed_addr constant [11 x i8] c"gs_destroy\00", align 1
@"csbs$33c" = private unnamed_addr constant [20 x i8] c"gs_draw_and_cleanup\00", align 1
@"csbs$33d" = private unnamed_addr constant [15 x i8] c"dialog_message\00", align 1
@"csbs$33e" = private unnamed_addr constant [7 x i8] c"escape\00", align 1
@"csbs$33f" = private unnamed_addr constant [3 x i8] c"_C\00", align 1
@"csbs$340" = private unnamed_addr constant [3 x i8] c"_D\00", align 1
@"csbs$341" = private unnamed_addr constant [21 x i8] c"clipboard_get_string\00", align 1
@"csbs$342" = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@"csbs$343" = private unnamed_addr constant [7 x i8] c"Todool\00", align 1
@"csbs$344" = private unnamed_addr constant [11 x i8] c"save.sjson\00", align 1
@"csbs$345" = private unnamed_addr constant [58 x i8] c"/home/skytrias/Schreibtisch/todool_rmgui/src/pattern.odin\00", align 1
@"csbs$346" = private unnamed_addr constant [24 x i8] c"pattern_scanner_destroy\00", align 1
@"csbs$347" = private unnamed_addr constant [13 x i8] c"pattern_scan\00", align 1
@"csbs$348" = private unnamed_addr constant [21 x i8] c"pattern_load_content\00", align 1
@"csbs$349" = private unnamed_addr constant [5 x i8] c"TODO\00", align 1
@"csbs$34a" = private unnamed_addr constant [5 x i8] c"NOTE\00", align 1
@"csbs$34b" = private unnamed_addr constant [59 x i8] c"/home/skytrias/Schreibtisch/todool_rmgui/src/pomodoro.odin\00", align 1
@"csbs$34c" = private unnamed_addr constant [14 x i8] c"pomodoro_init\00", align 1
@"csbs$34d" = private unnamed_addr constant [17 x i8] c"pomodoro_destroy\00", align 1
@"csbs$34e" = private unnamed_addr constant [8 x i8] c"%2d:%2d\00", align 1
@"csbs$34f" = private unnamed_addr constant [19 x i8] c"Total: %dh %dm %ds\00", align 1
@"csbs$350" = private unnamed_addr constant [19 x i8] c"render_target_init\00", align 1
@"csbs$351" = private unnamed_addr constant [32 x i8] c"RENDERER: Failed to load shader\00", align 1
@"csbs$352" = private unnamed_addr constant [13 x i8] c"u_projection\00", align 1
@"csbs$353" = private unnamed_addr constant [15 x i8] c"u_shadow_color\00", align 1
@"csbs$354" = private unnamed_addr constant [6 x i8] c"i_pos\00", align 1
@"csbs$355" = private unnamed_addr constant [5 x i8] c"i_uv\00", align 1
@"csbs$356" = private unnamed_addr constant [8 x i8] c"i_color\00", align 1
@"csbs$357" = private unnamed_addr constant [26 x i8] c"i_roundness_and_thickness\00", align 1
@"csbs$358" = private unnamed_addr constant [13 x i8] c"i_additional\00", align 1
@"csbs$359" = private unnamed_addr constant [7 x i8] c"i_kind\00", align 1
@"csbs$35a" = private unnamed_addr constant [15 x i8] c"u_sampler_font\00", align 1
@"csbs$35b" = private unnamed_addr constant [4 x i8] c"_sv\00", align 1
@"csbs$35c" = private unnamed_addr constant [5 x i8] c"_hue\00", align 1
@"csbs$35d" = private unnamed_addr constant [6 x i8] c"_test\00", align 1
@"csbs$35e" = private unnamed_addr constant [22 x i8] c"render_target_destroy\00", align 1
@"csbs$35f" = private unnamed_addr constant [18 x i8] c"render_target_end\00", align 1

define internal void @"__$startup_type_info"() {
decls:
  br label %entry

entry:                                            ; preds = %decls
  store i64 4, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 206, i32 0), align 8
  store i64 4, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 206, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 206, i32 2), align 4
  store i64 3746994889972252878, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 206, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 206, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$0" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 206, i32 5, i32 1), align 8
  store i64 4, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 207, i32 0), align 8
  store i64 4, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 207, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 207, i32 2), align 4
  store i64 1441151880758558927, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 207, i32 4), align 8
  store %runtime.Type_Info_Enum { %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 30), { %..string*, i64 } { %..string* getelementptr inbounds ([244 x %..string], [244 x %..string]* @"$enum_names-207", i64 0, i64 0), i64 244 }, { i64*, i64 } { i64* getelementptr inbounds ([244 x i64], [244 x i64]* @"$enum_values-207", i64 0, i64 0), i64 244 } }, %runtime.Type_Info_Enum* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 207, i32 5) to %runtime.Type_Info_Enum*), align 8
  store i64 21, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 207, i32 5, i32 1), align 8
  store i64 4, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 30, i32 0), align 8
  store i64 4, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 30, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 30, i32 2), align 4
  store i64 4683743612465315870, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 30, i32 4), align 8
  store %runtime.Type_Info_Integer { i8 1, i8 0 }, %runtime.Type_Info_Integer* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 30, i32 5) to %runtime.Type_Info_Integer*), align 1
  store i64 2, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 30, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 155, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 155, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 155, i32 2), align 4
  store i64 3746994889972252827, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 155, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 155, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$1" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 155, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 156, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 156, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 156, i32 2), align 4
  store i64 1441151880758558876, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 156, i32 4), align 8
  store %runtime.Type_Info_Enum { %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 105), { %..string*, i64 } { %..string* getelementptr inbounds ([5 x %..string], [5 x %..string]* @"$enum_names-156", i64 0, i64 0), i64 5 }, { i64*, i64 } { i64* getelementptr inbounds ([5 x i64], [5 x i64]* @"$enum_values-156", i64 0, i64 0), i64 5 } }, %runtime.Type_Info_Enum* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 156, i32 5) to %runtime.Type_Info_Enum*), align 8
  store i64 21, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 156, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 105, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 105, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 105, i32 2), align 4
  store i64 72057594037928041, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 105, i32 4), align 8
  call void @llvm.memset.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 105, i32 5) to i8*), i8 0, i64 2, i1 false)
  store i64 2, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 105, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 234, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 234, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 234, i32 2), align 4
  store i64 3746994889972252906, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 234, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 234, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$2" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 234, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 235, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 235, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 235, i32 2), align 4
  store i64 1441151880758558955, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 235, i32 4), align 8
  store %runtime.Type_Info_Enum { %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 3), { %..string*, i64 } { %..string* getelementptr inbounds ([5 x %..string], [5 x %..string]* @"$enum_names-235", i64 0, i64 0), i64 5 }, { i64*, i64 } { i64* getelementptr inbounds ([5 x i64], [5 x i64]* @"$enum_values-235", i64 0, i64 0), i64 5 } }, %runtime.Type_Info_Enum* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 235, i32 5) to %runtime.Type_Info_Enum*), align 8
  store i64 21, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 235, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 3, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 3, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 3, i32 2), align 4
  store i64 4683743612465315843, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 3, i32 4), align 8
  store %runtime.Type_Info_Integer { i8 1, i8 0 }, %runtime.Type_Info_Integer* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 3, i32 5) to %runtime.Type_Info_Integer*), align 1
  store i64 2, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 3, i32 5, i32 1), align 8
  store i64 48, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 237, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 237, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 237, i32 2), align 4
  store i64 1297036692682703085, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 237, i32 4), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 68), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 0), align 8
  store %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$11c", i64 0, i64 0), i64 4 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 0), align 8
  store i64 0, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 0), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 0), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 66), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 1), align 8
  store %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$11d", i64 0, i64 0), i64 4 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 1), align 8
  store i64 8, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 1), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 1), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 241), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 2), align 8
  store %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$11e", i64 0, i64 0), i64 3 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 2), align 8
  store i64 16, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 2), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 2), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 73), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 3), align 8
  store %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$11f", i64 0, i64 0), i64 6 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 3), align 8
  store i64 24, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 3), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 3), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 75), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 4), align 8
  store %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$120", i64 0, i64 0), i64 8 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 4), align 8
  store i64 32, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 4), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 4), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 3), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 5), align 8
  store i64 40, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 5), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 5), align 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 237, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Struct* @"ggv$3" to i8*), i64 120, i1 false)
  store i64 19, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 237, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 238, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 238, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 238, i32 2), align 4
  store i64 720575940379279598, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 238, i32 4), align 8
  store %runtime.Type_Info_Pointer { %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 68) }, %runtime.Type_Info_Pointer* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 238, i32 5) to %runtime.Type_Info_Pointer*), align 8
  store i64 11, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 238, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 68, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 68, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 68, i32 2), align 4
  store i64 720575940379279428, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 68, i32 4), align 8
  store %runtime.Type_Info_Pointer { %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 17) }, %runtime.Type_Info_Pointer* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 68, i32 5) to %runtime.Type_Info_Pointer*), align 8
  store i64 11, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 68, i32 5, i32 1), align 8
  store i64 16, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 17, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 17, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 17, i32 2), align 4
  store i64 432345564227567633, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 17, i32 4), align 8
  store i64 7, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 17, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 18, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 18, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 18, i32 2), align 4
  store i64 720575940379279378, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 18, i32 4), align 8
  store %runtime.Type_Info_Pointer { %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 19) }, %runtime.Type_Info_Pointer* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 18, i32 5) to %runtime.Type_Info_Pointer*), align 8
  store i64 11, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 18, i32 5, i32 1), align 8
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 19, i32 0), align 8
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 19, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 19, i32 2), align 4
  store i64 72057594037927955, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 19, i32 4), align 8
  call void @llvm.memset.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 19, i32 5) to i8*), i8 0, i64 2, i1 false)
  store i64 2, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 19, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 239, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 239, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 239, i32 2), align 4
  store i64 720575940379279599, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 239, i32 4), align 8
  store %runtime.Type_Info_Pointer { %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 66) }, %runtime.Type_Info_Pointer* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 239, i32 5) to %runtime.Type_Info_Pointer*), align 8
  store i64 11, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 239, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 66, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 66, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 66, i32 2), align 4
  store i64 720575940379279426, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 66, i32 4), align 8
  store %runtime.Type_Info_Pointer { %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 20) }, %runtime.Type_Info_Pointer* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 66, i32 5) to %runtime.Type_Info_Pointer*), align 8
  store i64 11, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 66, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 20, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 20, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 20, i32 2), align 4
  store i64 720575940379279380, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 20, i32 4), align 8
  store %runtime.Type_Info_Pointer { %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 21) }, %runtime.Type_Info_Pointer* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 20, i32 5) to %runtime.Type_Info_Pointer*), align 8
  store i64 11, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 20, i32 5, i32 1), align 8
  store i64 160, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 21, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 21, i32 1), align 8
  store i32 0, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 21, i32 2), align 4
  store i64 3602879701896396821, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 21, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 21, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$4" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 21, i32 5, i32 1), align 8
  store i64 160, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 22, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 22, i32 1), align 8
  store i32 0, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 22, i32 2), align 4
  store i64 1297036692682702870, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 22, i32 4), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 3), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 6), align 8
  store %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$122", i64 0, i64 0), i64 4 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 6), align 8
  store i64 0, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 6), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 6), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 3), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 7), align 8
  store %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$123", i64 0, i64 0), i64 5 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 7), align 8
  store i64 8, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 7), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 7), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 23), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 8), align 8
  store %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$124", i64 0, i64 0), i64 5 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 8), align 8
  store i64 16, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 8), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 8), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 12), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 9), align 8
  store %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$125", i64 0, i64 0), i64 2 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 9), align 8
  store i64 24, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 9), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 9), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 13), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 10), align 8
  store %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$126", i64 0, i64 0), i64 7 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 10), align 8
  store i64 32, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 10), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 10), align 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 22, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Struct* @"ggv$5" to i8*), i64 120, i1 false)
  store i64 19, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 22, i32 5, i32 1), align 8
  store i64 4, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 23, i32 0), align 8
  store i64 4, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 23, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 23, i32 2), align 4
  store i64 3891110078048108567, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 23, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 23, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$6" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 23, i32 5, i32 1), align 8
  store i64 4, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 24, i32 0), align 8
  store i64 4, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 24, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 24, i32 2), align 4
  store i64 1585267068834414616, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 24, i32 4), align 8
  store %runtime.Type_Info_Bit_Set { %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 25), %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 27), i64 0, i64 1 }, %runtime.Type_Info_Bit_Set* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 24, i32 5) to %runtime.Type_Info_Bit_Set*), align 8
  store i64 23, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 24, i32 5, i32 1), align 8
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 25, i32 0), align 8
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 25, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 25, i32 2), align 4
  store i64 3746994889972252697, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 25, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 25, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$7" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 25, i32 5, i32 1), align 8
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 26, i32 0), align 8
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 26, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 26, i32 2), align 4
  store i64 1441151880758558746, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 26, i32 4), align 8
  store %runtime.Type_Info_Enum { %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 19), { %..string*, i64 } { %..string* getelementptr inbounds ([2 x %..string], [2 x %..string]* @"$enum_names-26", i64 0, i64 0), i64 2 }, { i64*, i64 } { i64* getelementptr inbounds ([2 x i64], [2 x i64]* @"$enum_values-26", i64 0, i64 0), i64 2 } }, %runtime.Type_Info_Enum* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 26, i32 5) to %runtime.Type_Info_Enum*), align 8
  store i64 21, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 26, i32 5, i32 1), align 8
  store i64 4, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 27, i32 0), align 8
  store i64 4, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 27, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 27, i32 2), align 4
  store i64 72057594037927963, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 27, i32 4), align 8
  call void @llvm.memset.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 27, i32 5) to i8*), i8 0, i64 2, i1 false)
  store i64 2, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 27, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 12, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 12, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 12, i32 2), align 4
  store i64 12, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 12, i32 4), align 8
  store i64 10, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 12, i32 5, i32 1), align 8
  store i64 128, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 13, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 13, i32 1), align 8
  store i32 0, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 13, i32 2), align 4
  store i64 1369094286720630797, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 13, i32 4), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 15), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 11), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 31), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 12), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 36), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 13), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 38), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 14), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 40), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 15), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 41), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 16), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 42), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 17), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 44), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 18), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 45), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 19), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 46), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 20), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 47), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 21), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 49), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 22), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 50), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 23), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 54), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 24), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 56), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 25), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 60), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 26), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 62), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 27), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 63), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 28), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 69), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 29), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 83), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 30), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 85), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 31), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 89), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 32), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 95), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 33), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 97), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 34), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 98), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 35), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 100), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 36), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 102), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 37), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 104), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 38), align 8
  store %runtime.Type_Info_Union { { %runtime.Type_Info**, i64 } { %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 11), i64 28 }, i64 120, %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 14), i8* null, i8 0, i8 0, i8 0, [5 x i8] zeroinitializer }, %runtime.Type_Info_Union* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 13, i32 5) to %runtime.Type_Info_Union*), align 8
  store i64 20, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 13, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 14, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 14, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 14, i32 2), align 4
  store i64 72057594037927950, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 14, i32 4), align 8
  call void @llvm.memset.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 14, i32 5) to i8*), i8 0, i64 2, i1 false)
  store i64 2, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 14, i32 5, i32 1), align 8
  store i64 80, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 15, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 15, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 15, i32 2), align 4
  store i64 3602879701896396815, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 15, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 15, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$8" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 15, i32 5, i32 1), align 8
  store i64 80, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 16, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 16, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 16, i32 2), align 4
  store i64 1297036692682702864, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 16, i32 4), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 17), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 39), align 8
  store %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$11c", i64 0, i64 0), i64 4 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 11), align 8
  store i64 0, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 11), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 11), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 20), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 40), align 8
  store %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$12c", i64 0, i64 0), i64 4 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 12), align 8
  store i64 16, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 12), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 12), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 17), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 41), align 8
  store %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$12d", i64 0, i64 0), i64 3 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 13), align 8
  store i64 24, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 13), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 13), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 28), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 42), align 8
  store %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$12e", i64 0, i64 0), i64 3 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 14), align 8
  store i64 40, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 14), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 14), align 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 16, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Struct* @"ggv$9" to i8*), i64 120, i1 false)
  store i64 19, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 16, i32 5, i32 1), align 8
  store i64 40, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 28, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 28, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 28, i32 2), align 4
  store i64 3602879701896396828, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 28, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 28, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$a" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 28, i32 5, i32 1), align 8
  store i64 40, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 29, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 29, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 29, i32 2), align 4
  store i64 1297036692682702877, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 29, i32 4), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 17), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 43), align 8
  store %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$130", i64 0, i64 0), i64 9 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 15), align 8
  store i64 0, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 15), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 15), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 30), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 44), align 8
  store %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$131", i64 0, i64 0), i64 4 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 16), align 8
  store i64 16, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 16), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 16), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 30), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 45), align 8
  store %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$132", i64 0, i64 0), i64 6 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 17), align 8
  store i64 20, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 17), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 17), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 17), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 46), align 8
  store %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$133", i64 0, i64 0), i64 9 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 18), align 8
  store i64 24, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 18), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 18), align 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 29, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Struct* @"ggv$b" to i8*), i64 120, i1 false)
  store i64 19, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 29, i32 5, i32 1), align 8
  store i64 2, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 31, i32 0), align 8
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 31, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 31, i32 2), align 4
  store i64 3602879701896396831, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 31, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 31, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$c" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 31, i32 5, i32 1), align 8
  store i64 2, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 32, i32 0), align 8
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 32, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 32, i32 2), align 4
  store i64 1297036692682702880, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 32, i32 4), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 33), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 47), align 8
  store %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$135", i64 0, i64 0), i64 6 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 19), align 8
  store i64 0, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 19), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 19), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 34), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 48), align 8
  store %..string { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"csbs$136", i64 0, i64 0), i64 10 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 20), align 8
  store i64 1, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 20), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 20), align 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 32, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Struct* @"ggv$d" to i8*), i64 120, i1 false)
  store i64 19, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 32, i32 5, i32 1), align 8
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 33, i32 0), align 8
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 33, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 33, i32 2), align 4
  store i64 504403158265495585, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 33, i32 4), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 33, i32 5, i32 1), align 8
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 34, i32 0), align 8
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 34, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 34, i32 2), align 4
  store i64 3746994889972252706, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 34, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 34, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$e" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 34, i32 5, i32 1), align 8
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 35, i32 0), align 8
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 35, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 35, i32 2), align 4
  store i64 1441151880758558755, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 35, i32 4), align 8
  store %runtime.Type_Info_Enum { %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 19), { %..string*, i64 } { %..string* getelementptr inbounds ([3 x %..string], [3 x %..string]* @"$enum_names-35", i64 0, i64 0), i64 3 }, { i64*, i64 } { i64* getelementptr inbounds ([3 x i64], [3 x i64]* @"$enum_values-35", i64 0, i64 0), i64 3 } }, %runtime.Type_Info_Enum* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 35, i32 5) to %runtime.Type_Info_Enum*), align 8
  store i64 21, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 35, i32 5, i32 1), align 8
  store i64 0, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 36, i32 0), align 8
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 36, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 36, i32 2), align 4
  store i64 3602879701896396836, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 36, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 36, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$f" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 36, i32 5, i32 1), align 8
  store i64 0, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 37, i32 0), align 8
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 37, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 37, i32 2), align 4
  store i64 1297036692682702885, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 37, i32 4), align 8
  call void @llvm.memset.p0i8.i64(i8* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 37, i32 5) to i8*), i8 0, i64 120, i1 false)
  store i64 19, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 37, i32 5, i32 1), align 8
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 38, i32 0), align 8
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 38, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 38, i32 2), align 4
  store i64 3602879701896396838, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 38, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 38, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$10" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 38, i32 5, i32 1), align 8
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 39, i32 0), align 8
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 39, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 39, i32 2), align 4
  store i64 1297036692682702887, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 39, i32 4), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 34), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 49), align 8
  store %..string { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"csbs$136", i64 0, i64 0), i64 10 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 21), align 8
  store i64 0, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 21), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 21), align 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 39, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Struct* @"ggv$11" to i8*), i64 120, i1 false)
  store i64 19, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 39, i32 5, i32 1), align 8
  store i64 0, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 40, i32 0), align 8
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 40, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 40, i32 2), align 4
  store i64 3602879701896396840, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 40, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 40, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$12" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 40, i32 5, i32 1), align 8
  store i64 0, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 41, i32 0), align 8
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 41, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 41, i32 2), align 4
  store i64 3602879701896396841, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 41, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 41, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$13" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 41, i32 5, i32 1), align 8
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 42, i32 0), align 8
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 42, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 42, i32 2), align 4
  store i64 3602879701896396842, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 42, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 42, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$14" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 42, i32 5, i32 1), align 8
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 43, i32 0), align 8
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 43, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 43, i32 2), align 4
  store i64 1297036692682702891, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 43, i32 4), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 33), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 50), align 8
  store %..string { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"csbs$140", i64 0, i64 0), i64 10 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 22), align 8
  store i64 0, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 22), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 22), align 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 43, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Struct* @"ggv$15" to i8*), i64 120, i1 false)
  store i64 19, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 43, i32 5, i32 1), align 8
  store i64 0, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 44, i32 0), align 8
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 44, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 44, i32 2), align 4
  store i64 3602879701896396844, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 44, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 44, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$16" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 44, i32 5, i32 1), align 8
  store i64 0, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 45, i32 0), align 8
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 45, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 45, i32 2), align 4
  store i64 3602879701896396845, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 45, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 45, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$17" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 45, i32 5, i32 1), align 8
  store i64 0, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 46, i32 0), align 8
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 46, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 46, i32 2), align 4
  store i64 3602879701896396846, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 46, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 46, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$18" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 46, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 47, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 47, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 47, i32 2), align 4
  store i64 3602879701896396847, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 47, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 47, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$19" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 47, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 48, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 48, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 48, i32 2), align 4
  store i64 1297036692682702896, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 48, i32 4), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 20), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 51), align 8
  store %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$145", i64 0, i64 0), i64 4 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 23), align 8
  store i64 0, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 23), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 23), align 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 48, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Struct* @"ggv$1a" to i8*), i64 120, i1 false)
  store i64 19, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 48, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 49, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 49, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 49, i32 2), align 4
  store i64 3602879701896396849, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 49, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 49, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$1b" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 49, i32 5, i32 1), align 8
  store i64 24, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 50, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 50, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 50, i32 2), align 4
  store i64 3602879701896396850, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 50, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 50, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$1c" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 50, i32 5, i32 1), align 8
  store i64 24, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 51, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 51, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 51, i32 2), align 4
  store i64 1297036692682702899, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 51, i32 4), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 20), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 52), align 8
  store %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$148", i64 0, i64 0), i64 6 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 24), align 8
  store i64 0, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 24), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 24), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 20), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 53), align 8
  store %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$149", i64 0, i64 0), i64 7 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 25), align 8
  store i64 8, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 25), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 25), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 33), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 54), align 8
  store %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$14a", i64 0, i64 0), i64 8 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 26), align 8
  store i64 16, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 26), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 26), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 52), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 55), align 8
  store %..string { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"csbs$14b", i64 0, i64 0), i64 10 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 27), align 8
  store i64 17, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 27), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 27), align 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 51, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Struct* @"ggv$1d" to i8*), i64 120, i1 false)
  store i64 19, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 51, i32 5, i32 1), align 8
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 52, i32 0), align 8
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 52, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 52, i32 2), align 4
  store i64 3746994889972252724, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 52, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 52, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$1e" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 52, i32 5, i32 1), align 8
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 53, i32 0), align 8
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 53, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 53, i32 2), align 4
  store i64 1441151880758558773, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 53, i32 4), align 8
  store %runtime.Type_Info_Enum { %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 19), { %..string*, i64 } { %..string* getelementptr inbounds ([10 x %..string], [10 x %..string]* @"$enum_names-53", i64 0, i64 0), i64 10 }, { i64*, i64 } { i64* getelementptr inbounds ([10 x i64], [10 x i64]* @"$enum_values-53", i64 0, i64 0), i64 10 } }, %runtime.Type_Info_Enum* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 53, i32 5) to %runtime.Type_Info_Enum*), align 8
  store i64 21, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 53, i32 5, i32 1), align 8
  store i64 24, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 54, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 54, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 54, i32 2), align 4
  store i64 3602879701896396854, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 54, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 54, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$1f" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 54, i32 5, i32 1), align 8
  store i64 24, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 55, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 55, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 55, i32 2), align 4
  store i64 1297036692682702903, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 55, i32 4), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 20), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 56), align 8
  store %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$145", i64 0, i64 0), i64 4 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 28), align 8
  store i64 0, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 28), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 28), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 3), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 57), align 8
  store %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$157", i64 0, i64 0), i64 9 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 29), align 8
  store i64 8, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 29), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 29), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 3), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 58), align 8
  store %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$158", i64 0, i64 0), i64 5 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 30), align 8
  store i64 16, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 30), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 30), align 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 55, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Struct* @"ggv$20" to i8*), i64 120, i1 false)
  store i64 19, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 55, i32 5, i32 1), align 8
  store i64 56, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 56, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 56, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 56, i32 2), align 4
  store i64 3602879701896396856, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 56, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 56, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$21" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 56, i32 5, i32 1), align 8
  store i64 56, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 57, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 57, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 57, i32 2), align 4
  store i64 1297036692682702905, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 57, i32 4), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 20), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 59), align 8
  store %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$145", i64 0, i64 0), i64 4 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 31), align 8
  store i64 0, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 31), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 31), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 20), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 60), align 8
  store %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$15a", i64 0, i64 0), i64 5 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 32), align 8
  store i64 8, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 32), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 32), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 3), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 61), align 8
  store %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$157", i64 0, i64 0), i64 9 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 33), align 8
  store i64 16, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 33), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 33), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 3), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 62), align 8
  store %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$158", i64 0, i64 0), i64 5 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 34), align 8
  store i64 24, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 34), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 34), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 58), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 63), align 8
  store %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$15b", i64 0, i64 0), i64 9 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 35), align 8
  store i64 32, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 35), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 35), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 58), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 64), align 8
  store %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$15c", i64 0, i64 0), i64 9 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 36), align 8
  store i64 40, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 36), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 36), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 33), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 65), align 8
  store %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$15d", i64 0, i64 0), i64 9 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 37), align 8
  store i64 48, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 37), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 37), align 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 57, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Struct* @"ggv$22" to i8*), i64 120, i1 false)
  store i64 19, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 57, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 58, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 58, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 58, i32 2), align 4
  store i64 6989586621679009850, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 58, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 58, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$23" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 58, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 59, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 59, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 59, i32 2), align 4
  store i64 4683743612465315899, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 59, i32 4), align 8
  store %runtime.Type_Info_Integer { i8 1, i8 0 }, %runtime.Type_Info_Integer* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 59, i32 5) to %runtime.Type_Info_Integer*), align 1
  store i64 2, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 59, i32 5, i32 1), align 8
  store i64 16, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 60, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 60, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 60, i32 2), align 4
  store i64 3602879701896396860, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 60, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 60, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$24" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 60, i32 5, i32 1), align 8
  store i64 16, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 61, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 61, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 61, i32 2), align 4
  store i64 1297036692682702909, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 61, i32 4), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 20), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 66), align 8
  store %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$145", i64 0, i64 0), i64 4 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 38), align 8
  store i64 0, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 38), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 38), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 3), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 67), align 8
  store %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$157", i64 0, i64 0), i64 9 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 39), align 8
  store i64 8, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 39), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 39), align 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 61, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Struct* @"ggv$25" to i8*), i64 120, i1 false)
  store i64 19, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 61, i32 5, i32 1), align 8
  store i64 16, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 62, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 62, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 62, i32 2), align 4
  store i64 3602879701896396862, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 62, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 62, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$26" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 62, i32 5, i32 1), align 8
  store i64 32, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 63, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 63, i32 1), align 8
  store i32 0, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 63, i32 2), align 4
  store i64 3602879701896396863, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 63, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 63, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$27" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 63, i32 5, i32 1), align 8
  store i64 32, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 64, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 64, i32 1), align 8
  store i32 0, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 64, i32 2), align 4
  store i64 1297036692682702912, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 64, i32 4), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 65), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 68), align 8
  store %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$162", i64 0, i64 0), i64 5 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 40), align 8
  store i64 0, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 40), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 40), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 67), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 69), align 8
  store %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$163", i64 0, i64 0), i64 5 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 41), align 8
  store i64 16, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 41), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 41), align 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 64, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Struct* @"ggv$28" to i8*), i64 120, i1 false)
  store i64 19, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 64, i32 5, i32 1), align 8
  store i64 16, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 65, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 65, i32 1), align 8
  store i32 0, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 65, i32 2), align 4
  store i64 1152921504606847041, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 65, i32 4), align 8
  store %runtime.Type_Info_Slice { %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 20), i64 8 }, %runtime.Type_Info_Slice* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 65, i32 5) to %runtime.Type_Info_Slice*), align 8
  store i64 17, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 65, i32 5, i32 1), align 8
  store i64 16, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 67, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 67, i32 1), align 8
  store i32 0, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 67, i32 2), align 4
  store i64 1152921504606847043, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 67, i32 4), align 8
  store %runtime.Type_Info_Slice { %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 17), i64 16 }, %runtime.Type_Info_Slice* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 67, i32 5) to %runtime.Type_Info_Slice*), align 8
  store i64 17, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 67, i32 5, i32 1), align 8
  store i64 120, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 69, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 69, i32 1), align 8
  store i32 0, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 69, i32 2), align 4
  store i64 3602879701896396869, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 69, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 69, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$29" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 69, i32 5, i32 1), align 8
  store i64 120, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 70, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 70, i32 1), align 8
  store i32 0, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 70, i32 2), align 4
  store i64 1297036692682702918, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 70, i32 4), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 65), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 70), align 8
  store %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$162", i64 0, i64 0), i64 5 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 42), align 8
  store i64 0, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 42), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 42), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 67), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 71), align 8
  store %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$163", i64 0, i64 0), i64 5 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 43), align 8
  store i64 16, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 43), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 43), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 71), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 72), align 8
  store %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$165", i64 0, i64 0), i64 7 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 44), align 8
  store i64 32, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 44), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 44), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 74), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 73), align 8
  store %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$166", i64 0, i64 0), i64 6 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 45), align 8
  store i64 48, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 45), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 45), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 67), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 74), align 8
  store %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$167", i64 0, i64 0), i64 4 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 46), align 8
  store i64 64, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 46), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 46), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 33), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 75), align 8
  store %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$168", i64 0, i64 0), i64 9 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 47), align 8
  store i64 80, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 47), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 47), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 33), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 76), align 8
  store %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$169", i64 0, i64 0), i64 12 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 48), align 8
  store i64 81, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 48), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 48), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 33), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 77), align 8
  store %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$16a", i64 0, i64 0), i64 12 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 49), align 8
  store i64 82, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 49), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 49), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 76), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 78), align 8
  store %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$16b", i64 0, i64 0), i64 5 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 50), align 8
  store i64 88, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 50), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 50), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 81), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 79), align 8
  store %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$16c", i64 0, i64 0), i64 8 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 51), align 8
  store i64 96, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 51), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 51), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 20), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 80), align 8
  store %..string { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @"csbs$16d", i64 0, i64 0), i64 13 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 52), align 8
  store i64 104, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 52), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 52), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 3), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 81), align 8
  store %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$16e", i64 0, i64 0), i64 7 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 53), align 8
  store i64 112, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 53), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 53), align 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 70, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Struct* @"ggv$2a" to i8*), i64 120, i1 false)
  store i64 19, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 70, i32 5, i32 1), align 8
  store i64 16, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 71, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 71, i32 1), align 8
  store i32 0, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 71, i32 2), align 4
  store i64 1152921504606847047, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 71, i32 4), align 8
  store %runtime.Type_Info_Slice { %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 72), i64 8 }, %runtime.Type_Info_Slice* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 71, i32 5) to %runtime.Type_Info_Slice*), align 8
  store i64 17, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 71, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 72, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 72, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 72, i32 2), align 4
  store i64 72057594037928008, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 72, i32 4), align 8
  call void @llvm.memset.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 72, i32 5) to i8*), i8 0, i64 2, i1 false)
  store i64 2, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 72, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 73, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 73, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 73, i32 2), align 4
  store i64 720575940379279433, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 73, i32 4), align 8
  store %runtime.Type_Info_Pointer { %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 72) }, %runtime.Type_Info_Pointer* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 73, i32 5) to %runtime.Type_Info_Pointer*), align 8
  store i64 11, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 73, i32 5, i32 1), align 8
  store i64 16, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 74, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 74, i32 1), align 8
  store i32 0, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 74, i32 2), align 4
  store i64 1152921504606847050, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 74, i32 4), align 8
  store %runtime.Type_Info_Slice { %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 33), i64 1 }, %runtime.Type_Info_Slice* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 74, i32 5) to %runtime.Type_Info_Slice*), align 8
  store i64 17, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 74, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 75, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 75, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 75, i32 2), align 4
  store i64 720575940379279435, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 75, i32 4), align 8
  store %runtime.Type_Info_Pointer { %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 33) }, %runtime.Type_Info_Pointer* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 75, i32 5) to %runtime.Type_Info_Pointer*), align 8
  store i64 11, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 75, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 76, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 76, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 76, i32 2), align 4
  store i64 3170534137668829260, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 76, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 76, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$2b" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 76, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 77, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 77, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 77, i32 2), align 4
  store i64 864691128455135309, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 77, i32 4), align 8
  store %runtime.Type_Info_Procedure { %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 78), %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 80), i8 0, i8 2, [6 x i8] zeroinitializer }, %runtime.Type_Info_Procedure* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 77, i32 5) to %runtime.Type_Info_Procedure*), align 8
  store i64 13, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 77, i32 5, i32 1), align 8
  store i64 16, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 78, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 78, i32 1), align 8
  store i32 0, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 78, i32 2), align 4
  store i64 1224979098644774990, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 78, i32 4), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 79), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 82), align 8
  store %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$170", i64 0, i64 0), i64 1 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 54), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 79), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 83), align 8
  store %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$170", i64 0, i64 0), i64 1 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 55), align 8
  store %runtime.Type_Info_Tuple { { %runtime.Type_Info**, i64 } { %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 82), i64 2 }, { %..string*, i64 } { %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 54), i64 2 } }, %runtime.Type_Info_Tuple* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 78, i32 5) to %runtime.Type_Info_Tuple*), align 8
  store i64 18, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 78, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 79, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 79, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 79, i32 2), align 4
  store i64 720575940379279439, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 79, i32 4), align 8
  store i64 11, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 79, i32 5, i32 1), align 8
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 80, i32 0), align 8
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 80, i32 1), align 8
  store i32 0, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 80, i32 2), align 4
  store i64 1224979098644774992, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 80, i32 4), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 33), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 84), align 8
  store %runtime.Type_Info_Tuple { { %runtime.Type_Info**, i64 } { %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 84), i64 1 }, { %..string*, i64 } { %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 56), i64 1 } }, %runtime.Type_Info_Tuple* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 80, i32 5) to %runtime.Type_Info_Tuple*), align 8
  store i64 18, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 80, i32 5, i32 1), align 8
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 81, i32 0), align 8
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 81, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 81, i32 2), align 4
  store i64 3746994889972252753, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 81, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 81, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$2c" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 81, i32 5, i32 1), align 8
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 82, i32 0), align 8
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 82, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 82, i32 2), align 4
  store i64 1441151880758558802, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 82, i32 4), align 8
  store %runtime.Type_Info_Enum { %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 19), { %..string*, i64 } { %..string* getelementptr inbounds ([4 x %..string], [4 x %..string]* @"$enum_names-82", i64 0, i64 0), i64 4 }, { i64*, i64 } { i64* getelementptr inbounds ([4 x i64], [4 x i64]* @"$enum_values-82", i64 0, i64 0), i64 4 } }, %runtime.Type_Info_Enum* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 82, i32 5) to %runtime.Type_Info_Enum*), align 8
  store i64 21, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 82, i32 5, i32 1), align 8
  store i64 48, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 83, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 83, i32 1), align 8
  store i32 0, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 83, i32 2), align 4
  store i64 3602879701896396883, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 83, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 83, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$2d" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 83, i32 5, i32 1), align 8
  store i64 48, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 84, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 84, i32 1), align 8
  store i32 0, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 84, i32 2), align 4
  store i64 1297036692682702932, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 84, i32 4), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 65), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 85), align 8
  store %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$176", i64 0, i64 0), i64 8 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 57), align 8
  store i64 0, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 54), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 54), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 72), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 86), align 8
  store %..string { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"csbs$177", i64 0, i64 0), i64 10 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 58), align 8
  store i64 16, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 55), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 55), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 20), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 87), align 8
  store %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$178", i64 0, i64 0), i64 8 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 59), align 8
  store i64 24, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 56), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 56), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 76), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 88), align 8
  store %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$16b", i64 0, i64 0), i64 5 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 60), align 8
  store i64 32, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 57), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 57), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 33), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 89), align 8
  store %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$16a", i64 0, i64 0), i64 12 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 61), align 8
  store i64 40, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 58), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 58), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 33), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 90), align 8
  store %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$179", i64 0, i64 0), i64 6 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 62), align 8
  store i64 41, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 59), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 59), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 33), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 91), align 8
  store %..string { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"csbs$17a", i64 0, i64 0), i64 10 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 63), align 8
  store i64 42, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 60), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 60), align 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 84, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Struct* @"ggv$2e" to i8*), i64 120, i1 false)
  store i64 19, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 84, i32 5, i32 1), align 8
  store i64 40, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 85, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 85, i32 1), align 8
  store i32 0, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 85, i32 2), align 4
  store i64 3602879701896396885, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 85, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 85, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$2f" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 85, i32 5, i32 1), align 8
  store i64 40, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 86, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 86, i32 1), align 8
  store i32 0, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 86, i32 2), align 4
  store i64 1297036692682702934, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 86, i32 4), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 20), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 92), align 8
  store %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$12c", i64 0, i64 0), i64 4 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 64), align 8
  store i64 0, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 61), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 61), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 67), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 93), align 8
  store %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$163", i64 0, i64 0), i64 5 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 65), align 8
  store i64 8, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 62), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 62), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 87), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 94), align 8
  store %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$17c", i64 0, i64 0), i64 6 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 66), align 8
  store i64 24, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 63), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 63), align 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 86, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Struct* @"ggv$30" to i8*), i64 120, i1 false)
  store i64 19, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 86, i32 5, i32 1), align 8
  store i64 16, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 87, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 87, i32 1), align 8
  store i32 0, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 87, i32 2), align 4
  store i64 1152921504606847063, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 87, i32 4), align 8
  store %runtime.Type_Info_Slice { %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 58), i64 8 }, %runtime.Type_Info_Slice* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 87, i32 5) to %runtime.Type_Info_Slice*), align 8
  store i64 17, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 87, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 88, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 88, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 88, i32 2), align 4
  store i64 720575940379279448, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 88, i32 4), align 8
  store %runtime.Type_Info_Pointer { %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 58) }, %runtime.Type_Info_Pointer* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 88, i32 5) to %runtime.Type_Info_Pointer*), align 8
  store i64 11, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 88, i32 5, i32 1), align 8
  store i64 40, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 89, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 89, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 89, i32 2), align 4
  store i64 3602879701896396889, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 89, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 89, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$31" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 89, i32 5, i32 1), align 8
  store i64 40, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 90, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 90, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 90, i32 2), align 4
  store i64 1297036692682702938, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 90, i32 4), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 20), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 95), align 8
  store %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$17e", i64 0, i64 0), i64 3 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 67), align 8
  store i64 0, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 64), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 64), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 20), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 96), align 8
  store %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$17f", i64 0, i64 0), i64 5 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 68), align 8
  store i64 8, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 65), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 65), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 20), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 97), align 8
  store %..string { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"csbs$180", i64 0, i64 0), i64 16 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 69), align 8
  store i64 16, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 66), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 66), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 76), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 98), align 8
  store %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$181", i64 0, i64 0), i64 9 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 70), align 8
  store i64 24, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 67), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 67), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 91), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 99), align 8
  store %..string { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"csbs$182", i64 0, i64 0), i64 10 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 71), align 8
  store i64 32, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 68), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 68), align 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 90, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Struct* @"ggv$32" to i8*), i64 120, i1 false)
  store i64 19, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 90, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 91, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 91, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 91, i32 2), align 4
  store i64 3170534137668829275, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 91, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 91, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$33" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 91, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 92, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 92, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 92, i32 2), align 4
  store i64 864691128455135324, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 92, i32 4), align 8
  store %runtime.Type_Info_Procedure { %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 93), %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 94), i8 0, i8 2, [6 x i8] zeroinitializer }, %runtime.Type_Info_Procedure* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 92, i32 5) to %runtime.Type_Info_Procedure*), align 8
  store i64 13, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 92, i32 5, i32 1), align 8
  store i64 16, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 93, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 93, i32 1), align 8
  store i32 0, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 93, i32 2), align 4
  store i64 1224979098644775005, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 93, i32 4), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 79), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 100), align 8
  store %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$184", i64 0, i64 0), i64 4 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 72), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 72), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 101), align 8
  store %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$185", i64 0, i64 0), i64 4 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 73), align 8
  store %runtime.Type_Info_Tuple { { %runtime.Type_Info**, i64 } { %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 100), i64 2 }, { %..string*, i64 } { %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 72), i64 2 } }, %runtime.Type_Info_Tuple* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 93, i32 5) to %runtime.Type_Info_Tuple*), align 8
  store i64 18, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 93, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 94, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 94, i32 1), align 8
  store i32 0, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 94, i32 2), align 4
  store i64 1224979098644775006, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 94, i32 4), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 72), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 102), align 8
  store %runtime.Type_Info_Tuple { { %runtime.Type_Info**, i64 } { %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 102), i64 1 }, { %..string*, i64 } { %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 74), i64 1 } }, %runtime.Type_Info_Tuple* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 94, i32 5) to %runtime.Type_Info_Tuple*), align 8
  store i64 18, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 94, i32 5, i32 1), align 8
  store i64 32, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 95, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 95, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 95, i32 2), align 4
  store i64 3602879701896396895, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 95, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 95, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$34" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 95, i32 5, i32 1), align 8
  store i64 32, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 96, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 96, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 96, i32 2), align 4
  store i64 1297036692682702944, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 96, i32 4), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 20), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 103), align 8
  store %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$145", i64 0, i64 0), i64 4 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 75), align 8
  store i64 0, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 69), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 69), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 20), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 104), align 8
  store %..string { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"csbs$187", i64 0, i64 0), i64 10 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 76), align 8
  store i64 8, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 70), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 70), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 59), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 105), align 8
  store %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$188", i64 0, i64 0), i64 5 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 77), align 8
  store i64 16, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 71), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 71), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 59), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 106), align 8
  store %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$189", i64 0, i64 0), i64 5 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 78), align 8
  store i64 24, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 72), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 72), align 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 96, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Struct* @"ggv$35" to i8*), i64 120, i1 false)
  store i64 19, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 96, i32 5, i32 1), align 8
  store i64 24, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 97, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 97, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 97, i32 2), align 4
  store i64 3602879701896396897, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 97, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 97, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$36" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 97, i32 5, i32 1), align 8
  store i64 16, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 98, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 98, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 98, i32 2), align 4
  store i64 3602879701896396898, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 98, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 98, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$37" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 98, i32 5, i32 1), align 8
  store i64 16, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 99, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 99, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 99, i32 2), align 4
  store i64 1297036692682702947, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 99, i32 4), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 20), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 107), align 8
  store %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$18c", i64 0, i64 0), i64 7 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 79), align 8
  store i64 0, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 73), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 73), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 20), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 108), align 8
  store %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$18d", i64 0, i64 0), i64 12 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 80), align 8
  store i64 8, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 74), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 74), align 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 99, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Struct* @"ggv$38" to i8*), i64 120, i1 false)
  store i64 19, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 99, i32 5, i32 1), align 8
  store i64 16, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 100, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 100, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 100, i32 2), align 4
  store i64 3602879701896396900, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 100, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 100, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$39" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 100, i32 5, i32 1), align 8
  store i64 16, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 101, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 101, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 101, i32 2), align 4
  store i64 1297036692682702949, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 101, i32 4), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 20), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 109), align 8
  store %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$18f", i64 0, i64 0), i64 5 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 81), align 8
  store i64 0, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 75), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 75), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 20), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 110), align 8
  store %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$18d", i64 0, i64 0), i64 12 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 82), align 8
  store i64 8, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 76), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 76), align 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 101, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Struct* @"ggv$3a" to i8*), i64 120, i1 false)
  store i64 19, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 101, i32 5, i32 1), align 8
  store i64 40, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 102, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 102, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 102, i32 2), align 4
  store i64 3602879701896396902, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 102, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 102, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$3b" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 102, i32 5, i32 1), align 8
  store i64 40, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 103, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 103, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 103, i32 2), align 4
  store i64 1297036692682702951, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 103, i32 4), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 20), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 111), align 8
  store %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$145", i64 0, i64 0), i64 4 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 83), align 8
  store i64 0, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 77), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 77), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 3), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 112), align 8
  store %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$157", i64 0, i64 0), i64 9 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 84), align 8
  store i64 8, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 78), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 78), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 3), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 113), align 8
  store %..string { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"csbs$191", i64 0, i64 0), i64 11 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 85), align 8
  store i64 16, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 79), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 79), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 3), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 114), align 8
  store %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$192", i64 0, i64 0), i64 9 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 86), align 8
  store i64 24, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 80), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 80), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 3), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 115), align 8
  store %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$193", i64 0, i64 0), i64 12 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 87), align 8
  store i64 32, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 81), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 81), align 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 103, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Struct* @"ggv$3c" to i8*), i64 120, i1 false)
  store i64 19, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 103, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 104, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 104, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 104, i32 2), align 4
  store i64 3602879701896396904, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 104, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 104, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$3d" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 104, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 240, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 240, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 240, i32 2), align 4
  store i64 720575940379279600, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 240, i32 4), align 8
  store %runtime.Type_Info_Pointer { %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 241) }, %runtime.Type_Info_Pointer* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 240, i32 5) to %runtime.Type_Info_Pointer*), align 8
  store i64 11, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 240, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 241, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 241, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 241, i32 2), align 4
  store i64 720575940379279601, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 241, i32 4), align 8
  store %runtime.Type_Info_Pointer { %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 242) }, %runtime.Type_Info_Pointer* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 241, i32 5) to %runtime.Type_Info_Pointer*), align 8
  store i64 11, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 241, i32 5, i32 1), align 8
  store i64 16, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 242, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 242, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 242, i32 2), align 4
  store i64 2738188573441261810, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 242, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 242, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$3e" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 242, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 243, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 243, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 243, i32 2), align 4
  store i64 720575940379279603, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 243, i32 4), align 8
  store %runtime.Type_Info_Pointer { %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 73) }, %runtime.Type_Info_Pointer* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 243, i32 5) to %runtime.Type_Info_Pointer*), align 8
  store i64 11, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 243, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 244, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 244, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 244, i32 2), align 4
  store i64 720575940379279604, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 244, i32 4), align 8
  store %runtime.Type_Info_Pointer { %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 75) }, %runtime.Type_Info_Pointer* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 244, i32 5) to %runtime.Type_Info_Pointer*), align 8
  store i64 11, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 244, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 245, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 245, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 245, i32 2), align 4
  store i64 720575940379279605, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 245, i32 4), align 8
  store %runtime.Type_Info_Pointer { %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 246) }, %runtime.Type_Info_Pointer* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 245, i32 5) to %runtime.Type_Info_Pointer*), align 8
  store i64 11, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 245, i32 5, i32 1), align 8
  store i64 56, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 246, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 246, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 246, i32 2), align 4
  store i64 3602879701896397046, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 246, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 246, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$3f" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 246, i32 5, i32 1), align 8
  store i64 56, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 247, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 247, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 247, i32 2), align 4
  store i64 1297036692682703095, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 247, i32 4), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 17), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 116), align 8
  store %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$11c", i64 0, i64 0), i64 4 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 88), align 8
  store i64 0, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 82), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 82), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 20), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 117), align 8
  store %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$11d", i64 0, i64 0), i64 4 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 89), align 8
  store i64 16, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 83), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 83), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 242), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 118), align 8
  store %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$11e", i64 0, i64 0), i64 3 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 90), align 8
  store i64 24, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 84), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 84), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 72), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 119), align 8
  store %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$11f", i64 0, i64 0), i64 6 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 91), align 8
  store i64 40, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 85), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 85), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 33), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 120), align 8
  store %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$120", i64 0, i64 0), i64 8 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 92), align 8
  store i64 48, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 86), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 86), align 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 247, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Struct* @"ggv$40" to i8*), i64 120, i1 false)
  store i64 19, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 247, i32 5, i32 1), align 8
  store i64 2, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 8, i32 0), align 8
  store i64 2, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 8, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 8, i32 2), align 4
  store i64 72057594037927944, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 8, i32 4), align 8
  call void @llvm.memset.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 8, i32 5) to i8*), i8 0, i64 2, i1 false)
  store i64 2, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 8, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 216, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 216, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 216, i32 2), align 4
  store i64 3746994889972252888, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 216, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 216, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$41" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 216, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 217, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 217, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 217, i32 2), align 4
  store i64 1441151880758558937, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 217, i32 4), align 8
  store %runtime.Type_Info_Enum { %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 3), { %..string*, i64 } { %..string* getelementptr inbounds ([6 x %..string], [6 x %..string]* @"$enum_names-217", i64 0, i64 0), i64 6 }, { i64*, i64 } { i64* getelementptr inbounds ([6 x i64], [6 x i64]* @"$enum_values-217", i64 0, i64 0), i64 6 } }, %runtime.Type_Info_Enum* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 217, i32 5) to %runtime.Type_Info_Enum*), align 8
  store i64 21, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 217, i32 5, i32 1), align 8
  store i64 16, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 154, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 154, i32 1), align 8
  store i32 0, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 154, i32 2), align 4
  store i64 154, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 154, i32 4), align 8
  store i64 9, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 154, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 212, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 212, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 212, i32 2), align 4
  store i64 3746994889972252884, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 212, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 212, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$42" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 212, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 213, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 213, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 213, i32 2), align 4
  store i64 1441151880758558933, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 213, i32 4), align 8
  store %runtime.Type_Info_Enum { %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 3), { %..string*, i64 } { %..string* getelementptr inbounds ([20 x %..string], [20 x %..string]* @"$enum_names-213", i64 0, i64 0), i64 20 }, { i64*, i64 } { i64* getelementptr inbounds ([20 x i64], [20 x i64]* @"$enum_values-213", i64 0, i64 0), i64 20 } }, %runtime.Type_Info_Enum* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 213, i32 5) to %runtime.Type_Info_Enum*), align 8
  store i64 21, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 213, i32 5, i32 1), align 8
  store i64 4, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 115, i32 0), align 8
  store i64 4, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 115, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 115, i32 2), align 4
  store i64 216172782113783923, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 115, i32 4), align 8
  call void @llvm.memset.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 115, i32 5) to i8*), i8 0, i64 1, i1 false)
  store i64 4, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 115, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 186, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 186, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 186, i32 2), align 4
  store i64 5044031582654955706, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 186, i32 4), align 8
  call void @llvm.memset.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 186, i32 5) to i8*), i8 1, i64 1, i1 false)
  store i64 7, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 186, i32 5, i32 1), align 8
  store i64 4, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 262, i32 0), align 8
  store i64 4, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 262, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 262, i32 2), align 4
  store i64 3746994889972252934, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 262, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 262, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$43" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 262, i32 5, i32 1), align 8
  store i64 4, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 263, i32 0), align 8
  store i64 4, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 263, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 263, i32 2), align 4
  store i64 1441151880758558983, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 263, i32 4), align 8
  store %runtime.Type_Info_Enum { %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 30), { %..string*, i64 } { %..string* getelementptr inbounds ([2 x %..string], [2 x %..string]* @"$enum_names-263", i64 0, i64 0), i64 2 }, { i64*, i64 } { i64* getelementptr inbounds ([2 x i64], [2 x i64]* @"$enum_values-263", i64 0, i64 0), i64 2 } }, %runtime.Type_Info_Enum* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 263, i32 5) to %runtime.Type_Info_Enum*), align 8
  store i64 21, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 263, i32 5, i32 1), align 8
  store i64 4, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 162, i32 0), align 8
  store i64 4, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 162, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 162, i32 2), align 4
  store i64 4755801206503243938, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 162, i32 4), align 8
  store i64 3, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 162, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 210, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 210, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 210, i32 2), align 4
  store i64 3746994889972252882, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 210, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 210, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$44" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 210, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 211, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 211, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 211, i32 2), align 4
  store i64 1441151880758558931, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 211, i32 4), align 8
  store %runtime.Type_Info_Enum { %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 3), { %..string*, i64 } { %..string* getelementptr inbounds ([4 x %..string], [4 x %..string]* @"$enum_names-211", i64 0, i64 0), i64 4 }, { i64*, i64 } { i64* getelementptr inbounds ([4 x i64], [4 x i64]* @"$enum_values-211", i64 0, i64 0), i64 4 } }, %runtime.Type_Info_Enum* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 211, i32 5) to %runtime.Type_Info_Enum*), align 8
  store i64 21, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 211, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 264, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 264, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 264, i32 2), align 4
  store i64 792633534417207560, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 264, i32 4), align 8
  store %runtime.Type_Info_Multi_Pointer { %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 265) }, %runtime.Type_Info_Multi_Pointer* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 264, i32 5) to %runtime.Type_Info_Multi_Pointer*), align 8
  store i64 12, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 264, i32 5, i32 1), align 8
  store i64 36, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 265, i32 0), align 8
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 265, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 265, i32 2), align 4
  store i64 3602879701896397065, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 265, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 265, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$45" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 265, i32 5, i32 1), align 8
  store i64 36, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 266, i32 0), align 8
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 266, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 266, i32 2), align 4
  store i64 1297036692682703114, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 266, i32 4), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 267), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 121), align 8
  store %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$1c2", i64 0, i64 0), i64 6 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 93), align 8
  store i64 0, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 87), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 87), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 267), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 122), align 8
  store %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$1c3", i64 0, i64 0), i64 5 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 94), align 8
  store i64 8, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 88), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 88), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 269), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 123), align 8
  store %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$1c4", i64 0, i64 0), i64 5 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 95), align 8
  store i64 16, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 89), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 89), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 8), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 124), align 8
  store %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$1c5", i64 0, i64 0), i64 9 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 96), align 8
  store i64 20, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 90), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 90), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 8), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 125), align 8
  store %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$1c6", i64 0, i64 0), i64 9 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 97), align 8
  store i64 22, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 91), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 91), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 267), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 126), align 8
  store %..string { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"csbs$1c7", i64 0, i64 0), i64 10 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 98), align 8
  store i64 24, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 92), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 92), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 218), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 127), align 8
  store %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$1c8", i64 0, i64 0), i64 4 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 99), align 8
  store i64 32, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 93), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 93), align 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 266, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Struct* @"ggv$46" to i8*), i64 120, i1 false)
  store i64 19, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 266, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 267, i32 0), align 8
  store i64 4, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 267, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 267, i32 2), align 4
  store i64 936748722493063435, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 267, i32 4), align 8
  store %runtime.Type_Info_Array { %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 115), i64 4, i64 2 }, %runtime.Type_Info_Array* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 267, i32 5) to %runtime.Type_Info_Array*), align 8
  store i64 14, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 267, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 268, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 268, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 268, i32 2), align 4
  store i64 720575940379279628, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 268, i32 4), align 8
  store %runtime.Type_Info_Pointer { %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 115) }, %runtime.Type_Info_Pointer* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 268, i32 5) to %runtime.Type_Info_Pointer*), align 8
  store i64 11, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 268, i32 5, i32 1), align 8
  store i64 4, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 269, i32 0), align 8
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 269, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 269, i32 2), align 4
  store i64 936748722493063437, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 269, i32 4), align 8
  store %runtime.Type_Info_Array { %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 19), i64 1, i64 4 }, %runtime.Type_Info_Array* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 269, i32 5) to %runtime.Type_Info_Array*), align 8
  store i64 14, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 269, i32 5, i32 1), align 8
  store i64 4, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 218, i32 0), align 8
  store i64 4, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 218, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 218, i32 2), align 4
  store i64 3746994889972252890, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 218, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 218, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$47" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 218, i32 5, i32 1), align 8
  store i64 4, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 219, i32 0), align 8
  store i64 4, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 219, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 219, i32 2), align 4
  store i64 1441151880758558939, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 219, i32 4), align 8
  store %runtime.Type_Info_Enum { %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 27), { %..string*, i64 } { %..string* getelementptr inbounds ([8 x %..string], [8 x %..string]* @"$enum_names-219", i64 0, i64 0), i64 8 }, { i64*, i64 } { i64* getelementptr inbounds ([8 x i64], [8 x i64]* @"$enum_values-219", i64 0, i64 0), i64 8 } }, %runtime.Type_Info_Enum* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 219, i32 5) to %runtime.Type_Info_Enum*), align 8
  store i64 21, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 219, i32 5, i32 1), align 8
  store i64 2, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 194, i32 0), align 8
  store i64 2, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 194, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 194, i32 2), align 4
  store i64 72057594037928130, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 194, i32 4), align 8
  store %runtime.Type_Info_Integer { i8 0, i8 2 }, %runtime.Type_Info_Integer* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 194, i32 5) to %runtime.Type_Info_Integer*), align 1
  store i64 2, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 194, i32 5, i32 1), align 8
  store i64 320, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 220, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 220, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 220, i32 2), align 4
  store i64 3602879701896397020, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 220, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 220, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$48" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 220, i32 5, i32 1), align 8
  store i64 320, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 221, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 221, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 221, i32 2), align 4
  store i64 1297036692682703069, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 221, i32 4), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 115), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 128), align 8
  store %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$1d1", i64 0, i64 0), i64 5 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 100), align 8
  store i64 0, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 94), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 94), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 3), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 129), align 8
  store %..string { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"csbs$1d2", i64 0, i64 0), i64 10 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 101), align 8
  store i64 8, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 95), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 95), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 222), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 130), align 8
  store %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$1d3", i64 0, i64 0), i64 7 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 102), align 8
  store i64 16, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 96), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 96), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 223), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 131), align 8
  store %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$167", i64 0, i64 0), i64 4 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 103), align 8
  store i64 32, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 97), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 97), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 225), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 132), align 8
  store %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$1d4", i64 0, i64 0), i64 8 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 104), align 8
  store i64 168, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 98), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 98), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 226), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 133), align 8
  store %..string { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"csbs$1d5", i64 0, i64 0), i64 10 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 105), align 8
  store i64 216, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 99), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 99), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 227), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 134), align 8
  store %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$1d6", i64 0, i64 0), i64 5 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 106), align 8
  store i64 232, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 100), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 100), align 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 221, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Struct* @"ggv$49" to i8*), i64 120, i1 false)
  store i64 19, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 221, i32 5, i32 1), align 8
  store i64 12, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 222, i32 0), align 8
  store i64 4, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 222, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 222, i32 2), align 4
  store i64 1297036692682703070, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 222, i32 4), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 115), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 135), align 8
  store %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$1d7", i64 0, i64 0), i64 3 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 107), align 8
  store i64 0, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 101), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 101), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 33), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 136), align 8
  store %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$1d8", i64 0, i64 0), i64 8 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 108), align 8
  store i64 4, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 102), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 102), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 33), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 137), align 8
  store %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$1d9", i64 0, i64 0), i64 8 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 109), align 8
  store i64 5, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 103), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 103), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 33), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 138), align 8
  store %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$1da", i64 0, i64 0), i64 8 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 110), align 8
  store i64 6, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 104), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 104), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 33), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 139), align 8
  store %..string { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"csbs$1db", i64 0, i64 0), i64 14 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 111), align 8
  store i64 7, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 105), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 105), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 33), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 140), align 8
  store %..string { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"csbs$1dc", i64 0, i64 0), i64 14 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 112), align 8
  store i64 8, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 106), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 106), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 33), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 141), align 8
  store %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$1dd", i64 0, i64 0), i64 8 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 113), align 8
  store i64 9, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 107), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 107), align 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 222, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Struct* @"ggv$4a" to i8*), i64 120, i1 false)
  store i64 19, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 222, i32 5, i32 1), align 8
  store i64 136, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 223, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 223, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 223, i32 2), align 4
  store i64 1297036692682703071, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 223, i32 4), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 224), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 142), align 8
  store %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$163", i64 0, i64 0), i64 5 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 114), align 8
  store i64 0, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 108), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 108), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 3), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 143), align 8
  store %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$1de", i64 0, i64 0), i64 8 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 115), align 8
  store i64 128, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 109), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 109), align 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 223, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Struct* @"ggv$4b" to i8*), i64 120, i1 false)
  store i64 19, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 223, i32 5, i32 1), align 8
  store i64 128, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 224, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 224, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 224, i32 2), align 4
  store i64 936748722493063392, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 224, i32 4), align 8
  store %runtime.Type_Info_Array { %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 17), i64 16, i64 8 }, %runtime.Type_Info_Array* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 224, i32 5) to %runtime.Type_Info_Array*), align 8
  store i64 14, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 224, i32 5, i32 1), align 8
  store i64 48, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 225, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 225, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 225, i32 2), align 4
  store i64 1297036692682703073, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 225, i32 4), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 3), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 144), align 8
  store %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$15a", i64 0, i64 0), i64 5 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 116), align 8
  store i64 0, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 110), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 110), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 3), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 145), align 8
  store %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$1df", i64 0, i64 0), i64 4 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 117), align 8
  store i64 8, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 111), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 111), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 3), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 146), align 8
  store %..string { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"csbs$1e0", i64 0, i64 0), i64 11 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 118), align 8
  store i64 16, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 112), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 112), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 3), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 147), align 8
  store %..string { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"csbs$1e1", i64 0, i64 0), i64 10 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 119), align 8
  store i64 24, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 113), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 113), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 33), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 148), align 8
  store %..string { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @"csbs$1e2", i64 0, i64 0), i64 17 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 120), align 8
  store i64 32, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 114), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 114), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 3), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 149), align 8
  store %..string { i8* getelementptr inbounds ([23 x i8], [23 x i8]* @"csbs$1e3", i64 0, i64 0), i64 22 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 121), align 8
  store i64 40, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 115), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 115), align 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 225, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Struct* @"ggv$4c" to i8*), i64 120, i1 false)
  store i64 19, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 225, i32 5, i32 1), align 8
  store i64 16, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 226, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 226, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 226, i32 2), align 4
  store i64 1297036692682703074, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 226, i32 4), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 3), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 150), align 8
  store %..string { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"csbs$1e4", i64 0, i64 0), i64 11 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 122), align 8
  store i64 0, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 116), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 116), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 3), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 151), align 8
  store %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$1e5", i64 0, i64 0), i64 9 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 123), align 8
  store i64 8, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 117), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 117), align 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 226, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Struct* @"ggv$4d" to i8*), i64 120, i1 false)
  store i64 19, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 226, i32 5, i32 1), align 8
  store i64 88, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 227, i32 0), align 8
  store i64 4, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 227, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 227, i32 2), align 4
  store i64 3602879701896397027, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 227, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 227, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$4e" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 227, i32 5, i32 1), align 8
  store i64 88, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 228, i32 0), align 8
  store i64 4, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 228, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 228, i32 2), align 4
  store i64 1297036692682703076, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 228, i32 4), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 229), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 152), align 8
  store %..string { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"csbs$1e8", i64 0, i64 0), i64 10 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 124), align 8
  store i64 0, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 118), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 118), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 229), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 153), align 8
  store %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$1e9", i64 0, i64 0), i64 5 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 125), align 8
  store i64 12, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 119), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 119), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 27), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 154), align 8
  store %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$1ea", i64 0, i64 0), i64 12 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 126), align 8
  store i64 24, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 120), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 120), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 27), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 155), align 8
  store %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$1eb", i64 0, i64 0), i64 9 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 127), align 8
  store i64 28, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 121), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 121), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 27), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 156), align 8
  store %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$1ec", i64 0, i64 0), i64 8 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 128), align 8
  store i64 32, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 122), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 122), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 27), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 157), align 8
  store %..string { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"csbs$1ed", i64 0, i64 0), i64 10 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 129), align 8
  store i64 36, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 123), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 123), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 27), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 158), align 8
  store %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$1ee", i64 0, i64 0), i64 6 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 130), align 8
  store i64 40, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 124), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 124), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 27), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 159), align 8
  store %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$1ef", i64 0, i64 0), i64 5 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 131), align 8
  store i64 44, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 125), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 125), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 27), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 160), align 8
  store %..string { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @"csbs$1f0", i64 0, i64 0), i64 15 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 132), align 8
  store i64 48, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 126), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 126), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 27), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 161), align 8
  store %..string { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @"csbs$1f1", i64 0, i64 0), i64 15 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 133), align 8
  store i64 52, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 127), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 127), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 231), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 162), align 8
  store %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$167", i64 0, i64 0), i64 4 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 134), align 8
  store i64 56, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 128), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 128), align 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 228, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Struct* @"ggv$4f" to i8*), i64 120, i1 false)
  store i64 19, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 228, i32 5, i32 1), align 8
  store i64 12, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 229, i32 0), align 8
  store i64 4, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 229, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 229, i32 2), align 4
  store i64 936748722493063397, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 229, i32 4), align 8
  store %runtime.Type_Info_Array { %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 27), i64 4, i64 3 }, %runtime.Type_Info_Array* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 229, i32 5) to %runtime.Type_Info_Array*), align 8
  store i64 14, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 229, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 230, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 230, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 230, i32 2), align 4
  store i64 720575940379279590, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 230, i32 4), align 8
  store %runtime.Type_Info_Pointer { %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 27) }, %runtime.Type_Info_Pointer* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 230, i32 5) to %runtime.Type_Info_Pointer*), align 8
  store i64 11, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 230, i32 5, i32 1), align 8
  store i64 32, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 231, i32 0), align 8
  store i64 4, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 231, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 231, i32 2), align 4
  store i64 936748722493063399, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 231, i32 4), align 8
  store %runtime.Type_Info_Array { %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 27), i64 4, i64 8 }, %runtime.Type_Info_Array* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 231, i32 5) to %runtime.Type_Info_Array*), align 8
  store i64 14, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 231, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 232, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 232, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 232, i32 2), align 4
  store i64 3746994889972252904, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 232, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 232, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$50" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 232, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 233, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 233, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 233, i32 2), align 4
  store i64 1441151880758558953, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 233, i32 4), align 8
  store %runtime.Type_Info_Enum { %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 3), { %..string*, i64 } { %..string* getelementptr inbounds ([2 x %..string], [2 x %..string]* @"$enum_names-233", i64 0, i64 0), i64 2 }, { i64*, i64 } { i64* getelementptr inbounds ([2 x i64], [2 x i64]* @"$enum_values-233", i64 0, i64 0), i64 2 } }, %runtime.Type_Info_Enum* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 233, i32 5) to %runtime.Type_Info_Enum*), align 8
  store i64 21, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 233, i32 5, i32 1), align 8
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 142, i32 0), align 8
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 142, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 142, i32 2), align 4
  store i64 3746994889972252814, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 142, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 142, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$51" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 142, i32 5, i32 1), align 8
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 143, i32 0), align 8
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 143, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 143, i32 2), align 4
  store i64 1441151880758558863, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 143, i32 4), align 8
  store %runtime.Type_Info_Enum { %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 19), { %..string*, i64 } { %..string* getelementptr inbounds ([6 x %..string], [6 x %..string]* @"$enum_names-143", i64 0, i64 0), i64 6 }, { i64*, i64 } { i64* getelementptr inbounds ([6 x i64], [6 x i64]* @"$enum_values-143", i64 0, i64 0), i64 6 } }, %runtime.Type_Info_Enum* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 143, i32 5) to %runtime.Type_Info_Enum*), align 8
  store i64 21, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 143, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 157, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 157, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 157, i32 2), align 4
  store i64 3746994889972252829, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 157, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 157, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$52" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 157, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 158, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 158, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 158, i32 2), align 4
  store i64 1441151880758558878, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 158, i32 4), align 8
  store %runtime.Type_Info_Enum { %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 3), { %..string*, i64 } { %..string* getelementptr inbounds ([12 x %..string], [12 x %..string]* @"$enum_names-158", i64 0, i64 0), i64 12 }, { i64*, i64 } { i64* getelementptr inbounds ([12 x i64], [12 x i64]* @"$enum_values-158", i64 0, i64 0), i64 12 } }, %runtime.Type_Info_Enum* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 158, i32 5) to %runtime.Type_Info_Enum*), align 8
  store i64 21, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 158, i32 5, i32 1), align 8
  store i64 16, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 205, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 205, i32 1), align 8
  store i32 0, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 205, i32 2), align 4
  store i64 1152921504606847181, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 205, i32 4), align 8
  store %runtime.Type_Info_Slice { %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 154), i64 16 }, %runtime.Type_Info_Slice* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 205, i32 5) to %runtime.Type_Info_Slice*), align 8
  store i64 17, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 205, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 204, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 204, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 204, i32 2), align 4
  store i64 720575940379279564, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 204, i32 4), align 8
  store %runtime.Type_Info_Pointer { %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 154) }, %runtime.Type_Info_Pointer* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 204, i32 5) to %runtime.Type_Info_Pointer*), align 8
  store i64 11, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 204, i32 5, i32 1), align 8
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 184, i32 0), align 8
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 184, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 184, i32 2), align 4
  store i64 4683743612465316024, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 184, i32 4), align 8
  store %runtime.Type_Info_Integer { i8 1, i8 0 }, %runtime.Type_Info_Integer* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 184, i32 5) to %runtime.Type_Info_Integer*), align 1
  store i64 2, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 184, i32 5, i32 1), align 8
  store i64 2, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 185, i32 0), align 8
  store i64 2, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 185, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 185, i32 2), align 4
  store i64 4683743612465316025, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 185, i32 4), align 8
  store %runtime.Type_Info_Integer { i8 1, i8 0 }, %runtime.Type_Info_Integer* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 185, i32 5) to %runtime.Type_Info_Integer*), align 1
  store i64 2, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 185, i32 5, i32 1), align 8
  store i64 16, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 199, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 199, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 199, i32 2), align 4
  store i64 72057594037928135, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 199, i32 4), align 8
  call void @llvm.memset.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 199, i32 5) to i8*), i8 0, i64 2, i1 false)
  store i64 2, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 199, i32 5, i32 1), align 8
  store i64 2, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 187, i32 0), align 8
  store i64 2, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 187, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 187, i32 2), align 4
  store i64 4683743612465316027, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 187, i32 4), align 8
  call void @llvm.memset.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 187, i32 5) to i8*), i8 1, i64 2, i1 false)
  store i64 2, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 187, i32 5, i32 1), align 8
  store i64 4, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 189, i32 0), align 8
  store i64 4, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 189, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 189, i32 2), align 4
  store i64 4683743612465316029, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 189, i32 4), align 8
  call void @llvm.memset.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 189, i32 5) to i8*), i8 1, i64 2, i1 false)
  store i64 2, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 189, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 191, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 191, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 191, i32 2), align 4
  store i64 4683743612465316031, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 191, i32 4), align 8
  call void @llvm.memset.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 191, i32 5) to i8*), i8 1, i64 2, i1 false)
  store i64 2, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 191, i32 5, i32 1), align 8
  store i64 2, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 188, i32 0), align 8
  store i64 2, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 188, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 188, i32 2), align 4
  store i64 72057594037928124, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 188, i32 4), align 8
  store %runtime.Type_Info_Integer { i8 0, i8 1 }, %runtime.Type_Info_Integer* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 188, i32 5) to %runtime.Type_Info_Integer*), align 1
  store i64 2, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 188, i32 5, i32 1), align 8
  store i64 4, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 190, i32 0), align 8
  store i64 4, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 190, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 190, i32 2), align 4
  store i64 72057594037928126, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 190, i32 4), align 8
  store %runtime.Type_Info_Integer { i8 0, i8 1 }, %runtime.Type_Info_Integer* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 190, i32 5) to %runtime.Type_Info_Integer*), align 1
  store i64 2, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 190, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 192, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 192, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 192, i32 2), align 4
  store i64 72057594037928128, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 192, i32 4), align 8
  store %runtime.Type_Info_Integer { i8 0, i8 1 }, %runtime.Type_Info_Integer* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 192, i32 5) to %runtime.Type_Info_Integer*), align 1
  store i64 2, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 192, i32 5, i32 1), align 8
  store i64 16, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 201, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 201, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 201, i32 2), align 4
  store i64 72057594037928137, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 201, i32 4), align 8
  store %runtime.Type_Info_Integer { i8 0, i8 1 }, %runtime.Type_Info_Integer* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 201, i32 5) to %runtime.Type_Info_Integer*), align 1
  store i64 2, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 201, i32 5, i32 1), align 8
  store i64 2, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 193, i32 0), align 8
  store i64 2, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 193, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 193, i32 2), align 4
  store i64 4683743612465316033, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 193, i32 4), align 8
  store %runtime.Type_Info_Integer { i8 1, i8 2 }, %runtime.Type_Info_Integer* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 193, i32 5) to %runtime.Type_Info_Integer*), align 1
  store i64 2, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 193, i32 5, i32 1), align 8
  store i64 4, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 195, i32 0), align 8
  store i64 4, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 195, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 195, i32 2), align 4
  store i64 4683743612465316035, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 195, i32 4), align 8
  store %runtime.Type_Info_Integer { i8 1, i8 2 }, %runtime.Type_Info_Integer* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 195, i32 5) to %runtime.Type_Info_Integer*), align 1
  store i64 2, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 195, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 196, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 196, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 196, i32 2), align 4
  store i64 4683743612465316036, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 196, i32 4), align 8
  store %runtime.Type_Info_Integer { i8 1, i8 2 }, %runtime.Type_Info_Integer* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 196, i32 5) to %runtime.Type_Info_Integer*), align 1
  store i64 2, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 196, i32 5, i32 1), align 8
  store i64 4, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 121, i32 0), align 8
  store i64 4, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 121, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 121, i32 2), align 4
  store i64 72057594037928057, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 121, i32 4), align 8
  store %runtime.Type_Info_Integer { i8 0, i8 2 }, %runtime.Type_Info_Integer* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 121, i32 5) to %runtime.Type_Info_Integer*), align 1
  store i64 2, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 121, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 197, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 197, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 197, i32 2), align 4
  store i64 72057594037928133, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 197, i32 4), align 8
  store %runtime.Type_Info_Integer { i8 0, i8 2 }, %runtime.Type_Info_Integer* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 197, i32 5) to %runtime.Type_Info_Integer*), align 1
  store i64 2, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 197, i32 5, i32 1), align 8
  store i64 16, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 203, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 203, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 203, i32 2), align 4
  store i64 72057594037928139, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 203, i32 4), align 8
  store %runtime.Type_Info_Integer { i8 0, i8 2 }, %runtime.Type_Info_Integer* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 203, i32 5) to %runtime.Type_Info_Integer*), align 1
  store i64 2, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 203, i32 5, i32 1), align 8
  store i64 2, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 170, i32 0), align 8
  store i64 2, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 170, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 170, i32 2), align 4
  store i64 216172782113783978, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 170, i32 4), align 8
  call void @llvm.memset.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 170, i32 5) to i8*), i8 0, i64 1, i1 false)
  store i64 4, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 170, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 171, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 171, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 171, i32 2), align 4
  store i64 216172782113783979, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 171, i32 4), align 8
  call void @llvm.memset.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 171, i32 5) to i8*), i8 0, i64 1, i1 false)
  store i64 4, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 171, i32 5, i32 1), align 8
  store i64 4, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 178, i32 0), align 8
  store i64 2, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 178, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 178, i32 2), align 4
  store i64 288230376151711922, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 178, i32 4), align 8
  store i64 5, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 178, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 179, i32 0), align 8
  store i64 4, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 179, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 179, i32 2), align 4
  store i64 288230376151711923, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 179, i32 4), align 8
  store i64 5, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 179, i32 5, i32 1), align 8
  store i64 16, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 180, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 180, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 180, i32 2), align 4
  store i64 288230376151711924, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 180, i32 4), align 8
  store i64 5, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 180, i32 5, i32 1), align 8
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 166, i32 0), align 8
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 166, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 166, i32 2), align 4
  store i64 504403158265495718, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 166, i32 4), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 166, i32 5, i32 1), align 8
  store i64 2, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 167, i32 0), align 8
  store i64 2, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 167, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 167, i32 2), align 4
  store i64 504403158265495719, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 167, i32 4), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 167, i32 5, i32 1), align 8
  store i64 4, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 168, i32 0), align 8
  store i64 4, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 168, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 168, i32 2), align 4
  store i64 504403158265495720, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 168, i32 4), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 168, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 169, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 169, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 169, i32 2), align 4
  store i64 504403158265495721, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 169, i32 4), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 169, i32 5, i32 1), align 8
  store i64 64, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 248, i32 0), align 8
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 248, i32 1), align 8
  store i32 0, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 248, i32 2), align 4
  store i64 3674937295934324984, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 248, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 248, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$53" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 248, i32 5, i32 1), align 8
  store i64 64, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 249, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 249, i32 1), align 8
  store i32 0, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 249, i32 2), align 4
  store i64 1369094286720631033, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 249, i32 4), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 250), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 163), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 59), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 164), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 171), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 165), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 33), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 166), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 17), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 167), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 251), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 168), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 254), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 169), align 8
  store %runtime.Type_Info_Union { { %runtime.Type_Info**, i64 } { %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 163), i64 7 }, i64 56, %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 14), i8* null, i8 0, i8 0, i8 0, [5 x i8] zeroinitializer }, %runtime.Type_Info_Union* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 249, i32 5) to %runtime.Type_Info_Union*), align 8
  store i64 20, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 249, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 250, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 250, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 250, i32 2), align 4
  store i64 3026418949592973562, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 250, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 250, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$54" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 250, i32 5, i32 1), align 8
  store i64 40, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 251, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 251, i32 1), align 8
  store i32 0, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 251, i32 2), align 4
  store i64 3386706919782613243, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 251, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 251, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$55" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 251, i32 5, i32 1), align 8
  store i64 40, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 252, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 252, i32 1), align 8
  store i32 0, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 252, i32 2), align 4
  store i64 1080863910568919292, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 252, i32 4), align 8
  store %runtime.Type_Info_Dynamic_Array { %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 248), i64 64 }, %runtime.Type_Info_Dynamic_Array* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 252, i32 5) to %runtime.Type_Info_Dynamic_Array*), align 8
  store i64 16, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 252, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 253, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 253, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 253, i32 2), align 4
  store i64 720575940379279613, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 253, i32 4), align 8
  store %runtime.Type_Info_Pointer { %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 248) }, %runtime.Type_Info_Pointer* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 253, i32 5) to %runtime.Type_Info_Pointer*), align 8
  store i64 11, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 253, i32 5, i32 1), align 8
  store i64 16, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 137, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 137, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 137, i32 2), align 4
  store i64 3602879701896396937, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 137, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 137, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$56" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 137, i32 5, i32 1), align 8
  store i64 16, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 138, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 138, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 138, i32 2), align 4
  store i64 1297036692682702986, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 138, i32 4), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 139), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 170), align 8
  store %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$133", i64 0, i64 0), i64 9 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 135), align 8
  store i64 0, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 129), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 129), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 79), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 171), align 8
  store %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$184", i64 0, i64 0), i64 4 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 136), align 8
  store i64 8, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 130), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 130), align 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 138, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Struct* @"ggv$57" to i8*), i64 120, i1 false)
  store i64 19, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 138, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 139, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 139, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 139, i32 2), align 4
  store i64 3170534137668829323, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 139, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 139, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$58" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 139, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 140, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 140, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 140, i32 2), align 4
  store i64 864691128455135372, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 140, i32 4), align 8
  store %runtime.Type_Info_Procedure { %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 141), %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 144), i8 0, i8 1, [6 x i8] zeroinitializer }, %runtime.Type_Info_Procedure* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 140, i32 5) to %runtime.Type_Info_Procedure*), align 8
  store i64 13, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 140, i32 5, i32 1), align 8
  store i64 88, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 141, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 141, i32 1), align 8
  store i32 0, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 141, i32 2), align 4
  store i64 1224979098644775053, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 141, i32 4), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 79), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 172), align 8
  store %..string { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"csbs$211", i64 0, i64 0), i64 14 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 137), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 142), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 173), align 8
  store %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$212", i64 0, i64 0), i64 4 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 138), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 3), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 174), align 8
  store %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$122", i64 0, i64 0), i64 4 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 139), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 3), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 175), align 8
  store %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$213", i64 0, i64 0), i64 9 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 140), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 79), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 176), align 8
  store %..string { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"csbs$214", i64 0, i64 0), i64 10 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 141), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 3), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 177), align 8
  store %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$215", i64 0, i64 0), i64 8 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 142), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 28), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 178), align 8
  store %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$216", i64 0, i64 0), i64 8 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 143), align 8
  store %runtime.Type_Info_Tuple { { %runtime.Type_Info**, i64 } { %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 172), i64 7 }, { %..string*, i64 } { %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 137), i64 7 } }, %runtime.Type_Info_Tuple* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 141, i32 5) to %runtime.Type_Info_Tuple*), align 8
  store i64 18, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 141, i32 5, i32 1), align 8
  store i64 24, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 144, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 144, i32 1), align 8
  store i32 0, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 144, i32 2), align 4
  store i64 1224979098644775056, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 144, i32 4), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 135), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 179), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 145), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 180), align 8
  store %runtime.Type_Info_Tuple { { %runtime.Type_Info**, i64 } { %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 179), i64 2 }, { %..string*, i64 } { %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 144), i64 2 } }, %runtime.Type_Info_Tuple* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 144, i32 5) to %runtime.Type_Info_Tuple*), align 8
  store i64 18, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 144, i32 5, i32 1), align 8
  store i64 16, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 135, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 135, i32 1), align 8
  store i32 0, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 135, i32 2), align 4
  store i64 1152921504606847111, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 135, i32 4), align 8
  store %runtime.Type_Info_Slice { %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 19), i64 1 }, %runtime.Type_Info_Slice* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 135, i32 5) to %runtime.Type_Info_Slice*), align 8
  store i64 17, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 135, i32 5, i32 1), align 8
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 145, i32 0), align 8
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 145, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 145, i32 2), align 4
  store i64 3746994889972252817, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 145, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 145, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$59" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 145, i32 5, i32 1), align 8
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 146, i32 0), align 8
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 146, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 146, i32 2), align 4
  store i64 1441151880758558866, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 146, i32 4), align 8
  store %runtime.Type_Info_Enum { %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 19), { %..string*, i64 } { %..string* getelementptr inbounds ([5 x %..string], [5 x %..string]* @"$enum_names-146", i64 0, i64 0), i64 5 }, { i64*, i64 } { i64* getelementptr inbounds ([5 x i64], [5 x i64]* @"$enum_values-146", i64 0, i64 0), i64 5 } }, %runtime.Type_Info_Enum* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 146, i32 5) to %runtime.Type_Info_Enum*), align 8
  store i64 21, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 146, i32 5, i32 1), align 8
  store i64 56, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 254, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 254, i32 1), align 8
  store i32 0, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 254, i32 2), align 4
  store i64 3819052484010180862, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 254, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 254, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$5a" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 254, i32 5, i32 1), align 8
  store i64 56, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 255, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 255, i32 1), align 8
  store i32 0, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 255, i32 2), align 4
  store i64 1513209474796486911, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 255, i32 4), align 8
  store %runtime.Type_Info_Map { %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 17), %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 248), %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 256), i8* bitcast (i8 (i8*, i8*)* @"__$equal6" to i8*), i8* bitcast (i64 (i8*, i64)* @"__$hasher1" to i8*) }, %runtime.Type_Info_Map* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 255, i32 5) to %runtime.Type_Info_Map*), align 8
  store i64 22, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 255, i32 5, i32 1), align 8
  store i64 56, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 256, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 256, i32 1), align 8
  store i32 0, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 256, i32 2), align 4
  store i64 1297036692682703104, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 256, i32 4), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 257), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 181), align 8
  store %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$21d", i64 0, i64 0), i64 6 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 146), align 8
  store i64 0, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 131), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 131), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 259), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 182), align 8
  store %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$21e", i64 0, i64 0), i64 7 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 147), align 8
  store i64 16, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 132), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 132), align 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 256, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Struct* @"ggv$5b" to i8*), i64 120, i1 false)
  store i64 19, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 256, i32 5, i32 1), align 8
  store i64 16, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 257, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 257, i32 1), align 8
  store i32 0, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 257, i32 2), align 4
  store i64 1152921504606847233, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 257, i32 4), align 8
  store %runtime.Type_Info_Slice { %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 3), i64 8 }, %runtime.Type_Info_Slice* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 257, i32 5) to %runtime.Type_Info_Slice*), align 8
  store i64 17, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 257, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 258, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 258, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 258, i32 2), align 4
  store i64 720575940379279618, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 258, i32 4), align 8
  store %runtime.Type_Info_Pointer { %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 3) }, %runtime.Type_Info_Pointer* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 258, i32 5) to %runtime.Type_Info_Pointer*), align 8
  store i64 11, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 258, i32 5, i32 1), align 8
  store i64 40, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 259, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 259, i32 1), align 8
  store i32 0, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 259, i32 2), align 4
  store i64 1080863910568919299, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 259, i32 4), align 8
  store %runtime.Type_Info_Dynamic_Array { %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 260), i64 96 }, %runtime.Type_Info_Dynamic_Array* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 259, i32 5) to %runtime.Type_Info_Dynamic_Array*), align 8
  store i64 16, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 259, i32 5, i32 1), align 8
  store i64 96, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 260, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 260, i32 1), align 8
  store i32 0, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 260, i32 2), align 4
  store i64 1297036692682703108, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 260, i32 4), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 72), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 183), align 8
  store %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$21f", i64 0, i64 0), i64 4 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 148), align 8
  store i64 0, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 133), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 133), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 3), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 184), align 8
  store %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$220", i64 0, i64 0), i64 4 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 149), align 8
  store i64 8, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 134), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 134), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 17), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 185), align 8
  store %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$17e", i64 0, i64 0), i64 3 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 150), align 8
  store i64 16, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 135), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 135), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 248), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 186), align 8
  store %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$17f", i64 0, i64 0), i64 5 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 151), align 8
  store i64 32, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 136), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 136), align 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 260, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Struct* @"ggv$5c" to i8*), i64 120, i1 false)
  store i64 19, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 260, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 261, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 261, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 261, i32 2), align 4
  store i64 720575940379279621, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 261, i32 4), align 8
  store %runtime.Type_Info_Pointer { %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 260) }, %runtime.Type_Info_Pointer* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 261, i32 5) to %runtime.Type_Info_Pointer*), align 8
  store i64 11, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 261, i32 5, i32 1), align 8
  store i64 16, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 159, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 159, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 159, i32 2), align 4
  store i64 3674937295934324895, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 159, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 159, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$5d" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 159, i32 5, i32 1), align 8
  store i64 16, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 160, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 160, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 160, i32 2), align 4
  store i64 1369094286720630944, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 160, i32 4), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 3), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 187), align 8
  store %runtime.Type_Info_Union { { %runtime.Type_Info**, i64 } { %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 187), i64 1 }, i64 8, %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 14), i8* null, i8 0, i8 0, i8 0, [5 x i8] zeroinitializer }, %runtime.Type_Info_Union* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 160, i32 5) to %runtime.Type_Info_Union*), align 8
  store i64 20, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 160, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 161, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 161, i32 1), align 8
  store i32 0, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 161, i32 2), align 4
  store i64 1224979098644775073, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 161, i32 4), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 3), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 188), align 8
  store %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$2c", i64 0, i64 0), i64 1 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 152), align 8
  store %runtime.Type_Info_Tuple { { %runtime.Type_Info**, i64 } { %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 188), i64 1 }, { %..string*, i64 } { %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 152), i64 1 } }, %runtime.Type_Info_Tuple* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 161, i32 5) to %runtime.Type_Info_Tuple*), align 8
  store i64 18, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 161, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 163, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 163, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 163, i32 2), align 4
  store i64 6989586621679009955, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 163, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 163, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$5e" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 163, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 164, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 164, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 164, i32 2), align 4
  store i64 3602879701896396964, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 164, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 164, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$5f" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 164, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 165, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 165, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 165, i32 2), align 4
  store i64 1297036692682703013, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 165, i32 4), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 59), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 189), align 8
  store %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$225", i64 0, i64 0), i64 5 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 153), align 8
  store i64 0, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 137), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 137), align 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 165, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Struct* @"ggv$60" to i8*), i64 120, i1 false)
  store i64 19, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 165, i32 5, i32 1), align 8
  store i64 2, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 172, i32 0), align 8
  store i64 2, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 172, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 172, i32 2), align 4
  store i64 216172782113783980, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 172, i32 4), align 8
  call void @llvm.memset.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 172, i32 5) to i8*), i8 1, i64 1, i1 false)
  store i64 4, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 172, i32 5, i32 1), align 8
  store i64 4, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 173, i32 0), align 8
  store i64 4, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 173, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 173, i32 2), align 4
  store i64 216172782113783981, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 173, i32 4), align 8
  call void @llvm.memset.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 173, i32 5) to i8*), i8 1, i64 1, i1 false)
  store i64 4, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 173, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 174, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 174, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 174, i32 2), align 4
  store i64 216172782113783982, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 174, i32 4), align 8
  call void @llvm.memset.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 174, i32 5) to i8*), i8 1, i64 1, i1 false)
  store i64 4, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 174, i32 5, i32 1), align 8
  store i64 2, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 175, i32 0), align 8
  store i64 2, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 175, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 175, i32 2), align 4
  store i64 216172782113783983, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 175, i32 4), align 8
  call void @llvm.memset.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 175, i32 5) to i8*), i8 2, i64 1, i1 false)
  store i64 4, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 175, i32 5, i32 1), align 8
  store i64 4, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 176, i32 0), align 8
  store i64 4, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 176, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 176, i32 2), align 4
  store i64 216172782113783984, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 176, i32 4), align 8
  call void @llvm.memset.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 176, i32 5) to i8*), i8 2, i64 1, i1 false)
  store i64 4, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 176, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 177, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 177, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 177, i32 2), align 4
  store i64 216172782113783985, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 177, i32 4), align 8
  call void @llvm.memset.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 177, i32 5) to i8*), i8 2, i64 1, i1 false)
  store i64 4, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 177, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 181, i32 0), align 8
  store i64 2, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 181, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 181, i32 2), align 4
  store i64 181, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 181, i32 4), align 8
  store i64 6, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 181, i32 5, i32 1), align 8
  store i64 16, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 182, i32 0), align 8
  store i64 4, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 182, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 182, i32 2), align 4
  store i64 182, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 182, i32 4), align 8
  store i64 6, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 182, i32 5, i32 1), align 8
  store i64 32, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 183, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 183, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 183, i32 2), align 4
  store i64 183, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 183, i32 4), align 8
  store i64 6, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 183, i32 5, i32 1), align 8
  store i64 16, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 198, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 198, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 198, i32 2), align 4
  store i64 4683743612465316038, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 198, i32 4), align 8
  store %runtime.Type_Info_Integer { i8 1, i8 0 }, %runtime.Type_Info_Integer* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 198, i32 5) to %runtime.Type_Info_Integer*), align 1
  store i64 2, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 198, i32 5, i32 1), align 8
  store i64 16, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 200, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 200, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 200, i32 2), align 4
  store i64 4683743612465316040, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 200, i32 4), align 8
  call void @llvm.memset.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 200, i32 5) to i8*), i8 1, i64 2, i1 false)
  store i64 2, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 200, i32 5, i32 1), align 8
  store i64 16, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 202, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 202, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 202, i32 2), align 4
  store i64 4683743612465316042, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 202, i32 4), align 8
  store %runtime.Type_Info_Integer { i8 1, i8 2 }, %runtime.Type_Info_Integer* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 202, i32 5) to %runtime.Type_Info_Integer*), align 1
  store i64 2, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 202, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 11, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 11, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 11, i32 2), align 4
  store i64 720575940379279371, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 11, i32 4), align 8
  store %runtime.Type_Info_Pointer { %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 8) }, %runtime.Type_Info_Pointer* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 11, i32 5) to %runtime.Type_Info_Pointer*), align 8
  store i64 11, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 11, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 6, i32 0), align 8
  store i64 2, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 6, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 6, i32 2), align 4
  store i64 3674937295934324742, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 6, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 6, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$61" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 6, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 7, i32 0), align 8
  store i64 2, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 7, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 7, i32 2), align 4
  store i64 1369094286720630791, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 7, i32 4), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 10), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 190), align 8
  store %runtime.Type_Info_Union { { %runtime.Type_Info**, i64 } { %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 190), i64 1 }, i64 6, %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 8), i8* null, i8 0, i8 0, i8 0, [5 x i8] zeroinitializer }, %runtime.Type_Info_Union* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 7, i32 5) to %runtime.Type_Info_Union*), align 8
  store i64 20, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 7, i32 5, i32 1), align 8
  store i64 6, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 9, i32 0), align 8
  store i64 2, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 9, i32 1), align 8
  store i32 0, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 9, i32 2), align 4
  store i64 1224979098644774921, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 9, i32 4), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 10), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 191), align 8
  store %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$2c", i64 0, i64 0), i64 1 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 154), align 8
  store %runtime.Type_Info_Tuple { { %runtime.Type_Info**, i64 } { %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 191), i64 1 }, { %..string*, i64 } { %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 154), i64 1 } }, %runtime.Type_Info_Tuple* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 9, i32 5) to %runtime.Type_Info_Tuple*), align 8
  store i64 18, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 9, i32 5, i32 1), align 8
  store i64 6, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 10, i32 0), align 8
  store i64 2, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 10, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 10, i32 2), align 4
  store i64 936748722493063178, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 10, i32 4), align 8
  store %runtime.Type_Info_Array { %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 8), i64 2, i64 3 }, %runtime.Type_Info_Array* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 10, i32 5) to %runtime.Type_Info_Array*), align 8
  store i64 14, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 10, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 4, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 4, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 4, i32 2), align 4
  store i64 3746994889972252676, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 4, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 4, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$62" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 4, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 5, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 5, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 5, i32 2), align 4
  store i64 1441151880758558725, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 5, i32 4), align 8
  store %runtime.Type_Info_Enum { %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 3), { %..string*, i64 } { %..string* getelementptr inbounds ([20 x %..string], [20 x %..string]* @"$enum_names-5", i64 0, i64 0), i64 20 }, { i64*, i64 } { i64* getelementptr inbounds ([20 x i64], [20 x i64]* @"$enum_values-5", i64 0, i64 0), i64 20 } }, %runtime.Type_Info_Enum* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 5, i32 5) to %runtime.Type_Info_Enum*), align 8
  store i64 21, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 5, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 1, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 1, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 1, i32 2), align 4
  store i64 3746994889972252673, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 1, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 1, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$63" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 1, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 2, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 2, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 2, i32 2), align 4
  store i64 1441151880758558722, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 2, i32 4), align 8
  store %runtime.Type_Info_Enum { %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 3), { %..string*, i64 } { %..string* getelementptr inbounds ([12 x %..string], [12 x %..string]* @"$enum_names-2", i64 0, i64 0), i64 12 }, { i64*, i64 } { i64* getelementptr inbounds ([12 x i64], [12 x i64]* @"$enum_values-2", i64 0, i64 0), i64 12 } }, %runtime.Type_Info_Enum* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 2, i32 5) to %runtime.Type_Info_Enum*), align 8
  store i64 21, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 2, i32 5, i32 1), align 8
  store i64 16, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 106, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 106, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 106, i32 2), align 4
  store i64 3674937295934324842, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 106, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 106, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$64" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 106, i32 5, i32 1), align 8
  store i64 16, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 107, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 107, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 107, i32 2), align 4
  store i64 1369094286720630891, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 107, i32 4), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 108), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 192), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 116), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 193), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 147), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 194), align 8
  store %runtime.Type_Info_Union { { %runtime.Type_Info**, i64 } { %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 192), i64 3 }, i64 8, %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 14), i8* bitcast (i8 (i8*, i8*)* @"__$equal7" to i8*), i8 0, i8 0, i8 1, [5 x i8] zeroinitializer }, %runtime.Type_Info_Union* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 107, i32 5) to %runtime.Type_Info_Union*), align 8
  store i64 20, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 107, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 108, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 108, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 108, i32 2), align 4
  store i64 720575940379279468, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 108, i32 4), align 8
  store %runtime.Type_Info_Pointer { %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 109) }, %runtime.Type_Info_Pointer* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 108, i32 5) to %runtime.Type_Info_Pointer*), align 8
  store i64 11, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 108, i32 5, i32 1), align 8
  store i64 72, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 109, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 109, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 109, i32 2), align 4
  store i64 3602879701896396909, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 109, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 109, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$65" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 109, i32 5, i32 1), align 8
  store i64 72, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 110, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 110, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 110, i32 2), align 4
  store i64 1297036692682702958, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 110, i32 4), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 111), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 195), align 8
  store %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$24d", i64 0, i64 0), i64 6 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 155), align 8
  store i64 0, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 138), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 138), align 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 110, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Struct* @"ggv$66" to i8*), i64 120, i1 false)
  store i64 19, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 110, i32 5, i32 1), align 8
  store i64 72, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 111, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 111, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 111, i32 2), align 4
  store i64 3602879701896396911, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 111, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 111, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$67" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 111, i32 5, i32 1), align 8
  store i64 72, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 112, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 112, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 112, i32 2), align 4
  store i64 1297036692682702960, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 112, i32 4), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 113), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 196), align 8
  store %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$24f", i64 0, i64 0), i64 6 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 156), align 8
  store i64 0, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 139), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 139), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 3), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 197), align 8
  store %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$250", i64 0, i64 0), i64 5 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 157), align 8
  store i64 8, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 140), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 140), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 3), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 198), align 8
  store %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$251", i64 0, i64 0), i64 6 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 158), align 8
  store i64 16, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 141), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 141), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 3), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 199), align 8
  store %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$252", i64 0, i64 0), i64 8 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 159), align 8
  store i64 24, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 142), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 142), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 3), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 200), align 8
  store %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$253", i64 0, i64 0), i64 5 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 160), align 8
  store i64 32, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 143), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 143), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 3), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 201), align 8
  store %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$254", i64 0, i64 0), i64 6 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 161), align 8
  store i64 40, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 144), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 144), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 17), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 202), align 8
  store %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$255", i64 0, i64 0), i64 8 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 162), align 8
  store i64 48, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 145), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 145), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 115), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 203), align 8
  store %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$1d1", i64 0, i64 0), i64 5 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 163), align 8
  store i64 64, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 146), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 146), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 33), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 204), align 8
  store %..string { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @"csbs$256", i64 0, i64 0), i64 13 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 164), align 8
  store i64 68, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 147), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 147), align 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 112, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Struct* @"ggv$68" to i8*), i64 120, i1 false)
  store i64 19, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 112, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 113, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 113, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 113, i32 2), align 4
  store i64 3746994889972252785, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 113, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 113, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$69" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 113, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 114, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 114, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 114, i32 2), align 4
  store i64 1441151880758558834, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 114, i32 4), align 8
  store %runtime.Type_Info_Enum { %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 3), { %..string*, i64 } { %..string* getelementptr inbounds ([9 x %..string], [9 x %..string]* @"$enum_names-114", i64 0, i64 0), i64 9 }, { i64*, i64 } { i64* getelementptr inbounds ([9 x i64], [9 x i64]* @"$enum_values-114", i64 0, i64 0), i64 9 } }, %runtime.Type_Info_Enum* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 114, i32 5) to %runtime.Type_Info_Enum*), align 8
  store i64 21, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 114, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 116, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 116, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 116, i32 2), align 4
  store i64 720575940379279476, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 116, i32 4), align 8
  store %runtime.Type_Info_Pointer { %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 117) }, %runtime.Type_Info_Pointer* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 116, i32 5) to %runtime.Type_Info_Pointer*), align 8
  store i64 11, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 116, i32 5, i32 1), align 8
  store i64 56, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 117, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 117, i32 1), align 8
  store i32 0, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 117, i32 2), align 4
  store i64 3602879701896396917, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 117, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 117, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$6a" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 117, i32 5, i32 1), align 8
  store i64 56, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 118, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 118, i32 1), align 8
  store i32 0, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 118, i32 2), align 4
  store i64 1297036692682702966, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 118, i32 4), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 119), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 205), align 8
  store %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$24d", i64 0, i64 0), i64 6 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 165), align 8
  store i64 0, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 148), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 148), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 128), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 206), align 8
  store %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$262", i64 0, i64 0), i64 6 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 166), align 8
  store i64 16, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 149), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 149), align 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 118, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Struct* @"ggv$6b" to i8*), i64 120, i1 false)
  store i64 19, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 118, i32 5, i32 1), align 8
  store i64 13, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 119, i32 0), align 8
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 119, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 119, i32 2), align 4
  store i64 3602879701896396919, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 119, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 119, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$6c" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 119, i32 5, i32 1), align 8
  store i64 13, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 120, i32 0), align 8
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 120, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 120, i32 2), align 4
  store i64 1297036692682702968, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 120, i32 4), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 121), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 207), align 8
  store %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$250", i64 0, i64 0), i64 5 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 167), align 8
  store i64 0, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 150), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 150), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 121), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 208), align 8
  store %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$251", i64 0, i64 0), i64 6 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 168), align 8
  store i64 4, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 151), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 151), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 19), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 209), align 8
  store %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$264", i64 0, i64 0), i64 9 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 169), align 8
  store i64 8, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 152), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 152), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 122), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 210), align 8
  store %..string { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"csbs$265", i64 0, i64 0), i64 10 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 170), align 8
  store i64 9, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 153), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 153), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 19), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 211), align 8
  store %..string { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @"csbs$266", i64 0, i64 0), i64 18 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 171), align 8
  store i64 10, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 154), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 154), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 19), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 212), align 8
  store %..string { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @"csbs$267", i64 0, i64 0), i64 13 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 172), align 8
  store i64 11, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 155), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 155), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 126), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 213), align 8
  store %..string { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"csbs$268", i64 0, i64 0), i64 16 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 173), align 8
  store i64 12, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 156), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 156), align 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 120, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Struct* @"ggv$6d" to i8*), i64 120, i1 false)
  store i64 19, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 120, i32 5, i32 1), align 8
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 122, i32 0), align 8
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 122, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 122, i32 2), align 4
  store i64 3891110078048108666, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 122, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 122, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$6e" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 122, i32 5, i32 1), align 8
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 123, i32 0), align 8
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 123, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 123, i32 2), align 4
  store i64 1585267068834414715, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 123, i32 4), align 8
  store %runtime.Type_Info_Bit_Set { %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 124), %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 19), i64 0, i64 2 }, %runtime.Type_Info_Bit_Set* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 123, i32 5) to %runtime.Type_Info_Bit_Set*), align 8
  store i64 23, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 123, i32 5, i32 1), align 8
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 124, i32 0), align 8
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 124, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 124, i32 2), align 4
  store i64 3746994889972252796, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 124, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 124, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$6f" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 124, i32 5, i32 1), align 8
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 125, i32 0), align 8
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 125, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 125, i32 2), align 4
  store i64 1441151880758558845, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 125, i32 4), align 8
  store %runtime.Type_Info_Enum { %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 19), { %..string*, i64 } { %..string* getelementptr inbounds ([3 x %..string], [3 x %..string]* @"$enum_names-125", i64 0, i64 0), i64 3 }, { i64*, i64 } { i64* getelementptr inbounds ([3 x i64], [3 x i64]* @"$enum_values-125", i64 0, i64 0), i64 3 } }, %runtime.Type_Info_Enum* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 125, i32 5) to %runtime.Type_Info_Enum*), align 8
  store i64 21, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 125, i32 5, i32 1), align 8
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 126, i32 0), align 8
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 126, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 126, i32 2), align 4
  store i64 3746994889972252798, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 126, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 126, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$70" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 126, i32 5, i32 1), align 8
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 127, i32 0), align 8
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 127, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 127, i32 2), align 4
  store i64 1441151880758558847, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 127, i32 4), align 8
  store %runtime.Type_Info_Enum { %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 19), { %..string*, i64 } { %..string* getelementptr inbounds ([2 x %..string], [2 x %..string]* @"$enum_names-127", i64 0, i64 0), i64 2 }, { i64*, i64 } { i64* getelementptr inbounds ([2 x i64], [2 x i64]* @"$enum_values-127", i64 0, i64 0), i64 2 } }, %runtime.Type_Info_Enum* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 127, i32 5) to %runtime.Type_Info_Enum*), align 8
  store i64 21, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 127, i32 5, i32 1), align 8
  store i64 40, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 128, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 128, i32 1), align 8
  store i32 0, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 128, i32 2), align 4
  store i64 1080863910568919168, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 128, i32 4), align 8
  store %runtime.Type_Info_Dynamic_Array { %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 129), i64 28 }, %runtime.Type_Info_Dynamic_Array* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 128, i32 5) to %runtime.Type_Info_Dynamic_Array*), align 8
  store i64 16, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 128, i32 5, i32 1), align 8
  store i64 28, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 129, i32 0), align 8
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 129, i32 1), align 8
  store i32 0, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 129, i32 2), align 4
  store i64 3602879701896396929, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 129, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 129, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$71" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 129, i32 5, i32 1), align 8
  store i64 28, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 130, i32 0), align 8
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 130, i32 1), align 8
  store i32 0, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 130, i32 2), align 4
  store i64 1297036692682702978, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 130, i32 4), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 131), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 214), align 8
  store %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$24d", i64 0, i64 0), i64 6 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 174), align 8
  store i64 0, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 157), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 157), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 135), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 215), align 8
  store %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$184", i64 0, i64 0), i64 4 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 175), align 8
  store i64 8, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 158), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 158), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 121), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 216), align 8
  store %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$270", i64 0, i64 0), i64 3 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 176), align 8
  store i64 24, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 159), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 159), align 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 130, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Struct* @"ggv$72" to i8*), i64 120, i1 false)
  store i64 19, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 130, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 131, i32 0), align 8
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 131, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 131, i32 2), align 4
  store i64 3602879701896396931, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 131, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 131, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$73" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 131, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 132, i32 0), align 8
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 132, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 132, i32 2), align 4
  store i64 1297036692682702980, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 132, i32 4), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 121), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 217), align 8
  store %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$272", i64 0, i64 0), i64 6 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 177), align 8
  store i64 0, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 160), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 160), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 133), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 218), align 8
  store %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$11d", i64 0, i64 0), i64 4 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 178), align 8
  store i64 4, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 161), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 161), align 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 132, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Struct* @"ggv$74" to i8*), i64 120, i1 false)
  store i64 19, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 132, i32 5, i32 1), align 8
  store i64 4, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 133, i32 0), align 8
  store i64 4, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 133, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 133, i32 2), align 4
  store i64 3746994889972252805, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 133, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 133, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$75" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 133, i32 5, i32 1), align 8
  store i64 4, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 134, i32 0), align 8
  store i64 4, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 134, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 134, i32 2), align 4
  store i64 1441151880758558854, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 134, i32 4), align 8
  store %runtime.Type_Info_Enum { %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 121), { %..string*, i64 } { %..string* getelementptr inbounds ([21 x %..string], [21 x %..string]* @"$enum_names-134", i64 0, i64 0), i64 21 }, { i64*, i64 } { i64* getelementptr inbounds ([21 x i64], [21 x i64]* @"$enum_values-134", i64 0, i64 0), i64 21 } }, %runtime.Type_Info_Enum* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 134, i32 5) to %runtime.Type_Info_Enum*), align 8
  store i64 21, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 134, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 136, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 136, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 136, i32 2), align 4
  store i64 720575940379279496, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 136, i32 4), align 8
  store %runtime.Type_Info_Pointer { %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 129) }, %runtime.Type_Info_Pointer* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 136, i32 5) to %runtime.Type_Info_Pointer*), align 8
  store i64 11, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 136, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 147, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 147, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 147, i32 2), align 4
  store i64 720575940379279507, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 147, i32 4), align 8
  store %runtime.Type_Info_Pointer { %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 148) }, %runtime.Type_Info_Pointer* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 147, i32 5) to %runtime.Type_Info_Pointer*), align 8
  store i64 11, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 147, i32 5, i32 1), align 8
  store i64 14, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 148, i32 0), align 8
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 148, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 148, i32 2), align 4
  store i64 3602879701896396948, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 148, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 148, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$76" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 148, i32 5, i32 1), align 8
  store i64 14, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 149, i32 0), align 8
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 149, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 149, i32 2), align 4
  store i64 1297036692682702997, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 149, i32 4), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 150), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 219), align 8
  store %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$24d", i64 0, i64 0), i64 6 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 179), align 8
  store i64 0, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 162), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 162), align 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 149, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Struct* @"ggv$77" to i8*), i64 120, i1 false)
  store i64 19, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 149, i32 5, i32 1), align 8
  store i64 14, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 150, i32 0), align 8
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 150, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 150, i32 2), align 4
  store i64 3602879701896396950, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 150, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 150, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$78" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 150, i32 5, i32 1), align 8
  store i64 14, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 151, i32 0), align 8
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 151, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 151, i32 2), align 4
  store i64 1297036692682702999, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 151, i32 4), align 8
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 121), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 220), align 8
  store %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$28b", i64 0, i64 0), i64 5 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 180), align 8
  store i64 0, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 163), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 163), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 121), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 221), align 8
  store %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$250", i64 0, i64 0), i64 5 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 181), align 8
  store i64 4, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 164), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 164), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 121), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 222), align 8
  store %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$251", i64 0, i64 0), i64 6 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 182), align 8
  store i64 8, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 165), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 165), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 19), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 223), align 8
  store %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$252", i64 0, i64 0), i64 8 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 183), align 8
  store i64 12, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 166), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 166), align 1
  store %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 152), %runtime.Type_Info** getelementptr inbounds ([225 x %runtime.Type_Info*], [225 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 224), align 8
  store %..string { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"csbs$28c", i64 0, i64 0), i64 11 }, %..string* getelementptr inbounds ([225 x %..string], [225 x %..string]* @"__$type_info_names_data", i64 0, i64 184), align 8
  store i64 13, i64* getelementptr inbounds ([225 x i64], [225 x i64]* @"__$type_info_offsets_data", i64 0, i64 167), align 8
  store i8 0, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @"__$type_info_usings_data", i64 0, i64 167), align 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 151, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Struct* @"ggv$79" to i8*), i64 120, i1 false)
  store i64 19, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 151, i32 5, i32 1), align 8
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 152, i32 0), align 8
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 152, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 152, i32 2), align 4
  store i64 3746994889972252824, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 152, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 152, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$7a" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 152, i32 5, i32 1), align 8
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 153, i32 0), align 8
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 153, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 153, i32 2), align 4
  store i64 1441151880758558873, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 153, i32 4), align 8
  store %runtime.Type_Info_Enum { %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 19), { %..string*, i64 } { %..string* getelementptr inbounds ([2 x %..string], [2 x %..string]* @"$enum_names-153", i64 0, i64 0), i64 2 }, { i64*, i64 } { i64* getelementptr inbounds ([2 x i64], [2 x i64]* @"$enum_values-153", i64 0, i64 0), i64 2 } }, %runtime.Type_Info_Enum* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 153, i32 5) to %runtime.Type_Info_Enum*), align 8
  store i64 21, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 153, i32 5, i32 1), align 8
  store i64 4, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 208, i32 0), align 8
  store i64 4, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 208, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 208, i32 2), align 4
  store i64 3746994889972252880, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 208, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 208, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$7b" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 208, i32 5, i32 1), align 8
  store i64 4, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 209, i32 0), align 8
  store i64 4, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 209, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 209, i32 2), align 4
  store i64 1441151880758558929, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 209, i32 4), align 8
  store %runtime.Type_Info_Enum { %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 30), { %..string*, i64 } { %..string* getelementptr inbounds ([8 x %..string], [8 x %..string]* @"$enum_names-209", i64 0, i64 0), i64 8 }, { i64*, i64 } { i64* getelementptr inbounds ([8 x i64], [8 x i64]* @"$enum_values-209", i64 0, i64 0), i64 8 } }, %runtime.Type_Info_Enum* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 209, i32 5) to %runtime.Type_Info_Enum*), align 8
  store i64 21, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 209, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 236, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 236, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 236, i32 2), align 4
  store i64 720575940379279596, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 236, i32 4), align 8
  store %runtime.Type_Info_Pointer { %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 220) }, %runtime.Type_Info_Pointer* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 236, i32 5) to %runtime.Type_Info_Pointer*), align 8
  store i64 11, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 236, i32 5, i32 1), align 8
  store i64 4, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 214, i32 0), align 8
  store i64 4, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 214, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 214, i32 2), align 4
  store i64 3746994889972252886, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 214, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 214, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$7c" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 214, i32 5, i32 1), align 8
  store i64 4, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 215, i32 0), align 8
  store i64 4, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 215, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 215, i32 2), align 4
  store i64 1441151880758558935, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 215, i32 4), align 8
  store %runtime.Type_Info_Enum { %runtime.Type_Info* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 30), { %..string*, i64 } { %..string* getelementptr inbounds ([16 x %..string], [16 x %..string]* @"$enum_names-215", i64 0, i64 0), i64 16 }, { i64*, i64 } { i64* getelementptr inbounds ([16 x i64], [16 x i64]* @"$enum_values-215", i64 0, i64 0), i64 16 } }, %runtime.Type_Info_Enum* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 215, i32 5) to %runtime.Type_Info_Enum*), align 8
  store i64 21, i64* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 215, i32 5, i32 1), align 8
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #0

define i8 @"__$equal1"(i8* %0, i8* %1) {
decls:
  br label %entry

entry:                                            ; preds = %decls
  %2 = bitcast i8* %0 to { %..string, %runtime.Type_Info*, %..string, %runtime.Source_Code_Location }*
  %3 = bitcast i8* %1 to { %..string, %runtime.Type_Info*, %..string, %runtime.Source_Code_Location }*
  %4 = icmp eq { %..string, %runtime.Type_Info*, %..string, %runtime.Source_Code_Location }* %2, %3
  br i1 %4, label %same_ptr, label %diff_ptr

same_ptr:                                         ; preds = %entry
  ret i8 1

diff_ptr:                                         ; preds = %entry
  %5 = getelementptr inbounds { %..string, %runtime.Type_Info*, %..string, %runtime.Source_Code_Location }, { %..string, %runtime.Type_Info*, %..string, %runtime.Source_Code_Location }* %2, i32 0, i32 0
  %6 = getelementptr inbounds { %..string, %runtime.Type_Info*, %..string, %runtime.Source_Code_Location }, { %..string, %runtime.Type_Info*, %..string, %runtime.Source_Code_Location }* %3, i32 0, i32 0
  %7 = load %..string, %..string* %5, align 8
  %8 = load %..string, %..string* %6, align 8
  %9 = bitcast %..string* %5 to { i64, i64 }*
  %10 = load { i64, i64 }, { i64, i64 }* %9, align 8
  %11 = bitcast %..string* %6 to { i64, i64 }*
  %12 = load { i64, i64 }, { i64, i64 }* %11, align 8
  %13 = call i8 @runtime.string_eq({ i64, i64 } %10, { i64, i64 } %12)
  %14 = trunc i8 %13 to i1
  br i1 %14, label %btrue, label %bfalse

btrue:                                            ; preds = %diff_ptr
  %15 = getelementptr inbounds { %..string, %runtime.Type_Info*, %..string, %runtime.Source_Code_Location }, { %..string, %runtime.Type_Info*, %..string, %runtime.Source_Code_Location }* %2, i32 0, i32 1
  %16 = getelementptr inbounds { %..string, %runtime.Type_Info*, %..string, %runtime.Source_Code_Location }, { %..string, %runtime.Type_Info*, %..string, %runtime.Source_Code_Location }* %3, i32 0, i32 1
  %17 = load %runtime.Type_Info*, %runtime.Type_Info** %15, align 8
  %18 = load %runtime.Type_Info*, %runtime.Type_Info** %16, align 8
  %19 = icmp eq %runtime.Type_Info* %17, %18
  br i1 %19, label %btrue1, label %bfalse

btrue1:                                           ; preds = %btrue
  %20 = getelementptr inbounds { %..string, %runtime.Type_Info*, %..string, %runtime.Source_Code_Location }, { %..string, %runtime.Type_Info*, %..string, %runtime.Source_Code_Location }* %2, i32 0, i32 2
  %21 = getelementptr inbounds { %..string, %runtime.Type_Info*, %..string, %runtime.Source_Code_Location }, { %..string, %runtime.Type_Info*, %..string, %runtime.Source_Code_Location }* %3, i32 0, i32 2
  %22 = load %..string, %..string* %20, align 8
  %23 = load %..string, %..string* %21, align 8
  %24 = bitcast %..string* %20 to { i64, i64 }*
  %25 = load { i64, i64 }, { i64, i64 }* %24, align 8
  %26 = bitcast %..string* %21 to { i64, i64 }*
  %27 = load { i64, i64 }, { i64, i64 }* %26, align 8
  %28 = call i8 @runtime.string_eq({ i64, i64 } %25, { i64, i64 } %27)
  %29 = trunc i8 %28 to i1
  br i1 %29, label %btrue2, label %bfalse

btrue2:                                           ; preds = %btrue1
  %30 = getelementptr inbounds { %..string, %runtime.Type_Info*, %..string, %runtime.Source_Code_Location }, { %..string, %runtime.Type_Info*, %..string, %runtime.Source_Code_Location }* %2, i32 0, i32 3
  %31 = getelementptr inbounds { %..string, %runtime.Type_Info*, %..string, %runtime.Source_Code_Location }, { %..string, %runtime.Type_Info*, %..string, %runtime.Source_Code_Location }* %3, i32 0, i32 3
  %32 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %30, align 8
  %33 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %31, align 8
  %34 = bitcast %runtime.Source_Code_Location* %30 to i8*
  %35 = bitcast %runtime.Source_Code_Location* %31 to i8*
  %36 = call i8 @"__$equal2"(i8* %34, i8* %35)
  %37 = trunc i8 %36 to i1
  br i1 %37, label %btrue3, label %bfalse

btrue3:                                           ; preds = %btrue2
  ret i8 1

bfalse:                                           ; preds = %btrue2, %btrue1, %btrue, %diff_ptr
  ret i8 0
}

define internal i8 @runtime.string_eq({ i64, i64 } %0, { i64, i64 } %1) {
decls:
  %2 = alloca %..string, align 8
  %3 = alloca %..string, align 8
  %4 = alloca %runtime.Raw_String, align 8
  %5 = alloca %runtime.Raw_String, align 8
  br label %entry

entry:                                            ; preds = %decls
  %6 = bitcast %..string* %2 to { i64, i64 }*
  store { i64, i64 } %0, { i64, i64 }* %6, align 8
  %7 = load %..string, %..string* %2, align 8
  %8 = bitcast %..string* %3 to { i64, i64 }*
  store { i64, i64 } %1, { i64, i64 }* %8, align 8
  %9 = load %..string, %..string* %3, align 8
  %10 = load %..string, %..string* %2, align 8
  %11 = bitcast %..string* %2 to %runtime.Raw_String*
  %12 = load %runtime.Raw_String, %runtime.Raw_String* %11, align 8
  store %runtime.Raw_String %12, %runtime.Raw_String* %4, align 8
  %13 = load %..string, %..string* %3, align 8
  %14 = bitcast %..string* %3 to %runtime.Raw_String*
  %15 = load %runtime.Raw_String, %runtime.Raw_String* %14, align 8
  store %runtime.Raw_String %15, %runtime.Raw_String* %5, align 8
  %16 = getelementptr inbounds %runtime.Raw_String, %runtime.Raw_String* %4, i32 0, i32 1
  %17 = load i64, i64* %16, align 8
  %18 = getelementptr inbounds %runtime.Raw_String, %runtime.Raw_String* %5, i32 0, i32 1
  %19 = load i64, i64* %18, align 8
  %20 = icmp ne i64 %17, %19
  %21 = zext i1 %20 to i8
  %22 = trunc i8 %21 to i1
  br i1 %22, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  ret i8 0

if.done:                                          ; preds = %entry
  %23 = getelementptr inbounds %runtime.Raw_String, %runtime.Raw_String* %4, i32 0, i32 0
  %24 = load i8*, i8** %23, align 8
  %25 = getelementptr inbounds %runtime.Raw_String, %runtime.Raw_String* %5, i32 0, i32 0
  %26 = load i8*, i8** %25, align 8
  %27 = getelementptr inbounds %runtime.Raw_String, %runtime.Raw_String* %4, i32 0, i32 1
  %28 = load i64, i64* %27, align 8
  %29 = call i8 @runtime.memory_equal(i8* %24, i8* %26, i64 %28) #4
  ret i8 %29
}

define i8 @"__$equal2"(i8* %0, i8* %1) {
decls:
  br label %entry

entry:                                            ; preds = %decls
  %2 = bitcast i8* %0 to { %..string, i32, i32, %..string }*
  %3 = bitcast i8* %1 to { %..string, i32, i32, %..string }*
  %4 = icmp eq { %..string, i32, i32, %..string }* %2, %3
  br i1 %4, label %same_ptr, label %diff_ptr

same_ptr:                                         ; preds = %entry
  ret i8 1

diff_ptr:                                         ; preds = %entry
  %5 = getelementptr inbounds { %..string, i32, i32, %..string }, { %..string, i32, i32, %..string }* %2, i32 0, i32 0
  %6 = getelementptr inbounds { %..string, i32, i32, %..string }, { %..string, i32, i32, %..string }* %3, i32 0, i32 0
  %7 = load %..string, %..string* %5, align 8
  %8 = load %..string, %..string* %6, align 8
  %9 = bitcast %..string* %5 to { i64, i64 }*
  %10 = load { i64, i64 }, { i64, i64 }* %9, align 8
  %11 = bitcast %..string* %6 to { i64, i64 }*
  %12 = load { i64, i64 }, { i64, i64 }* %11, align 8
  %13 = call i8 @runtime.string_eq({ i64, i64 } %10, { i64, i64 } %12)
  %14 = trunc i8 %13 to i1
  br i1 %14, label %btrue, label %bfalse

btrue:                                            ; preds = %diff_ptr
  %15 = getelementptr inbounds { %..string, i32, i32, %..string }, { %..string, i32, i32, %..string }* %2, i32 0, i32 1
  %16 = getelementptr inbounds { %..string, i32, i32, %..string }, { %..string, i32, i32, %..string }* %3, i32 0, i32 1
  %17 = load i32, i32* %15, align 4
  %18 = load i32, i32* %16, align 4
  %19 = icmp eq i32 %17, %18
  br i1 %19, label %btrue1, label %bfalse

btrue1:                                           ; preds = %btrue
  %20 = getelementptr inbounds { %..string, i32, i32, %..string }, { %..string, i32, i32, %..string }* %2, i32 0, i32 2
  %21 = getelementptr inbounds { %..string, i32, i32, %..string }, { %..string, i32, i32, %..string }* %3, i32 0, i32 2
  %22 = load i32, i32* %20, align 4
  %23 = load i32, i32* %21, align 4
  %24 = icmp eq i32 %22, %23
  br i1 %24, label %btrue2, label %bfalse

btrue2:                                           ; preds = %btrue1
  %25 = getelementptr inbounds { %..string, i32, i32, %..string }, { %..string, i32, i32, %..string }* %2, i32 0, i32 3
  %26 = getelementptr inbounds { %..string, i32, i32, %..string }, { %..string, i32, i32, %..string }* %3, i32 0, i32 3
  %27 = load %..string, %..string* %25, align 8
  %28 = load %..string, %..string* %26, align 8
  %29 = bitcast %..string* %25 to { i64, i64 }*
  %30 = load { i64, i64 }, { i64, i64 }* %29, align 8
  %31 = bitcast %..string* %26 to { i64, i64 }*
  %32 = load { i64, i64 }, { i64, i64 }* %31, align 8
  %33 = call i8 @runtime.string_eq({ i64, i64 } %30, { i64, i64 } %32)
  %34 = trunc i8 %33 to i1
  br i1 %34, label %btrue3, label %bfalse

btrue3:                                           ; preds = %btrue2
  ret i8 1

bfalse:                                           ; preds = %btrue2, %btrue1, %btrue, %diff_ptr
  ret i8 0
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

define i8 @"__$equal3"(i8* %0, i8* %1) {
decls:
  br label %entry

entry:                                            ; preds = %decls
  %2 = bitcast i8* %0 to { %..string, %runtime.Type_Info*, %..string, i64, i8, [7 x i8] }*
  %3 = bitcast i8* %1 to { %..string, %runtime.Type_Info*, %..string, i64, i8, [7 x i8] }*
  %4 = icmp eq { %..string, %runtime.Type_Info*, %..string, i64, i8, [7 x i8] }* %2, %3
  br i1 %4, label %same_ptr, label %diff_ptr

same_ptr:                                         ; preds = %entry
  ret i8 1

diff_ptr:                                         ; preds = %entry
  %5 = getelementptr inbounds { %..string, %runtime.Type_Info*, %..string, i64, i8, [7 x i8] }, { %..string, %runtime.Type_Info*, %..string, i64, i8, [7 x i8] }* %2, i32 0, i32 0
  %6 = getelementptr inbounds { %..string, %runtime.Type_Info*, %..string, i64, i8, [7 x i8] }, { %..string, %runtime.Type_Info*, %..string, i64, i8, [7 x i8] }* %3, i32 0, i32 0
  %7 = load %..string, %..string* %5, align 8
  %8 = load %..string, %..string* %6, align 8
  %9 = bitcast %..string* %5 to { i64, i64 }*
  %10 = load { i64, i64 }, { i64, i64 }* %9, align 8
  %11 = bitcast %..string* %6 to { i64, i64 }*
  %12 = load { i64, i64 }, { i64, i64 }* %11, align 8
  %13 = call i8 @runtime.string_eq({ i64, i64 } %10, { i64, i64 } %12)
  %14 = trunc i8 %13 to i1
  br i1 %14, label %btrue, label %bfalse

btrue:                                            ; preds = %diff_ptr
  %15 = getelementptr inbounds { %..string, %runtime.Type_Info*, %..string, i64, i8, [7 x i8] }, { %..string, %runtime.Type_Info*, %..string, i64, i8, [7 x i8] }* %2, i32 0, i32 1
  %16 = getelementptr inbounds { %..string, %runtime.Type_Info*, %..string, i64, i8, [7 x i8] }, { %..string, %runtime.Type_Info*, %..string, i64, i8, [7 x i8] }* %3, i32 0, i32 1
  %17 = load %runtime.Type_Info*, %runtime.Type_Info** %15, align 8
  %18 = load %runtime.Type_Info*, %runtime.Type_Info** %16, align 8
  %19 = icmp eq %runtime.Type_Info* %17, %18
  br i1 %19, label %btrue1, label %bfalse

btrue1:                                           ; preds = %btrue
  %20 = getelementptr inbounds { %..string, %runtime.Type_Info*, %..string, i64, i8, [7 x i8] }, { %..string, %runtime.Type_Info*, %..string, i64, i8, [7 x i8] }* %2, i32 0, i32 2
  %21 = getelementptr inbounds { %..string, %runtime.Type_Info*, %..string, i64, i8, [7 x i8] }, { %..string, %runtime.Type_Info*, %..string, i64, i8, [7 x i8] }* %3, i32 0, i32 2
  %22 = load %..string, %..string* %20, align 8
  %23 = load %..string, %..string* %21, align 8
  %24 = load %..string, %..string* %20, align 8
  %25 = bitcast %..string* %20 to { i64, i64 }*
  %26 = load { i64, i64 }, { i64, i64 }* %25, align 8
  %27 = load %..string, %..string* %21, align 8
  %28 = bitcast %..string* %21 to { i64, i64 }*
  %29 = load { i64, i64 }, { i64, i64 }* %28, align 8
  %30 = call i8 @runtime.string_eq({ i64, i64 } %26, { i64, i64 } %29)
  %31 = trunc i8 %30 to i1
  br i1 %31, label %btrue2, label %bfalse

btrue2:                                           ; preds = %btrue1
  %32 = getelementptr inbounds { %..string, %runtime.Type_Info*, %..string, i64, i8, [7 x i8] }, { %..string, %runtime.Type_Info*, %..string, i64, i8, [7 x i8] }* %2, i32 0, i32 3
  %33 = getelementptr inbounds { %..string, %runtime.Type_Info*, %..string, i64, i8, [7 x i8] }, { %..string, %runtime.Type_Info*, %..string, i64, i8, [7 x i8] }* %3, i32 0, i32 3
  %34 = load i64, i64* %32, align 8
  %35 = load i64, i64* %33, align 8
  %36 = icmp eq i64 %34, %35
  br i1 %36, label %btrue3, label %bfalse

btrue3:                                           ; preds = %btrue2
  %37 = getelementptr inbounds { %..string, %runtime.Type_Info*, %..string, i64, i8, [7 x i8] }, { %..string, %runtime.Type_Info*, %..string, i64, i8, [7 x i8] }* %2, i32 0, i32 4
  %38 = getelementptr inbounds { %..string, %runtime.Type_Info*, %..string, i64, i8, [7 x i8] }, { %..string, %runtime.Type_Info*, %..string, i64, i8, [7 x i8] }* %3, i32 0, i32 4
  %39 = load i8, i8* %37, align 1
  %40 = load i8, i8* %38, align 1
  %41 = icmp eq i8 %39, %40
  br i1 %41, label %btrue4, label %bfalse

btrue4:                                           ; preds = %btrue3
  ret i8 1

bfalse:                                           ; preds = %btrue3, %btrue2, %btrue1, %btrue, %diff_ptr
  ret i8 0
}

define i8 @"__$equal4"(i8* %0, i8* %1) {
decls:
  br label %entry

entry:                                            ; preds = %decls
  %2 = bitcast i8* %0 to { float, [4 x i8], i64, { float, i8, i8, i8, i8, i8, i8, [2 x i8] }, [4 x i8], { [8 x %..string], i64 }, { i64, i64, i64, i64, i8, [7 x i8], i64 }, { i64, i64 }, %src.Theme_Save_Load }*
  %3 = bitcast i8* %1 to { float, [4 x i8], i64, { float, i8, i8, i8, i8, i8, i8, [2 x i8] }, [4 x i8], { [8 x %..string], i64 }, { i64, i64, i64, i64, i8, [7 x i8], i64 }, { i64, i64 }, %src.Theme_Save_Load }*
  %4 = icmp eq { float, [4 x i8], i64, { float, i8, i8, i8, i8, i8, i8, [2 x i8] }, [4 x i8], { [8 x %..string], i64 }, { i64, i64, i64, i64, i8, [7 x i8], i64 }, { i64, i64 }, %src.Theme_Save_Load }* %2, %3
  br i1 %4, label %same_ptr, label %diff_ptr

same_ptr:                                         ; preds = %entry
  ret i8 1

diff_ptr:                                         ; preds = %entry
  %5 = getelementptr inbounds { float, [4 x i8], i64, { float, i8, i8, i8, i8, i8, i8, [2 x i8] }, [4 x i8], { [8 x %..string], i64 }, { i64, i64, i64, i64, i8, [7 x i8], i64 }, { i64, i64 }, %src.Theme_Save_Load }, { float, [4 x i8], i64, { float, i8, i8, i8, i8, i8, i8, [2 x i8] }, [4 x i8], { [8 x %..string], i64 }, { i64, i64, i64, i64, i8, [7 x i8], i64 }, { i64, i64 }, %src.Theme_Save_Load }* %2, i32 0, i32 0
  %6 = getelementptr inbounds { float, [4 x i8], i64, { float, i8, i8, i8, i8, i8, i8, [2 x i8] }, [4 x i8], { [8 x %..string], i64 }, { i64, i64, i64, i64, i8, [7 x i8], i64 }, { i64, i64 }, %src.Theme_Save_Load }, { float, [4 x i8], i64, { float, i8, i8, i8, i8, i8, i8, [2 x i8] }, [4 x i8], { [8 x %..string], i64 }, { i64, i64, i64, i64, i8, [7 x i8], i64 }, { i64, i64 }, %src.Theme_Save_Load }* %3, i32 0, i32 0
  %7 = load float, float* %5, align 4
  %8 = load float, float* %6, align 4
  %9 = fcmp oeq float %7, %8
  br i1 %9, label %btrue, label %bfalse

btrue:                                            ; preds = %diff_ptr
  %10 = getelementptr inbounds { float, [4 x i8], i64, { float, i8, i8, i8, i8, i8, i8, [2 x i8] }, [4 x i8], { [8 x %..string], i64 }, { i64, i64, i64, i64, i8, [7 x i8], i64 }, { i64, i64 }, %src.Theme_Save_Load }, { float, [4 x i8], i64, { float, i8, i8, i8, i8, i8, i8, [2 x i8] }, [4 x i8], { [8 x %..string], i64 }, { i64, i64, i64, i64, i8, [7 x i8], i64 }, { i64, i64 }, %src.Theme_Save_Load }* %2, i32 0, i32 2
  %11 = getelementptr inbounds { float, [4 x i8], i64, { float, i8, i8, i8, i8, i8, i8, [2 x i8] }, [4 x i8], { [8 x %..string], i64 }, { i64, i64, i64, i64, i8, [7 x i8], i64 }, { i64, i64 }, %src.Theme_Save_Load }, { float, [4 x i8], i64, { float, i8, i8, i8, i8, i8, i8, [2 x i8] }, [4 x i8], { [8 x %..string], i64 }, { i64, i64, i64, i64, i8, [7 x i8], i64 }, { i64, i64 }, %src.Theme_Save_Load }* %3, i32 0, i32 2
  %12 = load i64, i64* %10, align 8
  %13 = load i64, i64* %11, align 8
  %14 = icmp eq i64 %12, %13
  br i1 %14, label %btrue1, label %bfalse

btrue1:                                           ; preds = %btrue
  %15 = getelementptr inbounds { float, [4 x i8], i64, { float, i8, i8, i8, i8, i8, i8, [2 x i8] }, [4 x i8], { [8 x %..string], i64 }, { i64, i64, i64, i64, i8, [7 x i8], i64 }, { i64, i64 }, %src.Theme_Save_Load }, { float, [4 x i8], i64, { float, i8, i8, i8, i8, i8, i8, [2 x i8] }, [4 x i8], { [8 x %..string], i64 }, { i64, i64, i64, i64, i8, [7 x i8], i64 }, { i64, i64 }, %src.Theme_Save_Load }* %2, i32 0, i32 3
  %16 = getelementptr inbounds { float, [4 x i8], i64, { float, i8, i8, i8, i8, i8, i8, [2 x i8] }, [4 x i8], { [8 x %..string], i64 }, { i64, i64, i64, i64, i8, [7 x i8], i64 }, { i64, i64 }, %src.Theme_Save_Load }, { float, [4 x i8], i64, { float, i8, i8, i8, i8, i8, i8, [2 x i8] }, [4 x i8], { [8 x %..string], i64 }, { i64, i64, i64, i64, i8, [7 x i8], i64 }, { i64, i64 }, %src.Theme_Save_Load }* %3, i32 0, i32 3
  %17 = load { float, i8, i8, i8, i8, i8, i8, [2 x i8] }, { float, i8, i8, i8, i8, i8, i8, [2 x i8] }* %15, align 4
  %18 = load { float, i8, i8, i8, i8, i8, i8, [2 x i8] }, { float, i8, i8, i8, i8, i8, i8, [2 x i8] }* %16, align 4
  %19 = bitcast { float, i8, i8, i8, i8, i8, i8, [2 x i8] }* %15 to i8*
  %20 = bitcast { float, i8, i8, i8, i8, i8, i8, [2 x i8] }* %16 to i8*
  %21 = call i8 @runtime.memory_equal(i8* %19, i8* %20, i64 12)
  %22 = trunc i8 %21 to i1
  br i1 %22, label %btrue2, label %bfalse

btrue2:                                           ; preds = %btrue1
  %23 = getelementptr inbounds { float, [4 x i8], i64, { float, i8, i8, i8, i8, i8, i8, [2 x i8] }, [4 x i8], { [8 x %..string], i64 }, { i64, i64, i64, i64, i8, [7 x i8], i64 }, { i64, i64 }, %src.Theme_Save_Load }, { float, [4 x i8], i64, { float, i8, i8, i8, i8, i8, i8, [2 x i8] }, [4 x i8], { [8 x %..string], i64 }, { i64, i64, i64, i64, i8, [7 x i8], i64 }, { i64, i64 }, %src.Theme_Save_Load }* %2, i32 0, i32 5
  %24 = getelementptr inbounds { float, [4 x i8], i64, { float, i8, i8, i8, i8, i8, i8, [2 x i8] }, [4 x i8], { [8 x %..string], i64 }, { i64, i64, i64, i64, i8, [7 x i8], i64 }, { i64, i64 }, %src.Theme_Save_Load }, { float, [4 x i8], i64, { float, i8, i8, i8, i8, i8, i8, [2 x i8] }, [4 x i8], { [8 x %..string], i64 }, { i64, i64, i64, i64, i8, [7 x i8], i64 }, { i64, i64 }, %src.Theme_Save_Load }* %3, i32 0, i32 5
  %25 = load { [8 x %..string], i64 }, { [8 x %..string], i64 }* %23, align 8
  %26 = load { [8 x %..string], i64 }, { [8 x %..string], i64 }* %24, align 8
  %27 = bitcast { [8 x %..string], i64 }* %23 to i8*
  %28 = bitcast { [8 x %..string], i64 }* %24 to i8*
  %29 = call i8 @"__$equal5"(i8* %27, i8* %28)
  %30 = trunc i8 %29 to i1
  br i1 %30, label %btrue3, label %bfalse

btrue3:                                           ; preds = %btrue2
  %31 = getelementptr inbounds { float, [4 x i8], i64, { float, i8, i8, i8, i8, i8, i8, [2 x i8] }, [4 x i8], { [8 x %..string], i64 }, { i64, i64, i64, i64, i8, [7 x i8], i64 }, { i64, i64 }, %src.Theme_Save_Load }, { float, [4 x i8], i64, { float, i8, i8, i8, i8, i8, i8, [2 x i8] }, [4 x i8], { [8 x %..string], i64 }, { i64, i64, i64, i64, i8, [7 x i8], i64 }, { i64, i64 }, %src.Theme_Save_Load }* %2, i32 0, i32 6
  %32 = getelementptr inbounds { float, [4 x i8], i64, { float, i8, i8, i8, i8, i8, i8, [2 x i8] }, [4 x i8], { [8 x %..string], i64 }, { i64, i64, i64, i64, i8, [7 x i8], i64 }, { i64, i64 }, %src.Theme_Save_Load }, { float, [4 x i8], i64, { float, i8, i8, i8, i8, i8, i8, [2 x i8] }, [4 x i8], { [8 x %..string], i64 }, { i64, i64, i64, i64, i8, [7 x i8], i64 }, { i64, i64 }, %src.Theme_Save_Load }* %3, i32 0, i32 6
  %33 = load { i64, i64, i64, i64, i8, [7 x i8], i64 }, { i64, i64, i64, i64, i8, [7 x i8], i64 }* %31, align 8
  %34 = load { i64, i64, i64, i64, i8, [7 x i8], i64 }, { i64, i64, i64, i64, i8, [7 x i8], i64 }* %32, align 8
  %35 = bitcast { i64, i64, i64, i64, i8, [7 x i8], i64 }* %31 to i8*
  %36 = bitcast { i64, i64, i64, i64, i8, [7 x i8], i64 }* %32 to i8*
  %37 = call i8 @runtime.memory_equal(i8* %35, i8* %36, i64 48)
  %38 = trunc i8 %37 to i1
  br i1 %38, label %btrue4, label %bfalse

btrue4:                                           ; preds = %btrue3
  %39 = getelementptr inbounds { float, [4 x i8], i64, { float, i8, i8, i8, i8, i8, i8, [2 x i8] }, [4 x i8], { [8 x %..string], i64 }, { i64, i64, i64, i64, i8, [7 x i8], i64 }, { i64, i64 }, %src.Theme_Save_Load }, { float, [4 x i8], i64, { float, i8, i8, i8, i8, i8, i8, [2 x i8] }, [4 x i8], { [8 x %..string], i64 }, { i64, i64, i64, i64, i8, [7 x i8], i64 }, { i64, i64 }, %src.Theme_Save_Load }* %2, i32 0, i32 7
  %40 = getelementptr inbounds { float, [4 x i8], i64, { float, i8, i8, i8, i8, i8, i8, [2 x i8] }, [4 x i8], { [8 x %..string], i64 }, { i64, i64, i64, i64, i8, [7 x i8], i64 }, { i64, i64 }, %src.Theme_Save_Load }, { float, [4 x i8], i64, { float, i8, i8, i8, i8, i8, i8, [2 x i8] }, [4 x i8], { [8 x %..string], i64 }, { i64, i64, i64, i64, i8, [7 x i8], i64 }, { i64, i64 }, %src.Theme_Save_Load }* %3, i32 0, i32 7
  %41 = load { i64, i64 }, { i64, i64 }* %39, align 8
  %42 = load { i64, i64 }, { i64, i64 }* %40, align 8
  %43 = bitcast { i64, i64 }* %39 to i8*
  %44 = bitcast { i64, i64 }* %40 to i8*
  %45 = call i8 @runtime.memory_equal(i8* %43, i8* %44, i64 16)
  %46 = trunc i8 %45 to i1
  br i1 %46, label %btrue5, label %bfalse

btrue5:                                           ; preds = %btrue4
  %47 = getelementptr inbounds { float, [4 x i8], i64, { float, i8, i8, i8, i8, i8, i8, [2 x i8] }, [4 x i8], { [8 x %..string], i64 }, { i64, i64, i64, i64, i8, [7 x i8], i64 }, { i64, i64 }, %src.Theme_Save_Load }, { float, [4 x i8], i64, { float, i8, i8, i8, i8, i8, i8, [2 x i8] }, [4 x i8], { [8 x %..string], i64 }, { i64, i64, i64, i64, i8, [7 x i8], i64 }, { i64, i64 }, %src.Theme_Save_Load }* %2, i32 0, i32 8
  %48 = getelementptr inbounds { float, [4 x i8], i64, { float, i8, i8, i8, i8, i8, i8, [2 x i8] }, [4 x i8], { [8 x %..string], i64 }, { i64, i64, i64, i64, i8, [7 x i8], i64 }, { i64, i64 }, %src.Theme_Save_Load }, { float, [4 x i8], i64, { float, i8, i8, i8, i8, i8, i8, [2 x i8] }, [4 x i8], { [8 x %..string], i64 }, { i64, i64, i64, i64, i8, [7 x i8], i64 }, { i64, i64 }, %src.Theme_Save_Load }* %3, i32 0, i32 8
  %49 = load %src.Theme_Save_Load, %src.Theme_Save_Load* %47, align 4
  %50 = load %src.Theme_Save_Load, %src.Theme_Save_Load* %48, align 4
  %51 = bitcast %src.Theme_Save_Load* %47 to i8*
  %52 = bitcast %src.Theme_Save_Load* %48 to i8*
  %53 = call i8 @runtime.memory_equal(i8* %51, i8* %52, i64 88)
  %54 = trunc i8 %53 to i1
  br i1 %54, label %btrue6, label %bfalse

btrue6:                                           ; preds = %btrue5
  ret i8 1

bfalse:                                           ; preds = %btrue5, %btrue4, %btrue3, %btrue2, %btrue1, %btrue, %diff_ptr
  ret i8 0
}

define internal i8 @runtime.memory_equal(i8* %0, i8* %1, i64 %2) {
decls:
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  %16 = alloca i8*, align 8
  %17 = alloca i8*, align 8
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i8*, align 8
  %21 = alloca i8*, align 8
  %22 = alloca i16, align 2
  %23 = alloca i16, align 2
  %24 = alloca i8*, align 8
  %25 = alloca i8*, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  store i64 %2, i64* %5, align 8
  %26 = load i64, i64* %5, align 8
  %27 = icmp eq i64 %26, 0
  %28 = zext i1 %27 to i8
  %29 = icmp eq i8 1, %28
  br i1 %29, label %switch.case.body, label %switch.case.next

switch.case.next:                                 ; preds = %entry
  %30 = load i8*, i8** %3, align 8
  %31 = load i8*, i8** %4, align 8
  %32 = icmp eq i8* %30, %31
  %33 = zext i1 %32 to i8
  %34 = icmp eq i8 1, %33
  br i1 %34, label %switch.case.body2, label %switch.case.next1

switch.case.body:                                 ; preds = %entry
  ret i8 1

switch.case.next1:                                ; preds = %switch.case.next
  br label %switch.done

switch.case.body2:                                ; preds = %switch.case.next
  ret i8 1

switch.done:                                      ; preds = %switch.case.next1
  %35 = load i8*, i8** %3, align 8
  %36 = load i8*, i8** %4, align 8
  store i8* %35, i8** %6, align 8
  store i8* %36, i8** %7, align 8
  %37 = load i64, i64* %5, align 8
  store i64 %37, i64* %8, align 8
  br label %if.init

if.init:                                          ; preds = %switch.done
  %38 = load i64, i64* %8, align 8
  %39 = lshr i64 %38, 3
  %40 = select i1 true, i64 %39, i64 0
  store i64 %40, i64* %9, align 8
  %41 = load i64, i64* %9, align 8
  %42 = icmp ne i64 %41, 0
  %43 = zext i1 %42 to i8
  %44 = trunc i8 %43 to i1
  br i1 %44, label %if.then, label %if.done4

if.then:                                          ; preds = %if.init
  store i64 0, i64* %10, align 8
  store i64 0, i64* %11, align 8
  store i64 0, i64* %12, align 8
  br label %for.interval.loop

for.interval.loop:                                ; preds = %for.interval.post, %if.then
  %45 = load i64, i64* %9, align 8
  %46 = load i64, i64* %11, align 8
  %47 = icmp ult i64 %46, %45
  br i1 %47, label %for.interval.body, label %for.interval.done

for.interval.body:                                ; preds = %for.interval.loop
  %48 = load i64, i64* %11, align 8
  %49 = load i64, i64* %12, align 8
  store i64 %48, i64* %13, align 8
  %50 = load i8*, i8** %6, align 8
  %51 = bitcast i8* %50 to i64*
  %52 = bitcast i64* %14 to i8*
  %53 = bitcast i64* %51 to i8*
  call void @llvm.memcpy.inline.p0i8.p0i8.i64(i8* %52, i8* %53, i64 8, i1 false)
  %54 = load i64, i64* %14, align 8
  %55 = load i8*, i8** %7, align 8
  %56 = bitcast i8* %55 to i64*
  %57 = bitcast i64* %15 to i8*
  %58 = bitcast i64* %56 to i8*
  call void @llvm.memcpy.inline.p0i8.p0i8.i64(i8* %57, i8* %58, i64 8, i1 false)
  %59 = load i64, i64* %15, align 8
  %60 = icmp ne i64 %54, %59
  %61 = zext i1 %60 to i8
  %62 = trunc i8 %61 to i1
  br i1 %62, label %if.then3, label %if.done

if.then3:                                         ; preds = %for.interval.body
  ret i8 0

if.done:                                          ; preds = %for.interval.body
  %63 = load i8*, i8** %6, align 8
  %64 = getelementptr i8, i8* %63, i64 8
  store i8* %64, i8** %16, align 8
  %65 = load i8*, i8** %16, align 8
  store i8* %65, i8** %6, align 8
  %66 = load i8*, i8** %7, align 8
  %67 = getelementptr i8, i8* %66, i64 8
  store i8* %67, i8** %17, align 8
  %68 = load i8*, i8** %17, align 8
  store i8* %68, i8** %7, align 8
  br label %for.interval.post

for.interval.post:                                ; preds = %if.done
  %69 = load i64, i64* %11, align 8
  %70 = add i64 %69, 1
  store i64 %70, i64* %11, align 8
  %71 = load i64, i64* %12, align 8
  %72 = add i64 %71, 1
  store i64 %72, i64* %12, align 8
  br label %for.interval.loop

for.interval.done:                                ; preds = %for.interval.loop
  br label %if.done4

if.done4:                                         ; preds = %for.interval.done, %if.init
  %73 = load i64, i64* %8, align 8
  %74 = and i64 %73, 4
  %75 = icmp ne i64 %74, 0
  %76 = zext i1 %75 to i8
  %77 = trunc i8 %76 to i1
  br i1 %77, label %if.then5, label %if.done8

if.then5:                                         ; preds = %if.done4
  %78 = load i8*, i8** %6, align 8
  %79 = bitcast i8* %78 to i32*
  %80 = bitcast i32* %18 to i8*
  %81 = bitcast i32* %79 to i8*
  call void @llvm.memcpy.inline.p0i8.p0i8.i64(i8* %80, i8* %81, i64 4, i1 false)
  %82 = load i32, i32* %18, align 4
  %83 = load i8*, i8** %7, align 8
  %84 = bitcast i8* %83 to i32*
  %85 = bitcast i32* %19 to i8*
  %86 = bitcast i32* %84 to i8*
  call void @llvm.memcpy.inline.p0i8.p0i8.i64(i8* %85, i8* %86, i64 4, i1 false)
  %87 = load i32, i32* %19, align 4
  %88 = icmp ne i32 %82, %87
  %89 = zext i1 %88 to i8
  %90 = trunc i8 %89 to i1
  br i1 %90, label %if.then6, label %if.done7

if.then6:                                         ; preds = %if.then5
  ret i8 0

if.done7:                                         ; preds = %if.then5
  %91 = load i8*, i8** %6, align 8
  %92 = getelementptr i8, i8* %91, i64 4
  store i8* %92, i8** %20, align 8
  %93 = load i8*, i8** %20, align 8
  store i8* %93, i8** %6, align 8
  %94 = load i8*, i8** %7, align 8
  %95 = getelementptr i8, i8* %94, i64 4
  store i8* %95, i8** %21, align 8
  %96 = load i8*, i8** %21, align 8
  store i8* %96, i8** %7, align 8
  br label %if.done8

if.done8:                                         ; preds = %if.done7, %if.done4
  %97 = load i64, i64* %8, align 8
  %98 = and i64 %97, 2
  %99 = icmp ne i64 %98, 0
  %100 = zext i1 %99 to i8
  %101 = trunc i8 %100 to i1
  br i1 %101, label %if.then9, label %if.done12

if.then9:                                         ; preds = %if.done8
  %102 = load i8*, i8** %6, align 8
  %103 = bitcast i8* %102 to i16*
  %104 = bitcast i16* %22 to i8*
  %105 = bitcast i16* %103 to i8*
  call void @llvm.memcpy.inline.p0i8.p0i8.i64(i8* %104, i8* %105, i64 2, i1 false)
  %106 = load i16, i16* %22, align 2
  %107 = load i8*, i8** %7, align 8
  %108 = bitcast i8* %107 to i16*
  %109 = bitcast i16* %23 to i8*
  %110 = bitcast i16* %108 to i8*
  call void @llvm.memcpy.inline.p0i8.p0i8.i64(i8* %109, i8* %110, i64 2, i1 false)
  %111 = load i16, i16* %23, align 2
  %112 = icmp ne i16 %106, %111
  %113 = zext i1 %112 to i8
  %114 = trunc i8 %113 to i1
  br i1 %114, label %if.then10, label %if.done11

if.then10:                                        ; preds = %if.then9
  ret i8 0

if.done11:                                        ; preds = %if.then9
  %115 = load i8*, i8** %6, align 8
  %116 = getelementptr i8, i8* %115, i64 2
  store i8* %116, i8** %24, align 8
  %117 = load i8*, i8** %24, align 8
  store i8* %117, i8** %6, align 8
  %118 = load i8*, i8** %7, align 8
  %119 = getelementptr i8, i8* %118, i64 2
  store i8* %119, i8** %25, align 8
  %120 = load i8*, i8** %25, align 8
  store i8* %120, i8** %7, align 8
  br label %if.done12

if.done12:                                        ; preds = %if.done11, %if.done8
  %121 = load i64, i64* %8, align 8
  %122 = and i64 %121, 1
  %123 = icmp ne i64 %122, 0
  %124 = zext i1 %123 to i8
  %125 = trunc i8 %124 to i1
  br i1 %125, label %cmp.and, label %if.done15

cmp.and:                                          ; preds = %if.done12
  %126 = load i8*, i8** %6, align 8
  %foo = getelementptr i8, i8* %126, i64 0
  %127 = load i8, i8* %foo, align 1
  %128 = load i8*, i8** %7, align 8
  %foo13 = getelementptr i8, i8* %128, i64 0
  %129 = load i8, i8* %foo13, align 1
  %130 = icmp ne i8 %127, %129
  %131 = zext i1 %130 to i8
  %132 = trunc i8 %131 to i1
  br i1 %132, label %if.then14, label %if.done15

if.then14:                                        ; preds = %cmp.and
  ret i8 0

if.done15:                                        ; preds = %cmp.and, %if.done12
  ret i8 1
}

define i8 @"__$equal5"(i8* %0, i8* %1) {
decls:
  %2 = alloca i8, align 1
  %3 = alloca i32, align 4
  br label %entry

entry:                                            ; preds = %decls
  %4 = bitcast i8* %0 to { [8 x %..string], i64 }*
  %5 = bitcast i8* %1 to { [8 x %..string], i64 }*
  %6 = icmp eq { [8 x %..string], i64 }* %4, %5
  br i1 %6, label %same_ptr, label %diff_ptr

same_ptr:                                         ; preds = %entry
  ret i8 1

diff_ptr:                                         ; preds = %entry
  %7 = getelementptr inbounds { [8 x %..string], i64 }, { [8 x %..string], i64 }* %4, i32 0, i32 0
  %8 = getelementptr inbounds { [8 x %..string], i64 }, { [8 x %..string], i64 }* %5, i32 0, i32 0
  %9 = load [8 x %..string], [8 x %..string]* %7, align 8
  %10 = load [8 x %..string], [8 x %..string]* %8, align 8
  store i8 1, i8* %2, align 1
  store i32 0, i32* %3, align 4
  br label %loop.loop

loop.loop:                                        ; preds = %loop.body, %diff_ptr
  %11 = load i32, i32* %3, align 4
  %12 = icmp slt i32 %11, 8
  br i1 %12, label %loop.body, label %loop.done

loop.body:                                        ; preds = %loop.loop
  %13 = sext i32 %11 to i64
  %14 = getelementptr [8 x %..string], [8 x %..string]* %7, i64 0, i64 %13
  %15 = load %..string, %..string* %14, align 8
  %16 = sext i32 %11 to i64
  %17 = getelementptr [8 x %..string], [8 x %..string]* %8, i64 0, i64 %16
  %18 = load %..string, %..string* %17, align 8
  %19 = bitcast %..string* %14 to { i64, i64 }*
  %20 = load { i64, i64 }, { i64, i64 }* %19, align 8
  %21 = bitcast %..string* %17 to { i64, i64 }*
  %22 = load { i64, i64 }, { i64, i64 }* %21, align 8
  %23 = call i8 @runtime.string_eq({ i64, i64 } %20, { i64, i64 } %22)
  %24 = load i8, i8* %2, align 1
  %25 = and i8 %24, %23
  store i8 %25, i8* %2, align 1
  %26 = load i32, i32* %3, align 4
  %27 = add i32 %26, 1
  store i32 %27, i32* %3, align 4
  br label %loop.loop

loop.done:                                        ; preds = %loop.loop
  %28 = load i8, i8* %2, align 1
  %29 = trunc i8 %28 to i1
  br i1 %29, label %btrue, label %bfalse

btrue:                                            ; preds = %loop.done
  %30 = getelementptr inbounds { [8 x %..string], i64 }, { [8 x %..string], i64 }* %4, i32 0, i32 1
  %31 = getelementptr inbounds { [8 x %..string], i64 }, { [8 x %..string], i64 }* %5, i32 0, i32 1
  %32 = load i64, i64* %30, align 8
  %33 = load i64, i64* %31, align 8
  %34 = icmp eq i64 %32, %33
  br i1 %34, label %btrue1, label %bfalse

btrue1:                                           ; preds = %btrue
  ret i8 1

bfalse:                                           ; preds = %btrue, %loop.done
  ret i8 0
}

define i8 @"__$equal6"(i8* %0, i8* %1) {
decls:
  br label %entry

entry:                                            ; preds = %decls
  %2 = bitcast i8* %0 to %..string*
  %3 = bitcast i8* %1 to %..string*
  %4 = icmp eq %..string* %2, %3
  br i1 %4, label %same_ptr, label %diff_ptr

same_ptr:                                         ; preds = %entry
  ret i8 1

diff_ptr:                                         ; preds = %entry
  %5 = load %..string, %..string* %2, align 8
  %6 = load %..string, %..string* %3, align 8
  %7 = bitcast %..string* %2 to { i64, i64 }*
  %8 = load { i64, i64 }, { i64, i64 }* %7, align 8
  %9 = bitcast %..string* %3 to { i64, i64 }*
  %10 = load { i64, i64 }, { i64, i64 }* %9, align 8
  %11 = call i8 @runtime.string_eq({ i64, i64 } %8, { i64, i64 } %10)
  ret i8 %11
}

define i64 @"__$hasher1"(i8* nonnull %0, i64 %1) {
decls:
  br label %entry

entry:                                            ; preds = %decls
  %2 = call i64 @runtime.default_hasher_string(i8* %0, i64 %1)
  ret i64 %2
}

define internal i64 @runtime.default_hasher_string(i8* %0, i64 %1) {
decls:
  %2 = alloca i8*, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca { i8*, i64 }, align 8
  %6 = alloca i8, align 1
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i8, align 1
  br label %entry

entry:                                            ; preds = %decls
  store i8* %0, i8** %2, align 8
  store i64 %1, i64* %3, align 8
  %10 = load i64, i64* %3, align 8
  %11 = add i64 %10, -3750763034362895579
  store i64 %11, i64* %4, align 8
  %12 = load i8*, i8** %2, align 8
  %13 = bitcast i8* %12 to { i8*, i64 }*
  %14 = load { i8*, i64 }, { i8*, i64 }* %13, align 8
  store { i8*, i64 } %14, { i8*, i64 }* %5, align 8
  store i8 0, i8* %6, align 1
  %15 = load { i8*, i64 }, { i8*, i64 }* %5, align 8
  %16 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %5, i32 0, i32 1
  %17 = load i64, i64* %16, align 8
  store i64 %17, i64* %7, align 8
  store i64 -1, i64* %8, align 8
  br label %for.index.loop

for.index.loop:                                   ; preds = %for.index.body, %entry
  %18 = load i64, i64* %8, align 8
  %19 = add i64 %18, 1
  store i64 %19, i64* %8, align 8
  %20 = load i64, i64* %7, align 8
  %21 = icmp slt i64 %19, %20
  br i1 %21, label %for.index.body, label %for.index.done

for.index.body:                                   ; preds = %for.index.loop
  %22 = load i64, i64* %8, align 8
  %23 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %5, i32 0, i32 0
  %24 = load i8*, i8** %23, align 8
  %25 = getelementptr i8, i8* %24, i64 %22
  %26 = load i8, i8* %25, align 1
  store i8 %26, i8* %9, align 1
  %27 = load i64, i64* %4, align 8
  %28 = load i8, i8* %9, align 1
  %29 = zext i8 %28 to i64
  %30 = xor i64 %27, %29
  %31 = mul i64 %30, 1099511628211
  store i64 %31, i64* %4, align 8
  br label %for.index.loop

for.index.done:                                   ; preds = %for.index.loop
  %32 = load i64, i64* %4, align 8
  ret i64 %32
}

define i8 @"__$equal7"(i8* %0, i8* %1) {
decls:
  br label %entry

entry:                                            ; preds = %decls
  %2 = bitcast i8* %0 to { i64, i64 }*
  %3 = bitcast i8* %1 to { i64, i64 }*
  %4 = icmp eq { i64, i64 }* %2, %3
  br i1 %4, label %same_ptr, label %diff_ptr

same_ptr:                                         ; preds = %entry
  ret i8 1

diff_ptr:                                         ; preds = %entry
  %5 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %2, i32 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 1
  %8 = load i64, i64* %7, align 8
  %9 = icmp eq i64 %6, %8
  br i1 %9, label %bswitch, label %bfalse

bswitch:                                          ; preds = %diff_ptr
  switch i64 %6, label %bfalse [
    i64 1, label %bcase
    i64 2, label %bcase1
    i64 3, label %bcase2
  ]

bcase:                                            ; preds = %bswitch
  %10 = bitcast { i64, i64 }* %2 to %image.Netpbm_Info**
  %11 = load %image.Netpbm_Info*, %image.Netpbm_Info** %10, align 8
  %12 = bitcast { i64, i64 }* %3 to %image.Netpbm_Info**
  %13 = load %image.Netpbm_Info*, %image.Netpbm_Info** %12, align 8
  %14 = icmp eq %image.Netpbm_Info* %11, %13
  %15 = zext i1 %14 to i8
  ret i8 %15

bcase1:                                           ; preds = %bswitch
  %16 = bitcast { i64, i64 }* %2 to %image.PNG_Info**
  %17 = load %image.PNG_Info*, %image.PNG_Info** %16, align 8
  %18 = bitcast { i64, i64 }* %3 to %image.PNG_Info**
  %19 = load %image.PNG_Info*, %image.PNG_Info** %18, align 8
  %20 = icmp eq %image.PNG_Info* %17, %19
  %21 = zext i1 %20 to i8
  ret i8 %21

bcase2:                                           ; preds = %bswitch
  %22 = bitcast { i64, i64 }* %2 to %image.QOI_Info**
  %23 = load %image.QOI_Info*, %image.QOI_Info** %22, align 8
  %24 = bitcast { i64, i64 }* %3 to %image.QOI_Info**
  %25 = load %image.QOI_Info*, %image.QOI_Info** %24, align 8
  %26 = icmp eq %image.QOI_Info* %23, %25
  %27 = zext i1 %26 to i8
  ret i8 %27

bfalse:                                           ; preds = %bswitch, %diff_ptr
  ret i8 0
}

define i8 @"__$equal8"(i8* %0, i8* %1) {
decls:
  br label %entry

entry:                                            ; preds = %decls
  %2 = bitcast i8* %0 to { %image.Netpbm_Header }*
  %3 = bitcast i8* %1 to { %image.Netpbm_Header }*
  %4 = icmp eq { %image.Netpbm_Header }* %2, %3
  br i1 %4, label %same_ptr, label %diff_ptr

same_ptr:                                         ; preds = %entry
  ret i8 1

diff_ptr:                                         ; preds = %entry
  %5 = getelementptr inbounds { %image.Netpbm_Header }, { %image.Netpbm_Header }* %2, i32 0, i32 0
  %6 = getelementptr inbounds { %image.Netpbm_Header }, { %image.Netpbm_Header }* %3, i32 0, i32 0
  %7 = load %image.Netpbm_Header, %image.Netpbm_Header* %5, align 8
  %8 = load %image.Netpbm_Header, %image.Netpbm_Header* %6, align 8
  %9 = bitcast %image.Netpbm_Header* %5 to i8*
  %10 = bitcast %image.Netpbm_Header* %6 to i8*
  %11 = call i8 @"__$equal9"(i8* %9, i8* %10)
  %12 = trunc i8 %11 to i1
  br i1 %12, label %btrue, label %bfalse

btrue:                                            ; preds = %diff_ptr
  ret i8 1

bfalse:                                           ; preds = %diff_ptr
  ret i8 0
}

define i8 @"__$equal9"(i8* %0, i8* %1) {
decls:
  br label %entry

entry:                                            ; preds = %decls
  %2 = bitcast i8* %0 to { i64, i64, i64, i64, i64, i64, %..string, float, i8, [3 x i8] }*
  %3 = bitcast i8* %1 to { i64, i64, i64, i64, i64, i64, %..string, float, i8, [3 x i8] }*
  %4 = icmp eq { i64, i64, i64, i64, i64, i64, %..string, float, i8, [3 x i8] }* %2, %3
  br i1 %4, label %same_ptr, label %diff_ptr

same_ptr:                                         ; preds = %entry
  ret i8 1

diff_ptr:                                         ; preds = %entry
  %5 = getelementptr inbounds { i64, i64, i64, i64, i64, i64, %..string, float, i8, [3 x i8] }, { i64, i64, i64, i64, i64, i64, %..string, float, i8, [3 x i8] }* %2, i32 0, i32 0
  %6 = getelementptr inbounds { i64, i64, i64, i64, i64, i64, %..string, float, i8, [3 x i8] }, { i64, i64, i64, i64, i64, i64, %..string, float, i8, [3 x i8] }* %3, i32 0, i32 0
  %7 = load i64, i64* %5, align 8
  %8 = load i64, i64* %6, align 8
  %9 = icmp eq i64 %7, %8
  br i1 %9, label %btrue, label %bfalse

btrue:                                            ; preds = %diff_ptr
  %10 = getelementptr inbounds { i64, i64, i64, i64, i64, i64, %..string, float, i8, [3 x i8] }, { i64, i64, i64, i64, i64, i64, %..string, float, i8, [3 x i8] }* %2, i32 0, i32 1
  %11 = getelementptr inbounds { i64, i64, i64, i64, i64, i64, %..string, float, i8, [3 x i8] }, { i64, i64, i64, i64, i64, i64, %..string, float, i8, [3 x i8] }* %3, i32 0, i32 1
  %12 = load i64, i64* %10, align 8
  %13 = load i64, i64* %11, align 8
  %14 = icmp eq i64 %12, %13
  br i1 %14, label %btrue1, label %bfalse

btrue1:                                           ; preds = %btrue
  %15 = getelementptr inbounds { i64, i64, i64, i64, i64, i64, %..string, float, i8, [3 x i8] }, { i64, i64, i64, i64, i64, i64, %..string, float, i8, [3 x i8] }* %2, i32 0, i32 2
  %16 = getelementptr inbounds { i64, i64, i64, i64, i64, i64, %..string, float, i8, [3 x i8] }, { i64, i64, i64, i64, i64, i64, %..string, float, i8, [3 x i8] }* %3, i32 0, i32 2
  %17 = load i64, i64* %15, align 8
  %18 = load i64, i64* %16, align 8
  %19 = icmp eq i64 %17, %18
  br i1 %19, label %btrue2, label %bfalse

btrue2:                                           ; preds = %btrue1
  %20 = getelementptr inbounds { i64, i64, i64, i64, i64, i64, %..string, float, i8, [3 x i8] }, { i64, i64, i64, i64, i64, i64, %..string, float, i8, [3 x i8] }* %2, i32 0, i32 3
  %21 = getelementptr inbounds { i64, i64, i64, i64, i64, i64, %..string, float, i8, [3 x i8] }, { i64, i64, i64, i64, i64, i64, %..string, float, i8, [3 x i8] }* %3, i32 0, i32 3
  %22 = load i64, i64* %20, align 8
  %23 = load i64, i64* %21, align 8
  %24 = icmp eq i64 %22, %23
  br i1 %24, label %btrue3, label %bfalse

btrue3:                                           ; preds = %btrue2
  %25 = getelementptr inbounds { i64, i64, i64, i64, i64, i64, %..string, float, i8, [3 x i8] }, { i64, i64, i64, i64, i64, i64, %..string, float, i8, [3 x i8] }* %2, i32 0, i32 4
  %26 = getelementptr inbounds { i64, i64, i64, i64, i64, i64, %..string, float, i8, [3 x i8] }, { i64, i64, i64, i64, i64, i64, %..string, float, i8, [3 x i8] }* %3, i32 0, i32 4
  %27 = load i64, i64* %25, align 8
  %28 = load i64, i64* %26, align 8
  %29 = icmp eq i64 %27, %28
  br i1 %29, label %btrue4, label %bfalse

btrue4:                                           ; preds = %btrue3
  %30 = getelementptr inbounds { i64, i64, i64, i64, i64, i64, %..string, float, i8, [3 x i8] }, { i64, i64, i64, i64, i64, i64, %..string, float, i8, [3 x i8] }* %2, i32 0, i32 5
  %31 = getelementptr inbounds { i64, i64, i64, i64, i64, i64, %..string, float, i8, [3 x i8] }, { i64, i64, i64, i64, i64, i64, %..string, float, i8, [3 x i8] }* %3, i32 0, i32 5
  %32 = load i64, i64* %30, align 8
  %33 = load i64, i64* %31, align 8
  %34 = icmp eq i64 %32, %33
  br i1 %34, label %btrue5, label %bfalse

btrue5:                                           ; preds = %btrue4
  %35 = getelementptr inbounds { i64, i64, i64, i64, i64, i64, %..string, float, i8, [3 x i8] }, { i64, i64, i64, i64, i64, i64, %..string, float, i8, [3 x i8] }* %2, i32 0, i32 6
  %36 = getelementptr inbounds { i64, i64, i64, i64, i64, i64, %..string, float, i8, [3 x i8] }, { i64, i64, i64, i64, i64, i64, %..string, float, i8, [3 x i8] }* %3, i32 0, i32 6
  %37 = load %..string, %..string* %35, align 8
  %38 = load %..string, %..string* %36, align 8
  %39 = bitcast %..string* %35 to { i64, i64 }*
  %40 = load { i64, i64 }, { i64, i64 }* %39, align 8
  %41 = bitcast %..string* %36 to { i64, i64 }*
  %42 = load { i64, i64 }, { i64, i64 }* %41, align 8
  %43 = call i8 @runtime.string_eq({ i64, i64 } %40, { i64, i64 } %42)
  %44 = trunc i8 %43 to i1
  br i1 %44, label %btrue6, label %bfalse

btrue6:                                           ; preds = %btrue5
  %45 = getelementptr inbounds { i64, i64, i64, i64, i64, i64, %..string, float, i8, [3 x i8] }, { i64, i64, i64, i64, i64, i64, %..string, float, i8, [3 x i8] }* %2, i32 0, i32 7
  %46 = getelementptr inbounds { i64, i64, i64, i64, i64, i64, %..string, float, i8, [3 x i8] }, { i64, i64, i64, i64, i64, i64, %..string, float, i8, [3 x i8] }* %3, i32 0, i32 7
  %47 = load float, float* %45, align 4
  %48 = load float, float* %46, align 4
  %49 = fcmp oeq float %47, %48
  br i1 %49, label %btrue7, label %bfalse

btrue7:                                           ; preds = %btrue6
  %50 = getelementptr inbounds { i64, i64, i64, i64, i64, i64, %..string, float, i8, [3 x i8] }, { i64, i64, i64, i64, i64, i64, %..string, float, i8, [3 x i8] }* %2, i32 0, i32 8
  %51 = getelementptr inbounds { i64, i64, i64, i64, i64, i64, %..string, float, i8, [3 x i8] }, { i64, i64, i64, i64, i64, i64, %..string, float, i8, [3 x i8] }* %3, i32 0, i32 8
  %52 = load i8, i8* %50, align 1
  %53 = load i8, i8* %51, align 1
  %54 = icmp eq i8 %52, %53
  br i1 %54, label %btrue8, label %bfalse

btrue8:                                           ; preds = %btrue7
  ret i8 1

bfalse:                                           ; preds = %btrue7, %btrue6, %btrue5, %btrue4, %btrue3, %btrue2, %btrue1, %btrue, %diff_ptr
  ret i8 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #0

define void @"__$startup_runtime"(i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %0 = alloca %rand.Rand, align 8
  br label %entry

entry:                                            ; preds = %decls
  call void @"__$startup_type_info"()
  %1 = load float, float* @src.SCALE, align 4
  %2 = fmul float 2.000000e+00, %1
  %3 = fcmp ogt float 2.000000e+00, %2
  %4 = select i1 %3, float 2.000000e+00, float %2
  store float %4, float* @src.LINE_WIDTH, align 4
  %5 = load float, float* @src.SCALE, align 4
  %6 = fmul float 5.000000e+00, %5
  store float %6, float* @src.ROUNDNESS, align 4
  %7 = call i64 @llvm.readcyclecounter()
  %8 = bitcast %rand.Rand* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* %8, i8 0, i64 24, i1 false)
  call void @rand.create(%rand.Rand* sret %0, i64 %7, i8* %__.context_ptr)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 bitcast (%rand.Rand* @rand.global_rand-3738 to i8*), i8* align 8 %8, i64 24, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* bitcast (%io.Stream_VTable* @"ggv$7d" to i8*), i8* bitcast (%io.Stream_VTable* @"ggv$7e" to i8*), i64 136, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* bitcast (%io.Stream_VTable* @"ggv$7f" to i8*), i8* bitcast (%io.Stream_VTable* @"ggv$80" to i8*), i64 136, i1 false)
  call void @png._register-10194(i8* %__.context_ptr)
  ret void
}

declare internal void @rand.create(%rand.Rand* noalias sret, i64, i8* noalias nocapture nonnull)

; Function Attrs: nounwind
declare i64 @llvm.readcyclecounter() #2

define internal { i64, i64 } @"_proclit$anon-0"({ i64, i64 } %0, { i64, i64 } %1, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %2 = alloca %io.Stream, align 8
  %3 = alloca { i8*, i64 }, align 8
  %4 = alloca i64, align 8
  %5 = alloca i32, align 4
  %6 = alloca %strings.Builder*, align 8
  %7 = alloca { i64, i32 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  %8 = bitcast %io.Stream* %2 to { i64, i64 }*
  store { i64, i64 } %0, { i64, i64 }* %8, align 8
  %9 = load %io.Stream, %io.Stream* %2, align 8
  %10 = bitcast { i8*, i64 }* %3 to { i64, i64 }*
  store { i64, i64 } %1, { i64, i64 }* %10, align 8
  %11 = load { i8*, i64 }, { i8*, i64 }* %3, align 8
  store i64 0, i64* %4, align 8
  store i32 0, i32* %5, align 4
  %12 = bitcast i8* %__.context_ptr to %runtime.Context*
  %13 = getelementptr inbounds %io.Stream, %io.Stream* %2, i32 0, i32 1
  %14 = load i8*, i8** %13, align 8
  %15 = bitcast i8* %14 to %strings.Builder*
  store %strings.Builder* %15, %strings.Builder** %6, align 8
  %16 = load %strings.Builder*, %strings.Builder** %6, align 8
  %17 = load { i8*, i64 }, { i8*, i64 }* %3, align 8
  %18 = bitcast { i8*, i64 }* %3 to { i64, i64 }*
  %19 = load { i64, i64 }, { i64, i64 }* %18, align 8
  %20 = bitcast %runtime.Context* %12 to i8*
  %21 = call i64 @strings.write_bytes(%strings.Builder* %16, { i64, i64 } %19, i8* %20)
  store i64 %21, i64* %4, align 8
  %22 = load i64, i64* %4, align 8
  %23 = load { i8*, i64 }, { i8*, i64 }* %3, align 8
  %24 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %3, i32 0, i32 1
  %25 = load i64, i64* %24, align 8
  %26 = icmp slt i64 %22, %25
  %27 = zext i1 %26 to i8
  %28 = trunc i8 %27 to i1
  br i1 %28, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  store i32 1, i32* %5, align 4
  br label %if.done

if.done:                                          ; preds = %if.then, %entry
  %29 = load i64, i64* %4, align 8
  %30 = load i32, i32* %5, align 4
  store i64 %29, i64* %4, align 8
  store i32 %30, i32* %5, align 4
  %31 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %7, i32 0, i32 0
  %32 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %7, i32 0, i32 1
  store i64 %29, i64* %31, align 8
  store i32 %30, i32* %32, align 4
  %33 = load { i64, i32 }, { i64, i32 }* %7, align 8
  %34 = bitcast { i64, i32 }* %7 to { i64, i64 }*
  %35 = load { i64, i64 }, { i64, i64 }* %34, align 8
  ret { i64, i64 } %35
}

define internal i32 @"_proclit$anon-1"({ i64, i64 } %0, i8 %1, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %2 = alloca %io.Stream, align 8
  %3 = alloca i8, align 1
  %4 = alloca i32, align 4
  %5 = alloca %strings.Builder*, align 8
  %6 = alloca i64, align 8
  br label %entry

entry:                                            ; preds = %decls
  %7 = bitcast %io.Stream* %2 to { i64, i64 }*
  store { i64, i64 } %0, { i64, i64 }* %7, align 8
  %8 = load %io.Stream, %io.Stream* %2, align 8
  store i8 %1, i8* %3, align 1
  store i32 0, i32* %4, align 4
  %9 = bitcast i8* %__.context_ptr to %runtime.Context*
  %10 = getelementptr inbounds %io.Stream, %io.Stream* %2, i32 0, i32 1
  %11 = load i8*, i8** %10, align 8
  %12 = bitcast i8* %11 to %strings.Builder*
  store %strings.Builder* %12, %strings.Builder** %5, align 8
  %13 = load %strings.Builder*, %strings.Builder** %5, align 8
  %14 = load i8, i8* %3, align 1
  %15 = bitcast %runtime.Context* %9 to i8*
  %16 = call i64 @strings.write_byte(%strings.Builder* %13, i8 %14, i8* %15)
  store i64 %16, i64* %6, align 8
  %17 = load i64, i64* %6, align 8
  %18 = icmp eq i64 %17, 0
  %19 = zext i1 %18 to i8
  %20 = trunc i8 %19 to i1
  br i1 %20, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  store i32 1, i32* %4, align 4
  br label %if.done

if.done:                                          ; preds = %if.then, %entry
  %21 = load i32, i32* %4, align 4
  store i32 %21, i32* %4, align 4
  ret i32 %21
}

define internal i64 @"_proclit$anon-2"({ i64, i64 } %0, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %1 = alloca %io.Stream, align 8
  %2 = alloca %strings.Builder*, align 8
  br label %entry

entry:                                            ; preds = %decls
  %3 = bitcast %io.Stream* %1 to { i64, i64 }*
  store { i64, i64 } %0, { i64, i64 }* %3, align 8
  %4 = load %io.Stream, %io.Stream* %1, align 8
  %5 = bitcast i8* %__.context_ptr to %runtime.Context*
  %6 = getelementptr inbounds %io.Stream, %io.Stream* %1, i32 0, i32 1
  %7 = load i8*, i8** %6, align 8
  %8 = bitcast i8* %7 to %strings.Builder*
  store %strings.Builder* %8, %strings.Builder** %2, align 8
  %9 = load %strings.Builder*, %strings.Builder** %2, align 8
  %10 = getelementptr inbounds %strings.Builder, %strings.Builder* %9, i32 0, i32 0
  %11 = load { i8*, i64, i64, %runtime.Allocator }, { i8*, i64, i64, %runtime.Allocator }* %10, align 8
  %12 = getelementptr inbounds { i8*, i64, i64, %runtime.Allocator }, { i8*, i64, i64, %runtime.Allocator }* %10, i32 0, i32 1
  %13 = load i64, i64* %12, align 8
  ret i64 %13
}

define internal i32 @"_proclit$anon-3"({ i64, i64 } %0, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %1 = alloca %io.Stream, align 8
  %2 = alloca %strings.Builder*, align 8
  %3 = alloca %runtime.Source_Code_Location, align 8
  br label %entry

entry:                                            ; preds = %decls
  %4 = bitcast %io.Stream* %1 to { i64, i64 }*
  store { i64, i64 } %0, { i64, i64 }* %4, align 8
  %5 = load %io.Stream, %io.Stream* %1, align 8
  %6 = bitcast i8* %__.context_ptr to %runtime.Context*
  %7 = getelementptr inbounds %io.Stream, %io.Stream* %1, i32 0, i32 1
  %8 = load i8*, i8** %7, align 8
  %9 = bitcast i8* %8 to %strings.Builder*
  store %strings.Builder* %9, %strings.Builder** %2, align 8
  %10 = load %strings.Builder*, %strings.Builder** %2, align 8
  %11 = getelementptr inbounds %strings.Builder, %strings.Builder* %10, i32 0, i32 0
  %12 = load { i8*, i64, i64, %runtime.Allocator }, { i8*, i64, i64, %runtime.Allocator }* %11, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([59 x i8], [59 x i8]* @"csbs$2ab", i64 0, i64 0), i64 58 }, i32 93, i32 3, %..string { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @"csbs$2ac", i64 0, i64 0), i64 15 } }, %runtime.Source_Code_Location* %3, align 8
  %13 = bitcast %runtime.Context* %6 to i8*
  %14 = call i8 @runtime.delete_dynamic_array-47636({ i8*, i64, i64, %runtime.Allocator }* %11, %runtime.Source_Code_Location* %3, i8* %13)
  ret i32 0
}

define internal { i64, i64 } @"_proclit$anon-4"({ i64, i64 } %0, { i64, i64 } %1, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %2 = alloca %io.Stream, align 8
  %3 = alloca { i8*, i64 }, align 8
  %4 = alloca i64, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca { i64, i32 }, align 8
  %9 = alloca { i64, i32 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  %10 = bitcast %io.Stream* %2 to { i64, i64 }*
  store { i64, i64 } %0, { i64, i64 }* %10, align 8
  %11 = load %io.Stream, %io.Stream* %2, align 8
  %12 = bitcast { i8*, i64 }* %3 to { i64, i64 }*
  store { i64, i64 } %1, { i64, i64 }* %12, align 8
  %13 = load { i8*, i64 }, { i8*, i64 }* %3, align 8
  store i64 0, i64* %4, align 8
  store i32 0, i32* %5, align 4
  %14 = bitcast i8* %__.context_ptr to %runtime.Context*
  %15 = getelementptr inbounds %io.Stream, %io.Stream* %2, i32 0, i32 1
  %16 = load i8*, i8** %15, align 8
  %17 = ptrtoint i8* %16 to i64
  %18 = trunc i64 %17 to i32
  store i32 %18, i32* %6, align 4
  store i32 0, i32* %7, align 4
  %19 = load i32, i32* %6, align 4
  %20 = load { i8*, i64 }, { i8*, i64 }* %3, align 8
  %21 = bitcast { i8*, i64 }* %3 to { i64, i64 }*
  %22 = load { i64, i64 }, { i64, i64 }* %21, align 8
  %23 = bitcast %runtime.Context* %14 to i8*
  %24 = call { i64, i64 } @os.read(i32 %19, { i64, i64 } %22, i8* %23)
  %25 = bitcast { i64, i32 }* %8 to { i64, i64 }*
  store { i64, i64 } %24, { i64, i64 }* %25, align 8
  %26 = load { i64, i32 }, { i64, i32 }* %8, align 8
  %27 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %8, i32 0, i32 0
  %28 = load i64, i64* %27, align 8
  %29 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %8, i32 0, i32 1
  %30 = load i32, i32* %29, align 4
  store i64 %28, i64* %4, align 8
  store i32 %30, i32* %7, align 4
  %31 = load i64, i64* %4, align 8
  %32 = load i32, i32* %5, align 4
  store i64 %31, i64* %4, align 8
  store i32 %32, i32* %5, align 4
  %33 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %9, i32 0, i32 0
  %34 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %9, i32 0, i32 1
  store i64 %31, i64* %33, align 8
  store i32 %32, i32* %34, align 4
  %35 = load { i64, i32 }, { i64, i32 }* %9, align 8
  %36 = bitcast { i64, i32 }* %9 to { i64, i64 }*
  %37 = load { i64, i64 }, { i64, i64 }* %36, align 8
  ret { i64, i64 } %37
}

define internal { i64, i64 } @"_proclit$anon-5"({ i64, i64 } %0, { i64, i64 } %1, i64 %2, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %3 = alloca %io.Stream, align 8
  %4 = alloca { i8*, i64 }, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i32, align 4
  %8 = alloca { i64, i32 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  %9 = bitcast %io.Stream* %3 to { i64, i64 }*
  store { i64, i64 } %0, { i64, i64 }* %9, align 8
  %10 = load %io.Stream, %io.Stream* %3, align 8
  %11 = bitcast { i8*, i64 }* %4 to { i64, i64 }*
  store { i64, i64 } %1, { i64, i64 }* %11, align 8
  %12 = load { i8*, i64 }, { i8*, i64 }* %4, align 8
  store i64 %2, i64* %5, align 8
  store i64 0, i64* %6, align 8
  store i32 0, i32* %7, align 4
  %13 = bitcast i8* %__.context_ptr to %runtime.Context*
  %14 = load i64, i64* %6, align 8
  %15 = load i32, i32* %7, align 4
  store i64 %14, i64* %6, align 8
  store i32 %15, i32* %7, align 4
  %16 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %8, i32 0, i32 0
  %17 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %8, i32 0, i32 1
  store i64 %14, i64* %16, align 8
  store i32 %15, i32* %17, align 4
  %18 = load { i64, i32 }, { i64, i32 }* %8, align 8
  %19 = bitcast { i64, i32 }* %8 to { i64, i64 }*
  %20 = load { i64, i64 }, { i64, i64 }* %19, align 8
  ret { i64, i64 } %20
}

define internal { i64, i64 } @"_proclit$anon-6"({ i64, i64 } %0, { i64, i64 } %1, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %2 = alloca %io.Stream, align 8
  %3 = alloca { i8*, i64 }, align 8
  %4 = alloca i64, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca { i64, i32 }, align 8
  %9 = alloca { i64, i32 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  %10 = bitcast %io.Stream* %2 to { i64, i64 }*
  store { i64, i64 } %0, { i64, i64 }* %10, align 8
  %11 = load %io.Stream, %io.Stream* %2, align 8
  %12 = bitcast { i8*, i64 }* %3 to { i64, i64 }*
  store { i64, i64 } %1, { i64, i64 }* %12, align 8
  %13 = load { i8*, i64 }, { i8*, i64 }* %3, align 8
  store i64 0, i64* %4, align 8
  store i32 0, i32* %5, align 4
  %14 = bitcast i8* %__.context_ptr to %runtime.Context*
  %15 = getelementptr inbounds %io.Stream, %io.Stream* %2, i32 0, i32 1
  %16 = load i8*, i8** %15, align 8
  %17 = ptrtoint i8* %16 to i64
  %18 = trunc i64 %17 to i32
  store i32 %18, i32* %6, align 4
  store i32 0, i32* %7, align 4
  %19 = load i32, i32* %6, align 4
  %20 = load { i8*, i64 }, { i8*, i64 }* %3, align 8
  %21 = bitcast { i8*, i64 }* %3 to { i64, i64 }*
  %22 = load { i64, i64 }, { i64, i64 }* %21, align 8
  %23 = bitcast %runtime.Context* %14 to i8*
  %24 = call { i64, i64 } @os.write(i32 %19, { i64, i64 } %22, i8* %23)
  %25 = bitcast { i64, i32 }* %8 to { i64, i64 }*
  store { i64, i64 } %24, { i64, i64 }* %25, align 8
  %26 = load { i64, i32 }, { i64, i32 }* %8, align 8
  %27 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %8, i32 0, i32 0
  %28 = load i64, i64* %27, align 8
  %29 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %8, i32 0, i32 1
  %30 = load i32, i32* %29, align 4
  store i64 %28, i64* %4, align 8
  store i32 %30, i32* %7, align 4
  %31 = load i64, i64* %4, align 8
  %32 = load i32, i32* %5, align 4
  store i64 %31, i64* %4, align 8
  store i32 %32, i32* %5, align 4
  %33 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %9, i32 0, i32 0
  %34 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %9, i32 0, i32 1
  store i64 %31, i64* %33, align 8
  store i32 %32, i32* %34, align 4
  %35 = load { i64, i32 }, { i64, i32 }* %9, align 8
  %36 = bitcast { i64, i32 }* %9 to { i64, i64 }*
  %37 = load { i64, i64 }, { i64, i64 }* %36, align 8
  ret { i64, i64 } %37
}

define internal { i64, i64 } @"_proclit$anon-7"({ i64, i64 } %0, { i64, i64 } %1, i64 %2, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %3 = alloca %io.Stream, align 8
  %4 = alloca { i8*, i64 }, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i32, align 4
  %8 = alloca { i64, i32 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  %9 = bitcast %io.Stream* %3 to { i64, i64 }*
  store { i64, i64 } %0, { i64, i64 }* %9, align 8
  %10 = load %io.Stream, %io.Stream* %3, align 8
  %11 = bitcast { i8*, i64 }* %4 to { i64, i64 }*
  store { i64, i64 } %1, { i64, i64 }* %11, align 8
  %12 = load { i8*, i64 }, { i8*, i64 }* %4, align 8
  store i64 %2, i64* %5, align 8
  store i64 0, i64* %6, align 8
  store i32 0, i32* %7, align 4
  %13 = bitcast i8* %__.context_ptr to %runtime.Context*
  %14 = load i64, i64* %6, align 8
  %15 = load i32, i32* %7, align 4
  store i64 %14, i64* %6, align 8
  store i32 %15, i32* %7, align 4
  %16 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %8, i32 0, i32 0
  %17 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %8, i32 0, i32 1
  store i64 %14, i64* %16, align 8
  store i32 %15, i32* %17, align 4
  %18 = load { i64, i32 }, { i64, i32 }* %8, align 8
  %19 = bitcast { i64, i32 }* %8 to { i64, i64 }*
  %20 = load { i64, i64 }, { i64, i64 }* %19, align 8
  ret { i64, i64 } %20
}

define internal { i64, i64 } @"_proclit$anon-8"({ i64, i64 } %0, i64 %1, i64 %2, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %3 = alloca %io.Stream, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = alloca i32, align 4
  %9 = alloca { i64, i32 }, align 8
  %10 = alloca { i64, i32 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  %11 = bitcast %io.Stream* %3 to { i64, i64 }*
  store { i64, i64 } %0, { i64, i64 }* %11, align 8
  %12 = load %io.Stream, %io.Stream* %3, align 8
  store i64 %1, i64* %4, align 8
  store i64 %2, i64* %5, align 8
  %13 = bitcast i8* %__.context_ptr to %runtime.Context*
  %14 = getelementptr inbounds %io.Stream, %io.Stream* %3, i32 0, i32 1
  %15 = load i8*, i8** %14, align 8
  %16 = ptrtoint i8* %15 to i64
  %17 = trunc i64 %16 to i32
  store i32 %17, i32* %6, align 4
  %18 = load i32, i32* %6, align 4
  %19 = load i64, i64* %4, align 8
  %20 = load i64, i64* %5, align 8
  %21 = bitcast %runtime.Context* %13 to i8*
  %22 = call { i64, i64 } @os.seek(i32 %18, i64 %19, i64 %20, i8* %21)
  %23 = bitcast { i64, i32 }* %9 to { i64, i64 }*
  store { i64, i64 } %22, { i64, i64 }* %23, align 8
  %24 = load { i64, i32 }, { i64, i32 }* %9, align 8
  %25 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %9, i32 0, i32 0
  %26 = load i64, i64* %25, align 8
  %27 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %9, i32 0, i32 1
  %28 = load i32, i32* %27, align 4
  store i64 %26, i64* %7, align 8
  store i32 %28, i32* %8, align 4
  %29 = load i32, i32* %8, align 4
  %30 = load i64, i64* %7, align 8
  %31 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %10, i32 0, i32 0
  %32 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %10, i32 0, i32 1
  store i64 %30, i64* %31, align 8
  store i32 0, i32* %32, align 4
  %33 = load { i64, i32 }, { i64, i32 }* %10, align 8
  %34 = bitcast { i64, i32 }* %10 to { i64, i64 }*
  %35 = load { i64, i64 }, { i64, i64 }* %34, align 8
  ret { i64, i64 } %35
}

define internal i64 @"_proclit$anon-9"({ i64, i64 } %0, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %1 = alloca %io.Stream, align 8
  %2 = alloca i32, align 4
  %3 = alloca i64, align 8
  %4 = alloca { i64, i32 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  %5 = bitcast %io.Stream* %1 to { i64, i64 }*
  store { i64, i64 } %0, { i64, i64 }* %5, align 8
  %6 = load %io.Stream, %io.Stream* %1, align 8
  %7 = bitcast i8* %__.context_ptr to %runtime.Context*
  %8 = getelementptr inbounds %io.Stream, %io.Stream* %1, i32 0, i32 1
  %9 = load i8*, i8** %8, align 8
  %10 = ptrtoint i8* %9 to i64
  %11 = trunc i64 %10 to i32
  store i32 %11, i32* %2, align 4
  %12 = load i32, i32* %2, align 4
  %13 = bitcast %runtime.Context* %7 to i8*
  %14 = call { i64, i64 } @os.file_size(i32 %12, i8* %13)
  %15 = bitcast { i64, i32 }* %4 to { i64, i64 }*
  store { i64, i64 } %14, { i64, i64 }* %15, align 8
  %16 = load { i64, i32 }, { i64, i32 }* %4, align 8
  %17 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %4, i32 0, i32 0
  %18 = load i64, i64* %17, align 8
  %19 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %4, i32 0, i32 1
  %20 = load i32, i32* %19, align 4
  store i64 %18, i64* %3, align 8
  %21 = load i64, i64* %3, align 8
  ret i64 %21
}

define internal i32 @"_proclit$anon-10"({ i64, i64 } %0, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %1 = alloca %io.Stream, align 8
  br label %entry

entry:                                            ; preds = %decls
  %2 = bitcast %io.Stream* %1 to { i64, i64 }*
  store { i64, i64 } %0, { i64, i64 }* %2, align 8
  %3 = load %io.Stream, %io.Stream* %1, align 8
  %4 = bitcast i8* %__.context_ptr to %runtime.Context*
  ret i32 0
}

define internal i32 @"_proclit$anon-11"({ i64, i64 } %0, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %1 = alloca %io.Stream, align 8
  %2 = alloca i32, align 4
  br label %entry

entry:                                            ; preds = %decls
  %3 = bitcast %io.Stream* %1 to { i64, i64 }*
  store { i64, i64 } %0, { i64, i64 }* %3, align 8
  %4 = load %io.Stream, %io.Stream* %1, align 8
  %5 = bitcast i8* %__.context_ptr to %runtime.Context*
  %6 = getelementptr inbounds %io.Stream, %io.Stream* %1, i32 0, i32 1
  %7 = load i8*, i8** %6, align 8
  %8 = ptrtoint i8* %7 to i64
  %9 = trunc i64 %8 to i32
  store i32 %9, i32* %2, align 4
  %10 = load i32, i32* %2, align 4
  %11 = bitcast %runtime.Context* %5 to i8*
  %12 = call i32 @os.close(i32 %10, i8* %11)
  ret i32 0
}

declare internal void @png._register-10194(i8* noalias nocapture nonnull)

define dso_local void @"__$cleanup_runtime"(i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  br label %entry

entry:                                            ; preds = %decls
  %0 = bitcast i8* %__.context_ptr to %runtime.Context*
  %1 = bitcast %runtime.Context* %0 to i8*
  call void @runtime.default_temp_allocator_destroy(%runtime.Default_Temp_Allocator* @runtime.global_default_temp_allocator_data, i8* %1)
  ret void
}

define internal %runtime.Type_Info* @runtime.type_info_base(%runtime.Type_Info* %0) {
decls:
  %1 = alloca %runtime.Type_Info*, align 8
  %2 = alloca %runtime.Type_Info*, align 8
  %3 = alloca %runtime.Type_Info_Named, align 8
  %4 = alloca { [15 x i64], i64 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %runtime.Type_Info* %0, %runtime.Type_Info** %1, align 8
  %5 = load %runtime.Type_Info*, %runtime.Type_Info** %1, align 8
  %6 = icmp eq %runtime.Type_Info* %5, null
  %7 = zext i1 %6 to i8
  %8 = trunc i8 %7 to i1
  br i1 %8, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  ret %runtime.Type_Info* null

if.done:                                          ; preds = %entry
  %9 = load %runtime.Type_Info*, %runtime.Type_Info** %1, align 8
  store %runtime.Type_Info* %9, %runtime.Type_Info** %2, align 8
  br label %for.body

for.body:                                         ; preds = %typeswitch.done, %if.done
  %10 = load %runtime.Type_Info*, %runtime.Type_Info** %2, align 8
  %11 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %10, i32 0, i32 5
  %12 = load { [15 x i64], i64 }, { [15 x i64], i64 }* %11, align 8
  %13 = bitcast { [15 x i64], i64 }* %11 to i8*
  %14 = getelementptr inbounds { [15 x i64], i64 }, { [15 x i64], i64 }* %11, i32 0, i32 1
  %15 = load i64, i64* %14, align 8
  switch i64 %15, label %typeswitch.default.body [
    i64 1, label %typeswitch.body
  ]

typeswitch.body:                                  ; preds = %for.body
  %16 = bitcast i8* %13 to %runtime.Type_Info_Named*
  %17 = load %runtime.Type_Info_Named, %runtime.Type_Info_Named* %16, align 8
  %18 = bitcast %runtime.Type_Info_Named* %3 to i8*
  %19 = bitcast %runtime.Type_Info_Named* %16 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %18, i8* align 1 %19, i64 80, i1 false)
  %20 = getelementptr inbounds %runtime.Type_Info_Named, %runtime.Type_Info_Named* %3, i32 0, i32 1
  %21 = load %runtime.Type_Info*, %runtime.Type_Info** %20, align 8
  store %runtime.Type_Info* %21, %runtime.Type_Info** %2, align 8
  br label %typeswitch.done

typeswitch.default.body:                          ; preds = %for.body
  %22 = bitcast { [15 x i64], i64 }* %4 to i8*
  %23 = bitcast { [15 x i64], i64 }* %11 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %22, i8* align 1 %23, i64 128, i1 false)
  br label %for.done

unreachable:                                      ; No predecessors!
  br label %typeswitch.done

typeswitch.done:                                  ; preds = %unreachable, %typeswitch.body
  br label %for.body

for.done:                                         ; preds = %typeswitch.default.body
  %24 = load %runtime.Type_Info*, %runtime.Type_Info** %2, align 8
  ret %runtime.Type_Info* %24
}

define internal %runtime.Type_Info* @runtime.type_info_core(%runtime.Type_Info* %0) {
decls:
  %1 = alloca %runtime.Type_Info*, align 8
  %2 = alloca %runtime.Type_Info*, align 8
  %3 = alloca %runtime.Type_Info_Named, align 8
  %4 = alloca %runtime.Type_Info_Enum, align 8
  %5 = alloca { [15 x i64], i64 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %runtime.Type_Info* %0, %runtime.Type_Info** %1, align 8
  %6 = load %runtime.Type_Info*, %runtime.Type_Info** %1, align 8
  %7 = icmp eq %runtime.Type_Info* %6, null
  %8 = zext i1 %7 to i8
  %9 = trunc i8 %8 to i1
  br i1 %9, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  ret %runtime.Type_Info* null

if.done:                                          ; preds = %entry
  %10 = load %runtime.Type_Info*, %runtime.Type_Info** %1, align 8
  store %runtime.Type_Info* %10, %runtime.Type_Info** %2, align 8
  br label %for.body

for.body:                                         ; preds = %typeswitch.done, %if.done
  %11 = load %runtime.Type_Info*, %runtime.Type_Info** %2, align 8
  %12 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %11, i32 0, i32 5
  %13 = load { [15 x i64], i64 }, { [15 x i64], i64 }* %12, align 8
  %14 = bitcast { [15 x i64], i64 }* %12 to i8*
  %15 = getelementptr inbounds { [15 x i64], i64 }, { [15 x i64], i64 }* %12, i32 0, i32 1
  %16 = load i64, i64* %15, align 8
  switch i64 %16, label %typeswitch.default.body [
    i64 1, label %typeswitch.body
    i64 21, label %typeswitch.body1
  ]

typeswitch.body:                                  ; preds = %for.body
  %17 = bitcast i8* %14 to %runtime.Type_Info_Named*
  %18 = load %runtime.Type_Info_Named, %runtime.Type_Info_Named* %17, align 8
  %19 = bitcast %runtime.Type_Info_Named* %3 to i8*
  %20 = bitcast %runtime.Type_Info_Named* %17 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %19, i8* align 1 %20, i64 80, i1 false)
  %21 = getelementptr inbounds %runtime.Type_Info_Named, %runtime.Type_Info_Named* %3, i32 0, i32 1
  %22 = load %runtime.Type_Info*, %runtime.Type_Info** %21, align 8
  store %runtime.Type_Info* %22, %runtime.Type_Info** %2, align 8
  br label %typeswitch.done

typeswitch.body1:                                 ; preds = %for.body
  %23 = bitcast i8* %14 to %runtime.Type_Info_Enum*
  %24 = load %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %23, align 8
  store %runtime.Type_Info_Enum %24, %runtime.Type_Info_Enum* %4, align 8
  %25 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %4, i32 0, i32 0
  %26 = load %runtime.Type_Info*, %runtime.Type_Info** %25, align 8
  store %runtime.Type_Info* %26, %runtime.Type_Info** %2, align 8
  br label %typeswitch.done

typeswitch.default.body:                          ; preds = %for.body
  %27 = bitcast { [15 x i64], i64 }* %5 to i8*
  %28 = bitcast { [15 x i64], i64 }* %12 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %27, i8* align 1 %28, i64 128, i1 false)
  br label %for.done

unreachable:                                      ; No predecessors!
  br label %typeswitch.done

typeswitch.done:                                  ; preds = %unreachable, %typeswitch.body1, %typeswitch.body
  br label %for.body

for.done:                                         ; preds = %typeswitch.default.body
  %29 = load %runtime.Type_Info*, %runtime.Type_Info** %2, align 8
  ret %runtime.Type_Info* %29
}

define internal %runtime.Type_Info* @runtime.__type_info_of(i64 %0) {
decls:
  %1 = alloca i64, align 8
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i64 %0, i64* %1, align 8
  %4 = load i64, i64* %1, align 8
  store i64 %4, i64* %2, align 8
  %5 = load i64, i64* %2, align 8
  %6 = and i64 %5, 72057594037927935
  store i64 %6, i64* %3, align 8
  %7 = load i64, i64* %3, align 8
  %8 = icmp slt i64 %7, 0
  %9 = zext i1 %8 to i8
  %10 = trunc i8 %9 to i1
  br i1 %10, label %if.then, label %cmp.or

cmp.or:                                           ; preds = %entry
  %11 = load i64, i64* %3, align 8
  %12 = load { %runtime.Type_Info*, i64 }, { %runtime.Type_Info*, i64 }* @runtime.type_table, align 8
  %13 = load i64, i64* getelementptr inbounds ({ %runtime.Type_Info*, i64 }, { %runtime.Type_Info*, i64 }* @runtime.type_table, i64 0, i32 1), align 8
  %14 = icmp sge i64 %11, %13
  %15 = zext i1 %14 to i8
  %16 = trunc i8 %15 to i1
  br i1 %16, label %if.then, label %if.done

if.then:                                          ; preds = %cmp.or, %entry
  store i64 0, i64* %3, align 8
  br label %if.done

if.done:                                          ; preds = %if.then, %cmp.or
  %17 = load { %runtime.Type_Info*, i64 }, { %runtime.Type_Info*, i64 }* @runtime.type_table, align 8
  %18 = load %runtime.Type_Info*, %runtime.Type_Info** getelementptr inbounds ({ %runtime.Type_Info*, i64 }, { %runtime.Type_Info*, i64 }* @runtime.type_table, i64 0, i32 0), align 8
  %19 = load i64, i64* %3, align 8
  %20 = load i64, i64* getelementptr inbounds ({ %runtime.Type_Info*, i64 }, { %runtime.Type_Info*, i64 }* @runtime.type_table, i64 0, i32 1), align 8
  %21 = getelementptr %runtime.Type_Info, %runtime.Type_Info* %18, i64 %19
  ret %runtime.Type_Info* %21
}

define internal void @runtime.default_logger_proc(i8* %0, i64 %1, { i64, i64 } %2, i16 %3, %runtime.Source_Code_Location* %4, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  %7 = alloca %..string, align 8
  %8 = alloca i16, align 2
  br label %entry

entry:                                            ; preds = %decls
  store i8* %0, i8** %5, align 8
  store i64 %1, i64* %6, align 8
  %9 = bitcast %..string* %7 to { i64, i64 }*
  store { i64, i64 } %2, { i64, i64 }* %9, align 8
  %10 = load %..string, %..string* %7, align 8
  store i16 %3, i16* %8, align 2
  %11 = bitcast i8* %__.context_ptr to %runtime.Context*
  ret void
}

define internal void @runtime.default_context(%runtime.Context* noalias sret %agg.result) {
decls:
  %0 = alloca %runtime.Context, align 8
  br label %entry

entry:                                            ; preds = %decls
  %1 = bitcast %runtime.Context* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* %1, i8 0, i64 96, i1 false)
  call void @runtime.__init_context-431(%runtime.Context* %0)
  %2 = load %runtime.Context, %runtime.Context* %0, align 8
  %3 = bitcast %runtime.Context* %agg.result to i8*
  %4 = bitcast %runtime.Context* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %3, i8* %4, i64 96, i1 false)
  ret void
}

define internal void @runtime.__init_context-431(%runtime.Context* %0) {
decls:
  %1 = alloca %runtime.Context*, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %runtime.Context* %0, %runtime.Context** %1, align 8
  %2 = load %runtime.Context*, %runtime.Context** %1, align 8
  %3 = icmp eq %runtime.Context* %2, null
  %4 = zext i1 %3 to i8
  %5 = trunc i8 %4 to i1
  br i1 %5, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  ret void

if.done:                                          ; preds = %entry
  %6 = load %runtime.Context*, %runtime.Context** %1, align 8
  %7 = getelementptr inbounds %runtime.Context, %runtime.Context* %6, i32 0, i32 0
  %8 = getelementptr inbounds %runtime.Allocator, %runtime.Allocator* %7, i32 0, i32 0
  store i8* bitcast (void ({ { i8*, i64 }, i8 }*, i8*, i8, i64, i64, i8*, i64, %runtime.Source_Code_Location*, i8*)* @os.heap_allocator_proc to i8*), i8** %8, align 8
  %9 = load %runtime.Context*, %runtime.Context** %1, align 8
  %10 = getelementptr inbounds %runtime.Context, %runtime.Context* %9, i32 0, i32 0
  %11 = getelementptr inbounds %runtime.Allocator, %runtime.Allocator* %10, i32 0, i32 1
  store i8* null, i8** %11, align 8
  %12 = load %runtime.Context*, %runtime.Context** %1, align 8
  %13 = getelementptr inbounds %runtime.Context, %runtime.Context* %12, i32 0, i32 1
  %14 = getelementptr inbounds %runtime.Allocator, %runtime.Allocator* %13, i32 0, i32 0
  store i8* bitcast (void ({ { i8*, i64 }, i8 }*, i8*, i8, i64, i64, i8*, i64, %runtime.Source_Code_Location*, i8*)* @runtime.default_temp_allocator_proc to i8*), i8** %14, align 8
  %15 = load %runtime.Context*, %runtime.Context** %1, align 8
  %16 = getelementptr inbounds %runtime.Context, %runtime.Context* %15, i32 0, i32 1
  %17 = getelementptr inbounds %runtime.Allocator, %runtime.Allocator* %16, i32 0, i32 1
  store i8* bitcast (%runtime.Default_Temp_Allocator* @runtime.global_default_temp_allocator_data to i8*), i8** %17, align 8
  %18 = load %runtime.Context*, %runtime.Context** %1, align 8
  %19 = getelementptr inbounds %runtime.Context, %runtime.Context* %18, i32 0, i32 2
  store i8* bitcast (void ({ i64, i64 }, { i64, i64 }, %runtime.Source_Code_Location*, i8*)* @runtime.default_assertion_failure_proc to i8*), i8** %19, align 8
  %20 = load %runtime.Context*, %runtime.Context** %1, align 8
  %21 = getelementptr inbounds %runtime.Context, %runtime.Context* %20, i32 0, i32 3
  %22 = getelementptr inbounds %runtime.Logger, %runtime.Logger* %21, i32 0, i32 0
  store i8* bitcast (void (i8*, i64, { i64, i64 }, i16, %runtime.Source_Code_Location*, i8*)* @runtime.default_logger_proc to i8*), i8** %22, align 8
  %23 = load %runtime.Context*, %runtime.Context** %1, align 8
  %24 = getelementptr inbounds %runtime.Context, %runtime.Context* %23, i32 0, i32 3
  %25 = getelementptr inbounds %runtime.Logger, %runtime.Logger* %24, i32 0, i32 1
  store i8* null, i8** %25, align 8
  ret void
}

; Function Attrs: noreturn
define internal void @runtime.default_assertion_failure_proc({ i64, i64 } %0, { i64, i64 } %1, %runtime.Source_Code_Location* %2, i8* noalias nocapture nonnull %__.context_ptr) #3 {
decls:
  %3 = alloca %..string, align 8
  %4 = alloca %..string, align 8
  %5 = alloca { i64, i64 }, align 8
  %6 = alloca { i64, i64 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  %7 = bitcast %..string* %3 to { i64, i64 }*
  store { i64, i64 } %0, { i64, i64 }* %7, align 8
  %8 = load %..string, %..string* %3, align 8
  %9 = bitcast %..string* %4 to { i64, i64 }*
  store { i64, i64 } %1, { i64, i64 }* %9, align 8
  %10 = load %..string, %..string* %4, align 8
  %11 = bitcast i8* %__.context_ptr to %runtime.Context*
  %12 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %2, align 8
  call void @runtime.print_caller_location(%runtime.Source_Code_Location* %2)
  %13 = bitcast { i64, i64 }* %5 to %..string*
  store %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$2ad", i64 0, i64 0), i64 1 }, %..string* %13, align 8
  %14 = load { i64, i64 }, { i64, i64 }* %5, align 8
  %15 = call { i64, i64 } @runtime.print_string({ i64, i64 } %14)
  %16 = load %..string, %..string* %3, align 8
  %17 = bitcast %..string* %3 to { i64, i64 }*
  %18 = load { i64, i64 }, { i64, i64 }* %17, align 8
  %19 = call { i64, i64 } @runtime.print_string({ i64, i64 } %18)
  %20 = load %..string, %..string* %4, align 8
  %21 = getelementptr inbounds %..string, %..string* %4, i32 0, i32 1
  %22 = load i64, i64* %21, align 8
  %23 = icmp sgt i64 %22, 0
  %24 = zext i1 %23 to i8
  %25 = trunc i8 %24 to i1
  br i1 %25, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  %26 = bitcast { i64, i64 }* %6 to %..string*
  store %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$2ae", i64 0, i64 0), i64 2 }, %..string* %26, align 8
  %27 = load { i64, i64 }, { i64, i64 }* %6, align 8
  %28 = call { i64, i64 } @runtime.print_string({ i64, i64 } %27)
  %29 = load %..string, %..string* %4, align 8
  %30 = bitcast %..string* %4 to { i64, i64 }*
  %31 = load { i64, i64 }, { i64, i64 }* %30, align 8
  %32 = call { i64, i64 } @runtime.print_string({ i64, i64 } %31)
  br label %if.done

if.done:                                          ; preds = %if.then, %entry
  %33 = call { i64, i64 } @runtime.print_byte(i8 10)
  call void @llvm.trap()
  unreachable
}

define internal i8 @runtime.delete_string({ i64, i64 } %0, { i64, i64 } %1, %runtime.Source_Code_Location* %2, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %3 = alloca %..string, align 8
  %4 = alloca %runtime.Allocator, align 8
  br label %entry

entry:                                            ; preds = %decls
  %5 = bitcast %..string* %3 to { i64, i64 }*
  store { i64, i64 } %0, { i64, i64 }* %5, align 8
  %6 = load %..string, %..string* %3, align 8
  %7 = bitcast %runtime.Allocator* %4 to { i64, i64 }*
  store { i64, i64 } %1, { i64, i64 }* %7, align 8
  %8 = load %runtime.Allocator, %runtime.Allocator* %4, align 8
  %9 = bitcast i8* %__.context_ptr to %runtime.Context*
  %10 = load %..string, %..string* %3, align 8
  %11 = bitcast %..string* %3 to { i64, i64 }*
  %12 = load { i64, i64 }, { i64, i64 }* %11, align 8
  %13 = call i8* @runtime.raw_string_data-46612({ i64, i64 } %12)
  %14 = load %..string, %..string* %3, align 8
  %15 = getelementptr inbounds %..string, %..string* %3, i32 0, i32 1
  %16 = load i64, i64* %15, align 8
  %17 = load %runtime.Allocator, %runtime.Allocator* %4, align 8
  %18 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %2, align 8
  %19 = bitcast %runtime.Allocator* %4 to { i64, i64 }*
  %20 = load { i64, i64 }, { i64, i64 }* %19, align 8
  %21 = bitcast %runtime.Context* %9 to i8*
  %22 = call i8 @runtime.mem_free_with_size(i8* %13, i64 %16, { i64, i64 } %20, %runtime.Source_Code_Location* %2, i8* %21)
  ret i8 %22
}

define internal void @runtime.assert(i1 zeroext %0, { i64, i64 } %1, %runtime.Source_Code_Location* %2, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %3 = alloca i8, align 1
  %4 = alloca %..string, align 8
  br label %entry

entry:                                            ; preds = %decls
  %5 = zext i1 %0 to i8
  store i8 %5, i8* %3, align 1
  %6 = bitcast %..string* %4 to { i64, i64 }*
  store { i64, i64 } %1, { i64, i64 }* %6, align 8
  %7 = load %..string, %..string* %4, align 8
  %8 = bitcast i8* %__.context_ptr to %runtime.Context*
  %9 = load i8, i8* %3, align 1
  %10 = trunc i8 %9 to i1
  br i1 %10, label %if.done, label %if.then

if.then:                                          ; preds = %entry
  %11 = load %..string, %..string* %4, align 8
  %12 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %2, align 8
  %13 = bitcast %..string* %4 to { i64, i64 }*
  %14 = load { i64, i64 }, { i64, i64 }* %13, align 8
  %15 = bitcast %runtime.Context* %8 to i8*
  call void @runtime.assert.internal-0({ i64, i64 } %14, %runtime.Source_Code_Location* %2, i8* %15)
  br label %if.done

if.done:                                          ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noreturn
define internal void @runtime.panic({ i64, i64 } %0, %runtime.Source_Code_Location* %1, i8* noalias nocapture nonnull %__.context_ptr) #3 {
decls:
  %2 = alloca %..string, align 8
  %3 = alloca i8*, align 8
  %4 = alloca { i64, i64 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  %5 = bitcast %..string* %2 to { i64, i64 }*
  store { i64, i64 } %0, { i64, i64 }* %5, align 8
  %6 = load %..string, %..string* %2, align 8
  %7 = bitcast i8* %__.context_ptr to %runtime.Context*
  %8 = getelementptr inbounds %runtime.Context, %runtime.Context* %7, i32 0, i32 2
  %9 = load i8*, i8** %8, align 8
  store i8* %9, i8** %3, align 8
  %10 = load i8*, i8** %3, align 8
  %11 = icmp eq i8* %10, null
  %12 = zext i1 %11 to i8
  %13 = trunc i8 %12 to i1
  br i1 %13, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  store i8* bitcast (void ({ i64, i64 }, { i64, i64 }, %runtime.Source_Code_Location*, i8*)* @runtime.default_assertion_failure_proc to i8*), i8** %3, align 8
  br label %if.done

if.done:                                          ; preds = %if.then, %entry
  %14 = load i8*, i8** %3, align 8
  %15 = load %..string, %..string* %2, align 8
  %16 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %1, align 8
  %17 = bitcast { i64, i64 }* %4 to %..string*
  store %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$2af", i64 0, i64 0), i64 5 }, %..string* %17, align 8
  %18 = load { i64, i64 }, { i64, i64 }* %4, align 8
  %19 = bitcast %..string* %2 to { i64, i64 }*
  %20 = load { i64, i64 }, { i64, i64 }* %19, align 8
  %21 = bitcast %runtime.Context* %7 to i8*
  %22 = bitcast i8* %14 to void ({ i64, i64 }, { i64, i64 }, %runtime.Source_Code_Location*, i8*)*
  call void %22({ i64, i64 } %18, { i64, i64 } %20, %runtime.Source_Code_Location* %1, i8* %21)
  unreachable
}

; Function Attrs: noreturn
define internal void @runtime.unimplemented({ i64, i64 } %0, %runtime.Source_Code_Location* %1, i8* noalias nocapture nonnull %__.context_ptr) #3 {
decls:
  %2 = alloca %..string, align 8
  %3 = alloca i8*, align 8
  %4 = alloca { i64, i64 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  %5 = bitcast %..string* %2 to { i64, i64 }*
  store { i64, i64 } %0, { i64, i64 }* %5, align 8
  %6 = load %..string, %..string* %2, align 8
  %7 = bitcast i8* %__.context_ptr to %runtime.Context*
  %8 = getelementptr inbounds %runtime.Context, %runtime.Context* %7, i32 0, i32 2
  %9 = load i8*, i8** %8, align 8
  store i8* %9, i8** %3, align 8
  %10 = load i8*, i8** %3, align 8
  %11 = icmp eq i8* %10, null
  %12 = zext i1 %11 to i8
  %13 = trunc i8 %12 to i1
  br i1 %13, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  store i8* bitcast (void ({ i64, i64 }, { i64, i64 }, %runtime.Source_Code_Location*, i8*)* @runtime.default_assertion_failure_proc to i8*), i8** %3, align 8
  br label %if.done

if.done:                                          ; preds = %if.then, %entry
  %14 = load i8*, i8** %3, align 8
  %15 = load %..string, %..string* %2, align 8
  %16 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %1, align 8
  %17 = bitcast { i64, i64 }* %4 to %..string*
  store %..string { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @"csbs$2b0", i64 0, i64 0), i64 19 }, %..string* %17, align 8
  %18 = load { i64, i64 }, { i64, i64 }* %4, align 8
  %19 = bitcast %..string* %2 to { i64, i64 }*
  %20 = load { i64, i64 }, { i64, i64 }* %19, align 8
  %21 = bitcast %runtime.Context* %7 to i8*
  %22 = bitcast i8* %14 to void ({ i64, i64 }, { i64, i64 }, %runtime.Source_Code_Location*, i8*)*
  call void %22({ i64, i64 } %18, { i64, i64 } %20, %runtime.Source_Code_Location* %1, i8* %21)
  unreachable
}

define internal void @runtime.nil_allocator_proc({ { i8*, i64 }, i8 }* noalias sret %agg.result, i8* %0, i8 %1, i64 %2, i64 %3, i8* %4, i64 %5, %runtime.Source_Code_Location* %6, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %7 = alloca i8*, align 8
  %8 = alloca i8, align 1
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i64, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i8* %0, i8** %7, align 8
  store i8 %1, i8* %8, align 1
  store i64 %2, i64* %9, align 8
  store i64 %3, i64* %10, align 8
  store i8* %4, i8** %11, align 8
  store i64 %5, i64* %12, align 8
  %13 = bitcast i8* %__.context_ptr to %runtime.Context*
  %14 = load i8, i8* %8, align 1
  switch i8 %14, label %switch.done [
    i8 0, label %switch.case.body
    i8 1, label %switch.case.body1
    i8 2, label %switch.case.body2
    i8 3, label %switch.case.body3
    i8 4, label %switch.case.body4
    i8 5, label %switch.case.body5
  ]

switch.case.body:                                 ; preds = %entry
  %15 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 0
  %16 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 1
  store { i8*, i64 } zeroinitializer, { i8*, i64 }* %15, align 8
  store i8 1, i8* %16, align 1
  ret void

switch.case.body1:                                ; preds = %entry
  %17 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 0
  %18 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 1
  store { i8*, i64 } zeroinitializer, { i8*, i64 }* %17, align 8
  store i8 0, i8* %18, align 1
  ret void

switch.case.body2:                                ; preds = %entry
  %19 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 0
  %20 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 1
  store { i8*, i64 } zeroinitializer, { i8*, i64 }* %19, align 8
  store i8 4, i8* %20, align 1
  ret void

switch.case.body3:                                ; preds = %entry
  %21 = load i64, i64* %9, align 8
  %22 = icmp eq i64 %21, 0
  %23 = zext i1 %22 to i8
  %24 = trunc i8 %23 to i1
  br i1 %24, label %if.then, label %if.done

if.then:                                          ; preds = %switch.case.body3
  %25 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 0
  %26 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 1
  store { i8*, i64 } zeroinitializer, { i8*, i64 }* %25, align 8
  store i8 0, i8* %26, align 1
  ret void

if.done:                                          ; preds = %switch.case.body3
  %27 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 0
  %28 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 1
  store { i8*, i64 } zeroinitializer, { i8*, i64 }* %27, align 8
  store i8 1, i8* %28, align 1
  ret void

switch.case.body4:                                ; preds = %entry
  %29 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 0
  %30 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 1
  store { i8*, i64 } zeroinitializer, { i8*, i64 }* %29, align 8
  store i8 4, i8* %30, align 1
  ret void

switch.case.body5:                                ; preds = %entry
  %31 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 0
  %32 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 1
  store { i8*, i64 } zeroinitializer, { i8*, i64 }* %31, align 8
  store i8 4, i8* %32, align 1
  ret void

switch.done:                                      ; preds = %entry
  %33 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 0
  %34 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 1
  store { i8*, i64 } zeroinitializer, { i8*, i64 }* %33, align 8
  store i8 0, i8* %34, align 1
  ret void
}

define internal { i64, i64 } @runtime.nil_allocator(i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %0 = alloca { i64, i64 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  %1 = bitcast i8* %__.context_ptr to %runtime.Context*
  %2 = bitcast { i64, i64 }* %0 to %runtime.Allocator*
  store %runtime.Allocator { i8* bitcast (void ({ { i8*, i64 }, i8 }*, i8*, i8, i64, i64, i8*, i64, %runtime.Source_Code_Location*, i8*)* @runtime.nil_allocator_proc to i8*), i8* null }, %runtime.Allocator* %2, align 8
  %3 = load { i64, i64 }, { i64, i64 }* %0, align 8
  ret { i64, i64 } %3
}

define internal i8 @runtime.__dynamic_array_reserve(i8* %0, i64 %1, i64 %2, i64 %3, %runtime.Source_Code_Location* %4, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca %runtime.Raw_Dynamic_Array*, align 8
  %10 = alloca { i64, i64 }, align 8
  %11 = alloca %runtime.Source_Code_Location, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca %runtime.Allocator, align 8
  %15 = alloca { i8*, i64 }, align 8
  %16 = alloca i8, align 1
  %17 = alloca { { i8*, i64 }, i8 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i8* %0, i8** %5, align 8
  store i64 %1, i64* %6, align 8
  store i64 %2, i64* %7, align 8
  store i64 %3, i64* %8, align 8
  %18 = bitcast i8* %__.context_ptr to %runtime.Context*
  %19 = load i8*, i8** %5, align 8
  %20 = bitcast i8* %19 to %runtime.Raw_Dynamic_Array*
  store %runtime.Raw_Dynamic_Array* %20, %runtime.Raw_Dynamic_Array** %9, align 8
  %21 = load %runtime.Raw_Dynamic_Array*, %runtime.Raw_Dynamic_Array** %9, align 8
  %22 = getelementptr inbounds %runtime.Raw_Dynamic_Array, %runtime.Raw_Dynamic_Array* %21, i32 0, i32 3
  %23 = getelementptr inbounds %runtime.Allocator, %runtime.Allocator* %22, i32 0, i32 0
  %24 = load i8*, i8** %23, align 8
  %25 = icmp eq i8* %24, null
  %26 = zext i1 %25 to i8
  %27 = trunc i8 %26 to i1
  br i1 %27, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  %28 = load %runtime.Raw_Dynamic_Array*, %runtime.Raw_Dynamic_Array** %9, align 8
  %29 = getelementptr inbounds %runtime.Raw_Dynamic_Array, %runtime.Raw_Dynamic_Array* %28, i32 0, i32 3
  %30 = getelementptr inbounds %runtime.Context, %runtime.Context* %18, i32 0, i32 0
  %31 = load %runtime.Allocator, %runtime.Allocator* %30, align 8
  store %runtime.Allocator %31, %runtime.Allocator* %29, align 8
  br label %if.done

if.done:                                          ; preds = %if.then, %entry
  %32 = load %runtime.Raw_Dynamic_Array*, %runtime.Raw_Dynamic_Array** %9, align 8
  %33 = getelementptr inbounds %runtime.Raw_Dynamic_Array, %runtime.Raw_Dynamic_Array* %32, i32 0, i32 3
  %34 = getelementptr inbounds %runtime.Allocator, %runtime.Allocator* %33, i32 0, i32 0
  %35 = load i8*, i8** %34, align 8
  %36 = icmp ne i8* %35, null
  %37 = zext i1 %36 to i8
  %38 = icmp ne i8 %37, 0
  %39 = bitcast { i64, i64 }* %10 to %..string*
  store %..string zeroinitializer, %..string* %39, align 8
  %40 = load { i64, i64 }, { i64, i64 }* %10, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([74 x i8], [74 x i8]* @"csbs$2b2", i64 0, i64 0), i64 73 }, i32 22, i32 2, %..string { i8* getelementptr inbounds ([24 x i8], [24 x i8]* @"csbs$2b3", i64 0, i64 0), i64 23 } }, %runtime.Source_Code_Location* %11, align 8
  %41 = bitcast %runtime.Context* %18 to i8*
  call void @runtime.assert(i1 %38, { i64, i64 } %40, %runtime.Source_Code_Location* %11, i8* %41)
  %42 = load i64, i64* %8, align 8
  %43 = load %runtime.Raw_Dynamic_Array*, %runtime.Raw_Dynamic_Array** %9, align 8
  %44 = getelementptr inbounds %runtime.Raw_Dynamic_Array, %runtime.Raw_Dynamic_Array* %43, i32 0, i32 2
  %45 = load i64, i64* %44, align 8
  %46 = icmp sle i64 %42, %45
  %47 = zext i1 %46 to i8
  %48 = trunc i8 %47 to i1
  br i1 %48, label %if.then1, label %if.done2

if.then1:                                         ; preds = %if.done
  ret i8 1

if.done2:                                         ; preds = %if.done
  %49 = load %runtime.Raw_Dynamic_Array*, %runtime.Raw_Dynamic_Array** %9, align 8
  %50 = getelementptr inbounds %runtime.Raw_Dynamic_Array, %runtime.Raw_Dynamic_Array* %49, i32 0, i32 2
  %51 = load i64, i64* %50, align 8
  %52 = load i64, i64* %6, align 8
  %53 = mul i64 %51, %52
  store i64 %53, i64* %12, align 8
  %54 = load i64, i64* %8, align 8
  %55 = load i64, i64* %6, align 8
  %56 = mul i64 %54, %55
  store i64 %56, i64* %13, align 8
  %57 = load %runtime.Raw_Dynamic_Array*, %runtime.Raw_Dynamic_Array** %9, align 8
  %58 = getelementptr inbounds %runtime.Raw_Dynamic_Array, %runtime.Raw_Dynamic_Array* %57, i32 0, i32 3
  %59 = load %runtime.Allocator, %runtime.Allocator* %58, align 8
  store %runtime.Allocator %59, %runtime.Allocator* %14, align 8
  %60 = load %runtime.Raw_Dynamic_Array*, %runtime.Raw_Dynamic_Array** %9, align 8
  %61 = getelementptr inbounds %runtime.Raw_Dynamic_Array, %runtime.Raw_Dynamic_Array* %60, i32 0, i32 0
  %62 = load i8*, i8** %61, align 8
  %63 = load i64, i64* %12, align 8
  %64 = load i64, i64* %13, align 8
  %65 = load i64, i64* %7, align 8
  %66 = load %runtime.Allocator, %runtime.Allocator* %14, align 8
  %67 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %4, align 8
  %68 = bitcast %runtime.Allocator* %14 to { i64, i64 }*
  %69 = load { i64, i64 }, { i64, i64 }* %68, align 8
  %70 = bitcast { { i8*, i64 }, i8 }* %17 to i8*
  call void @llvm.memset.p0i8.i64(i8* %70, i8 0, i64 24, i1 false)
  %71 = bitcast %runtime.Context* %18 to i8*
  call void @runtime.mem_resize({ { i8*, i64 }, i8 }* sret %17, i8* %62, i64 %63, i64 %64, i64 %65, { i64, i64 } %69, %runtime.Source_Code_Location* %4, i8* %71)
  %72 = load { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %17, align 8
  %73 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %17, i32 0, i32 0
  %74 = load { i8*, i64 }, { i8*, i64 }* %73, align 8
  %75 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %17, i32 0, i32 1
  %76 = load i8, i8* %75, align 1
  store { i8*, i64 } %74, { i8*, i64 }* %15, align 8
  store i8 %76, i8* %16, align 1
  %77 = load i8, i8* %16, align 1
  %78 = icmp ne i8 %77, 0
  %79 = zext i1 %78 to i8
  %80 = trunc i8 %79 to i1
  br i1 %80, label %if.then3, label %if.done4

if.then3:                                         ; preds = %if.done2
  ret i8 0

if.done4:                                         ; preds = %if.done2
  %81 = load i64, i64* %6, align 8
  %82 = icmp eq i64 %81, 0
  %83 = zext i1 %82 to i8
  %84 = trunc i8 %83 to i1
  br i1 %84, label %if.then5, label %if.else

if.then5:                                         ; preds = %if.done4
  %85 = load %runtime.Raw_Dynamic_Array*, %runtime.Raw_Dynamic_Array** %9, align 8
  %86 = getelementptr inbounds %runtime.Raw_Dynamic_Array, %runtime.Raw_Dynamic_Array* %85, i32 0, i32 0
  %87 = load { i8*, i64 }, { i8*, i64 }* %15, align 8
  %88 = bitcast { i8*, i64 }* %15 to { i64, i64 }*
  %89 = load { i64, i64 }, { i64, i64 }* %88, align 8
  %90 = call i8* @runtime.raw_slice_data-46645({ i64, i64 } %89)
  store i8* %90, i8** %86, align 8
  %91 = load %runtime.Raw_Dynamic_Array*, %runtime.Raw_Dynamic_Array** %9, align 8
  %92 = getelementptr inbounds %runtime.Raw_Dynamic_Array, %runtime.Raw_Dynamic_Array* %91, i32 0, i32 2
  %93 = load i64, i64* %8, align 8
  store i64 %93, i64* %92, align 8
  ret i8 1

if.else:                                          ; preds = %if.done4
  %94 = load { i8*, i64 }, { i8*, i64 }* %15, align 8
  %95 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %15, i32 0, i32 0
  %96 = load i8*, i8** %95, align 8
  %97 = icmp ne i8* %96, null
  %98 = zext i1 %97 to i8
  %99 = trunc i8 %98 to i1
  br i1 %99, label %if.then6, label %if.done7

if.then6:                                         ; preds = %if.else
  %100 = load %runtime.Raw_Dynamic_Array*, %runtime.Raw_Dynamic_Array** %9, align 8
  %101 = getelementptr inbounds %runtime.Raw_Dynamic_Array, %runtime.Raw_Dynamic_Array* %100, i32 0, i32 0
  %102 = load { i8*, i64 }, { i8*, i64 }* %15, align 8
  %103 = bitcast { i8*, i64 }* %15 to { i64, i64 }*
  %104 = load { i64, i64 }, { i64, i64 }* %103, align 8
  %105 = call i8* @runtime.raw_slice_data-46645({ i64, i64 } %104)
  store i8* %105, i8** %101, align 8
  %106 = load %runtime.Raw_Dynamic_Array*, %runtime.Raw_Dynamic_Array** %9, align 8
  %107 = getelementptr inbounds %runtime.Raw_Dynamic_Array, %runtime.Raw_Dynamic_Array* %106, i32 0, i32 2
  %108 = load i64, i64* %8, align 8
  %109 = load { i8*, i64 }, { i8*, i64 }* %15, align 8
  %110 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %15, i32 0, i32 1
  %111 = load i64, i64* %110, align 8
  %112 = load i64, i64* %6, align 8
  %113 = sdiv i64 %111, %112
  %114 = icmp slt i64 %108, %113
  %115 = select i1 %114, i64 %108, i64 %113
  store i64 %115, i64* %107, align 8
  ret i8 1

if.done7:                                         ; preds = %if.else
  br label %if.done8

if.done8:                                         ; preds = %if.done7
  ret i8 0
}

define internal i64 @runtime.__dynamic_array_append_nothing(i8* %0, i64 %1, i64 %2, %runtime.Source_Code_Location* %3, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %4 = alloca i8*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca %runtime.Raw_Dynamic_Array*, align 8
  %8 = alloca i8, align 1
  %9 = alloca i64, align 8
  %10 = alloca { i64, i64 }, align 8
  %11 = alloca %runtime.Source_Code_Location, align 8
  %12 = alloca i64, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i8* %0, i8** %4, align 8
  store i64 %1, i64* %5, align 8
  store i64 %2, i64* %6, align 8
  %13 = bitcast i8* %__.context_ptr to %runtime.Context*
  %14 = load i8*, i8** %4, align 8
  %15 = bitcast i8* %14 to %runtime.Raw_Dynamic_Array*
  store %runtime.Raw_Dynamic_Array* %15, %runtime.Raw_Dynamic_Array** %7, align 8
  store i8 1, i8* %8, align 1
  %16 = load %runtime.Raw_Dynamic_Array*, %runtime.Raw_Dynamic_Array** %7, align 8
  %17 = getelementptr inbounds %runtime.Raw_Dynamic_Array, %runtime.Raw_Dynamic_Array* %16, i32 0, i32 2
  %18 = load i64, i64* %17, align 8
  %19 = load %runtime.Raw_Dynamic_Array*, %runtime.Raw_Dynamic_Array** %7, align 8
  %20 = getelementptr inbounds %runtime.Raw_Dynamic_Array, %runtime.Raw_Dynamic_Array* %19, i32 0, i32 1
  %21 = load i64, i64* %20, align 8
  %22 = add i64 %21, 1
  %23 = icmp slt i64 %18, %22
  %24 = zext i1 %23 to i8
  %25 = trunc i8 %24 to i1
  br i1 %25, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  %26 = load %runtime.Raw_Dynamic_Array*, %runtime.Raw_Dynamic_Array** %7, align 8
  %27 = getelementptr inbounds %runtime.Raw_Dynamic_Array, %runtime.Raw_Dynamic_Array* %26, i32 0, i32 2
  %28 = load i64, i64* %27, align 8
  %29 = mul i64 2, %28
  %30 = add i64 %29, 8
  store i64 %30, i64* %9, align 8
  %31 = load %runtime.Raw_Dynamic_Array*, %runtime.Raw_Dynamic_Array** %7, align 8
  %32 = load i64, i64* %5, align 8
  %33 = load i64, i64* %6, align 8
  %34 = load i64, i64* %9, align 8
  %35 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %3, align 8
  %36 = bitcast %runtime.Raw_Dynamic_Array* %31 to i8*
  %37 = bitcast %runtime.Context* %13 to i8*
  %38 = call i8 @runtime.__dynamic_array_reserve(i8* %36, i64 %32, i64 %33, i64 %34, %runtime.Source_Code_Location* %3, i8* %37)
  store i8 %38, i8* %8, align 1
  br label %if.done

if.done:                                          ; preds = %if.then, %entry
  %39 = load i8, i8* %8, align 1
  %40 = trunc i8 %39 to i1
  br i1 %40, label %if.done2, label %if.then1

if.then1:                                         ; preds = %if.done
  %41 = load %runtime.Raw_Dynamic_Array*, %runtime.Raw_Dynamic_Array** %7, align 8
  %42 = getelementptr inbounds %runtime.Raw_Dynamic_Array, %runtime.Raw_Dynamic_Array* %41, i32 0, i32 1
  %43 = load i64, i64* %42, align 8
  ret i64 %43

if.done2:                                         ; preds = %if.done
  %44 = load %runtime.Raw_Dynamic_Array*, %runtime.Raw_Dynamic_Array** %7, align 8
  %45 = getelementptr inbounds %runtime.Raw_Dynamic_Array, %runtime.Raw_Dynamic_Array* %44, i32 0, i32 0
  %46 = load i8*, i8** %45, align 8
  %47 = icmp ne i8* %46, null
  %48 = zext i1 %47 to i8
  %49 = icmp ne i8 %48, 0
  %50 = bitcast { i64, i64 }* %10 to %..string*
  store %..string zeroinitializer, %..string* %50, align 8
  %51 = load { i64, i64 }, { i64, i64 }* %10, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([74 x i8], [74 x i8]* @"csbs$2b2", i64 0, i64 0), i64 73 }, i32 131, i32 2, %..string { i8* getelementptr inbounds ([31 x i8], [31 x i8]* @"csbs$2b4", i64 0, i64 0), i64 30 } }, %runtime.Source_Code_Location* %11, align 8
  %52 = bitcast %runtime.Context* %13 to i8*
  call void @runtime.assert(i1 %49, { i64, i64 } %51, %runtime.Source_Code_Location* %11, i8* %52)
  %53 = load %runtime.Raw_Dynamic_Array*, %runtime.Raw_Dynamic_Array** %7, align 8
  %54 = getelementptr inbounds %runtime.Raw_Dynamic_Array, %runtime.Raw_Dynamic_Array* %53, i32 0, i32 0
  %55 = load i8*, i8** %54, align 8
  %56 = ptrtoint i8* %55 to i64
  %57 = load i64, i64* %5, align 8
  %58 = load %runtime.Raw_Dynamic_Array*, %runtime.Raw_Dynamic_Array** %7, align 8
  %59 = getelementptr inbounds %runtime.Raw_Dynamic_Array, %runtime.Raw_Dynamic_Array* %58, i32 0, i32 1
  %60 = load i64, i64* %59, align 8
  %61 = mul i64 %57, %60
  %62 = add i64 %56, %61
  store i64 %62, i64* %12, align 8
  %63 = load i64, i64* %12, align 8
  %64 = inttoptr i64 %63 to i8*
  %65 = load i64, i64* %5, align 8
  %66 = call i8* @runtime.mem_zero(i8* %64, i64 %65)
  %67 = load %runtime.Raw_Dynamic_Array*, %runtime.Raw_Dynamic_Array** %7, align 8
  %68 = getelementptr inbounds %runtime.Raw_Dynamic_Array, %runtime.Raw_Dynamic_Array* %67, i32 0, i32 1
  %69 = load i64, i64* %68, align 8
  %70 = add i64 %69, 1
  store i64 %70, i64* %68, align 8
  %71 = load %runtime.Raw_Dynamic_Array*, %runtime.Raw_Dynamic_Array** %7, align 8
  %72 = getelementptr inbounds %runtime.Raw_Dynamic_Array, %runtime.Raw_Dynamic_Array* %71, i32 0, i32 1
  %73 = load i64, i64* %72, align 8
  ret i64 %73
}

define internal { i64, i64 } @runtime.__get_map_hash_from_entry(%runtime.Map_Header* %0, %runtime.Map_Entry_Header* %1) {
decls:
  %2 = alloca %runtime.Map_Entry_Header*, align 8
  %3 = alloca %runtime.Map_Hash, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %runtime.Map_Entry_Header* %1, %runtime.Map_Entry_Header** %2, align 8
  %4 = bitcast %runtime.Map_Hash* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* %4, i8 0, i64 16, i1 false)
  %5 = getelementptr inbounds %runtime.Map_Hash, %runtime.Map_Hash* %3, i32 0, i32 0
  %6 = load %runtime.Map_Entry_Header*, %runtime.Map_Entry_Header** %2, align 8
  %7 = getelementptr inbounds %runtime.Map_Entry_Header, %runtime.Map_Entry_Header* %6, i32 0, i32 0
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %5, align 8
  %9 = getelementptr inbounds %runtime.Map_Hash, %runtime.Map_Hash* %3, i32 0, i32 1
  %10 = load %runtime.Map_Entry_Header*, %runtime.Map_Entry_Header** %2, align 8
  %11 = ptrtoint %runtime.Map_Entry_Header* %10 to i64
  %12 = getelementptr inbounds %runtime.Map_Header, %runtime.Map_Header* %0, i32 0, i32 4
  %13 = load i64, i64* %12, align 8
  %14 = add i64 %11, %13
  %15 = inttoptr i64 %14 to i8*
  store i8* %15, i8** %9, align 8
  %16 = load %runtime.Map_Hash, %runtime.Map_Hash* %3, align 8
  store %runtime.Map_Hash %16, %runtime.Map_Hash* %3, align 8
  %17 = bitcast %runtime.Map_Hash* %3 to { i64, i64 }*
  %18 = load { i64, i64 }, { i64, i64 }* %17, align 8
  ret { i64, i64 } %18
}

define internal i64 @runtime.default_hasher8(i8* %0, i64 %1) {
decls:
  %2 = alloca i8*, align 8
  %3 = alloca i64, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i8* %0, i8** %2, align 8
  store i64 %1, i64* %3, align 8
  %4 = load i8*, i8** %2, align 8
  %5 = load i64, i64* %3, align 8
  %6 = call i64 @runtime._default_hasher_const-46807(i8* %4, i64 %5) #4
  ret i64 %6
}

define internal void @runtime.__get_map_header_runtime(%runtime.Map_Header* noalias sret %agg.result, %runtime.Raw_Map* %0, %runtime.Type_Info_Map* %1) {
decls:
  %2 = alloca %runtime.Raw_Map*, align 8
  %3 = alloca %runtime.Map_Header, align 8
  %4 = alloca %runtime.Map_Header, align 8
  %5 = alloca %runtime.Type_Info*, align 8
  %6 = alloca %runtime.Type_Info_Struct, align 8
  %7 = alloca { %runtime.Type_Info_Struct, i8 }, align 8
  %8 = alloca { i64, i64 }, align 8
  %9 = alloca { i64, i64 }, align 8
  %10 = alloca %runtime.Type_Info*, align 8
  %11 = alloca %runtime.Type_Info_Dynamic_Array, align 8
  %12 = alloca { %runtime.Type_Info_Dynamic_Array, i8 }, align 8
  %13 = alloca { i64, i64 }, align 8
  %14 = alloca %runtime.Type_Info_Struct, align 8
  %15 = alloca { %runtime.Type_Info_Struct, i8 }, align 8
  %16 = alloca { i64, i64 }, align 8
  %17 = alloca { i64, i64 }, align 8
  %18 = alloca { i64, i64 }, align 8
  %19 = alloca { i64, i64 }, align 8
  %20 = alloca { i64, i64 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %runtime.Raw_Map* %0, %runtime.Raw_Map** %2, align 8
  %21 = bitcast %runtime.Map_Header* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* %21, i8 0, i64 64, i1 false)
  %22 = bitcast %runtime.Map_Header* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* %22, i8 0, i64 64, i1 false)
  %23 = load %runtime.Raw_Map*, %runtime.Raw_Map** %2, align 8
  %24 = getelementptr inbounds %runtime.Map_Header, %runtime.Map_Header* %4, i32 0, i32 0
  store %runtime.Raw_Map* %23, %runtime.Raw_Map** %24, align 8
  %25 = load %runtime.Map_Header, %runtime.Map_Header* %4, align 8
  store %runtime.Map_Header %25, %runtime.Map_Header* %3, align 8
  %26 = getelementptr inbounds %runtime.Map_Header, %runtime.Map_Header* %3, i32 0, i32 1
  %27 = getelementptr inbounds %runtime.Type_Info_Map, %runtime.Type_Info_Map* %1, i32 0, i32 3
  %28 = load i8*, i8** %27, align 8
  store i8* %28, i8** %26, align 8
  %29 = getelementptr inbounds %runtime.Type_Info_Map, %runtime.Type_Info_Map* %1, i32 0, i32 2
  %30 = load %runtime.Type_Info*, %runtime.Type_Info** %29, align 8
  %31 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %30, i32 0, i32 5
  %32 = load { [15 x i64], i64 }, { [15 x i64], i64 }* %31, align 8
  %33 = bitcast %runtime.Type_Info_Struct* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* %33, i8 0, i64 120, i1 false)
  %34 = getelementptr inbounds %runtime.Type_Info_Map, %runtime.Type_Info_Map* %1, i32 0, i32 2
  %35 = load %runtime.Type_Info*, %runtime.Type_Info** %34, align 8
  %36 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %35, i32 0, i32 5
  %37 = load { [15 x i64], i64 }, { [15 x i64], i64 }* %36, align 8
  %38 = bitcast { %runtime.Type_Info_Struct, i8 }* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* %38, i8 0, i64 128, i1 false)
  %39 = getelementptr inbounds { %runtime.Type_Info_Struct, i8 }, { %runtime.Type_Info_Struct, i8 }* %7, i32 0, i32 0
  %40 = getelementptr inbounds { %runtime.Type_Info_Struct, i8 }, { %runtime.Type_Info_Struct, i8 }* %7, i32 0, i32 1
  %41 = getelementptr inbounds { [15 x i64], i64 }, { [15 x i64], i64 }* %36, i32 0, i32 1
  %42 = load i64, i64* %41, align 8
  %43 = icmp eq i64 %42, 19
  br i1 %43, label %union_cast.ok, label %union_cast.end

union_cast.ok:                                    ; preds = %entry
  %44 = bitcast { [15 x i64], i64 }* %36 to %runtime.Type_Info_Struct*
  %45 = load %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %44, align 8
  %46 = bitcast %runtime.Type_Info_Struct* %39 to i8*
  %47 = bitcast %runtime.Type_Info_Struct* %44 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %46, i8* align 1 %47, i64 120, i1 false)
  store i8 1, i8* %40, align 1
  br label %union_cast.end

union_cast.end:                                   ; preds = %union_cast.ok, %entry
  %48 = getelementptr inbounds { %runtime.Type_Info_Struct, i8 }, { %runtime.Type_Info_Struct, i8 }* %7, i32 0, i32 1
  %49 = load i8, i8* %48, align 1
  %50 = bitcast { [15 x i64], i64 }* %36 to i8*
  %51 = icmp ne i8 %49, 0
  %52 = bitcast { i64, i64 }* %8 to %..string*
  store %..string { i8* getelementptr inbounds ([72 x i8], [72 x i8]* @"csbs$2b5", i64 0, i64 0), i64 71 }, %..string* %52, align 8
  %53 = load { i64, i64 }, { i64, i64 }* %8, align 8
  call void @runtime.type_assertion_check2(i1 %51, { i64, i64 } %53, i32 169, i32 33, i64 1369094286720630797, i64 3602879701896396869, i8* %50)
  %54 = getelementptr inbounds { %runtime.Type_Info_Struct, i8 }, { %runtime.Type_Info_Struct, i8 }* %7, i32 0, i32 0
  %55 = load %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %54, align 8
  %56 = bitcast %runtime.Type_Info_Struct* %6 to i8*
  %57 = bitcast %runtime.Type_Info_Struct* %54 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %56, i8* align 1 %57, i64 120, i1 false)
  %58 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %6, i32 0, i32 0
  %59 = load { %runtime.Type_Info**, i64 }, { %runtime.Type_Info**, i64 }* %58, align 8
  %60 = getelementptr inbounds { %runtime.Type_Info**, i64 }, { %runtime.Type_Info**, i64 }* %58, i32 0, i32 0
  %61 = load %runtime.Type_Info**, %runtime.Type_Info*** %60, align 8
  %62 = getelementptr inbounds { %runtime.Type_Info**, i64 }, { %runtime.Type_Info**, i64 }* %58, i32 0, i32 1
  %63 = load i64, i64* %62, align 8
  %64 = bitcast { i64, i64 }* %9 to %..string*
  store %..string { i8* getelementptr inbounds ([72 x i8], [72 x i8]* @"csbs$2b5", i64 0, i64 0), i64 71 }, %..string* %64, align 8
  %65 = load { i64, i64 }, { i64, i64 }* %9, align 8
  call void @runtime.bounds_check_error({ i64, i64 } %65, i32 169, i32 66, i64 1, i64 %63)
  %66 = getelementptr %runtime.Type_Info*, %runtime.Type_Info** %61, i64 1
  %67 = load %runtime.Type_Info*, %runtime.Type_Info** %66, align 8
  store %runtime.Type_Info* %67, %runtime.Type_Info** %5, align 8
  %68 = load %runtime.Type_Info*, %runtime.Type_Info** %5, align 8
  %69 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %68, i32 0, i32 5
  %70 = load { [15 x i64], i64 }, { [15 x i64], i64 }* %69, align 8
  %71 = load %runtime.Type_Info*, %runtime.Type_Info** %5, align 8
  %72 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %71, i32 0, i32 5
  %73 = load { [15 x i64], i64 }, { [15 x i64], i64 }* %72, align 8
  %74 = bitcast { %runtime.Type_Info_Dynamic_Array, i8 }* %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* %74, i8 0, i64 24, i1 false)
  %75 = getelementptr inbounds { %runtime.Type_Info_Dynamic_Array, i8 }, { %runtime.Type_Info_Dynamic_Array, i8 }* %12, i32 0, i32 0
  %76 = getelementptr inbounds { %runtime.Type_Info_Dynamic_Array, i8 }, { %runtime.Type_Info_Dynamic_Array, i8 }* %12, i32 0, i32 1
  %77 = getelementptr inbounds { [15 x i64], i64 }, { [15 x i64], i64 }* %72, i32 0, i32 1
  %78 = load i64, i64* %77, align 8
  %79 = icmp eq i64 %78, 16
  br i1 %79, label %union_cast.ok1, label %union_cast.end2

union_cast.ok1:                                   ; preds = %union_cast.end
  %80 = bitcast { [15 x i64], i64 }* %72 to %runtime.Type_Info_Dynamic_Array*
  %81 = load %runtime.Type_Info_Dynamic_Array, %runtime.Type_Info_Dynamic_Array* %80, align 8
  store %runtime.Type_Info_Dynamic_Array %81, %runtime.Type_Info_Dynamic_Array* %75, align 8
  store i8 1, i8* %76, align 1
  br label %union_cast.end2

union_cast.end2:                                  ; preds = %union_cast.ok1, %union_cast.end
  %82 = getelementptr inbounds { %runtime.Type_Info_Dynamic_Array, i8 }, { %runtime.Type_Info_Dynamic_Array, i8 }* %12, i32 0, i32 1
  %83 = load i8, i8* %82, align 1
  %84 = bitcast { [15 x i64], i64 }* %72 to i8*
  %85 = icmp ne i8 %83, 0
  %86 = bitcast { i64, i64 }* %13 to %..string*
  store %..string { i8* getelementptr inbounds ([72 x i8], [72 x i8]* @"csbs$2b5", i64 0, i64 0), i64 71 }, %..string* %86, align 8
  %87 = load { i64, i64 }, { i64, i64 }* %13, align 8
  call void @runtime.type_assertion_check2(i1 %85, { i64, i64 } %87, i32 170, i32 19, i64 1369094286720630797, i64 3602879701896396860, i8* %84)
  %88 = getelementptr inbounds { %runtime.Type_Info_Dynamic_Array, i8 }, { %runtime.Type_Info_Dynamic_Array, i8 }* %12, i32 0, i32 0
  %89 = load %runtime.Type_Info_Dynamic_Array, %runtime.Type_Info_Dynamic_Array* %88, align 8
  store %runtime.Type_Info_Dynamic_Array %89, %runtime.Type_Info_Dynamic_Array* %11, align 8
  %90 = getelementptr inbounds %runtime.Type_Info_Dynamic_Array, %runtime.Type_Info_Dynamic_Array* %11, i32 0, i32 0
  %91 = load %runtime.Type_Info*, %runtime.Type_Info** %90, align 8
  store %runtime.Type_Info* %91, %runtime.Type_Info** %10, align 8
  %92 = bitcast %runtime.Type_Info_Struct* %14 to i8*
  call void @llvm.memset.p0i8.i64(i8* %92, i8 0, i64 120, i1 false)
  %93 = load %runtime.Type_Info*, %runtime.Type_Info** %10, align 8
  %94 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %93, i32 0, i32 5
  %95 = load { [15 x i64], i64 }, { [15 x i64], i64 }* %94, align 8
  %96 = bitcast { %runtime.Type_Info_Struct, i8 }* %15 to i8*
  call void @llvm.memset.p0i8.i64(i8* %96, i8 0, i64 128, i1 false)
  %97 = getelementptr inbounds { %runtime.Type_Info_Struct, i8 }, { %runtime.Type_Info_Struct, i8 }* %15, i32 0, i32 0
  %98 = getelementptr inbounds { %runtime.Type_Info_Struct, i8 }, { %runtime.Type_Info_Struct, i8 }* %15, i32 0, i32 1
  %99 = getelementptr inbounds { [15 x i64], i64 }, { [15 x i64], i64 }* %94, i32 0, i32 1
  %100 = load i64, i64* %99, align 8
  %101 = icmp eq i64 %100, 19
  br i1 %101, label %union_cast.ok3, label %union_cast.end4

union_cast.ok3:                                   ; preds = %union_cast.end2
  %102 = bitcast { [15 x i64], i64 }* %94 to %runtime.Type_Info_Struct*
  %103 = load %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %102, align 8
  %104 = bitcast %runtime.Type_Info_Struct* %97 to i8*
  %105 = bitcast %runtime.Type_Info_Struct* %102 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %104, i8* align 1 %105, i64 120, i1 false)
  store i8 1, i8* %98, align 1
  br label %union_cast.end4

union_cast.end4:                                  ; preds = %union_cast.ok3, %union_cast.end2
  %106 = getelementptr inbounds { %runtime.Type_Info_Struct, i8 }, { %runtime.Type_Info_Struct, i8 }* %15, i32 0, i32 1
  %107 = load i8, i8* %106, align 1
  %108 = bitcast { [15 x i64], i64 }* %94 to i8*
  %109 = icmp ne i8 %107, 0
  %110 = bitcast { i64, i64 }* %16 to %..string*
  store %..string { i8* getelementptr inbounds ([72 x i8], [72 x i8]* @"csbs$2b5", i64 0, i64 0), i64 71 }, %..string* %110, align 8
  %111 = load { i64, i64 }, { i64, i64 }* %16, align 8
  call void @runtime.type_assertion_check2(i1 %109, { i64, i64 } %111, i32 171, i32 13, i64 1369094286720630797, i64 3602879701896396869, i8* %108)
  %112 = getelementptr inbounds { %runtime.Type_Info_Struct, i8 }, { %runtime.Type_Info_Struct, i8 }* %15, i32 0, i32 0
  %113 = load %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %112, align 8
  %114 = bitcast %runtime.Type_Info_Struct* %14 to i8*
  %115 = bitcast %runtime.Type_Info_Struct* %112 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %114, i8* align 1 %115, i64 120, i1 false)
  %116 = getelementptr inbounds %runtime.Map_Header, %runtime.Map_Header* %3, i32 0, i32 2
  %117 = load %runtime.Type_Info*, %runtime.Type_Info** %10, align 8
  %118 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %117, i32 0, i32 0
  %119 = load i64, i64* %118, align 8
  store i64 %119, i64* %116, align 8
  %120 = getelementptr inbounds %runtime.Map_Header, %runtime.Map_Header* %3, i32 0, i32 3
  %121 = load %runtime.Type_Info*, %runtime.Type_Info** %10, align 8
  %122 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %121, i32 0, i32 1
  %123 = load i64, i64* %122, align 8
  store i64 %123, i64* %120, align 8
  %124 = getelementptr inbounds %runtime.Map_Header, %runtime.Map_Header* %3, i32 0, i32 4
  %125 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %14, i32 0, i32 2
  %126 = load { i64*, i64 }, { i64*, i64 }* %125, align 8
  %127 = getelementptr inbounds { i64*, i64 }, { i64*, i64 }* %125, i32 0, i32 0
  %128 = load i64*, i64** %127, align 8
  %129 = getelementptr inbounds { i64*, i64 }, { i64*, i64 }* %125, i32 0, i32 1
  %130 = load i64, i64* %129, align 8
  %131 = bitcast { i64, i64 }* %17 to %..string*
  store %..string { i8* getelementptr inbounds ([72 x i8], [72 x i8]* @"csbs$2b5", i64 0, i64 0), i64 71 }, %..string* %131, align 8
  %132 = load { i64, i64 }, { i64, i64 }* %17, align 8
  call void @runtime.bounds_check_error({ i64, i64 } %132, i32 176, i32 35, i64 2, i64 %130)
  %133 = getelementptr i64, i64* %128, i64 2
  %134 = load i64, i64* %133, align 8
  store i64 %134, i64* %124, align 8
  %135 = getelementptr inbounds %runtime.Map_Header, %runtime.Map_Header* %3, i32 0, i32 5
  %136 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %14, i32 0, i32 0
  %137 = load { %runtime.Type_Info**, i64 }, { %runtime.Type_Info**, i64 }* %136, align 8
  %138 = getelementptr inbounds { %runtime.Type_Info**, i64 }, { %runtime.Type_Info**, i64 }* %136, i32 0, i32 0
  %139 = load %runtime.Type_Info**, %runtime.Type_Info*** %138, align 8
  %140 = getelementptr inbounds { %runtime.Type_Info**, i64 }, { %runtime.Type_Info**, i64 }* %136, i32 0, i32 1
  %141 = load i64, i64* %140, align 8
  %142 = bitcast { i64, i64 }* %18 to %..string*
  store %..string { i8* getelementptr inbounds ([72 x i8], [72 x i8]* @"csbs$2b5", i64 0, i64 0), i64 71 }, %..string* %142, align 8
  %143 = load { i64, i64 }, { i64, i64 }* %18, align 8
  call void @runtime.bounds_check_error({ i64, i64 } %143, i32 177, i32 33, i64 2, i64 %141)
  %144 = getelementptr %runtime.Type_Info*, %runtime.Type_Info** %139, i64 2
  %145 = load %runtime.Type_Info*, %runtime.Type_Info** %144, align 8
  %146 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %145, i32 0, i32 0
  %147 = load i64, i64* %146, align 8
  store i64 %147, i64* %135, align 8
  %148 = getelementptr inbounds %runtime.Map_Header, %runtime.Map_Header* %3, i32 0, i32 6
  %149 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %14, i32 0, i32 2
  %150 = load { i64*, i64 }, { i64*, i64 }* %149, align 8
  %151 = getelementptr inbounds { i64*, i64 }, { i64*, i64 }* %149, i32 0, i32 0
  %152 = load i64*, i64** %151, align 8
  %153 = getelementptr inbounds { i64*, i64 }, { i64*, i64 }* %149, i32 0, i32 1
  %154 = load i64, i64* %153, align 8
  %155 = bitcast { i64, i64 }* %19 to %..string*
  store %..string { i8* getelementptr inbounds ([72 x i8], [72 x i8]* @"csbs$2b5", i64 0, i64 0), i64 71 }, %..string* %155, align 8
  %156 = load { i64, i64 }, { i64, i64 }* %19, align 8
  call void @runtime.bounds_check_error({ i64, i64 } %156, i32 179, i32 35, i64 3, i64 %154)
  %157 = getelementptr i64, i64* %152, i64 3
  %158 = load i64, i64* %157, align 8
  store i64 %158, i64* %148, align 8
  %159 = getelementptr inbounds %runtime.Map_Header, %runtime.Map_Header* %3, i32 0, i32 7
  %160 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %14, i32 0, i32 0
  %161 = load { %runtime.Type_Info**, i64 }, { %runtime.Type_Info**, i64 }* %160, align 8
  %162 = getelementptr inbounds { %runtime.Type_Info**, i64 }, { %runtime.Type_Info**, i64 }* %160, i32 0, i32 0
  %163 = load %runtime.Type_Info**, %runtime.Type_Info*** %162, align 8
  %164 = getelementptr inbounds { %runtime.Type_Info**, i64 }, { %runtime.Type_Info**, i64 }* %160, i32 0, i32 1
  %165 = load i64, i64* %164, align 8
  %166 = bitcast { i64, i64 }* %20 to %..string*
  store %..string { i8* getelementptr inbounds ([72 x i8], [72 x i8]* @"csbs$2b5", i64 0, i64 0), i64 71 }, %..string* %166, align 8
  %167 = load { i64, i64 }, { i64, i64 }* %20, align 8
  call void @runtime.bounds_check_error({ i64, i64 } %167, i32 180, i32 33, i64 3, i64 %165)
  %168 = getelementptr %runtime.Type_Info*, %runtime.Type_Info** %163, i64 3
  %169 = load %runtime.Type_Info*, %runtime.Type_Info** %168, align 8
  %170 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %169, i32 0, i32 0
  %171 = load i64, i64* %170, align 8
  store i64 %171, i64* %159, align 8
  %172 = load %runtime.Map_Header, %runtime.Map_Header* %3, align 8
  %173 = bitcast %runtime.Map_Header* %agg.result to i8*
  %174 = bitcast %runtime.Map_Header* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %173, i8* %174, i64 64, i1 false)
  ret void
}

define internal void @runtime.__dynamic_map_reset_entries(%runtime.Map_Header* %0, %runtime.Source_Code_Location* %1, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca { i64, i64 }, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca %runtime.Map_Entry_Header*, align 8
  %12 = alloca %runtime.Map_Hash, align 8
  %13 = alloca %runtime.Map_Hash, align 8
  %14 = alloca %runtime.Map_Find_Result, align 8
  %15 = alloca %runtime.Map_Find_Result, align 8
  %16 = alloca { i64, i64 }, align 8
  %17 = alloca %runtime.Map_Entry_Header*, align 8
  br label %entry

entry:                                            ; preds = %decls
  %18 = bitcast i8* %__.context_ptr to %runtime.Context*
  store i64 0, i64* %2, align 8
  store i64 0, i64* %3, align 8
  store i64 0, i64* %4, align 8
  br label %for.interval.loop

for.interval.loop:                                ; preds = %for.interval.post, %entry
  %19 = getelementptr inbounds %runtime.Map_Header, %runtime.Map_Header* %0, i32 0, i32 0
  %20 = load %runtime.Raw_Map*, %runtime.Raw_Map** %19, align 8
  %21 = getelementptr inbounds %runtime.Raw_Map, %runtime.Raw_Map* %20, i32 0, i32 0
  %22 = load { i64*, i64 }, { i64*, i64 }* %21, align 8
  %23 = getelementptr inbounds { i64*, i64 }, { i64*, i64 }* %21, i32 0, i32 1
  %24 = load i64, i64* %23, align 8
  %25 = load i64, i64* %3, align 8
  %26 = icmp slt i64 %25, %24
  br i1 %26, label %for.interval.body, label %for.interval.done

for.interval.body:                                ; preds = %for.interval.loop
  %27 = load i64, i64* %3, align 8
  %28 = load i64, i64* %4, align 8
  store i64 %27, i64* %5, align 8
  %29 = getelementptr inbounds %runtime.Map_Header, %runtime.Map_Header* %0, i32 0, i32 0
  %30 = load %runtime.Raw_Map*, %runtime.Raw_Map** %29, align 8
  %31 = getelementptr inbounds %runtime.Raw_Map, %runtime.Raw_Map* %30, i32 0, i32 0
  %32 = load { i64*, i64 }, { i64*, i64 }* %31, align 8
  %33 = getelementptr inbounds { i64*, i64 }, { i64*, i64 }* %31, i32 0, i32 0
  %34 = load i64*, i64** %33, align 8
  %35 = load i64, i64* %5, align 8
  %36 = getelementptr inbounds { i64*, i64 }, { i64*, i64 }* %31, i32 0, i32 1
  %37 = load i64, i64* %36, align 8
  %38 = bitcast { i64, i64 }* %6 to %..string*
  store %..string { i8* getelementptr inbounds ([72 x i8], [72 x i8]* @"csbs$2b5", i64 0, i64 0), i64 71 }, %..string* %38, align 8
  %39 = load { i64, i64 }, { i64, i64 }* %6, align 8
  call void @runtime.bounds_check_error({ i64, i64 } %39, i32 210, i32 12, i64 %35, i64 %37)
  %40 = getelementptr i64, i64* %34, i64 %35
  store i64 -1, i64* %40, align 8
  br label %for.interval.post

for.interval.post:                                ; preds = %for.interval.body
  %41 = load i64, i64* %3, align 8
  %42 = add i64 %41, 1
  store i64 %42, i64* %3, align 8
  %43 = load i64, i64* %4, align 8
  %44 = add i64 %43, 1
  store i64 %44, i64* %4, align 8
  br label %for.interval.loop

for.interval.done:                                ; preds = %for.interval.loop
  store i64 0, i64* %7, align 8
  store i64 0, i64* %8, align 8
  store i64 0, i64* %9, align 8
  br label %for.interval.loop1

for.interval.loop1:                               ; preds = %for.interval.post3, %for.interval.done
  %45 = getelementptr inbounds %runtime.Map_Header, %runtime.Map_Header* %0, i32 0, i32 0
  %46 = load %runtime.Raw_Map*, %runtime.Raw_Map** %45, align 8
  %47 = getelementptr inbounds %runtime.Raw_Map, %runtime.Raw_Map* %46, i32 0, i32 1
  %48 = getelementptr inbounds %runtime.Raw_Dynamic_Array, %runtime.Raw_Dynamic_Array* %47, i32 0, i32 1
  %49 = load i64, i64* %48, align 8
  %50 = load i64, i64* %8, align 8
  %51 = icmp slt i64 %50, %49
  br i1 %51, label %for.interval.body2, label %for.interval.done4

for.interval.body2:                               ; preds = %for.interval.loop1
  %52 = load i64, i64* %8, align 8
  %53 = load i64, i64* %9, align 8
  store i64 %52, i64* %10, align 8
  %54 = load %runtime.Map_Header, %runtime.Map_Header* %0, align 8
  %55 = load i64, i64* %10, align 8
  %56 = bitcast %runtime.Context* %18 to i8*
  %57 = call %runtime.Map_Entry_Header* @runtime.__dynamic_map_get_entry(%runtime.Map_Header* %0, i64 %55, i8* %56)
  store %runtime.Map_Entry_Header* %57, %runtime.Map_Entry_Header** %11, align 8
  %58 = load %runtime.Map_Header, %runtime.Map_Header* %0, align 8
  %59 = load %runtime.Map_Entry_Header*, %runtime.Map_Entry_Header** %11, align 8
  %60 = call { i64, i64 } @runtime.__get_map_hash_from_entry(%runtime.Map_Header* %0, %runtime.Map_Entry_Header* %59)
  %61 = bitcast %runtime.Map_Hash* %13 to { i64, i64 }*
  store { i64, i64 } %60, { i64, i64 }* %61, align 8
  %62 = load %runtime.Map_Hash, %runtime.Map_Hash* %13, align 8
  store %runtime.Map_Hash %62, %runtime.Map_Hash* %12, align 8
  %63 = load %runtime.Map_Entry_Header*, %runtime.Map_Entry_Header** %11, align 8
  %64 = getelementptr inbounds %runtime.Map_Entry_Header, %runtime.Map_Entry_Header* %63, i32 0, i32 1
  store i64 -1, i64* %64, align 8
  %65 = load %runtime.Map_Header, %runtime.Map_Header* %0, align 8
  %66 = load %runtime.Map_Hash, %runtime.Map_Hash* %12, align 8
  %67 = bitcast %runtime.Map_Hash* %12 to { i64, i64 }*
  %68 = load { i64, i64 }, { i64, i64 }* %67, align 8
  %69 = bitcast %runtime.Map_Find_Result* %15 to i8*
  call void @llvm.memset.p0i8.i64(i8* %69, i8 0, i64 24, i1 false)
  %70 = bitcast %runtime.Context* %18 to i8*
  call void @runtime.__dynamic_map_find(%runtime.Map_Find_Result* sret %15, %runtime.Map_Header* %0, { i64, i64 } %68, i8* %70)
  %71 = load %runtime.Map_Find_Result, %runtime.Map_Find_Result* %15, align 8
  store %runtime.Map_Find_Result %71, %runtime.Map_Find_Result* %14, align 8
  %72 = getelementptr inbounds %runtime.Map_Find_Result, %runtime.Map_Find_Result* %14, i32 0, i32 1
  %73 = load i64, i64* %72, align 8
  %74 = icmp slt i64 %73, 0
  %75 = zext i1 %74 to i8
  %76 = trunc i8 %75 to i1
  br i1 %76, label %if.then, label %if.else

if.then:                                          ; preds = %for.interval.body2
  %77 = getelementptr inbounds %runtime.Map_Header, %runtime.Map_Header* %0, i32 0, i32 0
  %78 = load %runtime.Raw_Map*, %runtime.Raw_Map** %77, align 8
  %79 = getelementptr inbounds %runtime.Raw_Map, %runtime.Raw_Map* %78, i32 0, i32 0
  %80 = load { i64*, i64 }, { i64*, i64 }* %79, align 8
  %81 = getelementptr inbounds { i64*, i64 }, { i64*, i64 }* %79, i32 0, i32 0
  %82 = load i64*, i64** %81, align 8
  %83 = getelementptr inbounds %runtime.Map_Find_Result, %runtime.Map_Find_Result* %14, i32 0, i32 0
  %84 = load i64, i64* %83, align 8
  %85 = getelementptr inbounds { i64*, i64 }, { i64*, i64 }* %79, i32 0, i32 1
  %86 = load i64, i64* %85, align 8
  %87 = bitcast { i64, i64 }* %16 to %..string*
  store %..string { i8* getelementptr inbounds ([72 x i8], [72 x i8]* @"csbs$2b5", i64 0, i64 0), i64 71 }, %..string* %87, align 8
  %88 = load { i64, i64 }, { i64, i64 }* %16, align 8
  call void @runtime.bounds_check_error({ i64, i64 } %88, i32 220, i32 16, i64 %84, i64 %86)
  %89 = getelementptr i64, i64* %82, i64 %84
  %90 = load i64, i64* %10, align 8
  store i64 %90, i64* %89, align 8
  br label %if.done

if.else:                                          ; preds = %for.interval.body2
  %91 = load %runtime.Map_Header, %runtime.Map_Header* %0, align 8
  %92 = getelementptr inbounds %runtime.Map_Find_Result, %runtime.Map_Find_Result* %14, i32 0, i32 1
  %93 = load i64, i64* %92, align 8
  %94 = bitcast %runtime.Context* %18 to i8*
  %95 = call %runtime.Map_Entry_Header* @runtime.__dynamic_map_get_entry(%runtime.Map_Header* %0, i64 %93, i8* %94)
  store %runtime.Map_Entry_Header* %95, %runtime.Map_Entry_Header** %17, align 8
  %96 = load %runtime.Map_Entry_Header*, %runtime.Map_Entry_Header** %17, align 8
  %97 = getelementptr inbounds %runtime.Map_Entry_Header, %runtime.Map_Entry_Header* %96, i32 0, i32 1
  %98 = load i64, i64* %10, align 8
  store i64 %98, i64* %97, align 8
  br label %if.done

if.done:                                          ; preds = %if.else, %if.then
  br label %for.interval.post3

for.interval.post3:                               ; preds = %if.done
  %99 = load i64, i64* %8, align 8
  %100 = add i64 %99, 1
  store i64 %100, i64* %8, align 8
  %101 = load i64, i64* %9, align 8
  %102 = add i64 %101, 1
  store i64 %102, i64* %9, align 8
  br label %for.interval.loop1

for.interval.done4:                               ; preds = %for.interval.loop1
  ret void
}

define internal void @runtime.__dynamic_map_reserve(%runtime.Map_Header* %0, i64 %1, %runtime.Source_Code_Location* %2, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %3 = alloca i64, align 8
  %4 = alloca %runtime.Context, align 8
  %5 = alloca %runtime.Context, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i64 %1, i64* %3, align 8
  %6 = bitcast i8* %__.context_ptr to %runtime.Context*
  %7 = load %runtime.Context, %runtime.Context* %6, align 8
  %8 = bitcast %runtime.Context* %4 to i8*
  %9 = bitcast %runtime.Context* %6 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %8, i8* align 1 %9, i64 96, i1 false)
  %10 = getelementptr inbounds %runtime.Map_Header, %runtime.Map_Header* %0, i32 0, i32 0
  %11 = load %runtime.Raw_Map*, %runtime.Raw_Map** %10, align 8
  %12 = getelementptr inbounds %runtime.Raw_Map, %runtime.Raw_Map* %11, i32 0, i32 1
  %13 = getelementptr inbounds %runtime.Raw_Dynamic_Array, %runtime.Raw_Dynamic_Array* %12, i32 0, i32 3
  %14 = getelementptr inbounds %runtime.Allocator, %runtime.Allocator* %13, i32 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = icmp ne i8* %15, null
  %17 = zext i1 %16 to i8
  %18 = trunc i8 %17 to i1
  br i1 %18, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  %19 = getelementptr inbounds %runtime.Context, %runtime.Context* %4, i32 0, i32 0
  %20 = getelementptr inbounds %runtime.Map_Header, %runtime.Map_Header* %0, i32 0, i32 0
  %21 = load %runtime.Raw_Map*, %runtime.Raw_Map** %20, align 8
  %22 = getelementptr inbounds %runtime.Raw_Map, %runtime.Raw_Map* %21, i32 0, i32 1
  %23 = getelementptr inbounds %runtime.Raw_Dynamic_Array, %runtime.Raw_Dynamic_Array* %22, i32 0, i32 3
  %24 = load %runtime.Allocator, %runtime.Allocator* %23, align 8
  store %runtime.Allocator %24, %runtime.Allocator* %19, align 8
  br label %if.done

if.done:                                          ; preds = %if.then, %entry
  %25 = load %runtime.Context, %runtime.Context* %4, align 8
  %26 = load %runtime.Context, %runtime.Context* %6, align 8
  %27 = bitcast %runtime.Context* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* %27, i8 0, i64 96, i1 false)
  %28 = bitcast %runtime.Context* %5 to i8*
  %29 = bitcast %runtime.Context* %6 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %28, i8* align 1 %29, i64 96, i1 false)
  %30 = bitcast %runtime.Context* %5 to i8*
  %31 = bitcast %runtime.Context* %4 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %30, i8* align 8 %31, i64 96, i1 false)
  %32 = getelementptr inbounds %runtime.Map_Header, %runtime.Map_Header* %0, i32 0, i32 0
  %33 = load %runtime.Raw_Map*, %runtime.Raw_Map** %32, align 8
  %34 = getelementptr inbounds %runtime.Raw_Map, %runtime.Raw_Map* %33, i32 0, i32 1
  %35 = getelementptr inbounds %runtime.Map_Header, %runtime.Map_Header* %0, i32 0, i32 2
  %36 = load i64, i64* %35, align 8
  %37 = getelementptr inbounds %runtime.Map_Header, %runtime.Map_Header* %0, i32 0, i32 3
  %38 = load i64, i64* %37, align 8
  %39 = load i64, i64* %3, align 8
  %40 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %2, align 8
  %41 = bitcast %runtime.Raw_Dynamic_Array* %34 to i8*
  %42 = bitcast %runtime.Context* %5 to i8*
  %43 = call i8 @runtime.__dynamic_array_reserve(i8* %41, i64 %36, i64 %38, i64 %39, %runtime.Source_Code_Location* %2, i8* %42)
  %44 = getelementptr inbounds %runtime.Map_Header, %runtime.Map_Header* %0, i32 0, i32 0
  %45 = load %runtime.Raw_Map*, %runtime.Raw_Map** %44, align 8
  %46 = getelementptr inbounds %runtime.Raw_Map, %runtime.Raw_Map* %45, i32 0, i32 1
  %47 = getelementptr inbounds %runtime.Raw_Dynamic_Array, %runtime.Raw_Dynamic_Array* %46, i32 0, i32 1
  %48 = load i64, i64* %47, align 8
  %49 = mul i64 %48, 2
  %50 = getelementptr inbounds %runtime.Map_Header, %runtime.Map_Header* %0, i32 0, i32 0
  %51 = load %runtime.Raw_Map*, %runtime.Raw_Map** %50, align 8
  %52 = getelementptr inbounds %runtime.Raw_Map, %runtime.Raw_Map* %51, i32 0, i32 0
  %53 = load { i64*, i64 }, { i64*, i64 }* %52, align 8
  %54 = getelementptr inbounds { i64*, i64 }, { i64*, i64 }* %52, i32 0, i32 1
  %55 = load i64, i64* %54, align 8
  %56 = icmp slt i64 %49, %55
  %57 = zext i1 %56 to i8
  %58 = trunc i8 %57 to i1
  br i1 %58, label %if.then1, label %if.done2

if.then1:                                         ; preds = %if.done
  ret void

if.done2:                                         ; preds = %if.done
  %59 = getelementptr inbounds %runtime.Map_Header, %runtime.Map_Header* %0, i32 0, i32 0
  %60 = load %runtime.Raw_Map*, %runtime.Raw_Map** %59, align 8
  %61 = getelementptr inbounds %runtime.Raw_Map, %runtime.Raw_Map* %60, i32 0, i32 0
  %62 = load i64, i64* %3, align 8
  %63 = mul i64 %62, 2
  %64 = getelementptr inbounds %runtime.Map_Header, %runtime.Map_Header* %0, i32 0, i32 0
  %65 = load %runtime.Raw_Map*, %runtime.Raw_Map** %64, align 8
  %66 = getelementptr inbounds %runtime.Raw_Map, %runtime.Raw_Map* %65, i32 0, i32 1
  %67 = getelementptr inbounds %runtime.Raw_Dynamic_Array, %runtime.Raw_Dynamic_Array* %66, i32 0, i32 3
  %68 = load %runtime.Allocator, %runtime.Allocator* %67, align 8
  %69 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %2, align 8
  %70 = bitcast %runtime.Allocator* %67 to { i64, i64 }*
  %71 = load { i64, i64 }, { i64, i64 }* %70, align 8
  %72 = bitcast %runtime.Context* %5 to i8*
  %73 = call i8 @runtime.__slice_resize-46927({ i64*, i64 }* %61, i64 %63, { i64, i64 } %71, %runtime.Source_Code_Location* %2, i8* %72)
  %74 = trunc i8 %73 to i1
  br i1 %74, label %if.then3, label %if.done4

if.then3:                                         ; preds = %if.done2
  %75 = load %runtime.Map_Header, %runtime.Map_Header* %0, align 8
  %76 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %2, align 8
  %77 = bitcast %runtime.Context* %5 to i8*
  call void @runtime.__dynamic_map_reset_entries(%runtime.Map_Header* %0, %runtime.Source_Code_Location* %2, i8* %77)
  br label %if.done4

if.done4:                                         ; preds = %if.then3, %if.done2
  ret void
}

define internal void @runtime.__dynamic_map_rehash(%runtime.Map_Header* %0, i64 %1, %runtime.Source_Code_Location* %2, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %3 = alloca i64, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i64 %1, i64* %3, align 8
  %4 = bitcast i8* %__.context_ptr to %runtime.Context*
  %5 = load %runtime.Map_Header, %runtime.Map_Header* %0, align 8
  %6 = load i64, i64* %3, align 8
  %7 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %2, align 8
  %8 = bitcast %runtime.Context* %4 to i8*
  call void @runtime.__dynamic_map_reserve(%runtime.Map_Header* %0, i64 %6, %runtime.Source_Code_Location* %2, i8* %8) #4
  ret void
}

define internal i8* @runtime.__dynamic_map_get(%runtime.Map_Header* %0, { i64, i64 } %1, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %2 = alloca %runtime.Map_Hash, align 8
  %3 = alloca i64, align 8
  %4 = alloca %runtime.Map_Find_Result, align 8
  %5 = alloca i64, align 8
  br label %entry

entry:                                            ; preds = %decls
  %6 = bitcast %runtime.Map_Hash* %2 to { i64, i64 }*
  store { i64, i64 } %1, { i64, i64 }* %6, align 8
  %7 = load %runtime.Map_Hash, %runtime.Map_Hash* %2, align 8
  %8 = bitcast i8* %__.context_ptr to %runtime.Context*
  %9 = load %runtime.Map_Header, %runtime.Map_Header* %0, align 8
  %10 = load %runtime.Map_Hash, %runtime.Map_Hash* %2, align 8
  %11 = bitcast %runtime.Map_Hash* %2 to { i64, i64 }*
  %12 = load { i64, i64 }, { i64, i64 }* %11, align 8
  %13 = bitcast %runtime.Map_Find_Result* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* %13, i8 0, i64 24, i1 false)
  %14 = bitcast %runtime.Context* %8 to i8*
  call void @runtime.__dynamic_map_find(%runtime.Map_Find_Result* sret %4, %runtime.Map_Header* %0, { i64, i64 } %12, i8* %14)
  %15 = load %runtime.Map_Find_Result, %runtime.Map_Find_Result* %4, align 8
  %16 = getelementptr inbounds %runtime.Map_Find_Result, %runtime.Map_Find_Result* %4, i32 0, i32 2
  %17 = load i64, i64* %16, align 8
  store i64 %17, i64* %3, align 8
  %18 = load i64, i64* %3, align 8
  %19 = icmp sge i64 %18, 0
  %20 = zext i1 %19 to i8
  %21 = trunc i8 %20 to i1
  br i1 %21, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  %22 = load %runtime.Map_Header, %runtime.Map_Header* %0, align 8
  %23 = load i64, i64* %3, align 8
  %24 = bitcast %runtime.Context* %8 to i8*
  %25 = call %runtime.Map_Entry_Header* @runtime.__dynamic_map_get_entry(%runtime.Map_Header* %0, i64 %23, i8* %24)
  %26 = ptrtoint %runtime.Map_Entry_Header* %25 to i64
  store i64 %26, i64* %5, align 8
  %27 = load i64, i64* %5, align 8
  %28 = getelementptr inbounds %runtime.Map_Header, %runtime.Map_Header* %0, i32 0, i32 6
  %29 = load i64, i64* %28, align 8
  %30 = add i64 %27, %29
  %31 = inttoptr i64 %30 to i8*
  ret i8* %31

if.done:                                          ; preds = %entry
  ret i8* null
}

define internal %runtime.Map_Entry_Header* @runtime.__dynamic_map_set(%runtime.Map_Header* %0, { i64, i64 } %1, i8* %2, %runtime.Source_Code_Location* %3, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %4 = alloca %runtime.Map_Hash, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  %7 = alloca %runtime.Map_Find_Result, align 8
  %8 = alloca %runtime.Map_Find_Result, align 8
  %9 = alloca %runtime.Map_Entry_Header*, align 8
  %10 = alloca %runtime.Map_Entry_Header*, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  br label %entry

entry:                                            ; preds = %decls
  %13 = bitcast %runtime.Map_Hash* %4 to { i64, i64 }*
  store { i64, i64 } %1, { i64, i64 }* %13, align 8
  %14 = load %runtime.Map_Hash, %runtime.Map_Hash* %4, align 8
  store i8* %2, i8** %5, align 8
  %15 = bitcast i8* %__.context_ptr to %runtime.Context*
  store i64 0, i64* %6, align 8
  %16 = getelementptr inbounds %runtime.Map_Header, %runtime.Map_Header* %0, i32 0, i32 0
  %17 = load %runtime.Raw_Map*, %runtime.Raw_Map** %16, align 8
  %18 = getelementptr inbounds %runtime.Raw_Map, %runtime.Raw_Map* %17, i32 0, i32 0
  %19 = load { i64*, i64 }, { i64*, i64 }* %18, align 8
  %20 = getelementptr inbounds { i64*, i64 }, { i64*, i64 }* %18, i32 0, i32 1
  %21 = load i64, i64* %20, align 8
  %22 = icmp eq i64 %21, 0
  %23 = zext i1 %22 to i8
  %24 = trunc i8 %23 to i1
  br i1 %24, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  %25 = load %runtime.Map_Header, %runtime.Map_Header* %0, align 8
  %26 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %3, align 8
  %27 = bitcast %runtime.Context* %15 to i8*
  call void @runtime.__dynamic_map_reserve(%runtime.Map_Header* %0, i64 16, %runtime.Source_Code_Location* %3, i8* %27)
  %28 = load %runtime.Map_Header, %runtime.Map_Header* %0, align 8
  %29 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %3, align 8
  %30 = bitcast %runtime.Context* %15 to i8*
  call void @runtime.__dynamic_map_grow(%runtime.Map_Header* %0, %runtime.Source_Code_Location* %3, i8* %30)
  br label %if.done

if.done:                                          ; preds = %if.then, %entry
  %31 = load %runtime.Map_Header, %runtime.Map_Header* %0, align 8
  %32 = load %runtime.Map_Hash, %runtime.Map_Hash* %4, align 8
  %33 = bitcast %runtime.Map_Hash* %4 to { i64, i64 }*
  %34 = load { i64, i64 }, { i64, i64 }* %33, align 8
  %35 = bitcast %runtime.Map_Find_Result* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* %35, i8 0, i64 24, i1 false)
  %36 = bitcast %runtime.Context* %15 to i8*
  call void @runtime.__dynamic_map_find(%runtime.Map_Find_Result* sret %8, %runtime.Map_Header* %0, { i64, i64 } %34, i8* %36)
  %37 = load %runtime.Map_Find_Result, %runtime.Map_Find_Result* %8, align 8
  store %runtime.Map_Find_Result %37, %runtime.Map_Find_Result* %7, align 8
  %38 = getelementptr inbounds %runtime.Map_Find_Result, %runtime.Map_Find_Result* %7, i32 0, i32 2
  %39 = load i64, i64* %38, align 8
  %40 = icmp sge i64 %39, 0
  %41 = zext i1 %40 to i8
  %42 = trunc i8 %41 to i1
  br i1 %42, label %if.then1, label %if.else

if.then1:                                         ; preds = %if.done
  %43 = getelementptr inbounds %runtime.Map_Find_Result, %runtime.Map_Find_Result* %7, i32 0, i32 2
  %44 = load i64, i64* %43, align 8
  store i64 %44, i64* %6, align 8
  br label %if.done8

if.else:                                          ; preds = %if.done
  %45 = load %runtime.Map_Header, %runtime.Map_Header* %0, align 8
  %46 = load %runtime.Map_Hash, %runtime.Map_Hash* %4, align 8
  %47 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %3, align 8
  %48 = bitcast %runtime.Map_Hash* %4 to { i64, i64 }*
  %49 = load { i64, i64 }, { i64, i64 }* %48, align 8
  %50 = bitcast %runtime.Context* %15 to i8*
  %51 = call i64 @runtime.__dynamic_map_add_entry(%runtime.Map_Header* %0, { i64, i64 } %49, %runtime.Source_Code_Location* %3, i8* %50)
  store i64 %51, i64* %6, align 8
  %52 = getelementptr inbounds %runtime.Map_Find_Result, %runtime.Map_Find_Result* %7, i32 0, i32 1
  %53 = load i64, i64* %52, align 8
  %54 = icmp sge i64 %53, 0
  %55 = zext i1 %54 to i8
  %56 = trunc i8 %55 to i1
  br i1 %56, label %if.then2, label %if.else3

if.then2:                                         ; preds = %if.else
  %57 = load %runtime.Map_Header, %runtime.Map_Header* %0, align 8
  %58 = getelementptr inbounds %runtime.Map_Find_Result, %runtime.Map_Find_Result* %7, i32 0, i32 1
  %59 = load i64, i64* %58, align 8
  %60 = bitcast %runtime.Context* %15 to i8*
  %61 = call %runtime.Map_Entry_Header* @runtime.__dynamic_map_get_entry(%runtime.Map_Header* %0, i64 %59, i8* %60)
  store %runtime.Map_Entry_Header* %61, %runtime.Map_Entry_Header** %9, align 8
  %62 = load %runtime.Map_Entry_Header*, %runtime.Map_Entry_Header** %9, align 8
  %63 = getelementptr inbounds %runtime.Map_Entry_Header, %runtime.Map_Entry_Header* %62, i32 0, i32 1
  %64 = load i64, i64* %6, align 8
  store i64 %64, i64* %63, align 8
  br label %if.done7

if.else3:                                         ; preds = %if.else
  %65 = getelementptr inbounds %runtime.Map_Find_Result, %runtime.Map_Find_Result* %7, i32 0, i32 0
  %66 = load i64, i64* %65, align 8
  %67 = icmp sge i64 %66, 0
  %68 = zext i1 %67 to i8
  %69 = trunc i8 %68 to i1
  br i1 %69, label %if.then4, label %if.else5

if.then4:                                         ; preds = %if.else3
  %70 = getelementptr inbounds %runtime.Map_Header, %runtime.Map_Header* %0, i32 0, i32 0
  %71 = load %runtime.Raw_Map*, %runtime.Raw_Map** %70, align 8
  %72 = getelementptr inbounds %runtime.Raw_Map, %runtime.Raw_Map* %71, i32 0, i32 0
  %73 = load { i64*, i64 }, { i64*, i64 }* %72, align 8
  %74 = getelementptr inbounds { i64*, i64 }, { i64*, i64 }* %72, i32 0, i32 0
  %75 = load i64*, i64** %74, align 8
  %76 = getelementptr inbounds %runtime.Map_Find_Result, %runtime.Map_Find_Result* %7, i32 0, i32 0
  %77 = load i64, i64* %76, align 8
  %78 = getelementptr inbounds { i64*, i64 }, { i64*, i64 }* %72, i32 0, i32 1
  %79 = load i64, i64* %78, align 8
  %80 = getelementptr i64, i64* %75, i64 %77
  %81 = load i64, i64* %6, align 8
  store i64 %81, i64* %80, align 8
  br label %if.done6

if.else5:                                         ; preds = %if.else3
  ret %runtime.Map_Entry_Header* null

if.done6:                                         ; preds = %if.then4
  br label %if.done7

if.done7:                                         ; preds = %if.done6, %if.then2
  br label %if.done8

if.done8:                                         ; preds = %if.done7, %if.then1
  %82 = load %runtime.Map_Header, %runtime.Map_Header* %0, align 8
  %83 = load i64, i64* %6, align 8
  %84 = bitcast %runtime.Context* %15 to i8*
  %85 = call %runtime.Map_Entry_Header* @runtime.__dynamic_map_get_entry(%runtime.Map_Header* %0, i64 %83, i8* %84)
  store %runtime.Map_Entry_Header* %85, %runtime.Map_Entry_Header** %10, align 8
  %86 = load %runtime.Map_Entry_Header*, %runtime.Map_Entry_Header** %10, align 8
  %87 = getelementptr inbounds %runtime.Map_Entry_Header, %runtime.Map_Entry_Header* %86, i32 0, i32 0
  %88 = getelementptr inbounds %runtime.Map_Hash, %runtime.Map_Hash* %4, i32 0, i32 0
  %89 = load i64, i64* %88, align 8
  store i64 %89, i64* %87, align 8
  %90 = load %runtime.Map_Entry_Header*, %runtime.Map_Entry_Header** %10, align 8
  %91 = ptrtoint %runtime.Map_Entry_Header* %90 to i64
  %92 = getelementptr inbounds %runtime.Map_Header, %runtime.Map_Header* %0, i32 0, i32 4
  %93 = load i64, i64* %92, align 8
  %94 = add i64 %91, %93
  %95 = inttoptr i64 %94 to i8*
  store i8* %95, i8** %11, align 8
  %96 = load i8*, i8** %11, align 8
  %97 = getelementptr inbounds %runtime.Map_Hash, %runtime.Map_Hash* %4, i32 0, i32 1
  %98 = load i8*, i8** %97, align 8
  %99 = getelementptr inbounds %runtime.Map_Header, %runtime.Map_Header* %0, i32 0, i32 5
  %100 = load i64, i64* %99, align 8
  %101 = call i8* @runtime.mem_copy(i8* %96, i8* %98, i64 %100)
  %102 = load %runtime.Map_Entry_Header*, %runtime.Map_Entry_Header** %10, align 8
  %103 = ptrtoint %runtime.Map_Entry_Header* %102 to i64
  %104 = getelementptr inbounds %runtime.Map_Header, %runtime.Map_Header* %0, i32 0, i32 6
  %105 = load i64, i64* %104, align 8
  %106 = add i64 %103, %105
  %107 = inttoptr i64 %106 to i8*
  store i8* %107, i8** %12, align 8
  %108 = load i8*, i8** %12, align 8
  %109 = load i8*, i8** %5, align 8
  %110 = getelementptr inbounds %runtime.Map_Header, %runtime.Map_Header* %0, i32 0, i32 7
  %111 = load i64, i64* %110, align 8
  %112 = call i8* @runtime.mem_copy(i8* %108, i8* %109, i64 %111)
  %113 = load %runtime.Map_Header, %runtime.Map_Header* %0, align 8
  %114 = call i8 @runtime.__dynamic_map_full(%runtime.Map_Header* %0)
  %115 = trunc i8 %114 to i1
  br i1 %115, label %if.then9, label %if.done10

if.then9:                                         ; preds = %if.done8
  %116 = load %runtime.Map_Header, %runtime.Map_Header* %0, align 8
  %117 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %3, align 8
  %118 = bitcast %runtime.Context* %15 to i8*
  call void @runtime.__dynamic_map_grow(%runtime.Map_Header* %0, %runtime.Source_Code_Location* %3, i8* %118)
  br label %if.done10

if.done10:                                        ; preds = %if.then9, %if.done8
  %119 = load %runtime.Map_Header, %runtime.Map_Header* %0, align 8
  %120 = load i64, i64* %6, align 8
  %121 = bitcast %runtime.Context* %15 to i8*
  %122 = call %runtime.Map_Entry_Header* @runtime.__dynamic_map_get_entry(%runtime.Map_Header* %0, i64 %120, i8* %121)
  ret %runtime.Map_Entry_Header* %122
}

define internal void @runtime.__dynamic_map_grow(%runtime.Map_Header* %0, %runtime.Source_Code_Location* %1, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %2 = alloca i64, align 8
  br label %entry

entry:                                            ; preds = %decls
  %3 = bitcast i8* %__.context_ptr to %runtime.Context*
  %4 = getelementptr inbounds %runtime.Map_Header, %runtime.Map_Header* %0, i32 0, i32 0
  %5 = load %runtime.Raw_Map*, %runtime.Raw_Map** %4, align 8
  %6 = getelementptr inbounds %runtime.Raw_Map, %runtime.Raw_Map* %5, i32 0, i32 1
  %7 = getelementptr inbounds %runtime.Raw_Dynamic_Array, %runtime.Raw_Dynamic_Array* %6, i32 0, i32 2
  %8 = load i64, i64* %7, align 8
  %9 = mul i64 4, %8
  %10 = add i64 %9, 7
  %11 = icmp sgt i64 %10, 16
  %12 = select i1 %11, i64 %10, i64 16
  store i64 %12, i64* %2, align 8
  %13 = load %runtime.Map_Header, %runtime.Map_Header* %0, align 8
  %14 = load i64, i64* %2, align 8
  %15 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %1, align 8
  %16 = bitcast %runtime.Context* %3 to i8*
  call void @runtime.__dynamic_map_rehash(%runtime.Map_Header* %0, i64 %14, %runtime.Source_Code_Location* %1, i8* %16)
  ret void
}

; Function Attrs: alwaysinline
define internal i8 @runtime.__dynamic_map_full(%runtime.Map_Header* %0) #4 {
decls:
  br label %entry

entry:                                            ; preds = %decls
  %1 = getelementptr inbounds %runtime.Map_Header, %runtime.Map_Header* %0, i32 0, i32 0
  %2 = load %runtime.Raw_Map*, %runtime.Raw_Map** %1, align 8
  %3 = getelementptr inbounds %runtime.Raw_Map, %runtime.Raw_Map* %2, i32 0, i32 0
  %4 = load { i64*, i64 }, { i64*, i64 }* %3, align 8
  %5 = getelementptr inbounds { i64*, i64 }, { i64*, i64 }* %3, i32 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = sitofp i64 %6 to double
  %8 = fmul double 7.500000e-01, %7
  %9 = fptosi double %8 to i64
  %10 = getelementptr inbounds %runtime.Map_Header, %runtime.Map_Header* %0, i32 0, i32 0
  %11 = load %runtime.Raw_Map*, %runtime.Raw_Map** %10, align 8
  %12 = getelementptr inbounds %runtime.Raw_Map, %runtime.Raw_Map* %11, i32 0, i32 1
  %13 = getelementptr inbounds %runtime.Raw_Dynamic_Array, %runtime.Raw_Dynamic_Array* %12, i32 0, i32 1
  %14 = load i64, i64* %13, align 8
  %15 = icmp sle i64 %9, %14
  %16 = zext i1 %15 to i8
  ret i8 %16
}

define internal i8 @runtime.__dynamic_map_hash_equal(%runtime.Map_Header* %0, { i64, i64 } %1, { i64, i64 } %2) {
decls:
  %3 = alloca %runtime.Map_Hash, align 8
  %4 = alloca %runtime.Map_Hash, align 8
  br label %entry

entry:                                            ; preds = %decls
  %5 = bitcast %runtime.Map_Hash* %3 to { i64, i64 }*
  store { i64, i64 } %1, { i64, i64 }* %5, align 8
  %6 = load %runtime.Map_Hash, %runtime.Map_Hash* %3, align 8
  %7 = bitcast %runtime.Map_Hash* %4 to { i64, i64 }*
  store { i64, i64 } %2, { i64, i64 }* %7, align 8
  %8 = load %runtime.Map_Hash, %runtime.Map_Hash* %4, align 8
  %9 = getelementptr inbounds %runtime.Map_Hash, %runtime.Map_Hash* %3, i32 0, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = getelementptr inbounds %runtime.Map_Hash, %runtime.Map_Hash* %4, i32 0, i32 0
  %12 = load i64, i64* %11, align 8
  %13 = icmp eq i64 %10, %12
  %14 = zext i1 %13 to i8
  %15 = trunc i8 %14 to i1
  br i1 %15, label %logical.cmp.rhs, label %logical.cmp.done

logical.cmp.rhs:                                  ; preds = %entry
  %16 = getelementptr inbounds %runtime.Map_Header, %runtime.Map_Header* %0, i32 0, i32 1
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr inbounds %runtime.Map_Hash, %runtime.Map_Hash* %3, i32 0, i32 1
  %19 = load i8*, i8** %18, align 8
  %20 = getelementptr inbounds %runtime.Map_Hash, %runtime.Map_Hash* %4, i32 0, i32 1
  %21 = load i8*, i8** %20, align 8
  %22 = bitcast i8* %17 to i8 (i8*, i8*)*
  %23 = call i8 %22(i8* %19, i8* %21)
  br label %logical.cmp.done

logical.cmp.done:                                 ; preds = %logical.cmp.rhs, %entry
  %24 = phi i8 [ 0, %entry ], [ %23, %logical.cmp.rhs ]
  ret i8 %24
}

define internal void @runtime.__dynamic_map_find(%runtime.Map_Find_Result* noalias sret %agg.result, %runtime.Map_Header* %0, { i64, i64 } %1, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %2 = alloca %runtime.Map_Hash, align 8
  %3 = alloca %runtime.Map_Find_Result, align 8
  %4 = alloca i64, align 8
  %5 = alloca %runtime.Map_Entry_Header*, align 8
  %6 = alloca %runtime.Map_Hash, align 8
  %7 = alloca %runtime.Map_Hash, align 8
  br label %entry

entry:                                            ; preds = %decls
  %8 = bitcast %runtime.Map_Hash* %2 to { i64, i64 }*
  store { i64, i64 } %1, { i64, i64 }* %8, align 8
  %9 = load %runtime.Map_Hash, %runtime.Map_Hash* %2, align 8
  %10 = bitcast i8* %__.context_ptr to %runtime.Context*
  store %runtime.Map_Find_Result { i64 -1, i64 -1, i64 -1 }, %runtime.Map_Find_Result* %3, align 8
  br label %if.init

if.init:                                          ; preds = %entry
  %11 = getelementptr inbounds %runtime.Map_Header, %runtime.Map_Header* %0, i32 0, i32 0
  %12 = load %runtime.Raw_Map*, %runtime.Raw_Map** %11, align 8
  %13 = getelementptr inbounds %runtime.Raw_Map, %runtime.Raw_Map* %12, i32 0, i32 0
  %14 = load { i64*, i64 }, { i64*, i64 }* %13, align 8
  %15 = getelementptr inbounds { i64*, i64 }, { i64*, i64 }* %13, i32 0, i32 1
  %16 = load i64, i64* %15, align 8
  store i64 %16, i64* %4, align 8
  %17 = load i64, i64* %4, align 8
  %18 = icmp ugt i64 %17, 0
  %19 = zext i1 %18 to i8
  %20 = trunc i8 %19 to i1
  br i1 %20, label %if.then, label %if.done2

if.then:                                          ; preds = %if.init
  %21 = getelementptr inbounds %runtime.Map_Find_Result, %runtime.Map_Find_Result* %3, i32 0, i32 0
  %22 = getelementptr inbounds %runtime.Map_Hash, %runtime.Map_Hash* %2, i32 0, i32 0
  %23 = load i64, i64* %22, align 8
  %24 = load i64, i64* %4, align 8
  %25 = urem i64 %23, %24
  store i64 %25, i64* %21, align 8
  %26 = getelementptr inbounds %runtime.Map_Find_Result, %runtime.Map_Find_Result* %3, i32 0, i32 2
  %27 = getelementptr inbounds %runtime.Map_Header, %runtime.Map_Header* %0, i32 0, i32 0
  %28 = load %runtime.Raw_Map*, %runtime.Raw_Map** %27, align 8
  %29 = getelementptr inbounds %runtime.Raw_Map, %runtime.Raw_Map* %28, i32 0, i32 0
  %30 = load { i64*, i64 }, { i64*, i64 }* %29, align 8
  %31 = getelementptr inbounds { i64*, i64 }, { i64*, i64 }* %29, i32 0, i32 0
  %32 = load i64*, i64** %31, align 8
  %33 = getelementptr inbounds %runtime.Map_Find_Result, %runtime.Map_Find_Result* %3, i32 0, i32 0
  %34 = load i64, i64* %33, align 8
  %35 = getelementptr inbounds { i64*, i64 }, { i64*, i64 }* %29, i32 0, i32 1
  %36 = load i64, i64* %35, align 8
  %37 = getelementptr i64, i64* %32, i64 %34
  %38 = load i64, i64* %37, align 8
  store i64 %38, i64* %26, align 8
  br label %for.loop

for.loop:                                         ; preds = %if.done, %if.then
  %39 = getelementptr inbounds %runtime.Map_Find_Result, %runtime.Map_Find_Result* %3, i32 0, i32 2
  %40 = load i64, i64* %39, align 8
  %41 = icmp sge i64 %40, 0
  %42 = zext i1 %41 to i8
  %43 = trunc i8 %42 to i1
  br i1 %43, label %for.body, label %for.done

for.body:                                         ; preds = %for.loop
  %44 = load %runtime.Map_Header, %runtime.Map_Header* %0, align 8
  %45 = getelementptr inbounds %runtime.Map_Find_Result, %runtime.Map_Find_Result* %3, i32 0, i32 2
  %46 = load i64, i64* %45, align 8
  %47 = bitcast %runtime.Context* %10 to i8*
  %48 = call %runtime.Map_Entry_Header* @runtime.__dynamic_map_get_entry(%runtime.Map_Header* %0, i64 %46, i8* %47)
  store %runtime.Map_Entry_Header* %48, %runtime.Map_Entry_Header** %5, align 8
  %49 = load %runtime.Map_Header, %runtime.Map_Header* %0, align 8
  %50 = load %runtime.Map_Entry_Header*, %runtime.Map_Entry_Header** %5, align 8
  %51 = call { i64, i64 } @runtime.__get_map_hash_from_entry(%runtime.Map_Header* %0, %runtime.Map_Entry_Header* %50)
  %52 = bitcast %runtime.Map_Hash* %7 to { i64, i64 }*
  store { i64, i64 } %51, { i64, i64 }* %52, align 8
  %53 = load %runtime.Map_Hash, %runtime.Map_Hash* %7, align 8
  store %runtime.Map_Hash %53, %runtime.Map_Hash* %6, align 8
  %54 = load %runtime.Map_Header, %runtime.Map_Header* %0, align 8
  %55 = load %runtime.Map_Hash, %runtime.Map_Hash* %6, align 8
  %56 = load %runtime.Map_Hash, %runtime.Map_Hash* %2, align 8
  %57 = bitcast %runtime.Map_Hash* %6 to { i64, i64 }*
  %58 = load { i64, i64 }, { i64, i64 }* %57, align 8
  %59 = bitcast %runtime.Map_Hash* %2 to { i64, i64 }*
  %60 = load { i64, i64 }, { i64, i64 }* %59, align 8
  %61 = call i8 @runtime.__dynamic_map_hash_equal(%runtime.Map_Header* %0, { i64, i64 } %58, { i64, i64 } %60)
  %62 = trunc i8 %61 to i1
  br i1 %62, label %if.then1, label %if.done

if.then1:                                         ; preds = %for.body
  %63 = load %runtime.Map_Find_Result, %runtime.Map_Find_Result* %3, align 8
  %64 = bitcast %runtime.Map_Find_Result* %agg.result to i8*
  %65 = bitcast %runtime.Map_Find_Result* %3 to i8*
  call void @llvm.memcpy.inline.p0i8.p0i8.i64(i8* %64, i8* %65, i64 24, i1 false)
  ret void

if.done:                                          ; preds = %for.body
  %66 = getelementptr inbounds %runtime.Map_Find_Result, %runtime.Map_Find_Result* %3, i32 0, i32 1
  %67 = getelementptr inbounds %runtime.Map_Find_Result, %runtime.Map_Find_Result* %3, i32 0, i32 2
  %68 = load i64, i64* %67, align 8
  store i64 %68, i64* %66, align 8
  %69 = getelementptr inbounds %runtime.Map_Find_Result, %runtime.Map_Find_Result* %3, i32 0, i32 2
  %70 = load %runtime.Map_Entry_Header*, %runtime.Map_Entry_Header** %5, align 8
  %71 = getelementptr inbounds %runtime.Map_Entry_Header, %runtime.Map_Entry_Header* %70, i32 0, i32 1
  %72 = load i64, i64* %71, align 8
  store i64 %72, i64* %69, align 8
  br label %for.loop

for.done:                                         ; preds = %for.loop
  br label %if.done2

if.done2:                                         ; preds = %for.done, %if.init
  %73 = load %runtime.Map_Find_Result, %runtime.Map_Find_Result* %3, align 8
  %74 = bitcast %runtime.Map_Find_Result* %agg.result to i8*
  %75 = bitcast %runtime.Map_Find_Result* %3 to i8*
  call void @llvm.memcpy.inline.p0i8.p0i8.i64(i8* %74, i8* %75, i64 24, i1 false)
  ret void
}

define internal i64 @runtime.__dynamic_map_add_entry(%runtime.Map_Header* %0, { i64, i64 } %1, %runtime.Source_Code_Location* %2, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %3 = alloca %runtime.Map_Hash, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca %runtime.Map_Entry_Header*, align 8
  br label %entry

entry:                                            ; preds = %decls
  %7 = bitcast %runtime.Map_Hash* %3 to { i64, i64 }*
  store { i64, i64 } %1, { i64, i64 }* %7, align 8
  %8 = load %runtime.Map_Hash, %runtime.Map_Hash* %3, align 8
  %9 = bitcast i8* %__.context_ptr to %runtime.Context*
  %10 = getelementptr inbounds %runtime.Map_Header, %runtime.Map_Header* %0, i32 0, i32 0
  %11 = load %runtime.Raw_Map*, %runtime.Raw_Map** %10, align 8
  %12 = getelementptr inbounds %runtime.Raw_Map, %runtime.Raw_Map* %11, i32 0, i32 1
  %13 = getelementptr inbounds %runtime.Raw_Dynamic_Array, %runtime.Raw_Dynamic_Array* %12, i32 0, i32 1
  %14 = load i64, i64* %13, align 8
  store i64 %14, i64* %4, align 8
  %15 = getelementptr inbounds %runtime.Map_Header, %runtime.Map_Header* %0, i32 0, i32 0
  %16 = load %runtime.Raw_Map*, %runtime.Raw_Map** %15, align 8
  %17 = getelementptr inbounds %runtime.Raw_Map, %runtime.Raw_Map* %16, i32 0, i32 1
  %18 = getelementptr inbounds %runtime.Map_Header, %runtime.Map_Header* %0, i32 0, i32 2
  %19 = load i64, i64* %18, align 8
  %20 = getelementptr inbounds %runtime.Map_Header, %runtime.Map_Header* %0, i32 0, i32 3
  %21 = load i64, i64* %20, align 8
  %22 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %2, align 8
  %23 = bitcast %runtime.Raw_Dynamic_Array* %17 to i8*
  %24 = bitcast %runtime.Context* %9 to i8*
  %25 = call i64 @runtime.__dynamic_array_append_nothing(i8* %23, i64 %19, i64 %21, %runtime.Source_Code_Location* %2, i8* %24)
  store i64 %25, i64* %5, align 8
  %26 = load i64, i64* %5, align 8
  %27 = load i64, i64* %4, align 8
  %28 = icmp ne i64 %26, %27
  %29 = zext i1 %28 to i8
  %30 = trunc i8 %29 to i1
  br i1 %30, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  %31 = load %runtime.Map_Header, %runtime.Map_Header* %0, align 8
  %32 = load i64, i64* %5, align 8
  %33 = sub i64 %32, 1
  %34 = bitcast %runtime.Context* %9 to i8*
  %35 = call %runtime.Map_Entry_Header* @runtime.__dynamic_map_get_entry(%runtime.Map_Header* %0, i64 %33, i8* %34)
  store %runtime.Map_Entry_Header* %35, %runtime.Map_Entry_Header** %6, align 8
  %36 = load %runtime.Map_Entry_Header*, %runtime.Map_Entry_Header** %6, align 8
  %37 = getelementptr inbounds %runtime.Map_Entry_Header, %runtime.Map_Entry_Header* %36, i32 0, i32 0
  %38 = getelementptr inbounds %runtime.Map_Hash, %runtime.Map_Hash* %3, i32 0, i32 0
  %39 = load i64, i64* %38, align 8
  store i64 %39, i64* %37, align 8
  %40 = load %runtime.Map_Entry_Header*, %runtime.Map_Entry_Header** %6, align 8
  %41 = ptrtoint %runtime.Map_Entry_Header* %40 to i64
  %42 = getelementptr inbounds %runtime.Map_Header, %runtime.Map_Header* %0, i32 0, i32 4
  %43 = load i64, i64* %42, align 8
  %44 = add i64 %41, %43
  %45 = inttoptr i64 %44 to i8*
  %46 = getelementptr inbounds %runtime.Map_Hash, %runtime.Map_Hash* %3, i32 0, i32 1
  %47 = load i8*, i8** %46, align 8
  %48 = getelementptr inbounds %runtime.Map_Header, %runtime.Map_Header* %0, i32 0, i32 5
  %49 = load i64, i64* %48, align 8
  %50 = call i8* @runtime.mem_copy(i8* %45, i8* %47, i64 %49)
  %51 = load %runtime.Map_Entry_Header*, %runtime.Map_Entry_Header** %6, align 8
  %52 = getelementptr inbounds %runtime.Map_Entry_Header, %runtime.Map_Entry_Header* %51, i32 0, i32 1
  store i64 -1, i64* %52, align 8
  br label %if.done

if.done:                                          ; preds = %if.then, %entry
  %53 = load i64, i64* %4, align 8
  ret i64 %53
}

define internal %runtime.Map_Entry_Header* @runtime.__dynamic_map_get_entry(%runtime.Map_Header* %0, i64 %1, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %2 = alloca i64, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i64 %1, i64* %2, align 8
  %3 = bitcast i8* %__.context_ptr to %runtime.Context*
  %4 = getelementptr inbounds %runtime.Map_Header, %runtime.Map_Header* %0, i32 0, i32 0
  %5 = load %runtime.Raw_Map*, %runtime.Raw_Map** %4, align 8
  %6 = getelementptr inbounds %runtime.Raw_Map, %runtime.Raw_Map* %5, i32 0, i32 1
  %7 = getelementptr inbounds %runtime.Raw_Dynamic_Array, %runtime.Raw_Dynamic_Array* %6, i32 0, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = ptrtoint i8* %8 to i64
  %10 = load i64, i64* %2, align 8
  %11 = getelementptr inbounds %runtime.Map_Header, %runtime.Map_Header* %0, i32 0, i32 2
  %12 = load i64, i64* %11, align 8
  %13 = mul i64 %10, %12
  %14 = add i64 %9, %13
  %15 = inttoptr i64 %14 to %runtime.Map_Entry_Header*
  ret %runtime.Map_Entry_Header* %15
}

define internal void @runtime.__dynamic_map_copy_entry(%runtime.Map_Header* %0, %runtime.Map_Entry_Header* %1, %runtime.Map_Entry_Header* %2, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %3 = alloca %runtime.Map_Entry_Header*, align 8
  %4 = alloca %runtime.Map_Entry_Header*, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %runtime.Map_Entry_Header* %1, %runtime.Map_Entry_Header** %3, align 8
  store %runtime.Map_Entry_Header* %2, %runtime.Map_Entry_Header** %4, align 8
  %5 = bitcast i8* %__.context_ptr to %runtime.Context*
  %6 = load %runtime.Map_Entry_Header*, %runtime.Map_Entry_Header** %3, align 8
  %7 = load %runtime.Map_Entry_Header*, %runtime.Map_Entry_Header** %4, align 8
  %8 = getelementptr inbounds %runtime.Map_Header, %runtime.Map_Header* %0, i32 0, i32 2
  %9 = load i64, i64* %8, align 8
  %10 = bitcast %runtime.Map_Entry_Header* %6 to i8*
  %11 = bitcast %runtime.Map_Entry_Header* %7 to i8*
  %12 = call i8* @runtime.mem_copy(i8* %10, i8* %11, i64 %9)
  ret void
}

define internal void @runtime.__dynamic_map_erase(%runtime.Map_Header* %0, %runtime.Map_Find_Result* %1, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %2 = alloca %runtime.Map_Entry_Header*, align 8
  %3 = alloca %runtime.Map_Entry_Header*, align 8
  %4 = alloca %runtime.Map_Entry_Header*, align 8
  %5 = alloca %runtime.Map_Entry_Header*, align 8
  %6 = alloca %runtime.Map_Entry_Header*, align 8
  %7 = alloca %runtime.Map_Hash, align 8
  %8 = alloca %runtime.Map_Hash, align 8
  %9 = alloca %runtime.Map_Find_Result, align 8
  %10 = alloca %runtime.Map_Find_Result, align 8
  %11 = alloca %runtime.Map_Entry_Header*, align 8
  br label %entry

entry:                                            ; preds = %decls
  %12 = bitcast i8* %__.context_ptr to %runtime.Context*
  %13 = getelementptr inbounds %runtime.Map_Find_Result, %runtime.Map_Find_Result* %1, i32 0, i32 1
  %14 = load i64, i64* %13, align 8
  %15 = icmp slt i64 %14, 0
  %16 = zext i1 %15 to i8
  %17 = trunc i8 %16 to i1
  br i1 %17, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %18 = getelementptr inbounds %runtime.Map_Header, %runtime.Map_Header* %0, i32 0, i32 0
  %19 = load %runtime.Raw_Map*, %runtime.Raw_Map** %18, align 8
  %20 = getelementptr inbounds %runtime.Raw_Map, %runtime.Raw_Map* %19, i32 0, i32 0
  %21 = load { i64*, i64 }, { i64*, i64 }* %20, align 8
  %22 = getelementptr inbounds { i64*, i64 }, { i64*, i64 }* %20, i32 0, i32 0
  %23 = load i64*, i64** %22, align 8
  %24 = getelementptr inbounds %runtime.Map_Find_Result, %runtime.Map_Find_Result* %1, i32 0, i32 0
  %25 = load i64, i64* %24, align 8
  %26 = getelementptr inbounds { i64*, i64 }, { i64*, i64 }* %20, i32 0, i32 1
  %27 = load i64, i64* %26, align 8
  %28 = getelementptr i64, i64* %23, i64 %25
  %29 = load %runtime.Map_Header, %runtime.Map_Header* %0, align 8
  %30 = getelementptr inbounds %runtime.Map_Find_Result, %runtime.Map_Find_Result* %1, i32 0, i32 2
  %31 = load i64, i64* %30, align 8
  %32 = bitcast %runtime.Context* %12 to i8*
  %33 = call %runtime.Map_Entry_Header* @runtime.__dynamic_map_get_entry(%runtime.Map_Header* %0, i64 %31, i8* %32)
  store %runtime.Map_Entry_Header* %33, %runtime.Map_Entry_Header** %2, align 8
  %34 = load %runtime.Map_Entry_Header*, %runtime.Map_Entry_Header** %2, align 8
  %35 = getelementptr inbounds %runtime.Map_Entry_Header, %runtime.Map_Entry_Header* %34, i32 0, i32 1
  %36 = load i64, i64* %35, align 8
  store i64 %36, i64* %28, align 8
  br label %if.done

if.else:                                          ; preds = %entry
  %37 = load %runtime.Map_Header, %runtime.Map_Header* %0, align 8
  %38 = getelementptr inbounds %runtime.Map_Find_Result, %runtime.Map_Find_Result* %1, i32 0, i32 1
  %39 = load i64, i64* %38, align 8
  %40 = bitcast %runtime.Context* %12 to i8*
  %41 = call %runtime.Map_Entry_Header* @runtime.__dynamic_map_get_entry(%runtime.Map_Header* %0, i64 %39, i8* %40)
  store %runtime.Map_Entry_Header* %41, %runtime.Map_Entry_Header** %3, align 8
  %42 = load %runtime.Map_Header, %runtime.Map_Header* %0, align 8
  %43 = getelementptr inbounds %runtime.Map_Find_Result, %runtime.Map_Find_Result* %1, i32 0, i32 2
  %44 = load i64, i64* %43, align 8
  %45 = bitcast %runtime.Context* %12 to i8*
  %46 = call %runtime.Map_Entry_Header* @runtime.__dynamic_map_get_entry(%runtime.Map_Header* %0, i64 %44, i8* %45)
  store %runtime.Map_Entry_Header* %46, %runtime.Map_Entry_Header** %4, align 8
  %47 = load %runtime.Map_Entry_Header*, %runtime.Map_Entry_Header** %3, align 8
  %48 = getelementptr inbounds %runtime.Map_Entry_Header, %runtime.Map_Entry_Header* %47, i32 0, i32 1
  %49 = load %runtime.Map_Entry_Header*, %runtime.Map_Entry_Header** %4, align 8
  %50 = getelementptr inbounds %runtime.Map_Entry_Header, %runtime.Map_Entry_Header* %49, i32 0, i32 1
  %51 = load i64, i64* %50, align 8
  store i64 %51, i64* %48, align 8
  br label %if.done

if.done:                                          ; preds = %if.else, %if.then
  %52 = getelementptr inbounds %runtime.Map_Find_Result, %runtime.Map_Find_Result* %1, i32 0, i32 2
  %53 = load i64, i64* %52, align 8
  %54 = getelementptr inbounds %runtime.Map_Header, %runtime.Map_Header* %0, i32 0, i32 0
  %55 = load %runtime.Raw_Map*, %runtime.Raw_Map** %54, align 8
  %56 = getelementptr inbounds %runtime.Raw_Map, %runtime.Raw_Map* %55, i32 0, i32 1
  %57 = getelementptr inbounds %runtime.Raw_Dynamic_Array, %runtime.Raw_Dynamic_Array* %56, i32 0, i32 1
  %58 = load i64, i64* %57, align 8
  %59 = sub i64 %58, 1
  %60 = icmp eq i64 %53, %59
  %61 = zext i1 %60 to i8
  %62 = trunc i8 %61 to i1
  br i1 %62, label %if.then1, label %if.else2

if.then1:                                         ; preds = %if.done
  br label %if.done6

if.else2:                                         ; preds = %if.done
  %63 = load %runtime.Map_Header, %runtime.Map_Header* %0, align 8
  %64 = getelementptr inbounds %runtime.Map_Find_Result, %runtime.Map_Find_Result* %1, i32 0, i32 2
  %65 = load i64, i64* %64, align 8
  %66 = bitcast %runtime.Context* %12 to i8*
  %67 = call %runtime.Map_Entry_Header* @runtime.__dynamic_map_get_entry(%runtime.Map_Header* %0, i64 %65, i8* %66)
  store %runtime.Map_Entry_Header* %67, %runtime.Map_Entry_Header** %5, align 8
  %68 = load %runtime.Map_Header, %runtime.Map_Header* %0, align 8
  %69 = getelementptr inbounds %runtime.Map_Header, %runtime.Map_Header* %0, i32 0, i32 0
  %70 = load %runtime.Raw_Map*, %runtime.Raw_Map** %69, align 8
  %71 = getelementptr inbounds %runtime.Raw_Map, %runtime.Raw_Map* %70, i32 0, i32 1
  %72 = getelementptr inbounds %runtime.Raw_Dynamic_Array, %runtime.Raw_Dynamic_Array* %71, i32 0, i32 1
  %73 = load i64, i64* %72, align 8
  %74 = sub i64 %73, 1
  %75 = bitcast %runtime.Context* %12 to i8*
  %76 = call %runtime.Map_Entry_Header* @runtime.__dynamic_map_get_entry(%runtime.Map_Header* %0, i64 %74, i8* %75)
  store %runtime.Map_Entry_Header* %76, %runtime.Map_Entry_Header** %6, align 8
  %77 = load %runtime.Map_Header, %runtime.Map_Header* %0, align 8
  %78 = load %runtime.Map_Entry_Header*, %runtime.Map_Entry_Header** %5, align 8
  %79 = load %runtime.Map_Entry_Header*, %runtime.Map_Entry_Header** %6, align 8
  %80 = bitcast %runtime.Context* %12 to i8*
  call void @runtime.__dynamic_map_copy_entry(%runtime.Map_Header* %0, %runtime.Map_Entry_Header* %78, %runtime.Map_Entry_Header* %79, i8* %80)
  %81 = load %runtime.Map_Header, %runtime.Map_Header* %0, align 8
  %82 = load %runtime.Map_Entry_Header*, %runtime.Map_Entry_Header** %5, align 8
  %83 = call { i64, i64 } @runtime.__get_map_hash_from_entry(%runtime.Map_Header* %0, %runtime.Map_Entry_Header* %82)
  %84 = bitcast %runtime.Map_Hash* %8 to { i64, i64 }*
  store { i64, i64 } %83, { i64, i64 }* %84, align 8
  %85 = load %runtime.Map_Hash, %runtime.Map_Hash* %8, align 8
  store %runtime.Map_Hash %85, %runtime.Map_Hash* %7, align 8
  br label %if.init

if.init:                                          ; preds = %if.else2
  %86 = load %runtime.Map_Header, %runtime.Map_Header* %0, align 8
  %87 = load %runtime.Map_Hash, %runtime.Map_Hash* %7, align 8
  %88 = bitcast %runtime.Map_Hash* %7 to { i64, i64 }*
  %89 = load { i64, i64 }, { i64, i64 }* %88, align 8
  %90 = bitcast %runtime.Map_Find_Result* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* %90, i8 0, i64 24, i1 false)
  %91 = bitcast %runtime.Context* %12 to i8*
  call void @runtime.__dynamic_map_find(%runtime.Map_Find_Result* sret %10, %runtime.Map_Header* %0, { i64, i64 } %89, i8* %91)
  %92 = load %runtime.Map_Find_Result, %runtime.Map_Find_Result* %10, align 8
  store %runtime.Map_Find_Result %92, %runtime.Map_Find_Result* %9, align 8
  %93 = getelementptr inbounds %runtime.Map_Find_Result, %runtime.Map_Find_Result* %9, i32 0, i32 1
  %94 = load i64, i64* %93, align 8
  %95 = icmp sge i64 %94, 0
  %96 = zext i1 %95 to i8
  %97 = trunc i8 %96 to i1
  br i1 %97, label %if.then3, label %if.else4

if.then3:                                         ; preds = %if.init
  %98 = load %runtime.Map_Header, %runtime.Map_Header* %0, align 8
  %99 = getelementptr inbounds %runtime.Map_Find_Result, %runtime.Map_Find_Result* %9, i32 0, i32 1
  %100 = load i64, i64* %99, align 8
  %101 = bitcast %runtime.Context* %12 to i8*
  %102 = call %runtime.Map_Entry_Header* @runtime.__dynamic_map_get_entry(%runtime.Map_Header* %0, i64 %100, i8* %101)
  store %runtime.Map_Entry_Header* %102, %runtime.Map_Entry_Header** %11, align 8
  %103 = load %runtime.Map_Entry_Header*, %runtime.Map_Entry_Header** %11, align 8
  %104 = getelementptr inbounds %runtime.Map_Entry_Header, %runtime.Map_Entry_Header* %103, i32 0, i32 1
  %105 = getelementptr inbounds %runtime.Map_Find_Result, %runtime.Map_Find_Result* %1, i32 0, i32 2
  %106 = load i64, i64* %105, align 8
  store i64 %106, i64* %104, align 8
  br label %if.done5

if.else4:                                         ; preds = %if.init
  %107 = getelementptr inbounds %runtime.Map_Header, %runtime.Map_Header* %0, i32 0, i32 0
  %108 = load %runtime.Raw_Map*, %runtime.Raw_Map** %107, align 8
  %109 = getelementptr inbounds %runtime.Raw_Map, %runtime.Raw_Map* %108, i32 0, i32 0
  %110 = load { i64*, i64 }, { i64*, i64 }* %109, align 8
  %111 = getelementptr inbounds { i64*, i64 }, { i64*, i64 }* %109, i32 0, i32 0
  %112 = load i64*, i64** %111, align 8
  %113 = getelementptr inbounds %runtime.Map_Find_Result, %runtime.Map_Find_Result* %9, i32 0, i32 0
  %114 = load i64, i64* %113, align 8
  %115 = getelementptr inbounds { i64*, i64 }, { i64*, i64 }* %109, i32 0, i32 1
  %116 = load i64, i64* %115, align 8
  %117 = getelementptr i64, i64* %112, i64 %114
  %118 = getelementptr inbounds %runtime.Map_Find_Result, %runtime.Map_Find_Result* %1, i32 0, i32 2
  %119 = load i64, i64* %118, align 8
  store i64 %119, i64* %117, align 8
  br label %if.done5

if.done5:                                         ; preds = %if.else4, %if.then3
  br label %if.done6

if.done6:                                         ; preds = %if.done5, %if.then1
  %120 = getelementptr inbounds %runtime.Map_Header, %runtime.Map_Header* %0, i32 0, i32 0
  %121 = load %runtime.Raw_Map*, %runtime.Raw_Map** %120, align 8
  %122 = getelementptr inbounds %runtime.Raw_Map, %runtime.Raw_Map* %121, i32 0, i32 1
  %123 = getelementptr inbounds %runtime.Raw_Dynamic_Array, %runtime.Raw_Dynamic_Array* %122, i32 0, i32 1
  %124 = load i64, i64* %123, align 8
  %125 = sub i64 %124, 1
  store i64 %125, i64* %123, align 8
  ret void
}

; Function Attrs: noreturn
define internal void @runtime.bounds_trap() #3 {
decls:
  br label %entry

entry:                                            ; preds = %decls
  call void @llvm.trap()
  unreachable
}

; Function Attrs: noreturn
define internal void @runtime.type_assertion_trap() #3 {
decls:
  br label %entry

entry:                                            ; preds = %decls
  call void @llvm.trap()
  unreachable
}

define internal void @runtime.bounds_check_error({ i64, i64 } %0, i32 %1, i32 %2, i64 %3, i64 %4) {
decls:
  %5 = alloca %..string, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  br label %entry

entry:                                            ; preds = %decls
  %10 = bitcast %..string* %5 to { i64, i64 }*
  store { i64, i64 } %0, { i64, i64 }* %10, align 8
  %11 = load %..string, %..string* %5, align 8
  store i32 %1, i32* %6, align 4
  store i32 %2, i32* %7, align 4
  store i64 %3, i64* %8, align 8
  store i64 %4, i64* %9, align 8
  %12 = load i64, i64* %8, align 8
  %13 = icmp sle i64 0, %12
  %14 = zext i1 %13 to i8
  %15 = trunc i8 %14 to i1
  br i1 %15, label %cmp.and, label %if.done

cmp.and:                                          ; preds = %entry
  %16 = load i64, i64* %8, align 8
  %17 = load i64, i64* %9, align 8
  %18 = icmp slt i64 %16, %17
  %19 = zext i1 %18 to i8
  %20 = trunc i8 %19 to i1
  br i1 %20, label %if.then, label %if.done

if.then:                                          ; preds = %cmp.and
  ret void

if.done:                                          ; preds = %cmp.and, %entry
  %21 = load %..string, %..string* %5, align 8
  %22 = load i32, i32* %6, align 4
  %23 = load i32, i32* %7, align 4
  %24 = load i64, i64* %8, align 8
  %25 = load i64, i64* %9, align 8
  %26 = bitcast %..string* %5 to { i64, i64 }*
  %27 = load { i64, i64 }, { i64, i64 }* %26, align 8
  call void @runtime.bounds_check_error.handle_error-0({ i64, i64 } %27, i32 %22, i32 %23, i64 %24, i64 %25)
  ret void
}

; Function Attrs: noreturn
define internal void @runtime.slice_handle_error({ i64, i64 } %0, i32 %1, i32 %2, i64 %3, i64 %4, i64 %5) #3 {
decls:
  %6 = alloca %..string, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca %runtime.Source_Code_Location, align 8
  %13 = alloca { i64, i64 }, align 8
  %14 = alloca { i64, i64 }, align 8
  %15 = alloca { i64, i64 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  %16 = bitcast %..string* %6 to { i64, i64 }*
  store { i64, i64 } %0, { i64, i64 }* %16, align 8
  %17 = load %..string, %..string* %6, align 8
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i64 %3, i64* %9, align 8
  store i64 %4, i64* %10, align 8
  store i64 %5, i64* %11, align 8
  %18 = bitcast %runtime.Source_Code_Location* %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* %18, i8 0, i64 40, i1 false)
  %19 = bitcast %runtime.Source_Code_Location* %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* %19, i8 0, i64 40, i1 false)
  %20 = load %..string, %..string* %6, align 8
  %21 = getelementptr inbounds %runtime.Source_Code_Location, %runtime.Source_Code_Location* %12, i32 0, i32 0
  store %..string %20, %..string* %21, align 8
  %22 = load i32, i32* %7, align 4
  %23 = getelementptr inbounds %runtime.Source_Code_Location, %runtime.Source_Code_Location* %12, i32 0, i32 1
  store i32 %22, i32* %23, align 4
  %24 = load i32, i32* %8, align 4
  %25 = getelementptr inbounds %runtime.Source_Code_Location, %runtime.Source_Code_Location* %12, i32 0, i32 2
  store i32 %24, i32* %25, align 4
  %26 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %12, align 8
  call void @runtime.print_caller_location(%runtime.Source_Code_Location* %12)
  %27 = bitcast { i64, i64 }* %13 to %..string*
  store %..string { i8* getelementptr inbounds ([24 x i8], [24 x i8]* @"csbs$2b6", i64 0, i64 0), i64 23 }, %..string* %27, align 8
  %28 = load { i64, i64 }, { i64, i64 }* %13, align 8
  %29 = call { i64, i64 } @runtime.print_string({ i64, i64 } %28)
  %30 = load i64, i64* %9, align 8
  call void @runtime.print_i64(i64 %30)
  %31 = bitcast { i64, i64 }* %14 to %..string*
  store %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$2b7", i64 0, i64 0), i64 1 }, %..string* %31, align 8
  %32 = load { i64, i64 }, { i64, i64 }* %14, align 8
  %33 = call { i64, i64 } @runtime.print_string({ i64, i64 } %32)
  %34 = load i64, i64* %10, align 8
  call void @runtime.print_i64(i64 %34)
  %35 = bitcast { i64, i64 }* %15 to %..string*
  store %..string { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @"csbs$2b8", i64 0, i64 0), i64 21 }, %..string* %35, align 8
  %36 = load { i64, i64 }, { i64, i64 }* %15, align 8
  %37 = call { i64, i64 } @runtime.print_string({ i64, i64 } %36)
  %38 = load i64, i64* %11, align 8
  call void @runtime.print_i64(i64 %38)
  %39 = call { i64, i64 } @runtime.print_byte(i8 10)
  call void @runtime.bounds_trap()
  unreachable
}

; Function Attrs: noreturn
define internal void @runtime.multi_pointer_slice_handle_error({ i64, i64 } %0, i32 %1, i32 %2, i64 %3, i64 %4) #3 {
decls:
  %5 = alloca %..string, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca %runtime.Source_Code_Location, align 8
  %11 = alloca { i64, i64 }, align 8
  %12 = alloca { i64, i64 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  %13 = bitcast %..string* %5 to { i64, i64 }*
  store { i64, i64 } %0, { i64, i64 }* %13, align 8
  %14 = load %..string, %..string* %5, align 8
  store i32 %1, i32* %6, align 4
  store i32 %2, i32* %7, align 4
  store i64 %3, i64* %8, align 8
  store i64 %4, i64* %9, align 8
  %15 = bitcast %runtime.Source_Code_Location* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* %15, i8 0, i64 40, i1 false)
  %16 = bitcast %runtime.Source_Code_Location* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* %16, i8 0, i64 40, i1 false)
  %17 = load %..string, %..string* %5, align 8
  %18 = getelementptr inbounds %runtime.Source_Code_Location, %runtime.Source_Code_Location* %10, i32 0, i32 0
  store %..string %17, %..string* %18, align 8
  %19 = load i32, i32* %6, align 4
  %20 = getelementptr inbounds %runtime.Source_Code_Location, %runtime.Source_Code_Location* %10, i32 0, i32 1
  store i32 %19, i32* %20, align 4
  %21 = load i32, i32* %7, align 4
  %22 = getelementptr inbounds %runtime.Source_Code_Location, %runtime.Source_Code_Location* %10, i32 0, i32 2
  store i32 %21, i32* %22, align 4
  %23 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %10, align 8
  call void @runtime.print_caller_location(%runtime.Source_Code_Location* %10)
  %24 = bitcast { i64, i64 }* %11 to %..string*
  store %..string { i8* getelementptr inbounds ([24 x i8], [24 x i8]* @"csbs$2b6", i64 0, i64 0), i64 23 }, %..string* %24, align 8
  %25 = load { i64, i64 }, { i64, i64 }* %11, align 8
  %26 = call { i64, i64 } @runtime.print_string({ i64, i64 } %25)
  %27 = load i64, i64* %8, align 8
  call void @runtime.print_i64(i64 %27)
  %28 = bitcast { i64, i64 }* %12 to %..string*
  store %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$2b7", i64 0, i64 0), i64 1 }, %..string* %28, align 8
  %29 = load { i64, i64 }, { i64, i64 }* %12, align 8
  %30 = call { i64, i64 } @runtime.print_string({ i64, i64 } %29)
  %31 = load i64, i64* %9, align 8
  call void @runtime.print_i64(i64 %31)
  %32 = call { i64, i64 } @runtime.print_byte(i8 10)
  call void @runtime.bounds_trap()
  unreachable
}

define internal void @runtime.multi_pointer_slice_expr_error({ i64, i64 } %0, i32 %1, i32 %2, i64 %3, i64 %4) {
decls:
  %5 = alloca %..string, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  br label %entry

entry:                                            ; preds = %decls
  %10 = bitcast %..string* %5 to { i64, i64 }*
  store { i64, i64 } %0, { i64, i64 }* %10, align 8
  %11 = load %..string, %..string* %5, align 8
  store i32 %1, i32* %6, align 4
  store i32 %2, i32* %7, align 4
  store i64 %3, i64* %8, align 8
  store i64 %4, i64* %9, align 8
  %12 = load i64, i64* %8, align 8
  %13 = load i64, i64* %9, align 8
  %14 = icmp sle i64 %12, %13
  %15 = zext i1 %14 to i8
  %16 = trunc i8 %15 to i1
  br i1 %16, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  ret void

if.done:                                          ; preds = %entry
  %17 = load %..string, %..string* %5, align 8
  %18 = load i32, i32* %6, align 4
  %19 = load i32, i32* %7, align 4
  %20 = load i64, i64* %8, align 8
  %21 = load i64, i64* %9, align 8
  %22 = bitcast %..string* %5 to { i64, i64 }*
  %23 = load { i64, i64 }, { i64, i64 }* %22, align 8
  call void @runtime.multi_pointer_slice_handle_error({ i64, i64 } %23, i32 %18, i32 %19, i64 %20, i64 %21)
  unreachable
}

define internal void @runtime.slice_expr_error_hi({ i64, i64 } %0, i32 %1, i32 %2, i64 %3, i64 %4) {
decls:
  %5 = alloca %..string, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  br label %entry

entry:                                            ; preds = %decls
  %10 = bitcast %..string* %5 to { i64, i64 }*
  store { i64, i64 } %0, { i64, i64 }* %10, align 8
  %11 = load %..string, %..string* %5, align 8
  store i32 %1, i32* %6, align 4
  store i32 %2, i32* %7, align 4
  store i64 %3, i64* %8, align 8
  store i64 %4, i64* %9, align 8
  %12 = load i64, i64* %8, align 8
  %13 = icmp sle i64 0, %12
  %14 = zext i1 %13 to i8
  %15 = trunc i8 %14 to i1
  br i1 %15, label %cmp.and, label %if.done

cmp.and:                                          ; preds = %entry
  %16 = load i64, i64* %8, align 8
  %17 = load i64, i64* %9, align 8
  %18 = icmp sle i64 %16, %17
  %19 = zext i1 %18 to i8
  %20 = trunc i8 %19 to i1
  br i1 %20, label %if.then, label %if.done

if.then:                                          ; preds = %cmp.and
  ret void

if.done:                                          ; preds = %cmp.and, %entry
  %21 = load %..string, %..string* %5, align 8
  %22 = load i32, i32* %6, align 4
  %23 = load i32, i32* %7, align 4
  %24 = load i64, i64* %8, align 8
  %25 = load i64, i64* %9, align 8
  %26 = bitcast %..string* %5 to { i64, i64 }*
  %27 = load { i64, i64 }, { i64, i64 }* %26, align 8
  call void @runtime.slice_handle_error({ i64, i64 } %27, i32 %22, i32 %23, i64 0, i64 %24, i64 %25)
  unreachable
}

define internal void @runtime.slice_expr_error_lo_hi({ i64, i64 } %0, i32 %1, i32 %2, i64 %3, i64 %4, i64 %5) {
decls:
  %6 = alloca %..string, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  br label %entry

entry:                                            ; preds = %decls
  %12 = bitcast %..string* %6 to { i64, i64 }*
  store { i64, i64 } %0, { i64, i64 }* %12, align 8
  %13 = load %..string, %..string* %6, align 8
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i64 %3, i64* %9, align 8
  store i64 %4, i64* %10, align 8
  store i64 %5, i64* %11, align 8
  %14 = load i64, i64* %9, align 8
  %15 = icmp sle i64 0, %14
  %16 = zext i1 %15 to i8
  %17 = trunc i8 %16 to i1
  br i1 %17, label %cmp.and, label %if.done

cmp.and:                                          ; preds = %entry
  %18 = load i64, i64* %9, align 8
  %19 = load i64, i64* %11, align 8
  %20 = icmp sle i64 %18, %19
  %21 = zext i1 %20 to i8
  %22 = trunc i8 %21 to i1
  br i1 %22, label %cmp.and1, label %if.done

cmp.and1:                                         ; preds = %cmp.and
  %23 = load i64, i64* %9, align 8
  %24 = load i64, i64* %10, align 8
  %25 = icmp sle i64 %23, %24
  %26 = zext i1 %25 to i8
  %27 = trunc i8 %26 to i1
  br i1 %27, label %cmp.and2, label %if.done

cmp.and2:                                         ; preds = %cmp.and1
  %28 = load i64, i64* %10, align 8
  %29 = load i64, i64* %11, align 8
  %30 = icmp sle i64 %28, %29
  %31 = zext i1 %30 to i8
  %32 = trunc i8 %31 to i1
  br i1 %32, label %if.then, label %if.done

if.then:                                          ; preds = %cmp.and2
  ret void

if.done:                                          ; preds = %cmp.and2, %cmp.and1, %cmp.and, %entry
  %33 = load %..string, %..string* %6, align 8
  %34 = load i32, i32* %7, align 4
  %35 = load i32, i32* %8, align 4
  %36 = load i64, i64* %9, align 8
  %37 = load i64, i64* %10, align 8
  %38 = load i64, i64* %11, align 8
  %39 = bitcast %..string* %6 to { i64, i64 }*
  %40 = load { i64, i64 }, { i64, i64 }* %39, align 8
  call void @runtime.slice_handle_error({ i64, i64 } %40, i32 %34, i32 %35, i64 %36, i64 %37, i64 %38)
  unreachable
}

define internal void @runtime.matrix_bounds_check_error({ i64, i64 } %0, i32 %1, i32 %2, i64 %3, i64 %4, i64 %5, i64 %6) {
decls:
  %7 = alloca %..string, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  br label %entry

entry:                                            ; preds = %decls
  %14 = bitcast %..string* %7 to { i64, i64 }*
  store { i64, i64 } %0, { i64, i64 }* %14, align 8
  %15 = load %..string, %..string* %7, align 8
  store i32 %1, i32* %8, align 4
  store i32 %2, i32* %9, align 4
  store i64 %3, i64* %10, align 8
  store i64 %4, i64* %11, align 8
  store i64 %5, i64* %12, align 8
  store i64 %6, i64* %13, align 8
  %16 = load i64, i64* %10, align 8
  %17 = icmp sle i64 0, %16
  %18 = zext i1 %17 to i8
  %19 = trunc i8 %18 to i1
  br i1 %19, label %cmp.and, label %if.done

cmp.and:                                          ; preds = %entry
  %20 = load i64, i64* %10, align 8
  %21 = load i64, i64* %12, align 8
  %22 = icmp slt i64 %20, %21
  %23 = zext i1 %22 to i8
  %24 = trunc i8 %23 to i1
  br i1 %24, label %cmp.and1, label %if.done

cmp.and1:                                         ; preds = %cmp.and
  %25 = load i64, i64* %11, align 8
  %26 = icmp sle i64 0, %25
  %27 = zext i1 %26 to i8
  %28 = trunc i8 %27 to i1
  br i1 %28, label %cmp.and2, label %if.done

cmp.and2:                                         ; preds = %cmp.and1
  %29 = load i64, i64* %11, align 8
  %30 = load i64, i64* %13, align 8
  %31 = icmp slt i64 %29, %30
  %32 = zext i1 %31 to i8
  %33 = trunc i8 %32 to i1
  br i1 %33, label %if.then, label %if.done

if.then:                                          ; preds = %cmp.and2
  ret void

if.done:                                          ; preds = %cmp.and2, %cmp.and1, %cmp.and, %entry
  %34 = load %..string, %..string* %7, align 8
  %35 = load i32, i32* %8, align 4
  %36 = load i32, i32* %9, align 4
  %37 = load i64, i64* %10, align 8
  %38 = load i64, i64* %11, align 8
  %39 = load i64, i64* %12, align 8
  %40 = load i64, i64* %13, align 8
  %41 = bitcast %..string* %7 to { i64, i64 }*
  %42 = load { i64, i64 }, { i64, i64 }* %41, align 8
  call void @runtime.matrix_bounds_check_error.handle_error-0({ i64, i64 } %42, i32 %35, i32 %36, i64 %37, i64 %38, i64 %39, i64 %40)
  ret void
}

; Function Attrs: alwaysinline
define internal void @runtime.make_slice_error_loc(%runtime.Source_Code_Location* %0, i64 %1) #4 {
decls:
  %2 = alloca i64, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i64 %1, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  %4 = icmp sle i64 0, %3
  %5 = zext i1 %4 to i8
  %6 = trunc i8 %5 to i1
  br i1 %6, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  ret void

if.done:                                          ; preds = %entry
  %7 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %0, align 8
  %8 = load i64, i64* %2, align 8
  call void @runtime.make_slice_error_loc.handle_error-0(%runtime.Source_Code_Location* %0, i64 %8) #4
  ret void
}

; Function Attrs: alwaysinline
define internal void @runtime.make_dynamic_array_error_loc(%runtime.Source_Code_Location* %0, i64 %1, i64 %2) #4 {
decls:
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i64 %1, i64* %3, align 8
  store i64 %2, i64* %4, align 8
  %5 = load i64, i64* %3, align 8
  %6 = icmp sle i64 0, %5
  %7 = zext i1 %6 to i8
  %8 = trunc i8 %7 to i1
  br i1 %8, label %cmp.and, label %if.done

cmp.and:                                          ; preds = %entry
  %9 = load i64, i64* %3, align 8
  %10 = load i64, i64* %4, align 8
  %11 = icmp sle i64 %9, %10
  %12 = zext i1 %11 to i8
  %13 = trunc i8 %12 to i1
  br i1 %13, label %if.then, label %if.done

if.then:                                          ; preds = %cmp.and
  ret void

if.done:                                          ; preds = %cmp.and, %entry
  %14 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %0, align 8
  %15 = load i64, i64* %3, align 8
  %16 = load i64, i64* %4, align 8
  call void @runtime.make_dynamic_array_error_loc.handle_error-0(%runtime.Source_Code_Location* %0, i64 %15, i64 %16) #4
  ret void
}

; Function Attrs: alwaysinline
define internal void @runtime.make_map_expr_error_loc(%runtime.Source_Code_Location* %0, i64 %1) #4 {
decls:
  %2 = alloca i64, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i64 %1, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  %4 = icmp sle i64 0, %3
  %5 = zext i1 %4 to i8
  %6 = trunc i8 %5 to i1
  br i1 %6, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  ret void

if.done:                                          ; preds = %entry
  %7 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %0, align 8
  %8 = load i64, i64* %2, align 8
  call void @runtime.make_map_expr_error_loc.handle_error-0(%runtime.Source_Code_Location* %0, i64 %8) #4
  ret void
}

; Function Attrs: alwaysinline
define internal void @runtime.bounds_check_error_loc(%runtime.Source_Code_Location* %0, i64 %1, i64 %2) #4 {
decls:
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i64 %1, i64* %3, align 8
  store i64 %2, i64* %4, align 8
  %5 = getelementptr inbounds %runtime.Source_Code_Location, %runtime.Source_Code_Location* %0, i32 0, i32 0
  %6 = load %..string, %..string* %5, align 8
  %7 = getelementptr inbounds %runtime.Source_Code_Location, %runtime.Source_Code_Location* %0, i32 0, i32 1
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %runtime.Source_Code_Location, %runtime.Source_Code_Location* %0, i32 0, i32 2
  %10 = load i32, i32* %9, align 4
  %11 = load i64, i64* %3, align 8
  %12 = load i64, i64* %4, align 8
  %13 = bitcast %..string* %5 to { i64, i64 }*
  %14 = load { i64, i64 }, { i64, i64 }* %13, align 8
  call void @runtime.bounds_check_error({ i64, i64 } %14, i32 %8, i32 %10, i64 %11, i64 %12) #4
  ret void
}

; Function Attrs: alwaysinline
define internal { i64, i64 } @runtime.byte_slice-637(i8* %0, i64 %1) #4 {
decls:
  %2 = alloca i8*, align 8
  %3 = alloca i64, align 8
  %4 = alloca { i8*, i64 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i8* %0, i8** %2, align 8
  store i64 %1, i64* %3, align 8
  %5 = load i64, i64* %3, align 8
  %6 = icmp sgt i64 %5, 0
  %7 = select i1 %6, i64 %5, i64 0
  %8 = load i8*, i8** %2, align 8
  %9 = load i8*, i8** %2, align 8
  %10 = getelementptr i8, i8* %9, i64 0
  %11 = sub i64 %7, 0
  %12 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %4, i32 0, i32 0
  %13 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %4, i32 0, i32 1
  store i8* %10, i8** %12, align 8
  store i64 %11, i64* %13, align 8
  %14 = load { i8*, i64 }, { i8*, i64 }* %4, align 8
  %15 = bitcast { i8*, i64 }* %4 to { i64, i64 }*
  %16 = load { i64, i64 }, { i64, i64 }* %15, align 8
  ret { i64, i64 } %16
}

; Function Attrs: alwaysinline
define internal i8 @runtime.is_power_of_two_int(i64 %0, i8* noalias nocapture nonnull %__.context_ptr) #4 {
decls:
  %1 = alloca i64, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i64 %0, i64* %1, align 8
  %2 = bitcast i8* %__.context_ptr to %runtime.Context*
  %3 = load i64, i64* %1, align 8
  %4 = icmp sle i64 %3, 0
  %5 = zext i1 %4 to i8
  %6 = trunc i8 %5 to i1
  br i1 %6, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  ret i8 0

if.done:                                          ; preds = %entry
  %7 = load i64, i64* %1, align 8
  %8 = load i64, i64* %1, align 8
  %9 = sub i64 %8, 1
  %10 = and i64 %7, %9
  %11 = icmp eq i64 %10, 0
  %12 = zext i1 %11 to i8
  ret i8 %12
}

; Function Attrs: alwaysinline
define internal i64 @runtime.align_forward_int(i64 %0, i64 %1, i8* noalias nocapture nonnull %__.context_ptr) #4 {
decls:
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca { i64, i64 }, align 8
  %5 = alloca %runtime.Source_Code_Location, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i64 %0, i64* %2, align 8
  store i64 %1, i64* %3, align 8
  %8 = bitcast i8* %__.context_ptr to %runtime.Context*
  %9 = load i64, i64* %3, align 8
  %10 = bitcast %runtime.Context* %8 to i8*
  %11 = call i8 @runtime.is_power_of_two_int(i64 %9, i8* %10) #4
  %12 = icmp ne i8 %11, 0
  %13 = bitcast { i64, i64 }* %4 to %..string*
  store %..string zeroinitializer, %..string* %13, align 8
  %14 = load { i64, i64 }, { i64, i64 }* %4, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([60 x i8], [60 x i8]* @"csbs$2b9", i64 0, i64 0), i64 59 }, i32 74, i32 2, %..string { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @"csbs$2ba", i64 0, i64 0), i64 17 } }, %runtime.Source_Code_Location* %5, align 8
  %15 = bitcast %runtime.Context* %8 to i8*
  call void @runtime.assert(i1 %12, { i64, i64 } %14, %runtime.Source_Code_Location* %5, i8* %15) #4
  %16 = load i64, i64* %2, align 8
  store i64 %16, i64* %6, align 8
  %17 = load i64, i64* %6, align 8
  %18 = load i64, i64* %3, align 8
  %19 = sub i64 %18, 1
  %20 = and i64 %17, %19
  store i64 %20, i64* %7, align 8
  %21 = load i64, i64* %7, align 8
  %22 = icmp ne i64 %21, 0
  %23 = zext i1 %22 to i8
  %24 = trunc i8 %23 to i1
  br i1 %24, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  %25 = load i64, i64* %3, align 8
  %26 = load i64, i64* %7, align 8
  %27 = sub i64 %25, %26
  %28 = load i64, i64* %6, align 8
  %29 = add i64 %28, %27
  store i64 %29, i64* %6, align 8
  br label %if.done

if.done:                                          ; preds = %if.then, %entry
  %30 = load i64, i64* %6, align 8
  ret i64 %30
}

; Function Attrs: alwaysinline
define internal i8 @runtime.is_power_of_two_uintptr(i64 %0, i8* noalias nocapture nonnull %__.context_ptr) #4 {
decls:
  %1 = alloca i64, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i64 %0, i64* %1, align 8
  %2 = bitcast i8* %__.context_ptr to %runtime.Context*
  %3 = load i64, i64* %1, align 8
  %4 = icmp ule i64 %3, 0
  %5 = zext i1 %4 to i8
  %6 = trunc i8 %5 to i1
  br i1 %6, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  ret i8 0

if.done:                                          ; preds = %entry
  %7 = load i64, i64* %1, align 8
  %8 = load i64, i64* %1, align 8
  %9 = sub i64 %8, 1
  %10 = and i64 %7, %9
  %11 = icmp eq i64 %10, 0
  %12 = zext i1 %11 to i8
  ret i8 %12
}

; Function Attrs: alwaysinline
define internal i64 @runtime.align_forward_uintptr(i64 %0, i64 %1, i8* noalias nocapture nonnull %__.context_ptr) #4 {
decls:
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca { i64, i64 }, align 8
  %5 = alloca %runtime.Source_Code_Location, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i64 %0, i64* %2, align 8
  store i64 %1, i64* %3, align 8
  %8 = bitcast i8* %__.context_ptr to %runtime.Context*
  %9 = load i64, i64* %3, align 8
  %10 = bitcast %runtime.Context* %8 to i8*
  %11 = call i8 @runtime.is_power_of_two_uintptr(i64 %9, i8* %10) #4
  %12 = icmp ne i8 %11, 0
  %13 = bitcast { i64, i64 }* %4 to %..string*
  store %..string zeroinitializer, %..string* %13, align 8
  %14 = load { i64, i64 }, { i64, i64 }* %4, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([60 x i8], [60 x i8]* @"csbs$2b9", i64 0, i64 0), i64 59 }, i32 92, i32 2, %..string { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @"csbs$2bb", i64 0, i64 0), i64 21 } }, %runtime.Source_Code_Location* %5, align 8
  %15 = bitcast %runtime.Context* %8 to i8*
  call void @runtime.assert(i1 %12, { i64, i64 } %14, %runtime.Source_Code_Location* %5, i8* %15) #4
  %16 = load i64, i64* %2, align 8
  store i64 %16, i64* %6, align 8
  %17 = load i64, i64* %6, align 8
  %18 = load i64, i64* %3, align 8
  %19 = sub i64 %18, 1
  %20 = and i64 %17, %19
  store i64 %20, i64* %7, align 8
  %21 = load i64, i64* %7, align 8
  %22 = icmp ne i64 %21, 0
  %23 = zext i1 %22 to i8
  %24 = trunc i8 %23 to i1
  br i1 %24, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  %25 = load i64, i64* %3, align 8
  %26 = load i64, i64* %7, align 8
  %27 = sub i64 %25, %26
  %28 = load i64, i64* %6, align 8
  %29 = add i64 %28, %27
  store i64 %29, i64* %6, align 8
  br label %if.done

if.done:                                          ; preds = %if.then, %entry
  %30 = load i64, i64* %6, align 8
  ret i64 %30
}

define internal i8* @runtime.mem_zero(i8* %0, i64 %1) {
decls:
  %2 = alloca i8*, align 8
  %3 = alloca i64, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i8* %0, i8** %2, align 8
  store i64 %1, i64* %3, align 8
  %4 = load i8*, i8** %2, align 8
  %5 = icmp eq i8* %4, null
  %6 = zext i1 %5 to i8
  %7 = trunc i8 %6 to i1
  br i1 %7, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  ret i8* null

if.done:                                          ; preds = %entry
  %8 = load i64, i64* %3, align 8
  %9 = icmp sle i64 %8, 0
  %10 = zext i1 %9 to i8
  %11 = trunc i8 %10 to i1
  br i1 %11, label %if.then1, label %if.done2

if.then1:                                         ; preds = %if.done
  %12 = load i8*, i8** %2, align 8
  ret i8* %12

if.done2:                                         ; preds = %if.done
  %13 = load i8*, i8** %2, align 8
  %14 = load i64, i64* %3, align 8
  call void @llvm.memset.p0i8.i64(i8* %13, i8 0, i64 %14, i1 false)
  %15 = load i8*, i8** %2, align 8
  ret i8* %15
}

define internal i8* @runtime.mem_copy(i8* %0, i8* %1, i64 %2) {
decls:
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i64, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  store i64 %2, i64* %5, align 8
  %6 = load i8*, i8** %4, align 8
  %7 = icmp ne i8* %6, null
  %8 = zext i1 %7 to i8
  %9 = trunc i8 %8 to i1
  br i1 %9, label %cmp.and, label %if.done

cmp.and:                                          ; preds = %entry
  %10 = load i8*, i8** %3, align 8
  %11 = load i8*, i8** %4, align 8
  %12 = icmp ne i8* %10, %11
  %13 = zext i1 %12 to i8
  %14 = trunc i8 %13 to i1
  br i1 %14, label %cmp.and1, label %if.done

cmp.and1:                                         ; preds = %cmp.and
  %15 = load i64, i64* %5, align 8
  %16 = icmp sgt i64 %15, 0
  %17 = zext i1 %16 to i8
  %18 = trunc i8 %17 to i1
  br i1 %18, label %if.then, label %if.done

if.then:                                          ; preds = %cmp.and1
  %19 = load i8*, i8** %3, align 8
  %20 = load i8*, i8** %4, align 8
  %21 = load i64, i64* %5, align 8
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %19, i8* %20, i64 %21, i1 false)
  br label %if.done

if.done:                                          ; preds = %if.then, %cmp.and1, %cmp.and, %entry
  %22 = load i8*, i8** %3, align 8
  ret i8* %22
}

; Function Attrs: alwaysinline
define internal void @runtime.mem_alloc_bytes({ { i8*, i64 }, i8 }* noalias sret %agg.result, i64 %0, i64 %1, { i64, i64 } %2, %runtime.Source_Code_Location* %3, i8* noalias nocapture nonnull %__.context_ptr) #4 {
decls:
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca %runtime.Allocator, align 8
  %7 = alloca { { i8*, i64 }, i8 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i64 %0, i64* %4, align 8
  store i64 %1, i64* %5, align 8
  %8 = bitcast %runtime.Allocator* %6 to { i64, i64 }*
  store { i64, i64 } %2, { i64, i64 }* %8, align 8
  %9 = load %runtime.Allocator, %runtime.Allocator* %6, align 8
  %10 = bitcast i8* %__.context_ptr to %runtime.Context*
  %11 = load i64, i64* %4, align 8
  %12 = icmp eq i64 %11, 0
  %13 = zext i1 %12 to i8
  %14 = trunc i8 %13 to i1
  br i1 %14, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  %15 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 0
  %16 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 1
  store { i8*, i64 } zeroinitializer, { i8*, i64 }* %15, align 8
  store i8 0, i8* %16, align 1
  ret void

if.done:                                          ; preds = %entry
  %17 = getelementptr inbounds %runtime.Allocator, %runtime.Allocator* %6, i32 0, i32 0
  %18 = load i8*, i8** %17, align 8
  %19 = icmp eq i8* %18, null
  %20 = zext i1 %19 to i8
  %21 = trunc i8 %20 to i1
  br i1 %21, label %if.then1, label %if.done2

if.then1:                                         ; preds = %if.done
  %22 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 0
  %23 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 1
  store { i8*, i64 } zeroinitializer, { i8*, i64 }* %22, align 8
  store i8 0, i8* %23, align 1
  ret void

if.done2:                                         ; preds = %if.done
  %24 = getelementptr inbounds %runtime.Allocator, %runtime.Allocator* %6, i32 0, i32 0
  %25 = load i8*, i8** %24, align 8
  %26 = getelementptr inbounds %runtime.Allocator, %runtime.Allocator* %6, i32 0, i32 1
  %27 = load i8*, i8** %26, align 8
  %28 = load i64, i64* %4, align 8
  %29 = load i64, i64* %5, align 8
  %30 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %3, align 8
  %31 = bitcast { { i8*, i64 }, i8 }* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* %31, i8 0, i64 24, i1 false)
  %32 = bitcast %runtime.Context* %10 to i8*
  %33 = bitcast i8* %25 to void ({ { i8*, i64 }, i8 }*, i8*, i8, i64, i64, i8*, i64, %runtime.Source_Code_Location*, i8*)*
  call void %33({ { i8*, i64 }, i8 }* sret %7, i8* %27, i8 0, i64 %28, i64 %29, i8* null, i64 0, %runtime.Source_Code_Location* %3, i8* %32) #4
  %34 = load { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %7, align 8
  %35 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %7, i32 0, i32 0
  %36 = load { i8*, i64 }, { i8*, i64 }* %35, align 8
  %37 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %7, i32 0, i32 1
  %38 = load i8, i8* %37, align 1
  %39 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 0
  %40 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 1
  store { i8*, i64 } %36, { i8*, i64 }* %39, align 8
  store i8 %38, i8* %40, align 1
  ret void
}

; Function Attrs: alwaysinline
define internal void @runtime.mem_alloc({ { i8*, i64 }, i8 }* noalias sret %agg.result, i64 %0, i64 %1, { i64, i64 } %2, %runtime.Source_Code_Location* %3, i8* noalias nocapture nonnull %__.context_ptr) #4 {
decls:
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca %runtime.Allocator, align 8
  %7 = alloca { { i8*, i64 }, i8 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i64 %0, i64* %4, align 8
  store i64 %1, i64* %5, align 8
  %8 = bitcast %runtime.Allocator* %6 to { i64, i64 }*
  store { i64, i64 } %2, { i64, i64 }* %8, align 8
  %9 = load %runtime.Allocator, %runtime.Allocator* %6, align 8
  %10 = bitcast i8* %__.context_ptr to %runtime.Context*
  %11 = load i64, i64* %4, align 8
  %12 = icmp eq i64 %11, 0
  %13 = zext i1 %12 to i8
  %14 = trunc i8 %13 to i1
  br i1 %14, label %if.then, label %cmp.or

cmp.or:                                           ; preds = %entry
  %15 = getelementptr inbounds %runtime.Allocator, %runtime.Allocator* %6, i32 0, i32 0
  %16 = load i8*, i8** %15, align 8
  %17 = icmp eq i8* %16, null
  %18 = zext i1 %17 to i8
  %19 = trunc i8 %18 to i1
  br i1 %19, label %if.then, label %if.done

if.then:                                          ; preds = %cmp.or, %entry
  %20 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 0
  %21 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 1
  store { i8*, i64 } zeroinitializer, { i8*, i64 }* %20, align 8
  store i8 0, i8* %21, align 1
  ret void

if.done:                                          ; preds = %cmp.or
  %22 = getelementptr inbounds %runtime.Allocator, %runtime.Allocator* %6, i32 0, i32 0
  %23 = load i8*, i8** %22, align 8
  %24 = getelementptr inbounds %runtime.Allocator, %runtime.Allocator* %6, i32 0, i32 1
  %25 = load i8*, i8** %24, align 8
  %26 = load i64, i64* %4, align 8
  %27 = load i64, i64* %5, align 8
  %28 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %3, align 8
  %29 = bitcast { { i8*, i64 }, i8 }* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* %29, i8 0, i64 24, i1 false)
  %30 = bitcast %runtime.Context* %10 to i8*
  %31 = bitcast i8* %23 to void ({ { i8*, i64 }, i8 }*, i8*, i8, i64, i64, i8*, i64, %runtime.Source_Code_Location*, i8*)*
  call void %31({ { i8*, i64 }, i8 }* sret %7, i8* %25, i8 0, i64 %26, i64 %27, i8* null, i64 0, %runtime.Source_Code_Location* %3, i8* %30) #4
  %32 = load { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %7, align 8
  %33 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %7, i32 0, i32 0
  %34 = load { i8*, i64 }, { i8*, i64 }* %33, align 8
  %35 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %7, i32 0, i32 1
  %36 = load i8, i8* %35, align 1
  %37 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 0
  %38 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 1
  store { i8*, i64 } %34, { i8*, i64 }* %37, align 8
  store i8 %36, i8* %38, align 1
  ret void
}

; Function Attrs: alwaysinline
define internal i8 @runtime.mem_free(i8* %0, { i64, i64 } %1, %runtime.Source_Code_Location* %2, i8* noalias nocapture nonnull %__.context_ptr) #4 {
decls:
  %3 = alloca i8*, align 8
  %4 = alloca %runtime.Allocator, align 8
  %5 = alloca i8, align 1
  %6 = alloca { { i8*, i64 }, i8 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i8* %0, i8** %3, align 8
  %7 = bitcast %runtime.Allocator* %4 to { i64, i64 }*
  store { i64, i64 } %1, { i64, i64 }* %7, align 8
  %8 = load %runtime.Allocator, %runtime.Allocator* %4, align 8
  %9 = bitcast i8* %__.context_ptr to %runtime.Context*
  %10 = load i8*, i8** %3, align 8
  %11 = icmp eq i8* %10, null
  %12 = zext i1 %11 to i8
  %13 = trunc i8 %12 to i1
  br i1 %13, label %if.then, label %cmp.or

cmp.or:                                           ; preds = %entry
  %14 = getelementptr inbounds %runtime.Allocator, %runtime.Allocator* %4, i32 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = icmp eq i8* %15, null
  %17 = zext i1 %16 to i8
  %18 = trunc i8 %17 to i1
  br i1 %18, label %if.then, label %if.done

if.then:                                          ; preds = %cmp.or, %entry
  ret i8 0

if.done:                                          ; preds = %cmp.or
  %19 = getelementptr inbounds %runtime.Allocator, %runtime.Allocator* %4, i32 0, i32 0
  %20 = load i8*, i8** %19, align 8
  %21 = getelementptr inbounds %runtime.Allocator, %runtime.Allocator* %4, i32 0, i32 1
  %22 = load i8*, i8** %21, align 8
  %23 = load i8*, i8** %3, align 8
  %24 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %2, align 8
  %25 = bitcast { { i8*, i64 }, i8 }* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* %25, i8 0, i64 24, i1 false)
  %26 = bitcast %runtime.Context* %9 to i8*
  %27 = bitcast i8* %20 to void ({ { i8*, i64 }, i8 }*, i8*, i8, i64, i64, i8*, i64, %runtime.Source_Code_Location*, i8*)*
  call void %27({ { i8*, i64 }, i8 }* sret %6, i8* %22, i8 1, i64 0, i64 0, i8* %23, i64 0, %runtime.Source_Code_Location* %2, i8* %26) #4
  %28 = load { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %6, align 8
  %29 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %6, i32 0, i32 0
  %30 = load { i8*, i64 }, { i8*, i64 }* %29, align 8
  %31 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %6, i32 0, i32 1
  %32 = load i8, i8* %31, align 1
  store i8 %32, i8* %5, align 1
  %33 = load i8, i8* %5, align 1
  ret i8 %33
}

; Function Attrs: alwaysinline
define internal i8 @runtime.mem_free_with_size(i8* %0, i64 %1, { i64, i64 } %2, %runtime.Source_Code_Location* %3, i8* noalias nocapture nonnull %__.context_ptr) #4 {
decls:
  %4 = alloca i8*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %runtime.Allocator, align 8
  %7 = alloca i8, align 1
  %8 = alloca { { i8*, i64 }, i8 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i8* %0, i8** %4, align 8
  store i64 %1, i64* %5, align 8
  %9 = bitcast %runtime.Allocator* %6 to { i64, i64 }*
  store { i64, i64 } %2, { i64, i64 }* %9, align 8
  %10 = load %runtime.Allocator, %runtime.Allocator* %6, align 8
  %11 = bitcast i8* %__.context_ptr to %runtime.Context*
  %12 = load i8*, i8** %4, align 8
  %13 = icmp eq i8* %12, null
  %14 = zext i1 %13 to i8
  %15 = trunc i8 %14 to i1
  br i1 %15, label %if.then, label %cmp.or

cmp.or:                                           ; preds = %entry
  %16 = getelementptr inbounds %runtime.Allocator, %runtime.Allocator* %6, i32 0, i32 0
  %17 = load i8*, i8** %16, align 8
  %18 = icmp eq i8* %17, null
  %19 = zext i1 %18 to i8
  %20 = trunc i8 %19 to i1
  br i1 %20, label %if.then, label %if.done

if.then:                                          ; preds = %cmp.or, %entry
  ret i8 0

if.done:                                          ; preds = %cmp.or
  %21 = getelementptr inbounds %runtime.Allocator, %runtime.Allocator* %6, i32 0, i32 0
  %22 = load i8*, i8** %21, align 8
  %23 = getelementptr inbounds %runtime.Allocator, %runtime.Allocator* %6, i32 0, i32 1
  %24 = load i8*, i8** %23, align 8
  %25 = load i8*, i8** %4, align 8
  %26 = load i64, i64* %5, align 8
  %27 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %3, align 8
  %28 = bitcast { { i8*, i64 }, i8 }* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* %28, i8 0, i64 24, i1 false)
  %29 = bitcast %runtime.Context* %11 to i8*
  %30 = bitcast i8* %22 to void ({ { i8*, i64 }, i8 }*, i8*, i8, i64, i64, i8*, i64, %runtime.Source_Code_Location*, i8*)*
  call void %30({ { i8*, i64 }, i8 }* sret %8, i8* %24, i8 1, i64 0, i64 0, i8* %25, i64 %26, %runtime.Source_Code_Location* %3, i8* %29) #4
  %31 = load { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %8, align 8
  %32 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %8, i32 0, i32 0
  %33 = load { i8*, i64 }, { i8*, i64 }* %32, align 8
  %34 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %8, i32 0, i32 1
  %35 = load i8, i8* %34, align 1
  store i8 %35, i8* %7, align 1
  %36 = load i8, i8* %7, align 1
  ret i8 %36
}

; Function Attrs: alwaysinline
define internal i8 @runtime.mem_free_bytes({ i64, i64 } %0, { i64, i64 } %1, %runtime.Source_Code_Location* %2, i8* noalias nocapture nonnull %__.context_ptr) #4 {
decls:
  %3 = alloca { i8*, i64 }, align 8
  %4 = alloca %runtime.Allocator, align 8
  %5 = alloca i8, align 1
  %6 = alloca { { i8*, i64 }, i8 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  %7 = bitcast { i8*, i64 }* %3 to { i64, i64 }*
  store { i64, i64 } %0, { i64, i64 }* %7, align 8
  %8 = load { i8*, i64 }, { i8*, i64 }* %3, align 8
  %9 = bitcast %runtime.Allocator* %4 to { i64, i64 }*
  store { i64, i64 } %1, { i64, i64 }* %9, align 8
  %10 = load %runtime.Allocator, %runtime.Allocator* %4, align 8
  %11 = bitcast i8* %__.context_ptr to %runtime.Context*
  %12 = load { i8*, i64 }, { i8*, i64 }* %3, align 8
  %13 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %3, i32 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = icmp eq i8* %14, null
  %16 = zext i1 %15 to i8
  %17 = trunc i8 %16 to i1
  br i1 %17, label %if.then, label %cmp.or

cmp.or:                                           ; preds = %entry
  %18 = getelementptr inbounds %runtime.Allocator, %runtime.Allocator* %4, i32 0, i32 0
  %19 = load i8*, i8** %18, align 8
  %20 = icmp eq i8* %19, null
  %21 = zext i1 %20 to i8
  %22 = trunc i8 %21 to i1
  br i1 %22, label %if.then, label %if.done

if.then:                                          ; preds = %cmp.or, %entry
  ret i8 0

if.done:                                          ; preds = %cmp.or
  %23 = getelementptr inbounds %runtime.Allocator, %runtime.Allocator* %4, i32 0, i32 0
  %24 = load i8*, i8** %23, align 8
  %25 = getelementptr inbounds %runtime.Allocator, %runtime.Allocator* %4, i32 0, i32 1
  %26 = load i8*, i8** %25, align 8
  %27 = load { i8*, i64 }, { i8*, i64 }* %3, align 8
  %28 = bitcast { i8*, i64 }* %3 to { i64, i64 }*
  %29 = load { i64, i64 }, { i64, i64 }* %28, align 8
  %30 = call i8* @runtime.raw_slice_data-46645({ i64, i64 } %29) #4
  %31 = load { i8*, i64 }, { i8*, i64 }* %3, align 8
  %32 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %3, i32 0, i32 1
  %33 = load i64, i64* %32, align 8
  %34 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %2, align 8
  %35 = bitcast { { i8*, i64 }, i8 }* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* %35, i8 0, i64 24, i1 false)
  %36 = bitcast %runtime.Context* %11 to i8*
  %37 = bitcast i8* %24 to void ({ { i8*, i64 }, i8 }*, i8*, i8, i64, i64, i8*, i64, %runtime.Source_Code_Location*, i8*)*
  call void %37({ { i8*, i64 }, i8 }* sret %6, i8* %26, i8 1, i64 0, i64 0, i8* %30, i64 %33, %runtime.Source_Code_Location* %2, i8* %36) #4
  %38 = load { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %6, align 8
  %39 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %6, i32 0, i32 0
  %40 = load { i8*, i64 }, { i8*, i64 }* %39, align 8
  %41 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %6, i32 0, i32 1
  %42 = load i8, i8* %41, align 1
  store i8 %42, i8* %5, align 1
  %43 = load i8, i8* %5, align 1
  ret i8 %43
}

define internal void @runtime.mem_resize({ { i8*, i64 }, i8 }* noalias sret %agg.result, i8* %0, i64 %1, i64 %2, i64 %3, { i64, i64 } %4, %runtime.Source_Code_Location* %5, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca %runtime.Allocator, align 8
  %11 = alloca i8, align 1
  %12 = alloca { { i8*, i64 }, i8 }, align 8
  %13 = alloca { { i8*, i64 }, i8 }, align 8
  %14 = alloca { i8*, i64 }, align 8
  %15 = alloca { i64, i64 }, align 8
  %16 = alloca { i8*, i64 }, align 8
  %17 = alloca i8, align 1
  %18 = alloca { { i8*, i64 }, i8 }, align 8
  %19 = alloca { { i8*, i64 }, i8 }, align 8
  %20 = alloca { i8*, i64 }, align 8
  %21 = alloca { i64, i64 }, align 8
  %22 = alloca { { i8*, i64 }, i8 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i8* %0, i8** %6, align 8
  store i64 %1, i64* %7, align 8
  store i64 %2, i64* %8, align 8
  store i64 %3, i64* %9, align 8
  %23 = bitcast %runtime.Allocator* %10 to { i64, i64 }*
  store { i64, i64 } %4, { i64, i64 }* %23, align 8
  %24 = load %runtime.Allocator, %runtime.Allocator* %10, align 8
  %25 = bitcast i8* %__.context_ptr to %runtime.Context*
  %26 = getelementptr inbounds %runtime.Allocator, %runtime.Allocator* %10, i32 0, i32 0
  %27 = load i8*, i8** %26, align 8
  %28 = icmp eq i8* %27, null
  %29 = zext i1 %28 to i8
  %30 = trunc i8 %29 to i1
  br i1 %30, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  %31 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 0
  %32 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 1
  store { i8*, i64 } zeroinitializer, { i8*, i64 }* %31, align 8
  store i8 0, i8* %32, align 1
  ret void

if.done:                                          ; preds = %entry
  %33 = load i64, i64* %8, align 8
  %34 = icmp eq i64 %33, 0
  %35 = zext i1 %34 to i8
  %36 = trunc i8 %35 to i1
  br i1 %36, label %if.then1, label %if.else

if.then1:                                         ; preds = %if.done
  %37 = load i8*, i8** %6, align 8
  %38 = icmp ne i8* %37, null
  %39 = zext i1 %38 to i8
  %40 = trunc i8 %39 to i1
  br i1 %40, label %if.then2, label %if.done3

if.then2:                                         ; preds = %if.then1
  %41 = getelementptr inbounds %runtime.Allocator, %runtime.Allocator* %10, i32 0, i32 0
  %42 = load i8*, i8** %41, align 8
  %43 = getelementptr inbounds %runtime.Allocator, %runtime.Allocator* %10, i32 0, i32 1
  %44 = load i8*, i8** %43, align 8
  %45 = load i8*, i8** %6, align 8
  %46 = load i64, i64* %7, align 8
  %47 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %5, align 8
  %48 = bitcast { { i8*, i64 }, i8 }* %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* %48, i8 0, i64 24, i1 false)
  %49 = bitcast %runtime.Context* %25 to i8*
  %50 = bitcast i8* %42 to void ({ { i8*, i64 }, i8 }*, i8*, i8, i64, i64, i8*, i64, %runtime.Source_Code_Location*, i8*)*
  call void %50({ { i8*, i64 }, i8 }* sret %12, i8* %44, i8 1, i64 0, i64 0, i8* %45, i64 %46, %runtime.Source_Code_Location* %5, i8* %49)
  %51 = load { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %12, align 8
  %52 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %12, i32 0, i32 0
  %53 = load { i8*, i64 }, { i8*, i64 }* %52, align 8
  %54 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %12, i32 0, i32 1
  %55 = load i8, i8* %54, align 1
  store i8 %55, i8* %11, align 1
  %56 = load i8, i8* %11, align 1
  %57 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 0
  %58 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 1
  store { i8*, i64 } zeroinitializer, { i8*, i64 }* %57, align 8
  store i8 %56, i8* %58, align 1
  ret void

if.done3:                                         ; preds = %if.then1
  %59 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 0
  %60 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 1
  store { i8*, i64 } zeroinitializer, { i8*, i64 }* %59, align 8
  store i8 0, i8* %60, align 1
  ret void

if.else:                                          ; preds = %if.done
  %61 = load i8*, i8** %6, align 8
  %62 = icmp eq i8* %61, null
  %63 = zext i1 %62 to i8
  %64 = trunc i8 %63 to i1
  br i1 %64, label %if.then4, label %if.else5

if.then4:                                         ; preds = %if.else
  %65 = getelementptr inbounds %runtime.Allocator, %runtime.Allocator* %10, i32 0, i32 0
  %66 = load i8*, i8** %65, align 8
  %67 = getelementptr inbounds %runtime.Allocator, %runtime.Allocator* %10, i32 0, i32 1
  %68 = load i8*, i8** %67, align 8
  %69 = load i64, i64* %8, align 8
  %70 = load i64, i64* %9, align 8
  %71 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %5, align 8
  %72 = bitcast { { i8*, i64 }, i8 }* %13 to i8*
  call void @llvm.memset.p0i8.i64(i8* %72, i8 0, i64 24, i1 false)
  %73 = bitcast %runtime.Context* %25 to i8*
  %74 = bitcast i8* %66 to void ({ { i8*, i64 }, i8 }*, i8*, i8, i64, i64, i8*, i64, %runtime.Source_Code_Location*, i8*)*
  call void %74({ { i8*, i64 }, i8 }* sret %13, i8* %68, i8 0, i64 %69, i64 %70, i8* null, i64 0, %runtime.Source_Code_Location* %5, i8* %73)
  %75 = load { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %13, align 8
  %76 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %13, i32 0, i32 0
  %77 = load { i8*, i64 }, { i8*, i64 }* %76, align 8
  %78 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %13, i32 0, i32 1
  %79 = load i8, i8* %78, align 1
  %80 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 0
  %81 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 1
  store { i8*, i64 } %77, { i8*, i64 }* %80, align 8
  store i8 %79, i8* %81, align 1
  ret void

if.else5:                                         ; preds = %if.else
  %82 = load i64, i64* %7, align 8
  %83 = load i64, i64* %8, align 8
  %84 = icmp eq i64 %82, %83
  %85 = zext i1 %84 to i8
  %86 = trunc i8 %85 to i1
  br i1 %86, label %cmp.and, label %if.done7

cmp.and:                                          ; preds = %if.else5
  %87 = load i8*, i8** %6, align 8
  %88 = ptrtoint i8* %87 to i64
  %89 = load i64, i64* %9, align 8
  %90 = urem i64 %88, %89
  %91 = icmp eq i64 %90, 0
  %92 = zext i1 %91 to i8
  %93 = trunc i8 %92 to i1
  br i1 %93, label %if.then6, label %if.done7

if.then6:                                         ; preds = %cmp.and
  %94 = load i64, i64* %7, align 8
  %95 = load i8*, i8** %6, align 8
  %96 = load i8*, i8** %6, align 8
  %97 = bitcast { i64, i64 }* %15 to %..string*
  store %..string { i8* getelementptr inbounds ([60 x i8], [60 x i8]* @"csbs$2b9", i64 0, i64 0), i64 59 }, %..string* %97, align 8
  %98 = load { i64, i64 }, { i64, i64 }* %15, align 8
  call void @runtime.multi_pointer_slice_expr_error({ i64, i64 } %98, i32 193, i32 24, i64 0, i64 %94)
  %99 = getelementptr i8, i8* %96, i64 0
  %100 = sub i64 %94, 0
  %101 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %14, i32 0, i32 0
  %102 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %14, i32 0, i32 1
  store i8* %99, i8** %101, align 8
  store i64 %100, i64* %102, align 8
  %103 = load { i8*, i64 }, { i8*, i64 }* %14, align 8
  %104 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 0
  %105 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 1
  store { i8*, i64 } %103, { i8*, i64 }* %104, align 8
  store i8 0, i8* %105, align 1
  ret void

if.done7:                                         ; preds = %cmp.and, %if.else5
  br label %if.done8

if.done8:                                         ; preds = %if.done7
  br label %if.done9

if.done9:                                         ; preds = %if.done8
  %106 = getelementptr inbounds %runtime.Allocator, %runtime.Allocator* %10, i32 0, i32 0
  %107 = load i8*, i8** %106, align 8
  %108 = getelementptr inbounds %runtime.Allocator, %runtime.Allocator* %10, i32 0, i32 1
  %109 = load i8*, i8** %108, align 8
  %110 = load i64, i64* %8, align 8
  %111 = load i64, i64* %9, align 8
  %112 = load i8*, i8** %6, align 8
  %113 = load i64, i64* %7, align 8
  %114 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %5, align 8
  %115 = bitcast { { i8*, i64 }, i8 }* %18 to i8*
  call void @llvm.memset.p0i8.i64(i8* %115, i8 0, i64 24, i1 false)
  %116 = bitcast %runtime.Context* %25 to i8*
  %117 = bitcast i8* %107 to void ({ { i8*, i64 }, i8 }*, i8*, i8, i64, i64, i8*, i64, %runtime.Source_Code_Location*, i8*)*
  call void %117({ { i8*, i64 }, i8 }* sret %18, i8* %109, i8 3, i64 %110, i64 %111, i8* %112, i64 %113, %runtime.Source_Code_Location* %5, i8* %116)
  %118 = load { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %18, align 8
  %119 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %18, i32 0, i32 0
  %120 = load { i8*, i64 }, { i8*, i64 }* %119, align 8
  %121 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %18, i32 0, i32 1
  %122 = load i8, i8* %121, align 1
  store { i8*, i64 } %120, { i8*, i64 }* %16, align 8
  store i8 %122, i8* %17, align 1
  %123 = load i8, i8* %17, align 1
  %124 = icmp eq i8 %123, 4
  %125 = zext i1 %124 to i8
  %126 = trunc i8 %125 to i1
  br i1 %126, label %if.then10, label %if.done13

if.then10:                                        ; preds = %if.done9
  %127 = getelementptr inbounds %runtime.Allocator, %runtime.Allocator* %10, i32 0, i32 0
  %128 = load i8*, i8** %127, align 8
  %129 = getelementptr inbounds %runtime.Allocator, %runtime.Allocator* %10, i32 0, i32 1
  %130 = load i8*, i8** %129, align 8
  %131 = load i64, i64* %8, align 8
  %132 = load i64, i64* %9, align 8
  %133 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %5, align 8
  %134 = bitcast { { i8*, i64 }, i8 }* %19 to i8*
  call void @llvm.memset.p0i8.i64(i8* %134, i8 0, i64 24, i1 false)
  %135 = bitcast %runtime.Context* %25 to i8*
  %136 = bitcast i8* %128 to void ({ { i8*, i64 }, i8 }*, i8*, i8, i64, i64, i8*, i64, %runtime.Source_Code_Location*, i8*)*
  call void %136({ { i8*, i64 }, i8 }* sret %19, i8* %130, i8 0, i64 %131, i64 %132, i8* null, i64 0, %runtime.Source_Code_Location* %5, i8* %135)
  %137 = load { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %19, align 8
  %138 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %19, i32 0, i32 0
  %139 = load { i8*, i64 }, { i8*, i64 }* %138, align 8
  %140 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %19, i32 0, i32 1
  %141 = load i8, i8* %140, align 1
  store { i8*, i64 } %139, { i8*, i64 }* %16, align 8
  store i8 %141, i8* %17, align 1
  %142 = load i8, i8* %17, align 1
  %143 = icmp ne i8 %142, 0
  %144 = zext i1 %143 to i8
  %145 = trunc i8 %144 to i1
  br i1 %145, label %if.then11, label %if.done12

if.then11:                                        ; preds = %if.then10
  %146 = load { i8*, i64 }, { i8*, i64 }* %16, align 8
  %147 = load i8, i8* %17, align 1
  %148 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 0
  %149 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 1
  store { i8*, i64 } %146, { i8*, i64 }* %148, align 8
  store i8 %147, i8* %149, align 1
  ret void

if.done12:                                        ; preds = %if.then10
  %150 = load { i8*, i64 }, { i8*, i64 }* %16, align 8
  %151 = load i64, i64* %7, align 8
  %152 = load i8*, i8** %6, align 8
  %153 = load i8*, i8** %6, align 8
  %154 = bitcast { i64, i64 }* %21 to %..string*
  store %..string { i8* getelementptr inbounds ([60 x i8], [60 x i8]* @"csbs$2b9", i64 0, i64 0), i64 59 }, %..string* %154, align 8
  %155 = load { i64, i64 }, { i64, i64 }* %21, align 8
  call void @runtime.multi_pointer_slice_expr_error({ i64, i64 } %155, i32 202, i32 28, i64 0, i64 %151)
  %156 = getelementptr i8, i8* %153, i64 0
  %157 = sub i64 %151, 0
  %158 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %20, i32 0, i32 0
  %159 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %20, i32 0, i32 1
  store i8* %156, i8** %158, align 8
  store i64 %157, i64* %159, align 8
  %160 = load { i8*, i64 }, { i8*, i64 }* %20, align 8
  %161 = bitcast { i8*, i64 }* %16 to { i64, i64 }*
  %162 = load { i64, i64 }, { i64, i64 }* %161, align 8
  %163 = bitcast { i8*, i64 }* %20 to { i64, i64 }*
  %164 = load { i64, i64 }, { i64, i64 }* %163, align 8
  %165 = call i64 @runtime.copy_slice-47133({ i64, i64 } %162, { i64, i64 } %164)
  %166 = getelementptr inbounds %runtime.Allocator, %runtime.Allocator* %10, i32 0, i32 0
  %167 = load i8*, i8** %166, align 8
  %168 = getelementptr inbounds %runtime.Allocator, %runtime.Allocator* %10, i32 0, i32 1
  %169 = load i8*, i8** %168, align 8
  %170 = load i8*, i8** %6, align 8
  %171 = load i64, i64* %7, align 8
  %172 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %5, align 8
  %173 = bitcast { { i8*, i64 }, i8 }* %22 to i8*
  call void @llvm.memset.p0i8.i64(i8* %173, i8 0, i64 24, i1 false)
  %174 = bitcast %runtime.Context* %25 to i8*
  %175 = bitcast i8* %167 to void ({ { i8*, i64 }, i8 }*, i8*, i8, i64, i64, i8*, i64, %runtime.Source_Code_Location*, i8*)*
  call void %175({ { i8*, i64 }, i8 }* sret %22, i8* %169, i8 1, i64 0, i64 0, i8* %170, i64 %171, %runtime.Source_Code_Location* %5, i8* %174)
  %176 = load { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %22, align 8
  %177 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %22, i32 0, i32 0
  %178 = load { i8*, i64 }, { i8*, i64 }* %177, align 8
  %179 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %22, i32 0, i32 1
  %180 = load i8, i8* %179, align 1
  store i8 %180, i8* %17, align 1
  br label %if.done13

if.done13:                                        ; preds = %if.done12, %if.done9
  %181 = load { i8*, i64 }, { i8*, i64 }* %16, align 8
  %182 = load i8, i8* %17, align 1
  %183 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 0
  %184 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 1
  store { i8*, i64 } %181, { i8*, i64 }* %183, align 8
  store i8 %182, i8* %184, align 1
  ret void
}

define internal i64 @runtime.memory_compare(i8* %0, i8* %1, i64 %2) {
decls:
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca i8, align 1
  %16 = alloca i8, align 1
  %17 = alloca i8, align 1
  %18 = alloca i8, align 1
  br label %entry

entry:                                            ; preds = %decls
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  store i64 %2, i64* %5, align 8
  %19 = load i8*, i8** %3, align 8
  %20 = load i8*, i8** %4, align 8
  %21 = icmp eq i8* %19, %20
  %22 = zext i1 %21 to i8
  %23 = icmp eq i8 1, %22
  br i1 %23, label %switch.case.body, label %switch.case.next

switch.case.next:                                 ; preds = %entry
  %24 = load i8*, i8** %3, align 8
  %25 = icmp eq i8* %24, null
  %26 = zext i1 %25 to i8
  %27 = icmp eq i8 1, %26
  br i1 %27, label %switch.case.body2, label %switch.case.next1

switch.case.body:                                 ; preds = %entry
  ret i64 0

switch.case.next1:                                ; preds = %switch.case.next
  %28 = load i8*, i8** %4, align 8
  %29 = icmp eq i8* %28, null
  %30 = zext i1 %29 to i8
  %31 = icmp eq i8 1, %30
  br i1 %31, label %switch.case.body4, label %switch.case.next3

switch.case.body2:                                ; preds = %switch.case.next
  ret i64 -1

switch.case.next3:                                ; preds = %switch.case.next1
  br label %switch.done

switch.case.body4:                                ; preds = %switch.case.next1
  ret i64 1

switch.done:                                      ; preds = %switch.case.next3
  %32 = load i8*, i8** %3, align 8
  %33 = ptrtoint i8* %32 to i64
  store i64 %33, i64* %6, align 8
  %34 = load i8*, i8** %4, align 8
  %35 = ptrtoint i8* %34 to i64
  store i64 %35, i64* %7, align 8
  %36 = load i64, i64* %5, align 8
  store i64 %36, i64* %8, align 8
  %37 = load i64, i64* %8, align 8
  %38 = udiv i64 %37, 8
  %39 = add i64 %38, 1
  store i64 %39, i64* %9, align 8
  %40 = load i64, i64* %9, align 8
  %41 = sub i64 %40, 1
  %42 = mul i64 %41, 8
  store i64 %42, i64* %10, align 8
  store i64 0, i64* %11, align 8
  %43 = load i64, i64* %8, align 8
  %44 = icmp ult i64 %43, 8
  %45 = zext i1 %44 to i8
  %46 = trunc i8 %45 to i1
  br i1 %46, label %if.then, label %if.done

if.then:                                          ; preds = %switch.done
  store i64 0, i64* %9, align 8
  br label %if.done

if.done:                                          ; preds = %if.then, %switch.done
  br label %for.loop

for.loop:                                         ; preds = %for.post13, %if.done
  %47 = load i64, i64* %11, align 8
  %48 = load i64, i64* %9, align 8
  %49 = icmp ult i64 %47, %48
  %50 = zext i1 %49 to i8
  %51 = trunc i8 %50 to i1
  br i1 %51, label %for.body, label %for.done14

for.body:                                         ; preds = %for.loop
  %52 = load i64, i64* %6, align 8
  %53 = load i64, i64* %11, align 8
  %54 = mul i64 %53, 8
  %55 = add i64 %52, %54
  %56 = inttoptr i64 %55 to i64*
  %57 = load i64, i64* %56, align 8
  store i64 %57, i64* %12, align 8
  %58 = load i64, i64* %7, align 8
  %59 = load i64, i64* %11, align 8
  %60 = mul i64 %59, 8
  %61 = add i64 %58, %60
  %62 = inttoptr i64 %61 to i64*
  %63 = load i64, i64* %62, align 8
  store i64 %63, i64* %13, align 8
  %64 = load i64, i64* %12, align 8
  %65 = load i64, i64* %13, align 8
  %66 = xor i64 %64, %65
  %67 = icmp ne i64 %66, 0
  %68 = zext i1 %67 to i8
  %69 = trunc i8 %68 to i1
  br i1 %69, label %if.then5, label %if.done12

if.then5:                                         ; preds = %for.body
  br label %for.init

for.init:                                         ; preds = %if.then5
  %70 = load i64, i64* %11, align 8
  %71 = mul i64 %70, 8
  store i64 %71, i64* %14, align 8
  br label %for.loop6

for.loop6:                                        ; preds = %for.post, %for.init
  %72 = load i64, i64* %14, align 8
  %73 = load i64, i64* %8, align 8
  %74 = icmp ult i64 %72, %73
  %75 = zext i1 %74 to i8
  %76 = trunc i8 %75 to i1
  br i1 %76, label %for.body7, label %for.done

for.body7:                                        ; preds = %for.loop6
  %77 = load i64, i64* %6, align 8
  %78 = load i64, i64* %14, align 8
  %79 = add i64 %77, %78
  %80 = inttoptr i64 %79 to i8*
  %81 = load i8, i8* %80, align 1
  store i8 %81, i8* %15, align 1
  %82 = load i64, i64* %7, align 8
  %83 = load i64, i64* %14, align 8
  %84 = add i64 %82, %83
  %85 = inttoptr i64 %84 to i8*
  %86 = load i8, i8* %85, align 1
  store i8 %86, i8* %16, align 1
  %87 = load i8, i8* %15, align 1
  %88 = load i8, i8* %16, align 1
  %89 = xor i8 %87, %88
  %90 = icmp ne i8 %89, 0
  %91 = zext i1 %90 to i8
  %92 = trunc i8 %91 to i1
  br i1 %92, label %if.then8, label %if.done11

if.then8:                                         ; preds = %for.body7
  %93 = load i8, i8* %15, align 1
  %94 = zext i8 %93 to i64
  %95 = load i8, i8* %16, align 1
  %96 = zext i8 %95 to i64
  %97 = sub i64 %94, %96
  %98 = icmp slt i64 %97, 0
  %99 = zext i1 %98 to i8
  %100 = trunc i8 %99 to i1
  br i1 %100, label %if.then9, label %if.else

if.then9:                                         ; preds = %if.then8
  br label %if.done10

if.else:                                          ; preds = %if.then8
  br label %if.done10

if.done10:                                        ; preds = %if.else, %if.then9
  %101 = phi i64 [ -1, %if.then9 ], [ 1, %if.else ]
  ret i64 %101

if.done11:                                        ; preds = %for.body7
  br label %for.post

for.post:                                         ; preds = %if.done11
  %102 = load i64, i64* %14, align 8
  %103 = add i64 %102, 1
  store i64 %103, i64* %14, align 8
  br label %for.loop6

for.done:                                         ; preds = %for.loop6
  br label %if.done12

if.done12:                                        ; preds = %for.done, %for.body
  br label %for.post13

for.post13:                                       ; preds = %if.done12
  %104 = load i64, i64* %11, align 8
  %105 = add i64 %104, 1
  store i64 %105, i64* %11, align 8
  br label %for.loop

for.done14:                                       ; preds = %for.loop
  br label %for.loop15

for.loop15:                                       ; preds = %for.post22, %for.done14
  %106 = load i64, i64* %10, align 8
  %107 = load i64, i64* %8, align 8
  %108 = icmp ult i64 %106, %107
  %109 = zext i1 %108 to i8
  %110 = trunc i8 %109 to i1
  br i1 %110, label %for.body16, label %for.done23

for.body16:                                       ; preds = %for.loop15
  %111 = load i64, i64* %6, align 8
  %112 = load i64, i64* %10, align 8
  %113 = add i64 %111, %112
  %114 = inttoptr i64 %113 to i8*
  %115 = load i8, i8* %114, align 1
  store i8 %115, i8* %17, align 1
  %116 = load i64, i64* %7, align 8
  %117 = load i64, i64* %10, align 8
  %118 = add i64 %116, %117
  %119 = inttoptr i64 %118 to i8*
  %120 = load i8, i8* %119, align 1
  store i8 %120, i8* %18, align 1
  %121 = load i8, i8* %17, align 1
  %122 = load i8, i8* %18, align 1
  %123 = xor i8 %121, %122
  %124 = icmp ne i8 %123, 0
  %125 = zext i1 %124 to i8
  %126 = trunc i8 %125 to i1
  br i1 %126, label %if.then17, label %if.done21

if.then17:                                        ; preds = %for.body16
  %127 = load i8, i8* %17, align 1
  %128 = zext i8 %127 to i64
  %129 = load i8, i8* %18, align 1
  %130 = zext i8 %129 to i64
  %131 = sub i64 %128, %130
  %132 = icmp slt i64 %131, 0
  %133 = zext i1 %132 to i8
  %134 = trunc i8 %133 to i1
  br i1 %134, label %if.then18, label %if.else19

if.then18:                                        ; preds = %if.then17
  br label %if.done20

if.else19:                                        ; preds = %if.then17
  br label %if.done20

if.done20:                                        ; preds = %if.else19, %if.then18
  %135 = phi i64 [ -1, %if.then18 ], [ 1, %if.else19 ]
  ret i64 %135

if.done21:                                        ; preds = %for.body16
  br label %for.post22

for.post22:                                       ; preds = %if.done21
  %136 = load i64, i64* %10, align 8
  %137 = add i64 %136, 1
  store i64 %137, i64* %10, align 8
  br label %for.loop15

for.done23:                                       ; preds = %for.loop15
  ret i64 0
}

define internal i64 @runtime.memory_compare_zero(i8* %0, i64 %1) {
decls:
  %2 = alloca i8*, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i8, align 1
  %12 = alloca i8, align 1
  br label %entry

entry:                                            ; preds = %decls
  store i8* %0, i8** %2, align 8
  store i64 %1, i64* %3, align 8
  %13 = load i8*, i8** %2, align 8
  %14 = ptrtoint i8* %13 to i64
  store i64 %14, i64* %4, align 8
  %15 = load i64, i64* %3, align 8
  store i64 %15, i64* %5, align 8
  %16 = load i64, i64* %5, align 8
  %17 = udiv i64 %16, 8
  %18 = add i64 %17, 1
  store i64 %18, i64* %6, align 8
  %19 = load i64, i64* %6, align 8
  %20 = sub i64 %19, 1
  %21 = mul i64 %20, 8
  store i64 %21, i64* %7, align 8
  store i64 0, i64* %8, align 8
  %22 = load i64, i64* %5, align 8
  %23 = icmp ult i64 %22, 8
  %24 = zext i1 %23 to i8
  %25 = trunc i8 %24 to i1
  br i1 %25, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  store i64 0, i64* %6, align 8
  br label %if.done

if.done:                                          ; preds = %if.then, %entry
  br label %for.loop

for.loop:                                         ; preds = %for.post9, %if.done
  %26 = load i64, i64* %8, align 8
  %27 = load i64, i64* %6, align 8
  %28 = icmp ult i64 %26, %27
  %29 = zext i1 %28 to i8
  %30 = trunc i8 %29 to i1
  br i1 %30, label %for.body, label %for.done10

for.body:                                         ; preds = %for.loop
  %31 = load i64, i64* %4, align 8
  %32 = load i64, i64* %8, align 8
  %33 = mul i64 %32, 8
  %34 = add i64 %31, %33
  %35 = inttoptr i64 %34 to i64*
  %36 = load i64, i64* %35, align 8
  store i64 %36, i64* %9, align 8
  %37 = load i64, i64* %9, align 8
  %38 = xor i64 %37, 0
  %39 = icmp ne i64 %38, 0
  %40 = zext i1 %39 to i8
  %41 = trunc i8 %40 to i1
  br i1 %41, label %if.then1, label %if.done8

if.then1:                                         ; preds = %for.body
  br label %for.init

for.init:                                         ; preds = %if.then1
  %42 = load i64, i64* %8, align 8
  %43 = mul i64 %42, 8
  store i64 %43, i64* %10, align 8
  br label %for.loop2

for.loop2:                                        ; preds = %for.post, %for.init
  %44 = load i64, i64* %10, align 8
  %45 = load i64, i64* %5, align 8
  %46 = icmp ult i64 %44, %45
  %47 = zext i1 %46 to i8
  %48 = trunc i8 %47 to i1
  br i1 %48, label %for.body3, label %for.done

for.body3:                                        ; preds = %for.loop2
  %49 = load i64, i64* %4, align 8
  %50 = load i64, i64* %10, align 8
  %51 = add i64 %49, %50
  %52 = inttoptr i64 %51 to i8*
  %53 = load i8, i8* %52, align 1
  store i8 %53, i8* %11, align 1
  %54 = load i8, i8* %11, align 1
  %55 = xor i8 %54, 0
  %56 = icmp ne i8 %55, 0
  %57 = zext i1 %56 to i8
  %58 = trunc i8 %57 to i1
  br i1 %58, label %if.then4, label %if.done7

if.then4:                                         ; preds = %for.body3
  %59 = load i8, i8* %11, align 1
  %60 = zext i8 %59 to i64
  %61 = icmp slt i64 %60, 0
  %62 = zext i1 %61 to i8
  %63 = trunc i8 %62 to i1
  br i1 %63, label %if.then5, label %if.else

if.then5:                                         ; preds = %if.then4
  br label %if.done6

if.else:                                          ; preds = %if.then4
  br label %if.done6

if.done6:                                         ; preds = %if.else, %if.then5
  %64 = phi i64 [ -1, %if.then5 ], [ 1, %if.else ]
  ret i64 %64

if.done7:                                         ; preds = %for.body3
  br label %for.post

for.post:                                         ; preds = %if.done7
  %65 = load i64, i64* %10, align 8
  %66 = add i64 %65, 1
  store i64 %66, i64* %10, align 8
  br label %for.loop2

for.done:                                         ; preds = %for.loop2
  br label %if.done8

if.done8:                                         ; preds = %for.done, %for.body
  br label %for.post9

for.post9:                                        ; preds = %if.done8
  %67 = load i64, i64* %8, align 8
  %68 = add i64 %67, 1
  store i64 %68, i64* %8, align 8
  br label %for.loop

for.done10:                                       ; preds = %for.loop
  br label %for.loop11

for.loop11:                                       ; preds = %for.post18, %for.done10
  %69 = load i64, i64* %7, align 8
  %70 = load i64, i64* %5, align 8
  %71 = icmp ult i64 %69, %70
  %72 = zext i1 %71 to i8
  %73 = trunc i8 %72 to i1
  br i1 %73, label %for.body12, label %for.done19

for.body12:                                       ; preds = %for.loop11
  %74 = load i64, i64* %4, align 8
  %75 = load i64, i64* %7, align 8
  %76 = add i64 %74, %75
  %77 = inttoptr i64 %76 to i8*
  %78 = load i8, i8* %77, align 1
  store i8 %78, i8* %12, align 1
  %79 = load i8, i8* %12, align 1
  %80 = xor i8 %79, 0
  %81 = icmp ne i8 %80, 0
  %82 = zext i1 %81 to i8
  %83 = trunc i8 %82 to i1
  br i1 %83, label %if.then13, label %if.done17

if.then13:                                        ; preds = %for.body12
  %84 = load i8, i8* %12, align 1
  %85 = zext i8 %84 to i64
  %86 = icmp slt i64 %85, 0
  %87 = zext i1 %86 to i8
  %88 = trunc i8 %87 to i1
  br i1 %88, label %if.then14, label %if.else15

if.then14:                                        ; preds = %if.then13
  br label %if.done16

if.else15:                                        ; preds = %if.then13
  br label %if.done16

if.done16:                                        ; preds = %if.else15, %if.then14
  %89 = phi i64 [ -1, %if.then14 ], [ 1, %if.else15 ]
  ret i64 %89

if.done17:                                        ; preds = %for.body12
  br label %for.post18

for.post18:                                       ; preds = %if.done17
  %90 = load i64, i64* %7, align 8
  %91 = add i64 %90, 1
  store i64 %91, i64* %7, align 8
  br label %for.loop11

for.done19:                                       ; preds = %for.loop11
  ret i64 0
}

; Function Attrs: alwaysinline
define internal i8 @runtime.string_ne({ i64, i64 } %0, { i64, i64 } %1) #4 {
decls:
  %2 = alloca %..string, align 8
  %3 = alloca %..string, align 8
  br label %entry

entry:                                            ; preds = %decls
  %4 = bitcast %..string* %2 to { i64, i64 }*
  store { i64, i64 } %0, { i64, i64 }* %4, align 8
  %5 = load %..string, %..string* %2, align 8
  %6 = bitcast %..string* %3 to { i64, i64 }*
  store { i64, i64 } %1, { i64, i64 }* %6, align 8
  %7 = load %..string, %..string* %3, align 8
  %8 = load %..string, %..string* %2, align 8
  %9 = load %..string, %..string* %3, align 8
  %10 = bitcast %..string* %2 to { i64, i64 }*
  %11 = load { i64, i64 }, { i64, i64 }* %10, align 8
  %12 = bitcast %..string* %3 to { i64, i64 }*
  %13 = load { i64, i64 }, { i64, i64 }* %12, align 8
  %14 = call i8 @runtime.string_eq({ i64, i64 } %11, { i64, i64 } %13) #4
  %15 = icmp eq i8 %14, 0
  %16 = zext i1 %15 to i8
  ret i8 %16
}

define internal i64 @runtime.cstring_len(i8* %0) {
decls:
  %1 = alloca i8*, align 8
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i8* %0, i8** %1, align 8
  %4 = load i8*, i8** %1, align 8
  %5 = ptrtoint i8* %4 to i64
  store i64 %5, i64* %2, align 8
  %6 = load i64, i64* %2, align 8
  store i64 %6, i64* %3, align 8
  br label %for.loop

for.loop:                                         ; preds = %for.body, %entry
  %7 = load i64, i64* %3, align 8
  %8 = icmp ne i64 %7, 0
  %9 = zext i1 %8 to i8
  %10 = trunc i8 %9 to i1
  br i1 %10, label %cmp.and, label %for.done

cmp.and:                                          ; preds = %for.loop
  %11 = load i64, i64* %3, align 8
  %12 = inttoptr i64 %11 to i8*
  %13 = load i8, i8* %12, align 1
  %14 = icmp ne i8 %13, 0
  %15 = zext i1 %14 to i8
  %16 = trunc i8 %15 to i1
  br i1 %16, label %for.body, label %for.done

for.body:                                         ; preds = %cmp.and
  %17 = load i64, i64* %3, align 8
  %18 = add i64 %17, 1
  store i64 %18, i64* %3, align 8
  br label %for.loop

for.done:                                         ; preds = %cmp.and, %for.loop
  %19 = load i64, i64* %3, align 8
  %20 = load i64, i64* %2, align 8
  %21 = sub i64 %19, %20
  ret i64 %21
}

define internal { i64, i64 } @runtime.cstring_to_string(i8* %0) {
decls:
  %1 = alloca i8*, align 8
  %2 = alloca { i64, i64 }, align 8
  %3 = alloca i8*, align 8
  %4 = alloca i64, align 8
  %5 = alloca %runtime.Raw_String, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i8* %0, i8** %1, align 8
  %6 = load i8*, i8** %1, align 8
  %7 = icmp eq i8* %6, null
  %8 = zext i1 %7 to i8
  %9 = trunc i8 %8 to i1
  br i1 %9, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  %10 = bitcast { i64, i64 }* %2 to %..string*
  store %..string zeroinitializer, %..string* %10, align 8
  %11 = load { i64, i64 }, { i64, i64 }* %2, align 8
  ret { i64, i64 } %11

if.done:                                          ; preds = %entry
  %12 = load i8*, i8** %1, align 8
  store i8* %12, i8** %3, align 8
  %13 = load i8*, i8** %1, align 8
  %14 = call i64 @runtime.cstring_len(i8* %13)
  store i64 %14, i64* %4, align 8
  %15 = bitcast %runtime.Raw_String* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* %15, i8 0, i64 16, i1 false)
  store %runtime.Raw_String zeroinitializer, %runtime.Raw_String* %5, align 8
  %16 = load i8*, i8** %3, align 8
  %17 = getelementptr inbounds %runtime.Raw_String, %runtime.Raw_String* %5, i32 0, i32 0
  store i8* %16, i8** %17, align 8
  %18 = load i64, i64* %4, align 8
  %19 = getelementptr inbounds %runtime.Raw_String, %runtime.Raw_String* %5, i32 0, i32 1
  store i64 %18, i64* %19, align 8
  %20 = load %runtime.Raw_String, %runtime.Raw_String* %5, align 8
  %21 = bitcast %runtime.Raw_String* %5 to %..string*
  %22 = load %..string, %..string* %21, align 8
  %23 = bitcast %..string* %21 to { i64, i64 }*
  %24 = load { i64, i64 }, { i64, i64 }* %23, align 8
  ret { i64, i64 } %24
}

; Function Attrs: alwaysinline
define internal { i64, i64 } @runtime.string_decode_rune({ i64, i64 } %0) #4 {
decls:
  %1 = alloca %..string, align 8
  %2 = alloca i64, align 8
  %3 = alloca { i32, i64 }, align 8
  %4 = alloca i8, align 1
  %5 = alloca { i64, i64 }, align 8
  %6 = alloca i8, align 1
  %7 = alloca { i64, i64 }, align 8
  %8 = alloca i32, align 4
  %9 = alloca { i64, i64 }, align 8
  %10 = alloca { i32, i64 }, align 8
  %11 = alloca i8, align 1
  %12 = alloca %runtime.string_decode_rune.Accept_Range-1, align 1
  %13 = alloca { i64, i64 }, align 8
  %14 = alloca { i32, i64 }, align 8
  %15 = alloca i8, align 1
  %16 = alloca { i64, i64 }, align 8
  %17 = alloca { i32, i64 }, align 8
  %18 = alloca { i32, i64 }, align 8
  %19 = alloca i8, align 1
  %20 = alloca { i64, i64 }, align 8
  %21 = alloca { i32, i64 }, align 8
  %22 = alloca { i32, i64 }, align 8
  %23 = alloca i8, align 1
  %24 = alloca { i64, i64 }, align 8
  %25 = alloca { i32, i64 }, align 8
  %26 = alloca { i32, i64 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  %27 = bitcast %..string* %1 to { i64, i64 }*
  store { i64, i64 } %0, { i64, i64 }* %27, align 8
  %28 = load %..string, %..string* %1, align 8
  %29 = load %..string, %..string* %1, align 8
  %30 = getelementptr inbounds %..string, %..string* %1, i32 0, i32 1
  %31 = load i64, i64* %30, align 8
  store i64 %31, i64* %2, align 8
  %32 = load i64, i64* %2, align 8
  %33 = icmp slt i64 %32, 1
  %34 = zext i1 %33 to i8
  %35 = trunc i8 %34 to i1
  br i1 %35, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  %36 = getelementptr inbounds { i32, i64 }, { i32, i64 }* %3, i32 0, i32 0
  %37 = getelementptr inbounds { i32, i64 }, { i32, i64 }* %3, i32 0, i32 1
  store i32 65533, i32* %36, align 4
  store i64 0, i64* %37, align 8
  %38 = load { i32, i64 }, { i32, i64 }* %3, align 8
  %39 = bitcast { i32, i64 }* %3 to { i64, i64 }*
  %40 = load { i64, i64 }, { i64, i64 }* %39, align 8
  ret { i64, i64 } %40

if.done:                                          ; preds = %entry
  %41 = load %..string, %..string* %1, align 8
  %42 = getelementptr inbounds %..string, %..string* %1, i32 0, i32 0
  %43 = load i8*, i8** %42, align 8
  %44 = getelementptr inbounds %..string, %..string* %1, i32 0, i32 1
  %45 = load i64, i64* %44, align 8
  %46 = bitcast { i64, i64 }* %5 to %..string*
  store %..string { i8* getelementptr inbounds ([60 x i8], [60 x i8]* @"csbs$2b9", i64 0, i64 0), i64 59 }, %..string* %46, align 8
  %47 = load { i64, i64 }, { i64, i64 }* %5, align 8
  call void @runtime.bounds_check_error({ i64, i64 } %47, i32 463, i32 10, i64 0, i64 %45) #4
  %48 = getelementptr i8, i8* %43, i64 0
  %49 = load i8, i8* %48, align 1
  store i8 %49, i8* %4, align 1
  %50 = load i8, i8* %4, align 1
  %51 = zext i8 %50 to i64
  %52 = getelementptr [256 x i8], [256 x i8]* @runtime.string_decode_rune-.accept_sizes-47188, i64 0, i64 %51
  %53 = bitcast { i64, i64 }* %7 to %..string*
  store %..string { i8* getelementptr inbounds ([60 x i8], [60 x i8]* @"csbs$2b9", i64 0, i64 0), i64 59 }, %..string* %53, align 8
  %54 = load { i64, i64 }, { i64, i64 }* %7, align 8
  call void @runtime.bounds_check_error({ i64, i64 } %54, i32 464, i32 20, i64 %51, i64 256) #4
  %55 = load i8, i8* %52, align 1
  store i8 %55, i8* %6, align 1
  %56 = load i8, i8* %6, align 1
  %57 = icmp uge i8 %56, -16
  %58 = zext i1 %57 to i8
  %59 = trunc i8 %58 to i1
  br i1 %59, label %if.then1, label %if.done2

if.then1:                                         ; preds = %if.done
  %60 = load i8, i8* %6, align 1
  %61 = zext i8 %60 to i32
  %62 = shl i32 %61, 31
  %63 = select i1 true, i32 %62, i32 0
  %64 = ashr i32 %63, 31
  %65 = select i1 true, i32 %64, i32 0
  store i32 %65, i32* %8, align 4
  %66 = load %..string, %..string* %1, align 8
  %67 = getelementptr inbounds %..string, %..string* %1, i32 0, i32 0
  %68 = load i8*, i8** %67, align 8
  %69 = getelementptr inbounds %..string, %..string* %1, i32 0, i32 1
  %70 = load i64, i64* %69, align 8
  %71 = bitcast { i64, i64 }* %9 to %..string*
  store %..string { i8* getelementptr inbounds ([60 x i8], [60 x i8]* @"csbs$2b9", i64 0, i64 0), i64 59 }, %..string* %71, align 8
  %72 = load { i64, i64 }, { i64, i64 }* %9, align 8
  call void @runtime.bounds_check_error({ i64, i64 } %72, i32 467, i32 17, i64 0, i64 %70) #4
  %73 = getelementptr i8, i8* %68, i64 0
  %74 = load i8, i8* %73, align 1
  %75 = zext i8 %74 to i32
  %76 = load i32, i32* %8, align 4
  %77 = xor i32 %76, -1
  %78 = and i32 %75, %77
  %79 = load i32, i32* %8, align 4
  %80 = and i32 65533, %79
  %81 = or i32 %78, %80
  %82 = getelementptr inbounds { i32, i64 }, { i32, i64 }* %10, i32 0, i32 0
  %83 = getelementptr inbounds { i32, i64 }, { i32, i64 }* %10, i32 0, i32 1
  store i32 %81, i32* %82, align 4
  store i64 1, i64* %83, align 8
  %84 = load { i32, i64 }, { i32, i64 }* %10, align 8
  %85 = bitcast { i32, i64 }* %10 to { i64, i64 }*
  %86 = load { i64, i64 }, { i64, i64 }* %85, align 8
  ret { i64, i64 } %86

if.done2:                                         ; preds = %if.done
  %87 = load i8, i8* %6, align 1
  %88 = and i8 %87, 7
  store i8 %88, i8* %11, align 1
  %89 = load i8, i8* %6, align 1
  %90 = lshr i8 %89, 4
  %91 = select i1 true, i8 %90, i8 0
  %92 = zext i8 %91 to i64
  %93 = getelementptr [5 x %runtime.string_decode_rune.Accept_Range-1], [5 x %runtime.string_decode_rune.Accept_Range-1]* @runtime.string_decode_rune-.accept_ranges-47189, i64 0, i64 %92
  %94 = bitcast { i64, i64 }* %13 to %..string*
  store %..string { i8* getelementptr inbounds ([60 x i8], [60 x i8]* @"csbs$2b9", i64 0, i64 0), i64 59 }, %..string* %94, align 8
  %95 = load { i64, i64 }, { i64, i64 }* %13, align 8
  call void @runtime.bounds_check_error({ i64, i64 } %95, i32 470, i32 26, i64 %92, i64 5) #4
  %96 = load %runtime.string_decode_rune.Accept_Range-1, %runtime.string_decode_rune.Accept_Range-1* %93, align 1
  store %runtime.string_decode_rune.Accept_Range-1 %96, %runtime.string_decode_rune.Accept_Range-1* %12, align 1
  %97 = load i64, i64* %2, align 8
  %98 = load i8, i8* %11, align 1
  %99 = zext i8 %98 to i64
  %100 = icmp slt i64 %97, %99
  %101 = zext i1 %100 to i8
  %102 = trunc i8 %101 to i1
  br i1 %102, label %if.then3, label %if.done4

if.then3:                                         ; preds = %if.done2
  %103 = getelementptr inbounds { i32, i64 }, { i32, i64 }* %14, i32 0, i32 0
  %104 = getelementptr inbounds { i32, i64 }, { i32, i64 }* %14, i32 0, i32 1
  store i32 65533, i32* %103, align 4
  store i64 1, i64* %104, align 8
  %105 = load { i32, i64 }, { i32, i64 }* %14, align 8
  %106 = bitcast { i32, i64 }* %14 to { i64, i64 }*
  %107 = load { i64, i64 }, { i64, i64 }* %106, align 8
  ret { i64, i64 } %107

if.done4:                                         ; preds = %if.done2
  %108 = load %..string, %..string* %1, align 8
  %109 = getelementptr inbounds %..string, %..string* %1, i32 0, i32 0
  %110 = load i8*, i8** %109, align 8
  %111 = getelementptr inbounds %..string, %..string* %1, i32 0, i32 1
  %112 = load i64, i64* %111, align 8
  %113 = bitcast { i64, i64 }* %16 to %..string*
  store %..string { i8* getelementptr inbounds ([60 x i8], [60 x i8]* @"csbs$2b9", i64 0, i64 0), i64 59 }, %..string* %113, align 8
  %114 = load { i64, i64 }, { i64, i64 }* %16, align 8
  call void @runtime.bounds_check_error({ i64, i64 } %114, i32 474, i32 10, i64 1, i64 %112) #4
  %115 = getelementptr i8, i8* %110, i64 1
  %116 = load i8, i8* %115, align 1
  store i8 %116, i8* %15, align 1
  %117 = load i8, i8* %15, align 1
  %118 = getelementptr inbounds %runtime.string_decode_rune.Accept_Range-1, %runtime.string_decode_rune.Accept_Range-1* %12, i32 0, i32 0
  %119 = load i8, i8* %118, align 1
  %120 = icmp ult i8 %117, %119
  %121 = zext i1 %120 to i8
  %122 = trunc i8 %121 to i1
  br i1 %122, label %if.then5, label %cmp.or

cmp.or:                                           ; preds = %if.done4
  %123 = getelementptr inbounds %runtime.string_decode_rune.Accept_Range-1, %runtime.string_decode_rune.Accept_Range-1* %12, i32 0, i32 1
  %124 = load i8, i8* %123, align 1
  %125 = load i8, i8* %15, align 1
  %126 = icmp ult i8 %124, %125
  %127 = zext i1 %126 to i8
  %128 = trunc i8 %127 to i1
  br i1 %128, label %if.then5, label %if.done6

if.then5:                                         ; preds = %cmp.or, %if.done4
  %129 = getelementptr inbounds { i32, i64 }, { i32, i64 }* %17, i32 0, i32 0
  %130 = getelementptr inbounds { i32, i64 }, { i32, i64 }* %17, i32 0, i32 1
  store i32 65533, i32* %129, align 4
  store i64 1, i64* %130, align 8
  %131 = load { i32, i64 }, { i32, i64 }* %17, align 8
  %132 = bitcast { i32, i64 }* %17 to { i64, i64 }*
  %133 = load { i64, i64 }, { i64, i64 }* %132, align 8
  ret { i64, i64 } %133

if.done6:                                         ; preds = %cmp.or
  %134 = load i8, i8* %11, align 1
  %135 = icmp eq i8 %134, 2
  %136 = zext i1 %135 to i8
  %137 = trunc i8 %136 to i1
  br i1 %137, label %if.then7, label %if.done8

if.then7:                                         ; preds = %if.done6
  %138 = load i8, i8* %4, align 1
  %139 = and i8 %138, 31
  %140 = zext i8 %139 to i32
  %141 = shl i32 %140, 6
  %142 = select i1 true, i32 %141, i32 0
  %143 = load i8, i8* %15, align 1
  %144 = and i8 %143, 63
  %145 = zext i8 %144 to i32
  %146 = or i32 %142, %145
  %147 = getelementptr inbounds { i32, i64 }, { i32, i64 }* %18, i32 0, i32 0
  %148 = getelementptr inbounds { i32, i64 }, { i32, i64 }* %18, i32 0, i32 1
  store i32 %146, i32* %147, align 4
  store i64 2, i64* %148, align 8
  %149 = load { i32, i64 }, { i32, i64 }* %18, align 8
  %150 = bitcast { i32, i64 }* %18 to { i64, i64 }*
  %151 = load { i64, i64 }, { i64, i64 }* %150, align 8
  ret { i64, i64 } %151

if.done8:                                         ; preds = %if.done6
  %152 = load %..string, %..string* %1, align 8
  %153 = getelementptr inbounds %..string, %..string* %1, i32 0, i32 0
  %154 = load i8*, i8** %153, align 8
  %155 = getelementptr inbounds %..string, %..string* %1, i32 0, i32 1
  %156 = load i64, i64* %155, align 8
  %157 = bitcast { i64, i64 }* %20 to %..string*
  store %..string { i8* getelementptr inbounds ([60 x i8], [60 x i8]* @"csbs$2b9", i64 0, i64 0), i64 59 }, %..string* %157, align 8
  %158 = load { i64, i64 }, { i64, i64 }* %20, align 8
  call void @runtime.bounds_check_error({ i64, i64 } %158, i32 481, i32 10, i64 2, i64 %156) #4
  %159 = getelementptr i8, i8* %154, i64 2
  %160 = load i8, i8* %159, align 1
  store i8 %160, i8* %19, align 1
  %161 = load i8, i8* %19, align 1
  %162 = icmp ult i8 %161, -128
  %163 = zext i1 %162 to i8
  %164 = trunc i8 %163 to i1
  br i1 %164, label %if.then10, label %cmp.or9

cmp.or9:                                          ; preds = %if.done8
  %165 = load i8, i8* %19, align 1
  %166 = icmp ult i8 -65, %165
  %167 = zext i1 %166 to i8
  %168 = trunc i8 %167 to i1
  br i1 %168, label %if.then10, label %if.done11

if.then10:                                        ; preds = %cmp.or9, %if.done8
  %169 = getelementptr inbounds { i32, i64 }, { i32, i64 }* %21, i32 0, i32 0
  %170 = getelementptr inbounds { i32, i64 }, { i32, i64 }* %21, i32 0, i32 1
  store i32 65533, i32* %169, align 4
  store i64 1, i64* %170, align 8
  %171 = load { i32, i64 }, { i32, i64 }* %21, align 8
  %172 = bitcast { i32, i64 }* %21 to { i64, i64 }*
  %173 = load { i64, i64 }, { i64, i64 }* %172, align 8
  ret { i64, i64 } %173

if.done11:                                        ; preds = %cmp.or9
  %174 = load i8, i8* %11, align 1
  %175 = icmp eq i8 %174, 3
  %176 = zext i1 %175 to i8
  %177 = trunc i8 %176 to i1
  br i1 %177, label %if.then12, label %if.done13

if.then12:                                        ; preds = %if.done11
  %178 = load i8, i8* %4, align 1
  %179 = and i8 %178, 15
  %180 = zext i8 %179 to i32
  %181 = shl i32 %180, 12
  %182 = select i1 true, i32 %181, i32 0
  %183 = load i8, i8* %15, align 1
  %184 = and i8 %183, 63
  %185 = zext i8 %184 to i32
  %186 = shl i32 %185, 6
  %187 = select i1 true, i32 %186, i32 0
  %188 = or i32 %182, %187
  %189 = load i8, i8* %19, align 1
  %190 = and i8 %189, 63
  %191 = zext i8 %190 to i32
  %192 = or i32 %188, %191
  %193 = getelementptr inbounds { i32, i64 }, { i32, i64 }* %22, i32 0, i32 0
  %194 = getelementptr inbounds { i32, i64 }, { i32, i64 }* %22, i32 0, i32 1
  store i32 %192, i32* %193, align 4
  store i64 3, i64* %194, align 8
  %195 = load { i32, i64 }, { i32, i64 }* %22, align 8
  %196 = bitcast { i32, i64 }* %22 to { i64, i64 }*
  %197 = load { i64, i64 }, { i64, i64 }* %196, align 8
  ret { i64, i64 } %197

if.done13:                                        ; preds = %if.done11
  %198 = load %..string, %..string* %1, align 8
  %199 = getelementptr inbounds %..string, %..string* %1, i32 0, i32 0
  %200 = load i8*, i8** %199, align 8
  %201 = getelementptr inbounds %..string, %..string* %1, i32 0, i32 1
  %202 = load i64, i64* %201, align 8
  %203 = bitcast { i64, i64 }* %24 to %..string*
  store %..string { i8* getelementptr inbounds ([60 x i8], [60 x i8]* @"csbs$2b9", i64 0, i64 0), i64 59 }, %..string* %203, align 8
  %204 = load { i64, i64 }, { i64, i64 }* %24, align 8
  call void @runtime.bounds_check_error({ i64, i64 } %204, i32 488, i32 10, i64 3, i64 %202) #4
  %205 = getelementptr i8, i8* %200, i64 3
  %206 = load i8, i8* %205, align 1
  store i8 %206, i8* %23, align 1
  %207 = load i8, i8* %23, align 1
  %208 = icmp ult i8 %207, -128
  %209 = zext i1 %208 to i8
  %210 = trunc i8 %209 to i1
  br i1 %210, label %if.then15, label %cmp.or14

cmp.or14:                                         ; preds = %if.done13
  %211 = load i8, i8* %23, align 1
  %212 = icmp ult i8 -65, %211
  %213 = zext i1 %212 to i8
  %214 = trunc i8 %213 to i1
  br i1 %214, label %if.then15, label %if.done16

if.then15:                                        ; preds = %cmp.or14, %if.done13
  %215 = getelementptr inbounds { i32, i64 }, { i32, i64 }* %25, i32 0, i32 0
  %216 = getelementptr inbounds { i32, i64 }, { i32, i64 }* %25, i32 0, i32 1
  store i32 65533, i32* %215, align 4
  store i64 1, i64* %216, align 8
  %217 = load { i32, i64 }, { i32, i64 }* %25, align 8
  %218 = bitcast { i32, i64 }* %25 to { i64, i64 }*
  %219 = load { i64, i64 }, { i64, i64 }* %218, align 8
  ret { i64, i64 } %219

if.done16:                                        ; preds = %cmp.or14
  %220 = load i8, i8* %4, align 1
  %221 = and i8 %220, 7
  %222 = zext i8 %221 to i32
  %223 = shl i32 %222, 18
  %224 = select i1 true, i32 %223, i32 0
  %225 = load i8, i8* %15, align 1
  %226 = and i8 %225, 63
  %227 = zext i8 %226 to i32
  %228 = shl i32 %227, 12
  %229 = select i1 true, i32 %228, i32 0
  %230 = or i32 %224, %229
  %231 = load i8, i8* %19, align 1
  %232 = and i8 %231, 63
  %233 = zext i8 %232 to i32
  %234 = shl i32 %233, 6
  %235 = select i1 true, i32 %234, i32 0
  %236 = or i32 %230, %235
  %237 = load i8, i8* %23, align 1
  %238 = and i8 %237, 63
  %239 = zext i8 %238 to i32
  %240 = or i32 %236, %239
  %241 = getelementptr inbounds { i32, i64 }, { i32, i64 }* %26, i32 0, i32 0
  %242 = getelementptr inbounds { i32, i64 }, { i32, i64 }* %26, i32 0, i32 1
  store i32 %240, i32* %241, align 4
  store i64 4, i64* %242, align 8
  %243 = load { i32, i64 }, { i32, i64 }* %26, align 8
  %244 = bitcast { i32, i64 }* %26 to { i64, i64 }*
  %245 = load { i64, i64 }, { i64, i64 }* %244, align 8
  ret { i64, i64 } %245
}

define dso_local i16 @__truncsfhf2(float %0) {
decls:
  %1 = alloca float, align 4
  %2 = alloca { i32 }, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  br label %entry

entry:                                            ; preds = %decls
  store float %0, float* %1, align 4
  %10 = bitcast { i32 }* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* %10, i8 0, i64 4, i1 false)
  store i32 0, i32* %3, align 4
  store i32 0, i32* %4, align 4
  store i32 0, i32* %5, align 4
  store i32 0, i32* %6, align 4
  %11 = bitcast { i32 }* %2 to float*
  %12 = load float, float* %1, align 4
  store float %12, float* %11, align 4
  %13 = bitcast { i32 }* %2 to i32*
  %14 = load i32, i32* %13, align 4
  store i32 %14, i32* %3, align 4
  %15 = load i32, i32* %3, align 4
  %16 = ashr i32 %15, 16
  %17 = select i1 true, i32 %16, i32 0
  %18 = and i32 %17, 32768
  store i32 %18, i32* %4, align 4
  %19 = load i32, i32* %3, align 4
  %20 = ashr i32 %19, 23
  %21 = select i1 true, i32 %20, i32 0
  %22 = and i32 %21, 255
  %23 = sub i32 %22, 112
  store i32 %23, i32* %5, align 4
  %24 = load i32, i32* %3, align 4
  %25 = and i32 %24, 8388607
  store i32 %25, i32* %6, align 4
  %26 = load i32, i32* %5, align 4
  %27 = icmp sle i32 %26, 0
  %28 = zext i1 %27 to i8
  %29 = trunc i8 %28 to i1
  br i1 %29, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %30 = load i32, i32* %5, align 4
  %31 = icmp slt i32 %30, -10
  %32 = zext i1 %31 to i8
  %33 = trunc i8 %32 to i1
  br i1 %33, label %if.then1, label %if.done

if.then1:                                         ; preds = %if.then
  %34 = load i32, i32* %4, align 4
  %35 = trunc i32 %34 to i16
  ret i16 %35

if.done:                                          ; preds = %if.then
  %36 = load i32, i32* %6, align 4
  %37 = or i32 %36, 8388608
  %38 = load i32, i32* %5, align 4
  %39 = sub i32 1, %38
  %40 = icmp ult i32 %39, 32
  %41 = ashr i32 %37, %39
  %42 = select i1 %40, i32 %41, i32 0
  store i32 %42, i32* %6, align 4
  %43 = load i32, i32* %6, align 4
  %44 = and i32 %43, 4096
  %45 = icmp ne i32 %44, 0
  %46 = zext i1 %45 to i8
  %47 = trunc i8 %46 to i1
  br i1 %47, label %if.then2, label %if.done3

if.then2:                                         ; preds = %if.done
  %48 = load i32, i32* %6, align 4
  %49 = add i32 %48, 8192
  store i32 %49, i32* %6, align 4
  br label %if.done3

if.done3:                                         ; preds = %if.then2, %if.done
  %50 = load i32, i32* %4, align 4
  %51 = load i32, i32* %6, align 4
  %52 = ashr i32 %51, 13
  %53 = select i1 true, i32 %52, i32 0
  %54 = or i32 %50, %53
  %55 = trunc i32 %54 to i16
  ret i16 %55

if.else:                                          ; preds = %entry
  %56 = load i32, i32* %5, align 4
  %57 = icmp eq i32 %56, 143
  %58 = zext i1 %57 to i8
  %59 = trunc i8 %58 to i1
  br i1 %59, label %if.then4, label %if.else8

if.then4:                                         ; preds = %if.else
  %60 = load i32, i32* %6, align 4
  %61 = icmp eq i32 %60, 0
  %62 = zext i1 %61 to i8
  %63 = trunc i8 %62 to i1
  br i1 %63, label %if.then5, label %if.else6

if.then5:                                         ; preds = %if.then4
  %64 = load i32, i32* %4, align 4
  %65 = or i32 %64, 31744
  %66 = trunc i32 %65 to i16
  ret i16 %66

if.else6:                                         ; preds = %if.then4
  %67 = load i32, i32* %6, align 4
  %68 = ashr i32 %67, 13
  %69 = select i1 true, i32 %68, i32 0
  store i32 %69, i32* %6, align 4
  %70 = load i32, i32* %4, align 4
  %71 = or i32 %70, 31744
  %72 = load i32, i32* %6, align 4
  %73 = or i32 %71, %72
  %74 = load i32, i32* %6, align 4
  %75 = icmp eq i32 %74, 0
  %76 = icmp ne i1 %75, false
  %77 = zext i1 %76 to i32
  %78 = or i32 %73, %77
  %79 = trunc i32 %78 to i16
  ret i16 %79

if.done7:                                         ; No predecessors!
  br label %if.done15

if.else8:                                         ; preds = %if.else
  %80 = load i32, i32* %6, align 4
  %81 = and i32 %80, 4096
  %82 = icmp ne i32 %81, 0
  %83 = zext i1 %82 to i8
  %84 = trunc i8 %83 to i1
  br i1 %84, label %if.then9, label %if.done12

if.then9:                                         ; preds = %if.else8
  %85 = load i32, i32* %6, align 4
  %86 = add i32 %85, 8192
  store i32 %86, i32* %6, align 4
  %87 = load i32, i32* %6, align 4
  %88 = and i32 %87, 8388608
  %89 = icmp ne i32 %88, 0
  %90 = zext i1 %89 to i8
  %91 = trunc i8 %90 to i1
  br i1 %91, label %if.then10, label %if.done11

if.then10:                                        ; preds = %if.then9
  store i32 0, i32* %6, align 4
  %92 = load i32, i32* %5, align 4
  %93 = add i32 %92, 1
  store i32 %93, i32* %5, align 4
  br label %if.done11

if.done11:                                        ; preds = %if.then10, %if.then9
  br label %if.done12

if.done12:                                        ; preds = %if.done11, %if.else8
  %94 = load i32, i32* %5, align 4
  %95 = icmp sgt i32 %94, 30
  %96 = zext i1 %95 to i8
  %97 = trunc i8 %96 to i1
  br i1 %97, label %if.then13, label %if.done14

if.then13:                                        ; preds = %if.done12
  store i64 1000000000000, i64* %7, align 8
  br label %for.init

for.init:                                         ; preds = %if.then13
  store i64 0, i64* %8, align 8
  br label %for.loop

for.loop:                                         ; preds = %for.post, %for.init
  %98 = load i64, i64* %8, align 8
  %99 = icmp slt i64 %98, 10
  %100 = zext i1 %99 to i8
  %101 = trunc i8 %100 to i1
  br i1 %101, label %for.body, label %for.done

for.body:                                         ; preds = %for.loop
  %102 = load volatile i64, i64* %7, align 8
  store i64 %102, i64* %9, align 8
  %103 = load i64, i64* %9, align 8
  %104 = load i64, i64* %9, align 8
  %105 = mul i64 %104, %103
  store i64 %105, i64* %9, align 8
  %106 = load i64, i64* %9, align 8
  store volatile i64 %106, i64* %7, align 8
  br label %for.post

for.post:                                         ; preds = %for.body
  %107 = load i64, i64* %8, align 8
  %108 = add i64 %107, 1
  store i64 %108, i64* %8, align 8
  br label %for.loop

for.done:                                         ; preds = %for.loop
  %109 = load i32, i32* %4, align 4
  %110 = or i32 %109, 31744
  %111 = trunc i32 %110 to i16
  ret i16 %111

if.done14:                                        ; preds = %if.done12
  %112 = load i32, i32* %4, align 4
  %113 = load i32, i32* %5, align 4
  %114 = shl i32 %113, 10
  %115 = select i1 true, i32 %114, i32 0
  %116 = or i32 %112, %115
  %117 = load i32, i32* %6, align 4
  %118 = ashr i32 %117, 13
  %119 = select i1 true, i32 %118, i32 0
  %120 = or i32 %116, %119
  %121 = trunc i32 %120 to i16
  ret i16 %121

if.done15:                                        ; preds = %if.done7
  br label %if.done16

if.done16:                                        ; preds = %if.done15
  unreachable
}

define dso_local i16 @__truncdfhf2(double %0) {
decls:
  %1 = alloca double, align 8
  br label %entry

entry:                                            ; preds = %decls
  store double %0, double* %1, align 8
  %2 = load double, double* %1, align 8
  %3 = fptrunc double %2 to float
  %4 = call i16 @__truncsfhf2(float %3)
  ret i16 %4
}

define dso_local float @__gnu_h2f_ieee(i16 %0) {
decls:
  %1 = alloca i16, align 2
  %2 = alloca %__gnu_h2f_ieee.fp32-2, align 4
  %3 = alloca %__gnu_h2f_ieee.fp32-2, align 4
  %4 = alloca %__gnu_h2f_ieee.fp32-2, align 4
  br label %entry

entry:                                            ; preds = %decls
  store i16 %0, i16* %1, align 2
  %5 = bitcast %__gnu_h2f_ieee.fp32-2* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* %5, i8 0, i64 4, i1 false)
  %6 = bitcast %__gnu_h2f_ieee.fp32-2* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* %6, i8 0, i64 4, i1 false)
  %7 = bitcast %__gnu_h2f_ieee.fp32-2* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* %7, i8 0, i64 4, i1 false)
  %8 = bitcast %__gnu_h2f_ieee.fp32-2* %3 to i32*
  store i32 2004877312, i32* %8, align 4
  %9 = bitcast %__gnu_h2f_ieee.fp32-2* %4 to i32*
  store i32 1199570944, i32* %9, align 4
  %10 = bitcast %__gnu_h2f_ieee.fp32-2* %2 to i32*
  %11 = load i16, i16* %1, align 2
  %12 = and i16 %11, 32767
  %13 = zext i16 %12 to i32
  %14 = shl i32 %13, 13
  %15 = select i1 true, i32 %14, i32 0
  store i32 %15, i32* %10, align 4
  %16 = bitcast %__gnu_h2f_ieee.fp32-2* %2 to float*
  %17 = bitcast %__gnu_h2f_ieee.fp32-2* %3 to float*
  %18 = load float, float* %17, align 4
  %19 = load float, float* %16, align 4
  %20 = fmul float %19, %18
  store float %20, float* %16, align 4
  %21 = bitcast %__gnu_h2f_ieee.fp32-2* %2 to float*
  %22 = load float, float* %21, align 4
  %23 = bitcast %__gnu_h2f_ieee.fp32-2* %4 to float*
  %24 = load float, float* %23, align 4
  %25 = fcmp oge float %22, %24
  %26 = zext i1 %25 to i8
  %27 = trunc i8 %26 to i1
  br i1 %27, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  %28 = bitcast %__gnu_h2f_ieee.fp32-2* %2 to i32*
  %29 = load i32, i32* %28, align 4
  %30 = or i32 %29, 2139095040
  store i32 %30, i32* %28, align 4
  br label %if.done

if.done:                                          ; preds = %if.then, %entry
  %31 = bitcast %__gnu_h2f_ieee.fp32-2* %2 to i32*
  %32 = load i16, i16* %1, align 2
  %33 = and i16 %32, -32768
  %34 = zext i16 %33 to i32
  %35 = shl i32 %34, 16
  %36 = select i1 true, i32 %35, i32 0
  %37 = load i32, i32* %31, align 4
  %38 = or i32 %37, %36
  store i32 %38, i32* %31, align 4
  %39 = bitcast %__gnu_h2f_ieee.fp32-2* %2 to float*
  %40 = load float, float* %39, align 4
  ret float %40
}

define dso_local i16 @__gnu_f2h_ieee(float %0) {
decls:
  %1 = alloca float, align 4
  br label %entry

entry:                                            ; preds = %decls
  store float %0, float* %1, align 4
  %2 = load float, float* %1, align 4
  %3 = call i16 @__truncsfhf2(float %2)
  ret i16 %3
}

define dso_local float @__extendhfsf2(i16 %0) {
decls:
  %1 = alloca i16, align 2
  br label %entry

entry:                                            ; preds = %decls
  store i16 %0, i16* %1, align 2
  %2 = load i16, i16* %1, align 2
  %3 = call float @__gnu_h2f_ieee(i16 %2)
  ret float %3
}

define dso_local double @__floattidf(i128 %0) {
decls:
  %1 = alloca i128, align 8
  %2 = alloca i128, align 8
  %3 = alloca i128, align 8
  %4 = alloca i128, align 8
  %5 = alloca i32, align 4
  %6 = alloca [2 x i32], align 4
  br label %entry

entry:                                            ; preds = %decls
  store i128 %0, i128* %1, align 8
  %7 = load i128, i128* %1, align 8
  %8 = icmp eq i128 %7, 0
  %9 = zext i1 %8 to i8
  %10 = trunc i8 %9 to i1
  br i1 %10, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  ret double 0.000000e+00

if.done:                                          ; preds = %entry
  %11 = load i128, i128* %1, align 8
  store i128 %11, i128* %2, align 8
  %12 = load i128, i128* %2, align 8
  %13 = ashr i128 %12, 127
  %14 = select i1 true, i128 %13, i128 0
  store i128 %14, i128* %3, align 8
  %15 = load i128, i128* %2, align 8
  %16 = load i128, i128* %3, align 8
  %17 = xor i128 %15, %16
  %18 = load i128, i128* %3, align 8
  %19 = sub i128 %17, %18
  store i128 %19, i128* %2, align 8
  %20 = load i128, i128* %2, align 8
  %21 = call i128 @llvm.ctlz.i128(i128 %20, i1 false)
  %22 = sub i128 128, %21
  store i128 %22, i128* %4, align 8
  %23 = load i128, i128* %4, align 8
  %24 = sub i128 %23, 1
  %25 = trunc i128 %24 to i32
  store i32 %25, i32* %5, align 4
  %26 = load i128, i128* %4, align 8
  %27 = icmp sgt i128 %26, 53
  %28 = zext i1 %27 to i8
  %29 = trunc i8 %28 to i1
  br i1 %29, label %if.then1, label %if.else

if.then1:                                         ; preds = %if.done
  %30 = load i128, i128* %4, align 8
  switch i128 %30, label %switch.default.body [
    i128 54, label %switch.case.body
    i128 55, label %switch.case.body2
  ]

switch.case.body:                                 ; preds = %if.then1
  %31 = load i128, i128* %2, align 8
  %32 = shl i128 %31, 1
  %33 = select i1 true, i128 %32, i128 0
  store i128 %33, i128* %2, align 8
  br label %switch.done

switch.case.body2:                                ; preds = %if.then1
  br label %switch.done

switch.default.body:                              ; preds = %if.then1
  %34 = load i128, i128* %2, align 8
  %35 = load i128, i128* %4, align 8
  %36 = sub i128 %35, 55
  %37 = icmp ult i128 %36, 128
  %38 = lshr i128 %34, %36
  %39 = select i1 %37, i128 %38, i128 0
  %40 = load i128, i128* %2, align 8
  %41 = load i128, i128* %4, align 8
  %42 = sub i128 183, %41
  %43 = icmp ult i128 %42, 128
  %44 = lshr i128 -1, %42
  %45 = select i1 %43, i128 %44, i128 0
  %46 = and i128 %40, %45
  %47 = icmp ne i128 %46, 0
  %48 = icmp ne i1 %47, false
  %49 = zext i1 %48 to i128
  %50 = or i128 %39, %49
  store i128 %50, i128* %2, align 8
  br label %switch.done

switch.done:                                      ; preds = %switch.default.body, %switch.case.body2, %switch.case.body
  %51 = load i128, i128* %2, align 8
  %52 = and i128 %51, 4
  %53 = icmp ne i128 %52, 0
  %54 = icmp ne i1 %53, false
  %55 = zext i1 %54 to i128
  %56 = load i128, i128* %2, align 8
  %57 = or i128 %56, %55
  store i128 %57, i128* %2, align 8
  %58 = load i128, i128* %2, align 8
  %59 = add i128 %58, 1
  store i128 %59, i128* %2, align 8
  %60 = load i128, i128* %2, align 8
  %61 = ashr i128 %60, 2
  %62 = select i1 true, i128 %61, i128 0
  store i128 %62, i128* %2, align 8
  %63 = load i128, i128* %2, align 8
  %64 = and i128 %63, 9007199254740992
  %65 = icmp ne i128 %64, 0
  %66 = zext i1 %65 to i8
  %67 = trunc i8 %66 to i1
  br i1 %67, label %if.then3, label %if.done4

if.then3:                                         ; preds = %switch.done
  %68 = load i128, i128* %2, align 8
  %69 = ashr i128 %68, 1
  %70 = select i1 true, i128 %69, i128 0
  store i128 %70, i128* %2, align 8
  %71 = load i32, i32* %5, align 4
  %72 = add i32 %71, 1
  store i32 %72, i32* %5, align 4
  br label %if.done4

if.done4:                                         ; preds = %if.then3, %switch.done
  br label %if.done5

if.else:                                          ; preds = %if.done
  %73 = load i128, i128* %4, align 8
  %74 = sub i128 53, %73
  %75 = and i128 %74, 127
  %76 = load i128, i128* %2, align 8
  %77 = icmp ult i128 %75, 128
  %78 = shl i128 %76, %75
  %79 = select i1 %77, i128 %78, i128 0
  store i128 %79, i128* %2, align 8
  br label %if.done5

if.done5:                                         ; preds = %if.else, %if.done4
  %80 = bitcast [2 x i32]* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* %80, i8 0, i64 8, i1 false)
  %81 = getelementptr [2 x i32], [2 x i32]* %6, i64 0, i64 1
  %82 = load i128, i128* %3, align 8
  %83 = trunc i128 %82 to i32
  %84 = and i32 %83, -2147483648
  %85 = load i32, i32* %5, align 4
  %86 = add i32 %85, 1023
  %87 = shl i32 %86, 20
  %88 = select i1 true, i32 %87, i32 0
  %89 = or i32 %84, %88
  %90 = load i128, i128* %2, align 8
  %91 = trunc i128 %90 to i64
  %92 = lshr i64 %91, 32
  %93 = select i1 true, i64 %92, i64 0
  %94 = and i64 %93, 1048575
  %95 = trunc i64 %94 to i32
  %96 = or i32 %89, %95
  store i32 %96, i32* %81, align 4
  %97 = getelementptr [2 x i32], [2 x i32]* %6, i64 0, i64 0
  %98 = load i128, i128* %2, align 8
  %99 = trunc i128 %98 to i32
  store i32 %99, i32* %97, align 4
  %100 = load [2 x i32], [2 x i32]* %6, align 4
  %101 = bitcast [2 x i32]* %6 to double*
  %102 = load double, double* %101, align 8
  ret double %102
}

define dso_local double @__floattidf_unsigned(i128 %0) {
decls:
  %1 = alloca i128, align 8
  %2 = alloca i128, align 8
  %3 = alloca i128, align 8
  %4 = alloca i32, align 4
  %5 = alloca [2 x i32], align 4
  br label %entry

entry:                                            ; preds = %decls
  store i128 %0, i128* %1, align 8
  %6 = load i128, i128* %1, align 8
  %7 = icmp eq i128 %6, 0
  %8 = zext i1 %7 to i8
  %9 = trunc i8 %8 to i1
  br i1 %9, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  ret double 0.000000e+00

if.done:                                          ; preds = %entry
  %10 = load i128, i128* %1, align 8
  store i128 %10, i128* %2, align 8
  %11 = load i128, i128* %2, align 8
  %12 = call i128 @llvm.ctlz.i128(i128 %11, i1 false)
  %13 = sub i128 128, %12
  store i128 %13, i128* %3, align 8
  %14 = load i128, i128* %3, align 8
  %15 = sub i128 %14, 1
  %16 = trunc i128 %15 to i32
  store i32 %16, i32* %4, align 4
  %17 = load i128, i128* %3, align 8
  %18 = icmp ugt i128 %17, 53
  %19 = zext i1 %18 to i8
  %20 = trunc i8 %19 to i1
  br i1 %20, label %if.then1, label %if.else

if.then1:                                         ; preds = %if.done
  %21 = load i128, i128* %3, align 8
  switch i128 %21, label %switch.default.body [
    i128 54, label %switch.case.body
    i128 55, label %switch.case.body2
  ]

switch.case.body:                                 ; preds = %if.then1
  %22 = load i128, i128* %2, align 8
  %23 = shl i128 %22, 1
  %24 = select i1 true, i128 %23, i128 0
  store i128 %24, i128* %2, align 8
  br label %switch.done

switch.case.body2:                                ; preds = %if.then1
  br label %switch.done

switch.default.body:                              ; preds = %if.then1
  %25 = load i128, i128* %2, align 8
  %26 = load i128, i128* %3, align 8
  %27 = sub i128 %26, 55
  %28 = icmp ult i128 %27, 128
  %29 = lshr i128 %25, %27
  %30 = select i1 %28, i128 %29, i128 0
  %31 = load i128, i128* %2, align 8
  %32 = load i128, i128* %3, align 8
  %33 = sub i128 183, %32
  %34 = icmp ult i128 %33, 128
  %35 = lshr i128 -1, %33
  %36 = select i1 %34, i128 %35, i128 0
  %37 = and i128 %31, %36
  %38 = icmp ne i128 %37, 0
  %39 = icmp ne i1 %38, false
  %40 = zext i1 %39 to i128
  %41 = or i128 %30, %40
  store i128 %41, i128* %2, align 8
  br label %switch.done

switch.done:                                      ; preds = %switch.default.body, %switch.case.body2, %switch.case.body
  %42 = load i128, i128* %2, align 8
  %43 = and i128 %42, 4
  %44 = icmp ne i128 %43, 0
  %45 = icmp ne i1 %44, false
  %46 = zext i1 %45 to i128
  %47 = load i128, i128* %2, align 8
  %48 = or i128 %47, %46
  store i128 %48, i128* %2, align 8
  %49 = load i128, i128* %2, align 8
  %50 = add i128 %49, 1
  store i128 %50, i128* %2, align 8
  %51 = load i128, i128* %2, align 8
  %52 = lshr i128 %51, 2
  %53 = select i1 true, i128 %52, i128 0
  store i128 %53, i128* %2, align 8
  %54 = load i128, i128* %2, align 8
  %55 = and i128 %54, 9007199254740992
  %56 = icmp ne i128 %55, 0
  %57 = zext i1 %56 to i8
  %58 = trunc i8 %57 to i1
  br i1 %58, label %if.then3, label %if.done4

if.then3:                                         ; preds = %switch.done
  %59 = load i128, i128* %2, align 8
  %60 = lshr i128 %59, 1
  %61 = select i1 true, i128 %60, i128 0
  store i128 %61, i128* %2, align 8
  %62 = load i32, i32* %4, align 4
  %63 = add i32 %62, 1
  store i32 %63, i32* %4, align 4
  br label %if.done4

if.done4:                                         ; preds = %if.then3, %switch.done
  br label %if.done5

if.else:                                          ; preds = %if.done
  %64 = load i128, i128* %3, align 8
  %65 = sub i128 53, %64
  %66 = load i128, i128* %2, align 8
  %67 = icmp ult i128 %65, 128
  %68 = shl i128 %66, %65
  %69 = select i1 %67, i128 %68, i128 0
  store i128 %69, i128* %2, align 8
  br label %if.done5

if.done5:                                         ; preds = %if.else, %if.done4
  %70 = bitcast [2 x i32]* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* %70, i8 0, i64 8, i1 false)
  %71 = getelementptr [2 x i32], [2 x i32]* %5, i64 0, i64 1
  %72 = load i32, i32* %4, align 4
  %73 = add i32 %72, 1023
  %74 = shl i32 %73, 20
  %75 = select i1 true, i32 %74, i32 0
  %76 = or i32 0, %75
  %77 = load i128, i128* %2, align 8
  %78 = trunc i128 %77 to i64
  %79 = lshr i64 %78, 32
  %80 = select i1 true, i64 %79, i64 0
  %81 = and i64 %80, 1048575
  %82 = trunc i64 %81 to i32
  %83 = or i32 %76, %82
  store i32 %83, i32* %71, align 4
  %84 = getelementptr [2 x i32], [2 x i32]* %5, i64 0, i64 0
  %85 = load i128, i128* %2, align 8
  %86 = trunc i128 %85 to i32
  store i32 %86, i32* %84, align 4
  %87 = load [2 x i32], [2 x i32]* %5, align 4
  %88 = bitcast [2 x i32]* %5 to double*
  %89 = load double, double* %88, align 8
  ret double %89
}

; Function Attrs: noinline
define dso_local i128 @__fixunsdfti(double %0) #5 {
decls:
  %1 = alloca double, align 8
  %2 = alloca i64, align 8
  br label %entry

entry:                                            ; preds = %decls
  store double %0, double* %1, align 8
  %3 = load double, double* %1, align 8
  %4 = fptoui double %3 to i64
  store i64 %4, i64* %2, align 8
  %5 = load i64, i64* %2, align 8
  %6 = zext i64 %5 to i128
  ret i128 %6
}

; Function Attrs: noinline
define dso_local i128 @__fixunsdfdi(double %0) #5 {
decls:
  %1 = alloca double, align 8
  %2 = alloca i64, align 8
  br label %entry

entry:                                            ; preds = %decls
  store double %0, double* %1, align 8
  %3 = load double, double* %1, align 8
  %4 = fptosi double %3 to i64
  store i64 %4, i64* %2, align 8
  %5 = load i64, i64* %2, align 8
  %6 = sext i64 %5 to i128
  ret i128 %6
}

define dso_local i128 @__umodti3(i128 %0, i128 %1) {
decls:
  %2 = alloca i128, align 8
  %3 = alloca i128, align 8
  %4 = alloca i128, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i128 %0, i128* %2, align 8
  store i128 %1, i128* %3, align 8
  store i128 undef, i128* %4, align 8
  %5 = load i128, i128* %2, align 8
  %6 = load i128, i128* %3, align 8
  %7 = call i128 @runtime.udivmod128(i128 %5, i128 %6, i128* %4)
  %8 = load i128, i128* %4, align 8
  ret i128 %8
}

define dso_local i128 @__udivmodti4(i128 %0, i128 %1, i128* %2) {
decls:
  %3 = alloca i128, align 8
  %4 = alloca i128, align 8
  %5 = alloca i128*, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i128 %0, i128* %3, align 8
  store i128 %1, i128* %4, align 8
  store i128* %2, i128** %5, align 8
  %6 = load i128, i128* %3, align 8
  %7 = load i128, i128* %4, align 8
  %8 = load i128*, i128** %5, align 8
  %9 = call i128 @runtime.udivmod128(i128 %6, i128 %7, i128* %8)
  ret i128 %9
}

define dso_local i128 @__udivti3(i128 %0, i128 %1) {
decls:
  %2 = alloca i128, align 8
  %3 = alloca i128, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i128 %0, i128* %2, align 8
  store i128 %1, i128* %3, align 8
  %4 = load i128, i128* %2, align 8
  %5 = load i128, i128* %3, align 8
  %6 = call i128 @__udivmodti4(i128 %4, i128 %5, i128* null)
  ret i128 %6
}

define dso_local i128 @__modti3(i128 %0, i128 %1) {
decls:
  %2 = alloca i128, align 8
  %3 = alloca i128, align 8
  %4 = alloca i128, align 8
  %5 = alloca i128, align 8
  %6 = alloca i128, align 8
  %7 = alloca i128, align 8
  %8 = alloca i128, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i128 %0, i128* %2, align 8
  store i128 %1, i128* %3, align 8
  %9 = load i128, i128* %2, align 8
  %10 = ashr i128 %9, 127
  %11 = select i1 true, i128 %10, i128 0
  store i128 %11, i128* %4, align 8
  %12 = load i128, i128* %3, align 8
  %13 = ashr i128 %12, 127
  %14 = select i1 true, i128 %13, i128 0
  store i128 %14, i128* %5, align 8
  %15 = load i128, i128* %2, align 8
  %16 = load i128, i128* %4, align 8
  %17 = xor i128 %15, %16
  %18 = load i128, i128* %4, align 8
  %19 = sub i128 %17, %18
  store i128 %19, i128* %6, align 8
  %20 = load i128, i128* %3, align 8
  %21 = load i128, i128* %5, align 8
  %22 = xor i128 %20, %21
  %23 = load i128, i128* %5, align 8
  %24 = sub i128 %22, %23
  store i128 %24, i128* %7, align 8
  store i128 undef, i128* %8, align 8
  %25 = load i128, i128* %6, align 8
  %26 = load i128, i128* %7, align 8
  %27 = call i128 @runtime.udivmod128(i128 %25, i128 %26, i128* %8)
  %28 = load i128, i128* %8, align 8
  %29 = load i128, i128* %4, align 8
  %30 = xor i128 %28, %29
  %31 = load i128, i128* %4, align 8
  %32 = sub i128 %30, %31
  ret i128 %32
}

define dso_local i128 @__divmodti4(i128 %0, i128 %1, i128* %2) {
decls:
  %3 = alloca i128, align 8
  %4 = alloca i128, align 8
  %5 = alloca i128*, align 8
  %6 = alloca i128, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i128 %0, i128* %3, align 8
  store i128 %1, i128* %4, align 8
  store i128* %2, i128** %5, align 8
  %7 = load i128, i128* %3, align 8
  %8 = load i128, i128* %4, align 8
  %9 = load i128*, i128** %5, align 8
  %10 = call i128 @runtime.udivmod128(i128 %7, i128 %8, i128* %9)
  store i128 %10, i128* %6, align 8
  %11 = load i128, i128* %6, align 8
  ret i128 %11
}

define dso_local i128 @__divti3(i128 %0, i128 %1) {
decls:
  %2 = alloca i128, align 8
  %3 = alloca i128, align 8
  %4 = alloca i128, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i128 %0, i128* %2, align 8
  store i128 %1, i128* %3, align 8
  %5 = load i128, i128* %2, align 8
  %6 = load i128, i128* %3, align 8
  %7 = call i128 @__udivmodti4(i128 %5, i128 %6, i128* null)
  store i128 %7, i128* %4, align 8
  %8 = load i128, i128* %4, align 8
  ret i128 %8
}

define dso_local i128 @__fixdfti(i64 %0, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %1 = alloca i64, align 8
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i128, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i64 %0, i64* %1, align 8
  %7 = bitcast i8* %__.context_ptr to %runtime.Context*
  %8 = load i64, i64* %1, align 8
  store i64 %8, i64* %2, align 8
  %9 = load i64, i64* %2, align 8
  %10 = and i64 %9, 9223372036854775807
  store i64 %10, i64* %3, align 8
  %11 = load i64, i64* %2, align 8
  %12 = and i64 %11, -9223372036854775808
  %13 = icmp ne i64 %12, 0
  %14 = zext i1 %13 to i8
  %15 = trunc i8 %14 to i1
  br i1 %15, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  br label %if.done

if.else:                                          ; preds = %entry
  br label %if.done

if.done:                                          ; preds = %if.else, %if.then
  %16 = phi i128 [ -1, %if.then ], [ 1, %if.else ]
  store i128 %16, i128* %4, align 8
  %17 = load i64, i64* %3, align 8
  %18 = lshr i64 %17, 52
  %19 = select i1 true, i64 %18, i64 0
  %20 = sub i64 %19, 1023
  store i64 %20, i64* %5, align 8
  %21 = load i64, i64* %3, align 8
  %22 = and i64 %21, 4503599627370495
  %23 = or i64 %22, 4503599627370496
  store i64 %23, i64* %6, align 8
  %24 = load i64, i64* %5, align 8
  %25 = icmp ult i64 %24, 0
  %26 = zext i1 %25 to i8
  %27 = trunc i8 %26 to i1
  br i1 %27, label %if.then1, label %if.done2

if.then1:                                         ; preds = %if.done
  ret i128 0

if.done2:                                         ; preds = %if.done
  %28 = load i64, i64* %5, align 8
  %29 = icmp uge i64 %28, 128
  %30 = zext i1 %29 to i8
  %31 = trunc i8 %30 to i1
  br i1 %31, label %if.then3, label %if.done7

if.then3:                                         ; preds = %if.done2
  %32 = load i128, i128* %4, align 8
  %33 = icmp eq i128 %32, 1
  %34 = zext i1 %33 to i8
  %35 = trunc i8 %34 to i1
  br i1 %35, label %if.then4, label %if.else5

if.then4:                                         ; preds = %if.then3
  br label %if.done6

if.else5:                                         ; preds = %if.then3
  br label %if.done6

if.done6:                                         ; preds = %if.else5, %if.then4
  %36 = phi i128 [ 170141183460469231731687303715884105727, %if.then4 ], [ -170141183460469231731687303715884105728, %if.else5 ]
  ret i128 %36

if.done7:                                         ; preds = %if.done2
  %37 = load i64, i64* %5, align 8
  %38 = icmp ult i64 %37, 52
  %39 = zext i1 %38 to i8
  %40 = trunc i8 %39 to i1
  br i1 %40, label %if.then8, label %if.else9

if.then8:                                         ; preds = %if.done7
  %41 = load i128, i128* %4, align 8
  %42 = load i64, i64* %6, align 8
  %43 = load i64, i64* %5, align 8
  %44 = sub i64 52, %43
  %45 = icmp ult i64 %44, 64
  %46 = lshr i64 %42, %44
  %47 = select i1 %45, i64 %46, i64 0
  %48 = zext i64 %47 to i128
  %49 = mul i128 %41, %48
  ret i128 %49

if.else9:                                         ; preds = %if.done7
  %50 = load i128, i128* %4, align 8
  %51 = load i64, i64* %6, align 8
  %52 = zext i64 %51 to i128
  %53 = load i64, i64* %5, align 8
  %54 = sub i64 %53, 52
  %55 = zext i64 %54 to i128
  %56 = icmp ult i128 %55, 128
  %57 = shl i128 %52, %55
  %58 = select i1 %56, i128 %57, i128 0
  %59 = mul i128 %50, %58
  ret i128 %59

if.done10:                                        ; No predecessors!
  unreachable
}

define internal { i64, i64 } @runtime.os_write({ i64, i64 } %0) {
decls:
  %1 = alloca { i8*, i64 }, align 8
  %2 = alloca { i64, i64 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  %3 = bitcast { i8*, i64 }* %1 to { i64, i64 }*
  store { i64, i64 } %0, { i64, i64 }* %3, align 8
  %4 = load { i8*, i64 }, { i8*, i64 }* %1, align 8
  %5 = load { i8*, i64 }, { i8*, i64 }* %1, align 8
  %6 = bitcast { i8*, i64 }* %1 to { i64, i64 }*
  %7 = load { i64, i64 }, { i64, i64 }* %6, align 8
  %8 = call { i64, i64 } @runtime._os_write({ i64, i64 } %7)
  %9 = extractvalue { i64, i64 } %8, 0
  %10 = extractvalue { i64, i64 } %8, 1
  %11 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %2, i32 0, i32 0
  %12 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %2, i32 0, i32 1
  store i64 %9, i64* %11, align 8
  store i64 %10, i64* %12, align 8
  %13 = load { i64, i64 }, { i64, i64 }* %2, align 8
  ret { i64, i64 } %13
}

define internal { i64, i64 } @runtime._os_write({ i64, i64 } %0) {
decls:
  %1 = alloca { i8*, i64 }, align 8
  %2 = alloca %runtime.Context, align 8
  %3 = alloca %runtime.Context, align 8
  %4 = alloca i64, align 8
  %5 = alloca i32, align 4
  %6 = alloca { i64, i32 }, align 8
  %7 = alloca { i64, i64 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  %8 = bitcast { i8*, i64 }* %1 to { i64, i64 }*
  store { i64, i64 } %0, { i64, i64 }* %8, align 8
  %9 = load { i8*, i64 }, { i8*, i64 }* %1, align 8
  %10 = bitcast %runtime.Context* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* %10, i8 0, i64 96, i1 false)
  call void @runtime.__init_context-431(%runtime.Context* %2)
  %11 = bitcast %runtime.Context* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* %11, i8 0, i64 96, i1 false)
  call void @runtime.default_context(%runtime.Context* sret %3)
  %12 = load %runtime.Context, %runtime.Context* %3, align 8
  %13 = bitcast %runtime.Context* %2 to i8*
  %14 = bitcast %runtime.Context* %3 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %13, i8* align 8 %14, i64 96, i1 false)
  %15 = load i32, i32* @os.stderr, align 4
  %16 = load { i8*, i64 }, { i8*, i64 }* %1, align 8
  %17 = bitcast { i8*, i64 }* %1 to { i64, i64 }*
  %18 = load { i64, i64 }, { i64, i64 }* %17, align 8
  %19 = bitcast %runtime.Context* %2 to i8*
  %20 = call { i64, i64 } @os.write(i32 %15, { i64, i64 } %18, i8* %19)
  %21 = bitcast { i64, i32 }* %6 to { i64, i64 }*
  store { i64, i64 } %20, { i64, i64 }* %21, align 8
  %22 = load { i64, i32 }, { i64, i32 }* %6, align 8
  %23 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %6, i32 0, i32 0
  %24 = load i64, i64* %23, align 8
  %25 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %6, i32 0, i32 1
  %26 = load i32, i32* %25, align 4
  store i64 %24, i64* %4, align 8
  store i32 %26, i32* %5, align 4
  %27 = load i64, i64* %4, align 8
  %28 = load i32, i32* %5, align 4
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i32 0, i32 0
  %31 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i32 0, i32 1
  store i64 %27, i64* %30, align 8
  store i64 %29, i64* %31, align 8
  %32 = load { i64, i64 }, { i64, i64 }* %7, align 8
  ret { i64, i64 } %32
}

define internal { i64, i64 } @runtime.encode_rune(i32 %0) {
decls:
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca [4 x i8], align 1
  %4 = alloca i32, align 4
  %5 = alloca { [4 x i8], i64 }, align 8
  %6 = alloca { [4 x i8], i64 }, align 8
  %7 = alloca { [4 x i8], i64 }, align 8
  %8 = alloca { [4 x i8], i64 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i32 %0, i32* %1, align 4
  %9 = load i32, i32* %1, align 4
  store i32 %9, i32* %2, align 4
  %10 = bitcast [4 x i8]* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* %10, i8 0, i64 4, i1 false)
  %11 = load i32, i32* %2, align 4
  store i32 %11, i32* %4, align 4
  %12 = load i32, i32* %4, align 4
  %13 = icmp ule i32 %12, 127
  %14 = zext i1 %13 to i8
  %15 = trunc i8 %14 to i1
  br i1 %15, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  %16 = getelementptr [4 x i8], [4 x i8]* %3, i64 0, i64 0
  %17 = load i32, i32* %2, align 4
  %18 = trunc i32 %17 to i8
  store i8 %18, i8* %16, align 1
  %19 = load [4 x i8], [4 x i8]* %3, align 1
  %20 = getelementptr inbounds { [4 x i8], i64 }, { [4 x i8], i64 }* %5, i32 0, i32 0
  %21 = getelementptr inbounds { [4 x i8], i64 }, { [4 x i8], i64 }* %5, i32 0, i32 1
  store [4 x i8] %19, [4 x i8]* %20, align 1
  store i64 1, i64* %21, align 8
  %22 = load { [4 x i8], i64 }, { [4 x i8], i64 }* %5, align 8
  %23 = bitcast { [4 x i8], i64 }* %5 to { i64, i64 }*
  %24 = load { i64, i64 }, { i64, i64 }* %23, align 8
  ret { i64, i64 } %24

if.done:                                          ; preds = %entry
  %25 = load i32, i32* %4, align 4
  %26 = icmp ule i32 %25, 2047
  %27 = zext i1 %26 to i8
  %28 = trunc i8 %27 to i1
  br i1 %28, label %if.then1, label %if.done2

if.then1:                                         ; preds = %if.done
  %29 = getelementptr [4 x i8], [4 x i8]* %3, i64 0, i64 0
  %30 = load i32, i32* %2, align 4
  %31 = ashr i32 %30, 6
  %32 = select i1 true, i32 %31, i32 0
  %33 = trunc i32 %32 to i8
  %34 = or i8 -64, %33
  store i8 %34, i8* %29, align 1
  %35 = getelementptr [4 x i8], [4 x i8]* %3, i64 0, i64 1
  %36 = load i32, i32* %2, align 4
  %37 = trunc i32 %36 to i8
  %38 = and i8 %37, 63
  %39 = or i8 -128, %38
  store i8 %39, i8* %35, align 1
  %40 = load [4 x i8], [4 x i8]* %3, align 1
  %41 = getelementptr inbounds { [4 x i8], i64 }, { [4 x i8], i64 }* %6, i32 0, i32 0
  %42 = getelementptr inbounds { [4 x i8], i64 }, { [4 x i8], i64 }* %6, i32 0, i32 1
  store [4 x i8] %40, [4 x i8]* %41, align 1
  store i64 2, i64* %42, align 8
  %43 = load { [4 x i8], i64 }, { [4 x i8], i64 }* %6, align 8
  %44 = bitcast { [4 x i8], i64 }* %6 to { i64, i64 }*
  %45 = load { i64, i64 }, { i64, i64 }* %44, align 8
  ret { i64, i64 } %45

if.done2:                                         ; preds = %if.done
  %46 = load i32, i32* %4, align 4
  %47 = icmp ugt i32 %46, 1114111
  %48 = zext i1 %47 to i8
  %49 = trunc i8 %48 to i1
  br i1 %49, label %if.then3, label %cmp.or

cmp.or:                                           ; preds = %if.done2
  %50 = load i32, i32* %4, align 4
  %51 = icmp ule i32 55296, %50
  %52 = zext i1 %51 to i8
  %53 = trunc i8 %52 to i1
  br i1 %53, label %cmp.and, label %if.done4

cmp.and:                                          ; preds = %cmp.or
  %54 = load i32, i32* %4, align 4
  %55 = icmp ule i32 %54, 57343
  %56 = zext i1 %55 to i8
  %57 = trunc i8 %56 to i1
  br i1 %57, label %if.then3, label %if.done4

if.then3:                                         ; preds = %cmp.and, %if.done2
  store i32 65533, i32* %2, align 4
  br label %if.done4

if.done4:                                         ; preds = %if.then3, %cmp.and, %cmp.or
  %58 = load i32, i32* %4, align 4
  %59 = icmp ule i32 %58, 65535
  %60 = zext i1 %59 to i8
  %61 = trunc i8 %60 to i1
  br i1 %61, label %if.then5, label %if.done6

if.then5:                                         ; preds = %if.done4
  %62 = getelementptr [4 x i8], [4 x i8]* %3, i64 0, i64 0
  %63 = load i32, i32* %2, align 4
  %64 = ashr i32 %63, 12
  %65 = select i1 true, i32 %64, i32 0
  %66 = trunc i32 %65 to i8
  %67 = or i8 -32, %66
  store i8 %67, i8* %62, align 1
  %68 = getelementptr [4 x i8], [4 x i8]* %3, i64 0, i64 1
  %69 = load i32, i32* %2, align 4
  %70 = ashr i32 %69, 6
  %71 = select i1 true, i32 %70, i32 0
  %72 = trunc i32 %71 to i8
  %73 = and i8 %72, 63
  %74 = or i8 -128, %73
  store i8 %74, i8* %68, align 1
  %75 = getelementptr [4 x i8], [4 x i8]* %3, i64 0, i64 2
  %76 = load i32, i32* %2, align 4
  %77 = trunc i32 %76 to i8
  %78 = and i8 %77, 63
  %79 = or i8 -128, %78
  store i8 %79, i8* %75, align 1
  %80 = load [4 x i8], [4 x i8]* %3, align 1
  %81 = getelementptr inbounds { [4 x i8], i64 }, { [4 x i8], i64 }* %7, i32 0, i32 0
  %82 = getelementptr inbounds { [4 x i8], i64 }, { [4 x i8], i64 }* %7, i32 0, i32 1
  store [4 x i8] %80, [4 x i8]* %81, align 1
  store i64 3, i64* %82, align 8
  %83 = load { [4 x i8], i64 }, { [4 x i8], i64 }* %7, align 8
  %84 = bitcast { [4 x i8], i64 }* %7 to { i64, i64 }*
  %85 = load { i64, i64 }, { i64, i64 }* %84, align 8
  ret { i64, i64 } %85

if.done6:                                         ; preds = %if.done4
  %86 = getelementptr [4 x i8], [4 x i8]* %3, i64 0, i64 0
  %87 = load i32, i32* %2, align 4
  %88 = ashr i32 %87, 18
  %89 = select i1 true, i32 %88, i32 0
  %90 = trunc i32 %89 to i8
  %91 = or i8 -16, %90
  store i8 %91, i8* %86, align 1
  %92 = getelementptr [4 x i8], [4 x i8]* %3, i64 0, i64 1
  %93 = load i32, i32* %2, align 4
  %94 = ashr i32 %93, 12
  %95 = select i1 true, i32 %94, i32 0
  %96 = trunc i32 %95 to i8
  %97 = and i8 %96, 63
  %98 = or i8 -128, %97
  store i8 %98, i8* %92, align 1
  %99 = getelementptr [4 x i8], [4 x i8]* %3, i64 0, i64 2
  %100 = load i32, i32* %2, align 4
  %101 = ashr i32 %100, 6
  %102 = select i1 true, i32 %101, i32 0
  %103 = trunc i32 %102 to i8
  %104 = and i8 %103, 63
  %105 = or i8 -128, %104
  store i8 %105, i8* %99, align 1
  %106 = getelementptr [4 x i8], [4 x i8]* %3, i64 0, i64 3
  %107 = load i32, i32* %2, align 4
  %108 = trunc i32 %107 to i8
  %109 = and i8 %108, 63
  %110 = or i8 -128, %109
  store i8 %110, i8* %106, align 1
  %111 = load [4 x i8], [4 x i8]* %3, align 1
  %112 = getelementptr inbounds { [4 x i8], i64 }, { [4 x i8], i64 }* %8, i32 0, i32 0
  %113 = getelementptr inbounds { [4 x i8], i64 }, { [4 x i8], i64 }* %8, i32 0, i32 1
  store [4 x i8] %111, [4 x i8]* %112, align 1
  store i64 4, i64* %113, align 8
  %114 = load { [4 x i8], i64 }, { [4 x i8], i64 }* %8, align 8
  %115 = bitcast { [4 x i8], i64 }* %8 to { i64, i64 }*
  %116 = load { i64, i64 }, { i64, i64 }* %115, align 8
  ret { i64, i64 } %116
}

define internal { i64, i64 } @runtime.print_string({ i64, i64 } %0) {
decls:
  %1 = alloca %..string, align 8
  %2 = alloca { i64, i64 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  %3 = bitcast %..string* %1 to { i64, i64 }*
  store { i64, i64 } %0, { i64, i64 }* %3, align 8
  %4 = load %..string, %..string* %1, align 8
  %5 = load %..string, %..string* %1, align 8
  %6 = bitcast %..string* %1 to { i8*, i64 }*
  %7 = load { i8*, i64 }, { i8*, i64 }* %6, align 8
  %8 = bitcast { i8*, i64 }* %6 to { i64, i64 }*
  %9 = load { i64, i64 }, { i64, i64 }* %8, align 8
  %10 = call { i64, i64 } @runtime.os_write({ i64, i64 } %9)
  %11 = extractvalue { i64, i64 } %10, 0
  %12 = extractvalue { i64, i64 } %10, 1
  %13 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %2, i32 0, i32 0
  %14 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %2, i32 0, i32 1
  store i64 %11, i64* %13, align 8
  store i64 %12, i64* %14, align 8
  %15 = load { i64, i64 }, { i64, i64 }* %2, align 8
  ret { i64, i64 } %15
}

define internal { i64, i64 } @runtime.print_byte(i8 %0) {
decls:
  %1 = alloca i8, align 1
  %2 = alloca { i8*, i64 }, align 8
  %3 = alloca [1 x i8], align 16
  %4 = alloca { i8*, i64 }, align 8
  %5 = alloca { i64, i64 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i8 %0, i8* %1, align 1
  %6 = bitcast { i8*, i64 }* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* %6, i8 0, i64 16, i1 false)
  store [1 x i8] zeroinitializer, [1 x i8]* %3, align 1
  %7 = getelementptr inbounds [1 x i8], [1 x i8]* %3, i64 0, i64 0
  %8 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %4, i32 0, i32 0
  store i8* %7, i8** %8, align 8
  %9 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %4, i32 0, i32 1
  store i64 1, i64* %9, align 8
  %10 = load { i8*, i64 }, { i8*, i64 }* %4, align 8
  %11 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %4, i32 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = load i8, i8* %1, align 1
  %14 = getelementptr i8, i8* %12, i64 0
  store i8 %13, i8* %14, align 1
  %15 = extractvalue { i8*, i64 } %10, 1
  %16 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %2, i32 0, i32 0
  store i8* %12, i8** %16, align 8
  %17 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %2, i32 0, i32 1
  store i64 %15, i64* %17, align 8
  %18 = load { i8*, i64 }, { i8*, i64 }* %2, align 8
  %19 = bitcast { i8*, i64 }* %2 to { i64, i64 }*
  %20 = load { i64, i64 }, { i64, i64 }* %19, align 8
  %21 = call { i64, i64 } @runtime.os_write({ i64, i64 } %20)
  %22 = extractvalue { i64, i64 } %21, 0
  %23 = extractvalue { i64, i64 } %21, 1
  %24 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %5, i32 0, i32 0
  %25 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %5, i32 0, i32 1
  store i64 %22, i64* %24, align 8
  store i64 %23, i64* %25, align 8
  %26 = load { i64, i64 }, { i64, i64 }* %5, align 8
  ret { i64, i64 } %26
}

define internal void @runtime.print_encoded_rune(i32 %0) {
decls:
  %1 = alloca i32, align 4
  %2 = alloca { i64, i64 }, align 8
  %3 = alloca { i64, i64 }, align 8
  %4 = alloca { i64, i64 }, align 8
  %5 = alloca { i64, i64 }, align 8
  %6 = alloca { i64, i64 }, align 8
  %7 = alloca { i64, i64 }, align 8
  %8 = alloca { i64, i64 }, align 8
  %9 = alloca { i64, i64 }, align 8
  %10 = alloca { i64, i64 }, align 8
  %11 = alloca %..string, align 8
  %12 = alloca i8, align 1
  %13 = alloca i8, align 1
  %14 = alloca { i64, i64 }, align 8
  %15 = alloca { i64, i64 }, align 8
  %16 = alloca { i64, i64 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i32 %0, i32* %1, align 4
  %17 = call { i64, i64 } @runtime.print_byte(i8 39)
  %18 = load i32, i32* %1, align 4
  switch i32 %18, label %switch.default.body [
    i32 7, label %switch.case.body
    i32 8, label %switch.case.body1
    i32 27, label %switch.case.body2
    i32 12, label %switch.case.body3
    i32 10, label %switch.case.body4
    i32 13, label %switch.case.body5
    i32 9, label %switch.case.body6
    i32 11, label %switch.case.body7
  ]

switch.case.body:                                 ; preds = %entry
  %19 = bitcast { i64, i64 }* %2 to %..string*
  store %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$2bc", i64 0, i64 0), i64 2 }, %..string* %19, align 8
  %20 = load { i64, i64 }, { i64, i64 }* %2, align 8
  %21 = call { i64, i64 } @runtime.print_string({ i64, i64 } %20)
  br label %switch.done

switch.case.body1:                                ; preds = %entry
  %22 = bitcast { i64, i64 }* %3 to %..string*
  store %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$2bd", i64 0, i64 0), i64 2 }, %..string* %22, align 8
  %23 = load { i64, i64 }, { i64, i64 }* %3, align 8
  %24 = call { i64, i64 } @runtime.print_string({ i64, i64 } %23)
  br label %switch.done

switch.case.body2:                                ; preds = %entry
  %25 = bitcast { i64, i64 }* %4 to %..string*
  store %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$2be", i64 0, i64 0), i64 2 }, %..string* %25, align 8
  %26 = load { i64, i64 }, { i64, i64 }* %4, align 8
  %27 = call { i64, i64 } @runtime.print_string({ i64, i64 } %26)
  br label %switch.done

switch.case.body3:                                ; preds = %entry
  %28 = bitcast { i64, i64 }* %5 to %..string*
  store %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$2bf", i64 0, i64 0), i64 2 }, %..string* %28, align 8
  %29 = load { i64, i64 }, { i64, i64 }* %5, align 8
  %30 = call { i64, i64 } @runtime.print_string({ i64, i64 } %29)
  br label %switch.done

switch.case.body4:                                ; preds = %entry
  %31 = bitcast { i64, i64 }* %6 to %..string*
  store %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$2c0", i64 0, i64 0), i64 2 }, %..string* %31, align 8
  %32 = load { i64, i64 }, { i64, i64 }* %6, align 8
  %33 = call { i64, i64 } @runtime.print_string({ i64, i64 } %32)
  br label %switch.done

switch.case.body5:                                ; preds = %entry
  %34 = bitcast { i64, i64 }* %7 to %..string*
  store %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$2c1", i64 0, i64 0), i64 2 }, %..string* %34, align 8
  %35 = load { i64, i64 }, { i64, i64 }* %7, align 8
  %36 = call { i64, i64 } @runtime.print_string({ i64, i64 } %35)
  br label %switch.done

switch.case.body6:                                ; preds = %entry
  %37 = bitcast { i64, i64 }* %8 to %..string*
  store %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$2c2", i64 0, i64 0), i64 2 }, %..string* %37, align 8
  %38 = load { i64, i64 }, { i64, i64 }* %8, align 8
  %39 = call { i64, i64 } @runtime.print_string({ i64, i64 } %38)
  br label %switch.done

switch.case.body7:                                ; preds = %entry
  %40 = bitcast { i64, i64 }* %9 to %..string*
  store %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$2c3", i64 0, i64 0), i64 2 }, %..string* %40, align 8
  %41 = load { i64, i64 }, { i64, i64 }* %9, align 8
  %42 = call { i64, i64 } @runtime.print_string({ i64, i64 } %41)
  br label %switch.done

switch.default.body:                              ; preds = %entry
  %43 = load i32, i32* %1, align 4
  %44 = icmp sle i32 %43, 0
  %45 = zext i1 %44 to i8
  %46 = trunc i8 %45 to i1
  br i1 %46, label %if.then, label %if.else

if.then:                                          ; preds = %switch.default.body
  %47 = bitcast { i64, i64 }* %10 to %..string*
  store %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$2c4", i64 0, i64 0), i64 4 }, %..string* %47, align 8
  %48 = load { i64, i64 }, { i64, i64 }* %10, align 8
  %49 = call { i64, i64 } @runtime.print_string({ i64, i64 } %48)
  br label %if.done10

if.else:                                          ; preds = %switch.default.body
  %50 = load i32, i32* %1, align 4
  %51 = icmp slt i32 %50, 32
  %52 = zext i1 %51 to i8
  %53 = trunc i8 %52 to i1
  br i1 %53, label %if.then8, label %if.else9

if.then8:                                         ; preds = %if.else
  store %..string { i8* getelementptr inbounds ([37 x i8], [37 x i8]* @"csbs$b", i64 0, i64 0), i64 36 }, %..string* %11, align 8
  %54 = load i32, i32* %1, align 4
  %55 = trunc i32 %54 to i8
  %56 = lshr i8 %55, 4
  %57 = select i1 true, i8 %56, i8 0
  %58 = load i32, i32* %1, align 4
  %59 = trunc i32 %58 to i8
  %60 = and i8 %59, 15
  store i8 %57, i8* %12, align 1
  store i8 %60, i8* %13, align 1
  %61 = bitcast { i64, i64 }* %14 to %..string*
  store %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$2c5", i64 0, i64 0), i64 2 }, %..string* %61, align 8
  %62 = load { i64, i64 }, { i64, i64 }* %14, align 8
  %63 = call { i64, i64 } @runtime.print_string({ i64, i64 } %62)
  %64 = load %..string, %..string* %11, align 8
  %65 = getelementptr inbounds %..string, %..string* %11, i32 0, i32 0
  %66 = load i8*, i8** %65, align 8
  %67 = getelementptr inbounds %..string, %..string* %11, i32 0, i32 1
  %68 = load i64, i64* %67, align 8
  %69 = load i8, i8* %12, align 1
  %70 = zext i8 %69 to i64
  %71 = bitcast { i64, i64 }* %15 to %..string*
  store %..string { i8* getelementptr inbounds ([57 x i8], [57 x i8]* @"csbs$2c6", i64 0, i64 0), i64 56 }, %..string* %71, align 8
  %72 = load { i64, i64 }, { i64, i64 }* %15, align 8
  call void @runtime.bounds_check_error({ i64, i64 } %72, i32 80, i32 22, i64 %70, i64 %68)
  %73 = getelementptr i8, i8* %66, i64 %70
  %74 = load i8, i8* %73, align 1
  %75 = call { i64, i64 } @runtime.print_byte(i8 %74)
  %76 = load %..string, %..string* %11, align 8
  %77 = getelementptr inbounds %..string, %..string* %11, i32 0, i32 0
  %78 = load i8*, i8** %77, align 8
  %79 = getelementptr inbounds %..string, %..string* %11, i32 0, i32 1
  %80 = load i64, i64* %79, align 8
  %81 = load i8, i8* %13, align 1
  %82 = zext i8 %81 to i64
  %83 = bitcast { i64, i64 }* %16 to %..string*
  store %..string { i8* getelementptr inbounds ([57 x i8], [57 x i8]* @"csbs$2c6", i64 0, i64 0), i64 56 }, %..string* %83, align 8
  %84 = load { i64, i64 }, { i64, i64 }* %16, align 8
  call void @runtime.bounds_check_error({ i64, i64 } %84, i32 81, i32 22, i64 %82, i64 %80)
  %85 = getelementptr i8, i8* %78, i64 %82
  %86 = load i8, i8* %85, align 1
  %87 = call { i64, i64 } @runtime.print_byte(i8 %86)
  br label %if.done

if.else9:                                         ; preds = %if.else
  %88 = load i32, i32* %1, align 4
  %89 = call { i64, i64 } @runtime.print_rune(i32 %88)
  br label %if.done

if.done:                                          ; preds = %if.else9, %if.then8
  br label %if.done10

if.done10:                                        ; preds = %if.done, %if.then
  br label %switch.done

switch.done:                                      ; preds = %if.done10, %switch.case.body7, %switch.case.body6, %switch.case.body5, %switch.case.body4, %switch.case.body3, %switch.case.body2, %switch.case.body1, %switch.case.body
  %90 = call { i64, i64 } @runtime.print_byte(i8 39)
  ret void
}

define internal { i64, i64 } @runtime.print_rune(i32 %0) {
decls:
  %1 = alloca i32, align 4
  %2 = alloca { i64, i64 }, align 8
  %3 = alloca [4 x i8], align 1
  %4 = alloca i64, align 8
  %5 = alloca { [4 x i8], i64 }, align 8
  %6 = alloca { i8*, i64 }, align 8
  %7 = alloca { i64, i64 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i32 %0, i32* %1, align 4
  %8 = load i32, i32* %1, align 4
  %9 = icmp slt i32 %8, 128
  %10 = zext i1 %9 to i8
  %11 = trunc i8 %10 to i1
  br i1 %11, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  %12 = load i32, i32* %1, align 4
  %13 = trunc i32 %12 to i8
  %14 = call { i64, i64 } @runtime.print_byte(i8 %13)
  %15 = extractvalue { i64, i64 } %14, 0
  %16 = extractvalue { i64, i64 } %14, 1
  %17 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %2, i32 0, i32 0
  %18 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %2, i32 0, i32 1
  store i64 %15, i64* %17, align 8
  store i64 %16, i64* %18, align 8
  %19 = load { i64, i64 }, { i64, i64 }* %2, align 8
  ret { i64, i64 } %19

if.done:                                          ; preds = %entry
  %20 = load i32, i32* %1, align 4
  %21 = call { i64, i64 } @runtime.encode_rune(i32 %20)
  %22 = bitcast { [4 x i8], i64 }* %5 to { i64, i64 }*
  store { i64, i64 } %21, { i64, i64 }* %22, align 8
  %23 = load { [4 x i8], i64 }, { [4 x i8], i64 }* %5, align 8
  %24 = getelementptr inbounds { [4 x i8], i64 }, { [4 x i8], i64 }* %5, i32 0, i32 0
  %25 = load [4 x i8], [4 x i8]* %24, align 1
  %26 = getelementptr inbounds { [4 x i8], i64 }, { [4 x i8], i64 }* %5, i32 0, i32 1
  %27 = load i64, i64* %26, align 8
  store [4 x i8] %25, [4 x i8]* %3, align 1
  store i64 %27, i64* %4, align 8
  %28 = load i64, i64* %4, align 8
  %29 = load [4 x i8], [4 x i8]* %3, align 1
  %30 = getelementptr [4 x i8], [4 x i8]* %3, i64 0, i64 0
  %31 = getelementptr i8, i8* %30, i64 0
  %32 = sub i64 %28, 0
  %33 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %6, i32 0, i32 0
  store i8* %31, i8** %33, align 8
  %34 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %6, i32 0, i32 1
  store i64 %32, i64* %34, align 8
  %35 = load { i8*, i64 }, { i8*, i64 }* %6, align 8
  %36 = bitcast { i8*, i64 }* %6 to { i64, i64 }*
  %37 = load { i64, i64 }, { i64, i64 }* %36, align 8
  %38 = call { i64, i64 } @runtime.os_write({ i64, i64 } %37)
  %39 = extractvalue { i64, i64 } %38, 0
  %40 = extractvalue { i64, i64 } %38, 1
  %41 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i32 0, i32 0
  %42 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i32 0, i32 1
  store i64 %39, i64* %41, align 8
  store i64 %40, i64* %42, align 8
  %43 = load { i64, i64 }, { i64, i64 }* %7, align 8
  ret { i64, i64 } %43
}

define internal void @runtime.print_u64(i64 %0) {
decls:
  %1 = alloca i64, align 8
  %2 = alloca %..string, align 8
  %3 = alloca [129 x i8], align 1
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca { i8*, i64 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i64 %0, i64* %1, align 8
  store %..string { i8* getelementptr inbounds ([37 x i8], [37 x i8]* @"csbs$b", i64 0, i64 0), i64 36 }, %..string* %2, align 8
  %8 = bitcast [129 x i8]* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* %8, i8 0, i64 129, i1 false)
  store i64 129, i64* %4, align 8
  store i64 10, i64* %5, align 8
  %9 = load i64, i64* %1, align 8
  store i64 %9, i64* %6, align 8
  br label %for.loop

for.loop:                                         ; preds = %for.body, %entry
  %10 = load i64, i64* %6, align 8
  %11 = load i64, i64* %5, align 8
  %12 = icmp uge i64 %10, %11
  %13 = zext i1 %12 to i8
  %14 = trunc i8 %13 to i1
  br i1 %14, label %for.body, label %for.done

for.body:                                         ; preds = %for.loop
  %15 = load i64, i64* %4, align 8
  %16 = sub i64 %15, 1
  store i64 %16, i64* %4, align 8
  %17 = load i64, i64* %4, align 8
  %18 = getelementptr [129 x i8], [129 x i8]* %3, i64 0, i64 %17
  %19 = load %..string, %..string* %2, align 8
  %20 = getelementptr inbounds %..string, %..string* %2, i32 0, i32 0
  %21 = load i8*, i8** %20, align 8
  %22 = getelementptr inbounds %..string, %..string* %2, i32 0, i32 1
  %23 = load i64, i64* %22, align 8
  %24 = load i64, i64* %6, align 8
  %25 = load i64, i64* %5, align 8
  %26 = urem i64 %24, %25
  %27 = getelementptr i8, i8* %21, i64 %26
  %28 = load i8, i8* %27, align 1
  store i8 %28, i8* %18, align 1
  %29 = load i64, i64* %5, align 8
  %30 = load i64, i64* %6, align 8
  %31 = udiv i64 %30, %29
  store i64 %31, i64* %6, align 8
  br label %for.loop

for.done:                                         ; preds = %for.loop
  %32 = load i64, i64* %4, align 8
  %33 = sub i64 %32, 1
  store i64 %33, i64* %4, align 8
  %34 = load i64, i64* %4, align 8
  %35 = getelementptr [129 x i8], [129 x i8]* %3, i64 0, i64 %34
  %36 = load %..string, %..string* %2, align 8
  %37 = getelementptr inbounds %..string, %..string* %2, i32 0, i32 0
  %38 = load i8*, i8** %37, align 8
  %39 = getelementptr inbounds %..string, %..string* %2, i32 0, i32 1
  %40 = load i64, i64* %39, align 8
  %41 = load i64, i64* %6, align 8
  %42 = load i64, i64* %5, align 8
  %43 = urem i64 %41, %42
  %44 = getelementptr i8, i8* %38, i64 %43
  %45 = load i8, i8* %44, align 1
  store i8 %45, i8* %35, align 1
  %46 = load i64, i64* %4, align 8
  %47 = load [129 x i8], [129 x i8]* %3, align 1
  %48 = getelementptr [129 x i8], [129 x i8]* %3, i64 0, i64 0
  %49 = getelementptr i8, i8* %48, i64 %46
  %50 = sub i64 129, %46
  %51 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %7, i32 0, i32 0
  store i8* %49, i8** %51, align 8
  %52 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %7, i32 0, i32 1
  store i64 %50, i64* %52, align 8
  %53 = load { i8*, i64 }, { i8*, i64 }* %7, align 8
  %54 = bitcast { i8*, i64 }* %7 to { i64, i64 }*
  %55 = load { i64, i64 }, { i64, i64 }* %54, align 8
  %56 = call { i64, i64 } @runtime.os_write({ i64, i64 } %55)
  ret void
}

define internal void @runtime.print_i64(i64 %0) {
decls:
  %1 = alloca i64, align 8
  %2 = alloca %..string, align 8
  %3 = alloca i64, align 8
  %4 = alloca i8, align 1
  %5 = alloca [129 x i8], align 1
  %6 = alloca i64, align 8
  %7 = alloca { i8*, i64 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i64 %0, i64* %1, align 8
  store %..string { i8* getelementptr inbounds ([37 x i8], [37 x i8]* @"csbs$b", i64 0, i64 0), i64 36 }, %..string* %2, align 8
  %8 = load i64, i64* %1, align 8
  store i64 %8, i64* %3, align 8
  %9 = load i64, i64* %3, align 8
  %10 = icmp slt i64 %9, 0
  %11 = zext i1 %10 to i8
  store i8 %11, i8* %4, align 1
  %12 = load i64, i64* %3, align 8
  %13 = icmp slt i64 %12, 0
  %14 = sub i64 0, %12
  %15 = select i1 %13, i64 %14, i64 %12
  store i64 %15, i64* %3, align 8
  %16 = bitcast [129 x i8]* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* %16, i8 0, i64 129, i1 false)
  store i64 129, i64* %6, align 8
  br label %for.loop

for.loop:                                         ; preds = %for.body, %entry
  %17 = load i64, i64* %3, align 8
  %18 = icmp sge i64 %17, 10
  %19 = zext i1 %18 to i8
  %20 = trunc i8 %19 to i1
  br i1 %20, label %for.body, label %for.done

for.body:                                         ; preds = %for.loop
  %21 = load i64, i64* %6, align 8
  %22 = sub i64 %21, 1
  store i64 %22, i64* %6, align 8
  %23 = load i64, i64* %6, align 8
  %24 = getelementptr [129 x i8], [129 x i8]* %5, i64 0, i64 %23
  %25 = load %..string, %..string* %2, align 8
  %26 = getelementptr inbounds %..string, %..string* %2, i32 0, i32 0
  %27 = load i8*, i8** %26, align 8
  %28 = getelementptr inbounds %..string, %..string* %2, i32 0, i32 1
  %29 = load i64, i64* %28, align 8
  %30 = load i64, i64* %3, align 8
  %31 = srem i64 %30, 10
  %32 = getelementptr i8, i8* %27, i64 %31
  %33 = load i8, i8* %32, align 1
  store i8 %33, i8* %24, align 1
  %34 = load i64, i64* %3, align 8
  %35 = sdiv i64 %34, 10
  store i64 %35, i64* %3, align 8
  br label %for.loop

for.done:                                         ; preds = %for.loop
  %36 = load i64, i64* %6, align 8
  %37 = sub i64 %36, 1
  store i64 %37, i64* %6, align 8
  %38 = load i64, i64* %6, align 8
  %39 = getelementptr [129 x i8], [129 x i8]* %5, i64 0, i64 %38
  %40 = load %..string, %..string* %2, align 8
  %41 = getelementptr inbounds %..string, %..string* %2, i32 0, i32 0
  %42 = load i8*, i8** %41, align 8
  %43 = getelementptr inbounds %..string, %..string* %2, i32 0, i32 1
  %44 = load i64, i64* %43, align 8
  %45 = load i64, i64* %3, align 8
  %46 = srem i64 %45, 10
  %47 = getelementptr i8, i8* %42, i64 %46
  %48 = load i8, i8* %47, align 1
  store i8 %48, i8* %39, align 1
  %49 = load i8, i8* %4, align 1
  %50 = trunc i8 %49 to i1
  br i1 %50, label %if.then, label %if.done

if.then:                                          ; preds = %for.done
  %51 = load i64, i64* %6, align 8
  %52 = sub i64 %51, 1
  store i64 %52, i64* %6, align 8
  %53 = load i64, i64* %6, align 8
  %54 = getelementptr [129 x i8], [129 x i8]* %5, i64 0, i64 %53
  store i8 45, i8* %54, align 1
  br label %if.done

if.done:                                          ; preds = %if.then, %for.done
  %55 = load i64, i64* %6, align 8
  %56 = load [129 x i8], [129 x i8]* %5, align 1
  %57 = getelementptr [129 x i8], [129 x i8]* %5, i64 0, i64 0
  %58 = getelementptr i8, i8* %57, i64 %55
  %59 = sub i64 129, %55
  %60 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %7, i32 0, i32 0
  store i8* %58, i8** %60, align 8
  %61 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %7, i32 0, i32 1
  store i64 %59, i64* %61, align 8
  %62 = load { i8*, i64 }, { i8*, i64 }* %7, align 8
  %63 = bitcast { i8*, i64 }* %7 to { i64, i64 }*
  %64 = load { i64, i64 }, { i64, i64 }* %63, align 8
  %65 = call { i64, i64 } @runtime.os_write({ i64, i64 } %64)
  ret void
}

define internal void @runtime.print_caller_location(%runtime.Source_Code_Location* %0) {
decls:
  br label %entry

entry:                                            ; preds = %decls
  %1 = getelementptr inbounds %runtime.Source_Code_Location, %runtime.Source_Code_Location* %0, i32 0, i32 0
  %2 = load %..string, %..string* %1, align 8
  %3 = bitcast %..string* %1 to { i64, i64 }*
  %4 = load { i64, i64 }, { i64, i64 }* %3, align 8
  %5 = call { i64, i64 } @runtime.print_string({ i64, i64 } %4)
  %6 = call { i64, i64 } @runtime.print_byte(i8 40)
  %7 = getelementptr inbounds %runtime.Source_Code_Location, %runtime.Source_Code_Location* %0, i32 0, i32 1
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  call void @runtime.print_u64(i64 %9)
  %10 = call { i64, i64 } @runtime.print_byte(i8 58)
  %11 = getelementptr inbounds %runtime.Source_Code_Location, %runtime.Source_Code_Location* %0, i32 0, i32 2
  %12 = load i32, i32* %11, align 4
  %13 = sext i32 %12 to i64
  call void @runtime.print_u64(i64 %13)
  %14 = call { i64, i64 } @runtime.print_byte(i8 41)
  ret void
}

define internal void @runtime.print_typeid(i64 %0) {
decls:
  %1 = alloca i64, align 8
  %2 = alloca { i64, i64 }, align 8
  %3 = alloca %runtime.Type_Info*, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i64 %0, i64* %1, align 8
  %4 = load i64, i64* %1, align 8
  %5 = icmp eq i64 %4, 0
  %6 = zext i1 %5 to i8
  %7 = trunc i8 %6 to i1
  br i1 %7, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %8 = bitcast { i64, i64 }* %2 to %..string*
  store %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$2c7", i64 0, i64 0), i64 3 }, %..string* %8, align 8
  %9 = load { i64, i64 }, { i64, i64 }* %2, align 8
  %10 = call { i64, i64 } @runtime.print_string({ i64, i64 } %9)
  br label %if.done

if.else:                                          ; preds = %entry
  %11 = load i64, i64* %1, align 8
  %12 = call %runtime.Type_Info* @runtime.__type_info_of(i64 %11)
  store %runtime.Type_Info* %12, %runtime.Type_Info** %3, align 8
  %13 = load %runtime.Type_Info*, %runtime.Type_Info** %3, align 8
  call void @runtime.print_type(%runtime.Type_Info* %13)
  br label %if.done

if.done:                                          ; preds = %if.else, %if.then
  ret void
}

define internal void @runtime.print_type(%runtime.Type_Info* %0) {
decls:
  %1 = alloca %runtime.Type_Info*, align 8
  %2 = alloca { i64, i64 }, align 8
  %3 = alloca %runtime.Type_Info_Named, align 8
  %4 = alloca %runtime.Type_Info_Integer, align 1
  %5 = alloca { i64, i64 }, align 8
  %6 = alloca { i64, i64 }, align 8
  %7 = alloca { i64, i64 }, align 8
  %8 = alloca %runtime.Type_Info_Rune, align 1
  %9 = alloca { i64, i64 }, align 8
  %10 = alloca %runtime.Type_Info_Float, align 1
  %11 = alloca %runtime.Type_Info_Complex, align 1
  %12 = alloca { i64, i64 }, align 8
  %13 = alloca %runtime.Type_Info_Quaternion, align 1
  %14 = alloca { i64, i64 }, align 8
  %15 = alloca %runtime.Type_Info_String, align 1
  %16 = alloca { i64, i64 }, align 8
  %17 = alloca %runtime.Type_Info_Boolean, align 1
  %18 = alloca { i64, i64 }, align 8
  %19 = alloca %runtime.Type_Info_Any, align 1
  %20 = alloca { i64, i64 }, align 8
  %21 = alloca %runtime.Type_Info_Type_Id, align 1
  %22 = alloca { i64, i64 }, align 8
  %23 = alloca %runtime.Type_Info_Pointer, align 8
  %24 = alloca { i64, i64 }, align 8
  %25 = alloca { i64, i64 }, align 8
  %26 = alloca %runtime.Type_Info_Multi_Pointer, align 8
  %27 = alloca { i64, i64 }, align 8
  %28 = alloca %runtime.Type_Info_Soa_Pointer, align 8
  %29 = alloca { i64, i64 }, align 8
  %30 = alloca %runtime.Type_Info_Procedure, align 8
  %31 = alloca { i64, i64 }, align 8
  %32 = alloca { i64, i64 }, align 8
  %33 = alloca %runtime.Type_Info_Tuple, align 8
  %34 = alloca { %runtime.Type_Info_Tuple, i8 }, align 8
  %35 = alloca { i64, i64 }, align 8
  %36 = alloca %runtime.Type_Info*, align 8
  %37 = alloca i64, align 8
  %38 = alloca i64, align 8
  %39 = alloca i64, align 8
  %40 = alloca %runtime.Type_Info*, align 8
  %41 = alloca i64, align 8
  %42 = alloca { i64, i64 }, align 8
  %43 = alloca { i64, i64 }, align 8
  %44 = alloca { i64, i64 }, align 8
  %45 = alloca %runtime.Type_Info_Tuple, align 8
  %46 = alloca i64, align 8
  %47 = alloca %..string, align 8
  %48 = alloca i64, align 8
  %49 = alloca i64, align 8
  %50 = alloca i64, align 8
  %51 = alloca %..string, align 8
  %52 = alloca i64, align 8
  %53 = alloca { i64, i64 }, align 8
  %54 = alloca %runtime.Type_Info*, align 8
  %55 = alloca { i64, i64 }, align 8
  %56 = alloca { i64, i64 }, align 8
  %57 = alloca { i64, i64 }, align 8
  %58 = alloca %runtime.Type_Info_Array, align 8
  %59 = alloca %runtime.Type_Info_Enumerated_Array, align 8
  %60 = alloca { i64, i64 }, align 8
  %61 = alloca %runtime.Type_Info_Dynamic_Array, align 8
  %62 = alloca { i64, i64 }, align 8
  %63 = alloca %runtime.Type_Info_Slice, align 8
  %64 = alloca { i64, i64 }, align 8
  %65 = alloca %runtime.Type_Info_Map, align 8
  %66 = alloca { i64, i64 }, align 8
  %67 = alloca %runtime.Type_Info_Struct, align 8
  %68 = alloca { i64, i64 }, align 8
  %69 = alloca { i64, i64 }, align 8
  %70 = alloca { i64, i64 }, align 8
  %71 = alloca { i64, i64 }, align 8
  %72 = alloca { i64, i64 }, align 8
  %73 = alloca { i64, i64 }, align 8
  %74 = alloca { i64, i64 }, align 8
  %75 = alloca %..string, align 8
  %76 = alloca i64, align 8
  %77 = alloca i64, align 8
  %78 = alloca i64, align 8
  %79 = alloca %..string, align 8
  %80 = alloca i64, align 8
  %81 = alloca { i64, i64 }, align 8
  %82 = alloca { i64, i64 }, align 8
  %83 = alloca { i64, i64 }, align 8
  %84 = alloca %runtime.Type_Info_Union, align 8
  %85 = alloca { i64, i64 }, align 8
  %86 = alloca { i64, i64 }, align 8
  %87 = alloca { i64, i64 }, align 8
  %88 = alloca %runtime.Type_Info*, align 8
  %89 = alloca i64, align 8
  %90 = alloca i64, align 8
  %91 = alloca i64, align 8
  %92 = alloca %runtime.Type_Info*, align 8
  %93 = alloca i64, align 8
  %94 = alloca { i64, i64 }, align 8
  %95 = alloca { i64, i64 }, align 8
  %96 = alloca %runtime.Type_Info_Enum, align 8
  %97 = alloca { i64, i64 }, align 8
  %98 = alloca { i64, i64 }, align 8
  %99 = alloca %..string, align 8
  %100 = alloca i64, align 8
  %101 = alloca i64, align 8
  %102 = alloca i64, align 8
  %103 = alloca %..string, align 8
  %104 = alloca i64, align 8
  %105 = alloca { i64, i64 }, align 8
  %106 = alloca { i64, i64 }, align 8
  %107 = alloca %runtime.Type_Info_Bit_Set, align 8
  %108 = alloca { i64, i64 }, align 8
  %109 = alloca %runtime.Type_Info*, align 8
  %110 = alloca %runtime.Type_Info_Enum, align 8
  %111 = alloca %runtime.Type_Info_Rune, align 1
  %112 = alloca { i64, i64 }, align 8
  %113 = alloca { [15 x i64], i64 }, align 8
  %114 = alloca { i64, i64 }, align 8
  %115 = alloca { i64, i64 }, align 8
  %116 = alloca %runtime.Type_Info_Simd_Vector, align 8
  %117 = alloca { i64, i64 }, align 8
  %118 = alloca %runtime.Type_Info_Relative_Pointer, align 8
  %119 = alloca { i64, i64 }, align 8
  %120 = alloca { i64, i64 }, align 8
  %121 = alloca %runtime.Type_Info_Relative_Slice, align 8
  %122 = alloca { i64, i64 }, align 8
  %123 = alloca { i64, i64 }, align 8
  %124 = alloca %runtime.Type_Info_Matrix, align 8
  %125 = alloca { i64, i64 }, align 8
  %126 = alloca { i64, i64 }, align 8
  %127 = alloca { i64, i64 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %runtime.Type_Info* %0, %runtime.Type_Info** %1, align 8
  %128 = load %runtime.Type_Info*, %runtime.Type_Info** %1, align 8
  %129 = icmp eq %runtime.Type_Info* %128, null
  %130 = zext i1 %129 to i8
  %131 = trunc i8 %130 to i1
  br i1 %131, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  %132 = bitcast { i64, i64 }* %2 to %..string*
  store %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$2c7", i64 0, i64 0), i64 3 }, %..string* %132, align 8
  %133 = load { i64, i64 }, { i64, i64 }* %2, align 8
  %134 = call { i64, i64 } @runtime.print_string({ i64, i64 } %133)
  ret void

if.done:                                          ; preds = %entry
  %135 = load %runtime.Type_Info*, %runtime.Type_Info** %1, align 8
  %136 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %135, i32 0, i32 5
  %137 = load { [15 x i64], i64 }, { [15 x i64], i64 }* %136, align 8
  %138 = bitcast { [15 x i64], i64 }* %136 to i8*
  %139 = getelementptr inbounds { [15 x i64], i64 }, { [15 x i64], i64 }* %136, i32 0, i32 1
  %140 = load i64, i64* %139, align 8
  switch i64 %140, label %typeswitch.done92 [
    i64 1, label %typeswitch.body
    i64 2, label %typeswitch.body1
    i64 3, label %typeswitch.body6
    i64 4, label %typeswitch.body7
    i64 5, label %typeswitch.body8
    i64 6, label %typeswitch.body9
    i64 7, label %typeswitch.body10
    i64 8, label %typeswitch.body11
    i64 9, label %typeswitch.body15
    i64 10, label %typeswitch.body16
    i64 11, label %typeswitch.body17
    i64 12, label %typeswitch.body21
    i64 28, label %typeswitch.body22
    i64 13, label %typeswitch.body23
    i64 18, label %typeswitch.body31
    i64 14, label %typeswitch.body43
    i64 15, label %typeswitch.body44
    i64 16, label %typeswitch.body47
    i64 17, label %typeswitch.body48
    i64 22, label %typeswitch.body49
    i64 19, label %typeswitch.body50
    i64 20, label %typeswitch.body67
    i64 21, label %typeswitch.body77
    i64 23, label %typeswitch.body83
    i64 24, label %typeswitch.body88
    i64 25, label %typeswitch.body89
    i64 26, label %typeswitch.body90
    i64 27, label %typeswitch.body91
  ]

typeswitch.body:                                  ; preds = %if.done
  %141 = bitcast i8* %138 to %runtime.Type_Info_Named*
  %142 = load %runtime.Type_Info_Named, %runtime.Type_Info_Named* %141, align 8
  %143 = bitcast %runtime.Type_Info_Named* %3 to i8*
  %144 = bitcast %runtime.Type_Info_Named* %141 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %143, i8* align 1 %144, i64 80, i1 false)
  %145 = getelementptr inbounds %runtime.Type_Info_Named, %runtime.Type_Info_Named* %3, i32 0, i32 0
  %146 = load %..string, %..string* %145, align 8
  %147 = bitcast %..string* %145 to { i64, i64 }*
  %148 = load { i64, i64 }, { i64, i64 }* %147, align 8
  %149 = call { i64, i64 } @runtime.print_string({ i64, i64 } %148)
  br label %typeswitch.done92

typeswitch.body1:                                 ; preds = %if.done
  %150 = bitcast i8* %138 to %runtime.Type_Info_Integer*
  %151 = load %runtime.Type_Info_Integer, %runtime.Type_Info_Integer* %150, align 1
  store %runtime.Type_Info_Integer %151, %runtime.Type_Info_Integer* %4, align 1
  %152 = load %runtime.Type_Info*, %runtime.Type_Info** %1, align 8
  %153 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %152, i32 0, i32 4
  %154 = load i64, i64* %153, align 8
  switch i64 %154, label %switch.default.body [
    i64 4683743612465315843, label %switch.case.body
    i64 72057594037928041, label %switch.case.body2
    i64 72057594037928008, label %switch.case.body3
  ]

switch.case.body:                                 ; preds = %typeswitch.body1
  %155 = bitcast { i64, i64 }* %5 to %..string*
  store %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$2c8", i64 0, i64 0), i64 3 }, %..string* %155, align 8
  %156 = load { i64, i64 }, { i64, i64 }* %5, align 8
  %157 = call { i64, i64 } @runtime.print_string({ i64, i64 } %156)
  br label %switch.done

switch.case.body2:                                ; preds = %typeswitch.body1
  %158 = bitcast { i64, i64 }* %6 to %..string*
  store %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$2c9", i64 0, i64 0), i64 4 }, %..string* %158, align 8
  %159 = load { i64, i64 }, { i64, i64 }* %6, align 8
  %160 = call { i64, i64 } @runtime.print_string({ i64, i64 } %159)
  br label %switch.done

switch.case.body3:                                ; preds = %typeswitch.body1
  %161 = bitcast { i64, i64 }* %7 to %..string*
  store %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$2ca", i64 0, i64 0), i64 7 }, %..string* %161, align 8
  %162 = load { i64, i64 }, { i64, i64 }* %7, align 8
  %163 = call { i64, i64 } @runtime.print_string({ i64, i64 } %162)
  br label %switch.done

switch.default.body:                              ; preds = %typeswitch.body1
  %164 = getelementptr inbounds %runtime.Type_Info_Integer, %runtime.Type_Info_Integer* %4, i32 0, i32 0
  %165 = load i8, i8* %164, align 1
  %166 = trunc i8 %165 to i1
  br i1 %166, label %if.then4, label %if.else

if.then4:                                         ; preds = %switch.default.body
  br label %if.done5

if.else:                                          ; preds = %switch.default.body
  br label %if.done5

if.done5:                                         ; preds = %if.else, %if.then4
  %167 = phi i8 [ 105, %if.then4 ], [ 117, %if.else ]
  %168 = call { i64, i64 } @runtime.print_byte(i8 %167)
  %169 = load %runtime.Type_Info*, %runtime.Type_Info** %1, align 8
  %170 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %169, i32 0, i32 0
  %171 = load i64, i64* %170, align 8
  %172 = mul i64 8, %171
  call void @runtime.print_u64(i64 %172)
  br label %switch.done

switch.done:                                      ; preds = %if.done5, %switch.case.body3, %switch.case.body2, %switch.case.body
  br label %typeswitch.done92

typeswitch.body6:                                 ; preds = %if.done
  %173 = bitcast i8* %138 to %runtime.Type_Info_Rune*
  %174 = load %runtime.Type_Info_Rune, %runtime.Type_Info_Rune* %173, align 1
  store %runtime.Type_Info_Rune %174, %runtime.Type_Info_Rune* %8, align 1
  %175 = bitcast { i64, i64 }* %9 to %..string*
  store %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$2cb", i64 0, i64 0), i64 4 }, %..string* %175, align 8
  %176 = load { i64, i64 }, { i64, i64 }* %9, align 8
  %177 = call { i64, i64 } @runtime.print_string({ i64, i64 } %176)
  br label %typeswitch.done92

typeswitch.body7:                                 ; preds = %if.done
  %178 = bitcast i8* %138 to %runtime.Type_Info_Float*
  %179 = load %runtime.Type_Info_Float, %runtime.Type_Info_Float* %178, align 1
  store %runtime.Type_Info_Float %179, %runtime.Type_Info_Float* %10, align 1
  %180 = call { i64, i64 } @runtime.print_byte(i8 102)
  %181 = load %runtime.Type_Info*, %runtime.Type_Info** %1, align 8
  %182 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %181, i32 0, i32 0
  %183 = load i64, i64* %182, align 8
  %184 = mul i64 8, %183
  call void @runtime.print_u64(i64 %184)
  br label %typeswitch.done92

typeswitch.body8:                                 ; preds = %if.done
  %185 = bitcast i8* %138 to %runtime.Type_Info_Complex*
  %186 = load %runtime.Type_Info_Complex, %runtime.Type_Info_Complex* %185, align 1
  store %runtime.Type_Info_Complex %186, %runtime.Type_Info_Complex* %11, align 1
  %187 = bitcast { i64, i64 }* %12 to %..string*
  store %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$2cc", i64 0, i64 0), i64 7 }, %..string* %187, align 8
  %188 = load { i64, i64 }, { i64, i64 }* %12, align 8
  %189 = call { i64, i64 } @runtime.print_string({ i64, i64 } %188)
  %190 = load %runtime.Type_Info*, %runtime.Type_Info** %1, align 8
  %191 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %190, i32 0, i32 0
  %192 = load i64, i64* %191, align 8
  %193 = mul i64 8, %192
  call void @runtime.print_u64(i64 %193)
  br label %typeswitch.done92

typeswitch.body9:                                 ; preds = %if.done
  %194 = bitcast i8* %138 to %runtime.Type_Info_Quaternion*
  %195 = load %runtime.Type_Info_Quaternion, %runtime.Type_Info_Quaternion* %194, align 1
  store %runtime.Type_Info_Quaternion %195, %runtime.Type_Info_Quaternion* %13, align 1
  %196 = bitcast { i64, i64 }* %14 to %..string*
  store %..string { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"csbs$2cd", i64 0, i64 0), i64 10 }, %..string* %196, align 8
  %197 = load { i64, i64 }, { i64, i64 }* %14, align 8
  %198 = call { i64, i64 } @runtime.print_string({ i64, i64 } %197)
  %199 = load %runtime.Type_Info*, %runtime.Type_Info** %1, align 8
  %200 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %199, i32 0, i32 0
  %201 = load i64, i64* %200, align 8
  %202 = mul i64 8, %201
  call void @runtime.print_u64(i64 %202)
  br label %typeswitch.done92

typeswitch.body10:                                ; preds = %if.done
  %203 = bitcast i8* %138 to %runtime.Type_Info_String*
  %204 = load %runtime.Type_Info_String, %runtime.Type_Info_String* %203, align 1
  store %runtime.Type_Info_String %204, %runtime.Type_Info_String* %15, align 1
  %205 = bitcast { i64, i64 }* %16 to %..string*
  store %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$2ce", i64 0, i64 0), i64 6 }, %..string* %205, align 8
  %206 = load { i64, i64 }, { i64, i64 }* %16, align 8
  %207 = call { i64, i64 } @runtime.print_string({ i64, i64 } %206)
  br label %typeswitch.done92

typeswitch.body11:                                ; preds = %if.done
  %208 = bitcast i8* %138 to %runtime.Type_Info_Boolean*
  %209 = load %runtime.Type_Info_Boolean, %runtime.Type_Info_Boolean* %208, align 1
  store %runtime.Type_Info_Boolean %209, %runtime.Type_Info_Boolean* %17, align 1
  %210 = load %runtime.Type_Info*, %runtime.Type_Info** %1, align 8
  %211 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %210, i32 0, i32 4
  %212 = load i64, i64* %211, align 8
  switch i64 %212, label %switch.default.body13 [
    i64 504403158265495585, label %switch.case.body12
  ]

switch.case.body12:                               ; preds = %typeswitch.body11
  %213 = bitcast { i64, i64 }* %18 to %..string*
  store %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$2cf", i64 0, i64 0), i64 4 }, %..string* %213, align 8
  %214 = load { i64, i64 }, { i64, i64 }* %18, align 8
  %215 = call { i64, i64 } @runtime.print_string({ i64, i64 } %214)
  br label %switch.done14

switch.default.body13:                            ; preds = %typeswitch.body11
  %216 = call { i64, i64 } @runtime.print_byte(i8 98)
  %217 = load %runtime.Type_Info*, %runtime.Type_Info** %1, align 8
  %218 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %217, i32 0, i32 0
  %219 = load i64, i64* %218, align 8
  %220 = mul i64 8, %219
  call void @runtime.print_u64(i64 %220)
  br label %switch.done14

switch.done14:                                    ; preds = %switch.default.body13, %switch.case.body12
  br label %typeswitch.done92

typeswitch.body15:                                ; preds = %if.done
  %221 = bitcast i8* %138 to %runtime.Type_Info_Any*
  %222 = load %runtime.Type_Info_Any, %runtime.Type_Info_Any* %221, align 1
  store %runtime.Type_Info_Any %222, %runtime.Type_Info_Any* %19, align 1
  %223 = bitcast { i64, i64 }* %20 to %..string*
  store %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$2d0", i64 0, i64 0), i64 3 }, %..string* %223, align 8
  %224 = load { i64, i64 }, { i64, i64 }* %20, align 8
  %225 = call { i64, i64 } @runtime.print_string({ i64, i64 } %224)
  br label %typeswitch.done92

typeswitch.body16:                                ; preds = %if.done
  %226 = bitcast i8* %138 to %runtime.Type_Info_Type_Id*
  %227 = load %runtime.Type_Info_Type_Id, %runtime.Type_Info_Type_Id* %226, align 1
  store %runtime.Type_Info_Type_Id %227, %runtime.Type_Info_Type_Id* %21, align 1
  %228 = bitcast { i64, i64 }* %22 to %..string*
  store %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$2d1", i64 0, i64 0), i64 6 }, %..string* %228, align 8
  %229 = load { i64, i64 }, { i64, i64 }* %22, align 8
  %230 = call { i64, i64 } @runtime.print_string({ i64, i64 } %229)
  br label %typeswitch.done92

typeswitch.body17:                                ; preds = %if.done
  %231 = bitcast i8* %138 to %runtime.Type_Info_Pointer*
  %232 = load %runtime.Type_Info_Pointer, %runtime.Type_Info_Pointer* %231, align 8
  store %runtime.Type_Info_Pointer %232, %runtime.Type_Info_Pointer* %23, align 8
  %233 = getelementptr inbounds %runtime.Type_Info_Pointer, %runtime.Type_Info_Pointer* %23, i32 0, i32 0
  %234 = load %runtime.Type_Info*, %runtime.Type_Info** %233, align 8
  %235 = icmp eq %runtime.Type_Info* %234, null
  %236 = zext i1 %235 to i8
  %237 = trunc i8 %236 to i1
  br i1 %237, label %if.then18, label %if.else19

if.then18:                                        ; preds = %typeswitch.body17
  %238 = bitcast { i64, i64 }* %24 to %..string*
  store %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$2d2", i64 0, i64 0), i64 6 }, %..string* %238, align 8
  %239 = load { i64, i64 }, { i64, i64 }* %24, align 8
  %240 = call { i64, i64 } @runtime.print_string({ i64, i64 } %239)
  br label %if.done20

if.else19:                                        ; preds = %typeswitch.body17
  %241 = bitcast { i64, i64 }* %25 to %..string*
  store %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$2d3", i64 0, i64 0), i64 1 }, %..string* %241, align 8
  %242 = load { i64, i64 }, { i64, i64 }* %25, align 8
  %243 = call { i64, i64 } @runtime.print_string({ i64, i64 } %242)
  %244 = getelementptr inbounds %runtime.Type_Info_Pointer, %runtime.Type_Info_Pointer* %23, i32 0, i32 0
  %245 = load %runtime.Type_Info*, %runtime.Type_Info** %244, align 8
  call void @runtime.print_type(%runtime.Type_Info* %245)
  br label %if.done20

if.done20:                                        ; preds = %if.else19, %if.then18
  br label %typeswitch.done92

typeswitch.body21:                                ; preds = %if.done
  %246 = bitcast i8* %138 to %runtime.Type_Info_Multi_Pointer*
  %247 = load %runtime.Type_Info_Multi_Pointer, %runtime.Type_Info_Multi_Pointer* %246, align 8
  store %runtime.Type_Info_Multi_Pointer %247, %runtime.Type_Info_Multi_Pointer* %26, align 8
  %248 = bitcast { i64, i64 }* %27 to %..string*
  store %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$2d4", i64 0, i64 0), i64 3 }, %..string* %248, align 8
  %249 = load { i64, i64 }, { i64, i64 }* %27, align 8
  %250 = call { i64, i64 } @runtime.print_string({ i64, i64 } %249)
  %251 = getelementptr inbounds %runtime.Type_Info_Multi_Pointer, %runtime.Type_Info_Multi_Pointer* %26, i32 0, i32 0
  %252 = load %runtime.Type_Info*, %runtime.Type_Info** %251, align 8
  call void @runtime.print_type(%runtime.Type_Info* %252)
  br label %typeswitch.done92

typeswitch.body22:                                ; preds = %if.done
  %253 = bitcast i8* %138 to %runtime.Type_Info_Soa_Pointer*
  %254 = load %runtime.Type_Info_Soa_Pointer, %runtime.Type_Info_Soa_Pointer* %253, align 8
  store %runtime.Type_Info_Soa_Pointer %254, %runtime.Type_Info_Soa_Pointer* %28, align 8
  %255 = bitcast { i64, i64 }* %29 to %..string*
  store %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$2d5", i64 0, i64 0), i64 6 }, %..string* %255, align 8
  %256 = load { i64, i64 }, { i64, i64 }* %29, align 8
  %257 = call { i64, i64 } @runtime.print_string({ i64, i64 } %256)
  %258 = getelementptr inbounds %runtime.Type_Info_Soa_Pointer, %runtime.Type_Info_Soa_Pointer* %28, i32 0, i32 0
  %259 = load %runtime.Type_Info*, %runtime.Type_Info** %258, align 8
  call void @runtime.print_type(%runtime.Type_Info* %259)
  br label %typeswitch.done92

typeswitch.body23:                                ; preds = %if.done
  %260 = bitcast i8* %138 to %runtime.Type_Info_Procedure*
  %261 = load %runtime.Type_Info_Procedure, %runtime.Type_Info_Procedure* %260, align 8
  %262 = bitcast %runtime.Type_Info_Procedure* %30 to i8*
  call void @llvm.memset.p0i8.i64(i8* %262, i8 0, i64 24, i1 false)
  store %runtime.Type_Info_Procedure %261, %runtime.Type_Info_Procedure* %30, align 8
  %263 = bitcast { i64, i64 }* %31 to %..string*
  store %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$2d6", i64 0, i64 0), i64 4 }, %..string* %263, align 8
  %264 = load { i64, i64 }, { i64, i64 }* %31, align 8
  %265 = call { i64, i64 } @runtime.print_string({ i64, i64 } %264)
  %266 = getelementptr inbounds %runtime.Type_Info_Procedure, %runtime.Type_Info_Procedure* %30, i32 0, i32 0
  %267 = load %runtime.Type_Info*, %runtime.Type_Info** %266, align 8
  %268 = icmp eq %runtime.Type_Info* %267, null
  %269 = zext i1 %268 to i8
  %270 = trunc i8 %269 to i1
  br i1 %270, label %if.then24, label %if.else25

if.then24:                                        ; preds = %typeswitch.body23
  %271 = bitcast { i64, i64 }* %32 to %..string*
  store %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$2d7", i64 0, i64 0), i64 2 }, %..string* %271, align 8
  %272 = load { i64, i64 }, { i64, i64 }* %32, align 8
  %273 = call { i64, i64 } @runtime.print_string({ i64, i64 } %272)
  br label %if.done28

if.else25:                                        ; preds = %typeswitch.body23
  %274 = getelementptr inbounds %runtime.Type_Info_Procedure, %runtime.Type_Info_Procedure* %30, i32 0, i32 0
  %275 = load %runtime.Type_Info*, %runtime.Type_Info** %274, align 8
  %276 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %275, i32 0, i32 5
  %277 = load { [15 x i64], i64 }, { [15 x i64], i64 }* %276, align 8
  %278 = bitcast { %runtime.Type_Info_Tuple, i8 }* %34 to i8*
  call void @llvm.memset.p0i8.i64(i8* %278, i8 0, i64 40, i1 false)
  %279 = getelementptr inbounds { %runtime.Type_Info_Tuple, i8 }, { %runtime.Type_Info_Tuple, i8 }* %34, i32 0, i32 0
  %280 = getelementptr inbounds { %runtime.Type_Info_Tuple, i8 }, { %runtime.Type_Info_Tuple, i8 }* %34, i32 0, i32 1
  %281 = getelementptr inbounds { [15 x i64], i64 }, { [15 x i64], i64 }* %276, i32 0, i32 1
  %282 = load i64, i64* %281, align 8
  %283 = icmp eq i64 %282, 18
  br i1 %283, label %union_cast.ok, label %union_cast.end

union_cast.ok:                                    ; preds = %if.else25
  %284 = bitcast { [15 x i64], i64 }* %276 to %runtime.Type_Info_Tuple*
  %285 = load %runtime.Type_Info_Tuple, %runtime.Type_Info_Tuple* %284, align 8
  store %runtime.Type_Info_Tuple %285, %runtime.Type_Info_Tuple* %279, align 8
  store i8 1, i8* %280, align 1
  br label %union_cast.end

union_cast.end:                                   ; preds = %union_cast.ok, %if.else25
  %286 = getelementptr inbounds { %runtime.Type_Info_Tuple, i8 }, { %runtime.Type_Info_Tuple, i8 }* %34, i32 0, i32 1
  %287 = load i8, i8* %286, align 1
  %288 = bitcast { [15 x i64], i64 }* %276 to i8*
  %289 = icmp ne i8 %287, 0
  %290 = bitcast { i64, i64 }* %35 to %..string*
  store %..string { i8* getelementptr inbounds ([57 x i8], [57 x i8]* @"csbs$2c6", i64 0, i64 0), i64 56 }, %..string* %290, align 8
  %291 = load { i64, i64 }, { i64, i64 }* %35, align 8
  call void @runtime.type_assertion_check2(i1 %289, { i64, i64 } %291, i32 239, i32 21, i64 1369094286720630797, i64 3602879701896396863, i8* %288)
  %292 = getelementptr inbounds { %runtime.Type_Info_Tuple, i8 }, { %runtime.Type_Info_Tuple, i8 }* %34, i32 0, i32 0
  %293 = load %runtime.Type_Info_Tuple, %runtime.Type_Info_Tuple* %292, align 8
  store %runtime.Type_Info_Tuple %293, %runtime.Type_Info_Tuple* %33, align 8
  %294 = call { i64, i64 } @runtime.print_byte(i8 40)
  store %runtime.Type_Info* null, %runtime.Type_Info** %36, align 8
  store i64 0, i64* %37, align 8
  %295 = getelementptr inbounds %runtime.Type_Info_Tuple, %runtime.Type_Info_Tuple* %33, i32 0, i32 0
  %296 = load { %runtime.Type_Info**, i64 }, { %runtime.Type_Info**, i64 }* %295, align 8
  %297 = getelementptr inbounds { %runtime.Type_Info**, i64 }, { %runtime.Type_Info**, i64 }* %295, i32 0, i32 1
  %298 = load i64, i64* %297, align 8
  store i64 %298, i64* %38, align 8
  store i64 -1, i64* %39, align 8
  br label %for.index.loop

for.index.loop:                                   ; preds = %if.done27, %union_cast.end
  %299 = load i64, i64* %39, align 8
  %300 = add i64 %299, 1
  store i64 %300, i64* %39, align 8
  %301 = load i64, i64* %38, align 8
  %302 = icmp slt i64 %300, %301
  br i1 %302, label %for.index.body, label %for.index.done

for.index.body:                                   ; preds = %for.index.loop
  %303 = load i64, i64* %39, align 8
  %304 = getelementptr inbounds { %runtime.Type_Info**, i64 }, { %runtime.Type_Info**, i64 }* %295, i32 0, i32 0
  %305 = load %runtime.Type_Info**, %runtime.Type_Info*** %304, align 8
  %306 = getelementptr %runtime.Type_Info*, %runtime.Type_Info** %305, i64 %303
  %307 = load %runtime.Type_Info*, %runtime.Type_Info** %306, align 8
  store %runtime.Type_Info* %307, %runtime.Type_Info** %40, align 8
  store i64 %303, i64* %41, align 8
  %308 = load i64, i64* %41, align 8
  %309 = icmp sgt i64 %308, 0
  %310 = zext i1 %309 to i8
  %311 = trunc i8 %310 to i1
  br i1 %311, label %if.then26, label %if.done27

if.then26:                                        ; preds = %for.index.body
  %312 = bitcast { i64, i64 }* %42 to %..string*
  store %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$2d8", i64 0, i64 0), i64 2 }, %..string* %312, align 8
  %313 = load { i64, i64 }, { i64, i64 }* %42, align 8
  %314 = call { i64, i64 } @runtime.print_string({ i64, i64 } %313)
  br label %if.done27

if.done27:                                        ; preds = %if.then26, %for.index.body
  %315 = load %runtime.Type_Info*, %runtime.Type_Info** %40, align 8
  call void @runtime.print_type(%runtime.Type_Info* %315)
  br label %for.index.loop

for.index.done:                                   ; preds = %for.index.loop
  %316 = bitcast { i64, i64 }* %43 to %..string*
  store %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$2d9", i64 0, i64 0), i64 1 }, %..string* %316, align 8
  %317 = load { i64, i64 }, { i64, i64 }* %43, align 8
  %318 = call { i64, i64 } @runtime.print_string({ i64, i64 } %317)
  br label %if.done28

if.done28:                                        ; preds = %for.index.done, %if.then24
  %319 = getelementptr inbounds %runtime.Type_Info_Procedure, %runtime.Type_Info_Procedure* %30, i32 0, i32 1
  %320 = load %runtime.Type_Info*, %runtime.Type_Info** %319, align 8
  %321 = icmp ne %runtime.Type_Info* %320, null
  %322 = zext i1 %321 to i8
  %323 = trunc i8 %322 to i1
  br i1 %323, label %if.then29, label %if.done30

if.then29:                                        ; preds = %if.done28
  %324 = bitcast { i64, i64 }* %44 to %..string*
  store %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$2da", i64 0, i64 0), i64 4 }, %..string* %324, align 8
  %325 = load { i64, i64 }, { i64, i64 }* %44, align 8
  %326 = call { i64, i64 } @runtime.print_string({ i64, i64 } %325)
  %327 = getelementptr inbounds %runtime.Type_Info_Procedure, %runtime.Type_Info_Procedure* %30, i32 0, i32 1
  %328 = load %runtime.Type_Info*, %runtime.Type_Info** %327, align 8
  call void @runtime.print_type(%runtime.Type_Info* %328)
  br label %if.done30

if.done30:                                        ; preds = %if.then29, %if.done28
  br label %typeswitch.done92

typeswitch.body31:                                ; preds = %if.done
  %329 = bitcast i8* %138 to %runtime.Type_Info_Tuple*
  %330 = load %runtime.Type_Info_Tuple, %runtime.Type_Info_Tuple* %329, align 8
  store %runtime.Type_Info_Tuple %330, %runtime.Type_Info_Tuple* %45, align 8
  %331 = getelementptr inbounds %runtime.Type_Info_Tuple, %runtime.Type_Info_Tuple* %45, i32 0, i32 1
  %332 = load { %..string*, i64 }, { %..string*, i64 }* %331, align 8
  %333 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %331, i32 0, i32 1
  %334 = load i64, i64* %333, align 8
  store i64 %334, i64* %46, align 8
  %335 = load i64, i64* %46, align 8
  %336 = icmp ne i64 %335, 1
  %337 = zext i1 %336 to i8
  %338 = trunc i8 %337 to i1
  br i1 %338, label %if.then32, label %if.done33

if.then32:                                        ; preds = %typeswitch.body31
  %339 = call { i64, i64 } @runtime.print_byte(i8 40)
  br label %if.done33

if.done33:                                        ; preds = %if.then32, %typeswitch.body31
  %340 = bitcast %..string* %47 to i8*
  call void @llvm.memset.p0i8.i64(i8* %340, i8 0, i64 16, i1 false)
  store i64 0, i64* %48, align 8
  %341 = getelementptr inbounds %runtime.Type_Info_Tuple, %runtime.Type_Info_Tuple* %45, i32 0, i32 1
  %342 = load { %..string*, i64 }, { %..string*, i64 }* %341, align 8
  %343 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %341, i32 0, i32 1
  %344 = load i64, i64* %343, align 8
  store i64 %344, i64* %49, align 8
  store i64 -1, i64* %50, align 8
  br label %for.index.loop34

for.index.loop34:                                 ; preds = %if.done39, %if.done33
  %345 = load i64, i64* %50, align 8
  %346 = add i64 %345, 1
  store i64 %346, i64* %50, align 8
  %347 = load i64, i64* %49, align 8
  %348 = icmp slt i64 %346, %347
  br i1 %348, label %for.index.body35, label %for.index.done40

for.index.body35:                                 ; preds = %for.index.loop34
  %349 = load i64, i64* %50, align 8
  %350 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %341, i32 0, i32 0
  %351 = load %..string*, %..string** %350, align 8
  %352 = getelementptr %..string, %..string* %351, i64 %349
  %353 = load %..string, %..string* %352, align 8
  store %..string %353, %..string* %51, align 8
  store i64 %349, i64* %52, align 8
  %354 = load i64, i64* %52, align 8
  %355 = icmp sgt i64 %354, 0
  %356 = zext i1 %355 to i8
  %357 = trunc i8 %356 to i1
  br i1 %357, label %if.then36, label %if.done37

if.then36:                                        ; preds = %for.index.body35
  %358 = bitcast { i64, i64 }* %53 to %..string*
  store %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$2d8", i64 0, i64 0), i64 2 }, %..string* %358, align 8
  %359 = load { i64, i64 }, { i64, i64 }* %53, align 8
  %360 = call { i64, i64 } @runtime.print_string({ i64, i64 } %359)
  br label %if.done37

if.done37:                                        ; preds = %if.then36, %for.index.body35
  %361 = getelementptr inbounds %runtime.Type_Info_Tuple, %runtime.Type_Info_Tuple* %45, i32 0, i32 0
  %362 = load { %runtime.Type_Info**, i64 }, { %runtime.Type_Info**, i64 }* %361, align 8
  %363 = getelementptr inbounds { %runtime.Type_Info**, i64 }, { %runtime.Type_Info**, i64 }* %361, i32 0, i32 0
  %364 = load %runtime.Type_Info**, %runtime.Type_Info*** %363, align 8
  %365 = load i64, i64* %52, align 8
  %366 = getelementptr inbounds { %runtime.Type_Info**, i64 }, { %runtime.Type_Info**, i64 }* %361, i32 0, i32 1
  %367 = load i64, i64* %366, align 8
  %368 = bitcast { i64, i64 }* %55 to %..string*
  store %..string { i8* getelementptr inbounds ([57 x i8], [57 x i8]* @"csbs$2c6", i64 0, i64 0), i64 56 }, %..string* %368, align 8
  %369 = load { i64, i64 }, { i64, i64 }* %55, align 8
  call void @runtime.bounds_check_error({ i64, i64 } %369, i32 257, i32 20, i64 %365, i64 %367)
  %370 = getelementptr %runtime.Type_Info*, %runtime.Type_Info** %364, i64 %365
  %371 = load %runtime.Type_Info*, %runtime.Type_Info** %370, align 8
  store %runtime.Type_Info* %371, %runtime.Type_Info** %54, align 8
  %372 = load %..string, %..string* %51, align 8
  %373 = getelementptr inbounds %..string, %..string* %51, i32 0, i32 1
  %374 = load i64, i64* %373, align 8
  %375 = icmp sgt i64 %374, 0
  %376 = zext i1 %375 to i8
  %377 = trunc i8 %376 to i1
  br i1 %377, label %if.then38, label %if.done39

if.then38:                                        ; preds = %if.done37
  %378 = load %..string, %..string* %51, align 8
  %379 = bitcast %..string* %51 to { i64, i64 }*
  %380 = load { i64, i64 }, { i64, i64 }* %379, align 8
  %381 = call { i64, i64 } @runtime.print_string({ i64, i64 } %380)
  %382 = bitcast { i64, i64 }* %56 to %..string*
  store %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$2ae", i64 0, i64 0), i64 2 }, %..string* %382, align 8
  %383 = load { i64, i64 }, { i64, i64 }* %56, align 8
  %384 = call { i64, i64 } @runtime.print_string({ i64, i64 } %383)
  br label %if.done39

if.done39:                                        ; preds = %if.then38, %if.done37
  %385 = load %runtime.Type_Info*, %runtime.Type_Info** %54, align 8
  call void @runtime.print_type(%runtime.Type_Info* %385)
  br label %for.index.loop34

for.index.done40:                                 ; preds = %for.index.loop34
  %386 = load i64, i64* %46, align 8
  %387 = icmp ne i64 %386, 1
  %388 = zext i1 %387 to i8
  %389 = trunc i8 %388 to i1
  br i1 %389, label %if.then41, label %if.done42

if.then41:                                        ; preds = %for.index.done40
  %390 = bitcast { i64, i64 }* %57 to %..string*
  store %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$2d9", i64 0, i64 0), i64 1 }, %..string* %390, align 8
  %391 = load { i64, i64 }, { i64, i64 }* %57, align 8
  %392 = call { i64, i64 } @runtime.print_string({ i64, i64 } %391)
  br label %if.done42

if.done42:                                        ; preds = %if.then41, %for.index.done40
  br label %typeswitch.done92

typeswitch.body43:                                ; preds = %if.done
  %393 = bitcast i8* %138 to %runtime.Type_Info_Array*
  %394 = load %runtime.Type_Info_Array, %runtime.Type_Info_Array* %393, align 8
  store %runtime.Type_Info_Array %394, %runtime.Type_Info_Array* %58, align 8
  %395 = call { i64, i64 } @runtime.print_byte(i8 91)
  %396 = getelementptr inbounds %runtime.Type_Info_Array, %runtime.Type_Info_Array* %58, i32 0, i32 2
  %397 = load i64, i64* %396, align 8
  call void @runtime.print_u64(i64 %397)
  %398 = call { i64, i64 } @runtime.print_byte(i8 93)
  %399 = getelementptr inbounds %runtime.Type_Info_Array, %runtime.Type_Info_Array* %58, i32 0, i32 0
  %400 = load %runtime.Type_Info*, %runtime.Type_Info** %399, align 8
  call void @runtime.print_type(%runtime.Type_Info* %400)
  br label %typeswitch.done92

typeswitch.body44:                                ; preds = %if.done
  %401 = bitcast i8* %138 to %runtime.Type_Info_Enumerated_Array*
  %402 = load %runtime.Type_Info_Enumerated_Array, %runtime.Type_Info_Enumerated_Array* %401, align 8
  %403 = bitcast %runtime.Type_Info_Enumerated_Array* %59 to i8*
  call void @llvm.memset.p0i8.i64(i8* %403, i8 0, i64 56, i1 false)
  store %runtime.Type_Info_Enumerated_Array %402, %runtime.Type_Info_Enumerated_Array* %59, align 8
  %404 = getelementptr inbounds %runtime.Type_Info_Enumerated_Array, %runtime.Type_Info_Enumerated_Array* %59, i32 0, i32 6
  %405 = load i8, i8* %404, align 1
  %406 = trunc i8 %405 to i1
  br i1 %406, label %if.then45, label %if.done46

if.then45:                                        ; preds = %typeswitch.body44
  %407 = bitcast { i64, i64 }* %60 to %..string*
  store %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$2db", i64 0, i64 0), i64 7 }, %..string* %407, align 8
  %408 = load { i64, i64 }, { i64, i64 }* %60, align 8
  %409 = call { i64, i64 } @runtime.print_string({ i64, i64 } %408)
  br label %if.done46

if.done46:                                        ; preds = %if.then45, %typeswitch.body44
  %410 = call { i64, i64 } @runtime.print_byte(i8 91)
  %411 = getelementptr inbounds %runtime.Type_Info_Enumerated_Array, %runtime.Type_Info_Enumerated_Array* %59, i32 0, i32 1
  %412 = load %runtime.Type_Info*, %runtime.Type_Info** %411, align 8
  call void @runtime.print_type(%runtime.Type_Info* %412)
  %413 = call { i64, i64 } @runtime.print_byte(i8 93)
  %414 = getelementptr inbounds %runtime.Type_Info_Enumerated_Array, %runtime.Type_Info_Enumerated_Array* %59, i32 0, i32 0
  %415 = load %runtime.Type_Info*, %runtime.Type_Info** %414, align 8
  call void @runtime.print_type(%runtime.Type_Info* %415)
  br label %typeswitch.done92

typeswitch.body47:                                ; preds = %if.done
  %416 = bitcast i8* %138 to %runtime.Type_Info_Dynamic_Array*
  %417 = load %runtime.Type_Info_Dynamic_Array, %runtime.Type_Info_Dynamic_Array* %416, align 8
  store %runtime.Type_Info_Dynamic_Array %417, %runtime.Type_Info_Dynamic_Array* %61, align 8
  %418 = bitcast { i64, i64 }* %62 to %..string*
  store %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$2dc", i64 0, i64 0), i64 9 }, %..string* %418, align 8
  %419 = load { i64, i64 }, { i64, i64 }* %62, align 8
  %420 = call { i64, i64 } @runtime.print_string({ i64, i64 } %419)
  %421 = getelementptr inbounds %runtime.Type_Info_Dynamic_Array, %runtime.Type_Info_Dynamic_Array* %61, i32 0, i32 0
  %422 = load %runtime.Type_Info*, %runtime.Type_Info** %421, align 8
  call void @runtime.print_type(%runtime.Type_Info* %422)
  br label %typeswitch.done92

typeswitch.body48:                                ; preds = %if.done
  %423 = bitcast i8* %138 to %runtime.Type_Info_Slice*
  %424 = load %runtime.Type_Info_Slice, %runtime.Type_Info_Slice* %423, align 8
  store %runtime.Type_Info_Slice %424, %runtime.Type_Info_Slice* %63, align 8
  %425 = bitcast { i64, i64 }* %64 to %..string*
  store %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$2dd", i64 0, i64 0), i64 2 }, %..string* %425, align 8
  %426 = load { i64, i64 }, { i64, i64 }* %64, align 8
  %427 = call { i64, i64 } @runtime.print_string({ i64, i64 } %426)
  %428 = getelementptr inbounds %runtime.Type_Info_Slice, %runtime.Type_Info_Slice* %63, i32 0, i32 0
  %429 = load %runtime.Type_Info*, %runtime.Type_Info** %428, align 8
  call void @runtime.print_type(%runtime.Type_Info* %429)
  br label %typeswitch.done92

typeswitch.body49:                                ; preds = %if.done
  %430 = bitcast i8* %138 to %runtime.Type_Info_Map*
  %431 = load %runtime.Type_Info_Map, %runtime.Type_Info_Map* %430, align 8
  store %runtime.Type_Info_Map %431, %runtime.Type_Info_Map* %65, align 8
  %432 = bitcast { i64, i64 }* %66 to %..string*
  store %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$2de", i64 0, i64 0), i64 4 }, %..string* %432, align 8
  %433 = load { i64, i64 }, { i64, i64 }* %66, align 8
  %434 = call { i64, i64 } @runtime.print_string({ i64, i64 } %433)
  %435 = getelementptr inbounds %runtime.Type_Info_Map, %runtime.Type_Info_Map* %65, i32 0, i32 0
  %436 = load %runtime.Type_Info*, %runtime.Type_Info** %435, align 8
  call void @runtime.print_type(%runtime.Type_Info* %436)
  %437 = call { i64, i64 } @runtime.print_byte(i8 93)
  %438 = getelementptr inbounds %runtime.Type_Info_Map, %runtime.Type_Info_Map* %65, i32 0, i32 1
  %439 = load %runtime.Type_Info*, %runtime.Type_Info** %438, align 8
  call void @runtime.print_type(%runtime.Type_Info* %439)
  br label %typeswitch.done92

typeswitch.body50:                                ; preds = %if.done
  %440 = bitcast i8* %138 to %runtime.Type_Info_Struct*
  %441 = load %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %440, align 8
  %442 = bitcast %runtime.Type_Info_Struct* %67 to i8*
  call void @llvm.memset.p0i8.i64(i8* %442, i8 0, i64 120, i1 false)
  %443 = bitcast %runtime.Type_Info_Struct* %67 to i8*
  %444 = bitcast %runtime.Type_Info_Struct* %440 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %443, i8* align 1 %444, i64 120, i1 false)
  %445 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %67, i32 0, i32 10
  %446 = load i8, i8* %445, align 1
  switch i8 %446, label %switch.done55 [
    i8 0, label %switch.case.body51
    i8 1, label %switch.case.body52
    i8 2, label %switch.case.body53
    i8 3, label %switch.case.body54
  ]

switch.case.body51:                               ; preds = %typeswitch.body50
  br label %switch.done55

switch.case.body52:                               ; preds = %typeswitch.body50
  %447 = bitcast { i64, i64 }* %68 to %..string*
  store %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$2df", i64 0, i64 0), i64 5 }, %..string* %447, align 8
  %448 = load { i64, i64 }, { i64, i64 }* %68, align 8
  %449 = call { i64, i64 } @runtime.print_string({ i64, i64 } %448)
  %450 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %67, i32 0, i32 13
  %451 = load i64, i64* %450, align 8
  call void @runtime.print_u64(i64 %451)
  %452 = call { i64, i64 } @runtime.print_byte(i8 93)
  %453 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %67, i32 0, i32 12
  %454 = load %runtime.Type_Info*, %runtime.Type_Info** %453, align 8
  call void @runtime.print_type(%runtime.Type_Info* %454)
  ret void

switch.case.body53:                               ; preds = %typeswitch.body50
  %455 = bitcast { i64, i64 }* %69 to %..string*
  store %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$2e0", i64 0, i64 0), i64 6 }, %..string* %455, align 8
  %456 = load { i64, i64 }, { i64, i64 }* %69, align 8
  %457 = call { i64, i64 } @runtime.print_string({ i64, i64 } %456)
  %458 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %67, i32 0, i32 12
  %459 = load %runtime.Type_Info*, %runtime.Type_Info** %458, align 8
  call void @runtime.print_type(%runtime.Type_Info* %459)
  ret void

switch.case.body54:                               ; preds = %typeswitch.body50
  %460 = bitcast { i64, i64 }* %70 to %..string*
  store %..string { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @"csbs$2e1", i64 0, i64 0), i64 13 }, %..string* %460, align 8
  %461 = load { i64, i64 }, { i64, i64 }* %70, align 8
  %462 = call { i64, i64 } @runtime.print_string({ i64, i64 } %461)
  %463 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %67, i32 0, i32 12
  %464 = load %runtime.Type_Info*, %runtime.Type_Info** %463, align 8
  call void @runtime.print_type(%runtime.Type_Info* %464)
  ret void

switch.done55:                                    ; preds = %switch.case.body51, %typeswitch.body50
  %465 = bitcast { i64, i64 }* %71 to %..string*
  store %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$2e2", i64 0, i64 0), i64 7 }, %..string* %465, align 8
  %466 = load { i64, i64 }, { i64, i64 }* %71, align 8
  %467 = call { i64, i64 } @runtime.print_string({ i64, i64 } %466)
  %468 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %67, i32 0, i32 5
  %469 = load i8, i8* %468, align 1
  %470 = trunc i8 %469 to i1
  br i1 %470, label %if.then56, label %if.done57

if.then56:                                        ; preds = %switch.done55
  %471 = bitcast { i64, i64 }* %72 to %..string*
  store %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$2e3", i64 0, i64 0), i64 8 }, %..string* %471, align 8
  %472 = load { i64, i64 }, { i64, i64 }* %72, align 8
  %473 = call { i64, i64 } @runtime.print_string({ i64, i64 } %472)
  br label %if.done57

if.done57:                                        ; preds = %if.then56, %switch.done55
  %474 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %67, i32 0, i32 6
  %475 = load i8, i8* %474, align 1
  %476 = trunc i8 %475 to i1
  br i1 %476, label %if.then58, label %if.done59

if.then58:                                        ; preds = %if.done57
  %477 = bitcast { i64, i64 }* %73 to %..string*
  store %..string { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"csbs$2e4", i64 0, i64 0), i64 11 }, %..string* %477, align 8
  %478 = load { i64, i64 }, { i64, i64 }* %73, align 8
  %479 = call { i64, i64 } @runtime.print_string({ i64, i64 } %478)
  br label %if.done59

if.done59:                                        ; preds = %if.then58, %if.done57
  %480 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %67, i32 0, i32 7
  %481 = load i8, i8* %480, align 1
  %482 = trunc i8 %481 to i1
  br i1 %482, label %if.then60, label %if.done61

if.then60:                                        ; preds = %if.done59
  %483 = bitcast { i64, i64 }* %74 to %..string*
  store %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$2e5", i64 0, i64 0), i64 7 }, %..string* %483, align 8
  %484 = load { i64, i64 }, { i64, i64 }* %74, align 8
  %485 = call { i64, i64 } @runtime.print_string({ i64, i64 } %484)
  %486 = load %runtime.Type_Info*, %runtime.Type_Info** %1, align 8
  %487 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %486, i32 0, i32 1
  %488 = load i64, i64* %487, align 8
  call void @runtime.print_u64(i64 %488)
  %489 = call { i64, i64 } @runtime.print_byte(i8 32)
  br label %if.done61

if.done61:                                        ; preds = %if.then60, %if.done59
  %490 = call { i64, i64 } @runtime.print_byte(i8 123)
  %491 = bitcast %..string* %75 to i8*
  call void @llvm.memset.p0i8.i64(i8* %491, i8 0, i64 16, i1 false)
  store i64 0, i64* %76, align 8
  %492 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %67, i32 0, i32 1
  %493 = load { %..string*, i64 }, { %..string*, i64 }* %492, align 8
  %494 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %492, i32 0, i32 1
  %495 = load i64, i64* %494, align 8
  store i64 %495, i64* %77, align 8
  store i64 -1, i64* %78, align 8
  br label %for.index.loop62

for.index.loop62:                                 ; preds = %if.done65, %if.done61
  %496 = load i64, i64* %78, align 8
  %497 = add i64 %496, 1
  store i64 %497, i64* %78, align 8
  %498 = load i64, i64* %77, align 8
  %499 = icmp slt i64 %497, %498
  br i1 %499, label %for.index.body63, label %for.index.done66

for.index.body63:                                 ; preds = %for.index.loop62
  %500 = load i64, i64* %78, align 8
  %501 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %492, i32 0, i32 0
  %502 = load %..string*, %..string** %501, align 8
  %503 = getelementptr %..string, %..string* %502, i64 %500
  %504 = load %..string, %..string* %503, align 8
  store %..string %504, %..string* %79, align 8
  store i64 %500, i64* %80, align 8
  %505 = load i64, i64* %80, align 8
  %506 = icmp sgt i64 %505, 0
  %507 = zext i1 %506 to i8
  %508 = trunc i8 %507 to i1
  br i1 %508, label %if.then64, label %if.done65

if.then64:                                        ; preds = %for.index.body63
  %509 = bitcast { i64, i64 }* %81 to %..string*
  store %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$2d8", i64 0, i64 0), i64 2 }, %..string* %509, align 8
  %510 = load { i64, i64 }, { i64, i64 }* %81, align 8
  %511 = call { i64, i64 } @runtime.print_string({ i64, i64 } %510)
  br label %if.done65

if.done65:                                        ; preds = %if.then64, %for.index.body63
  %512 = load %..string, %..string* %79, align 8
  %513 = bitcast %..string* %79 to { i64, i64 }*
  %514 = load { i64, i64 }, { i64, i64 }* %513, align 8
  %515 = call { i64, i64 } @runtime.print_string({ i64, i64 } %514)
  %516 = bitcast { i64, i64 }* %82 to %..string*
  store %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$2ae", i64 0, i64 0), i64 2 }, %..string* %516, align 8
  %517 = load { i64, i64 }, { i64, i64 }* %82, align 8
  %518 = call { i64, i64 } @runtime.print_string({ i64, i64 } %517)
  %519 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %67, i32 0, i32 0
  %520 = load { %runtime.Type_Info**, i64 }, { %runtime.Type_Info**, i64 }* %519, align 8
  %521 = getelementptr inbounds { %runtime.Type_Info**, i64 }, { %runtime.Type_Info**, i64 }* %519, i32 0, i32 0
  %522 = load %runtime.Type_Info**, %runtime.Type_Info*** %521, align 8
  %523 = load i64, i64* %80, align 8
  %524 = getelementptr inbounds { %runtime.Type_Info**, i64 }, { %runtime.Type_Info**, i64 }* %519, i32 0, i32 1
  %525 = load i64, i64* %524, align 8
  %526 = bitcast { i64, i64 }* %83 to %..string*
  store %..string { i8* getelementptr inbounds ([57 x i8], [57 x i8]* @"csbs$2c6", i64 0, i64 0), i64 56 }, %..string* %526, align 8
  %527 = load { i64, i64 }, { i64, i64 }* %83, align 8
  call void @runtime.bounds_check_error({ i64, i64 } %527, i32 328, i32 26, i64 %523, i64 %525)
  %528 = getelementptr %runtime.Type_Info*, %runtime.Type_Info** %522, i64 %523
  %529 = load %runtime.Type_Info*, %runtime.Type_Info** %528, align 8
  call void @runtime.print_type(%runtime.Type_Info* %529)
  br label %for.index.loop62

for.index.done66:                                 ; preds = %for.index.loop62
  %530 = call { i64, i64 } @runtime.print_byte(i8 125)
  br label %typeswitch.done92

typeswitch.body67:                                ; preds = %if.done
  %531 = bitcast i8* %138 to %runtime.Type_Info_Union*
  %532 = load %runtime.Type_Info_Union, %runtime.Type_Info_Union* %531, align 8
  %533 = bitcast %runtime.Type_Info_Union* %84 to i8*
  call void @llvm.memset.p0i8.i64(i8* %533, i8 0, i64 48, i1 false)
  store %runtime.Type_Info_Union %532, %runtime.Type_Info_Union* %84, align 8
  %534 = bitcast { i64, i64 }* %85 to %..string*
  store %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$2e6", i64 0, i64 0), i64 6 }, %..string* %534, align 8
  %535 = load { i64, i64 }, { i64, i64 }* %85, align 8
  %536 = call { i64, i64 } @runtime.print_string({ i64, i64 } %535)
  %537 = getelementptr inbounds %runtime.Type_Info_Union, %runtime.Type_Info_Union* %84, i32 0, i32 4
  %538 = load i8, i8* %537, align 1
  %539 = trunc i8 %538 to i1
  br i1 %539, label %if.then68, label %if.done69

if.then68:                                        ; preds = %typeswitch.body67
  %540 = bitcast { i64, i64 }* %86 to %..string*
  store %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$2e5", i64 0, i64 0), i64 7 }, %..string* %540, align 8
  %541 = load { i64, i64 }, { i64, i64 }* %86, align 8
  %542 = call { i64, i64 } @runtime.print_string({ i64, i64 } %541)
  %543 = load %runtime.Type_Info*, %runtime.Type_Info** %1, align 8
  %544 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %543, i32 0, i32 1
  %545 = load i64, i64* %544, align 8
  call void @runtime.print_u64(i64 %545)
  br label %if.done69

if.done69:                                        ; preds = %if.then68, %typeswitch.body67
  %546 = getelementptr inbounds %runtime.Type_Info_Union, %runtime.Type_Info_Union* %84, i32 0, i32 5
  %547 = load i8, i8* %546, align 1
  %548 = trunc i8 %547 to i1
  br i1 %548, label %if.then70, label %if.done71

if.then70:                                        ; preds = %if.done69
  %549 = bitcast { i64, i64 }* %87 to %..string*
  store %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$2e7", i64 0, i64 0), i64 8 }, %..string* %549, align 8
  %550 = load { i64, i64 }, { i64, i64 }* %87, align 8
  %551 = call { i64, i64 } @runtime.print_string({ i64, i64 } %550)
  br label %if.done71

if.done71:                                        ; preds = %if.then70, %if.done69
  %552 = call { i64, i64 } @runtime.print_byte(i8 123)
  store %runtime.Type_Info* null, %runtime.Type_Info** %88, align 8
  store i64 0, i64* %89, align 8
  %553 = getelementptr inbounds %runtime.Type_Info_Union, %runtime.Type_Info_Union* %84, i32 0, i32 0
  %554 = load { %runtime.Type_Info**, i64 }, { %runtime.Type_Info**, i64 }* %553, align 8
  %555 = getelementptr inbounds { %runtime.Type_Info**, i64 }, { %runtime.Type_Info**, i64 }* %553, i32 0, i32 1
  %556 = load i64, i64* %555, align 8
  store i64 %556, i64* %90, align 8
  store i64 -1, i64* %91, align 8
  br label %for.index.loop72

for.index.loop72:                                 ; preds = %if.done75, %if.done71
  %557 = load i64, i64* %91, align 8
  %558 = add i64 %557, 1
  store i64 %558, i64* %91, align 8
  %559 = load i64, i64* %90, align 8
  %560 = icmp slt i64 %558, %559
  br i1 %560, label %for.index.body73, label %for.index.done76

for.index.body73:                                 ; preds = %for.index.loop72
  %561 = load i64, i64* %91, align 8
  %562 = getelementptr inbounds { %runtime.Type_Info**, i64 }, { %runtime.Type_Info**, i64 }* %553, i32 0, i32 0
  %563 = load %runtime.Type_Info**, %runtime.Type_Info*** %562, align 8
  %564 = getelementptr %runtime.Type_Info*, %runtime.Type_Info** %563, i64 %561
  %565 = load %runtime.Type_Info*, %runtime.Type_Info** %564, align 8
  store %runtime.Type_Info* %565, %runtime.Type_Info** %92, align 8
  store i64 %561, i64* %93, align 8
  %566 = load i64, i64* %93, align 8
  %567 = icmp sgt i64 %566, 0
  %568 = zext i1 %567 to i8
  %569 = trunc i8 %568 to i1
  br i1 %569, label %if.then74, label %if.done75

if.then74:                                        ; preds = %for.index.body73
  %570 = bitcast { i64, i64 }* %94 to %..string*
  store %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$2d8", i64 0, i64 0), i64 2 }, %..string* %570, align 8
  %571 = load { i64, i64 }, { i64, i64 }* %94, align 8
  %572 = call { i64, i64 } @runtime.print_string({ i64, i64 } %571)
  br label %if.done75

if.done75:                                        ; preds = %if.then74, %for.index.body73
  %573 = load %runtime.Type_Info*, %runtime.Type_Info** %92, align 8
  call void @runtime.print_type(%runtime.Type_Info* %573)
  br label %for.index.loop72

for.index.done76:                                 ; preds = %for.index.loop72
  %574 = bitcast { i64, i64 }* %95 to %..string*
  store %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$2e8", i64 0, i64 0), i64 1 }, %..string* %574, align 8
  %575 = load { i64, i64 }, { i64, i64 }* %95, align 8
  %576 = call { i64, i64 } @runtime.print_string({ i64, i64 } %575)
  br label %typeswitch.done92

typeswitch.body77:                                ; preds = %if.done
  %577 = bitcast i8* %138 to %runtime.Type_Info_Enum*
  %578 = load %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %577, align 8
  store %runtime.Type_Info_Enum %578, %runtime.Type_Info_Enum* %96, align 8
  %579 = bitcast { i64, i64 }* %97 to %..string*
  store %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$2e9", i64 0, i64 0), i64 5 }, %..string* %579, align 8
  %580 = load { i64, i64 }, { i64, i64 }* %97, align 8
  %581 = call { i64, i64 } @runtime.print_string({ i64, i64 } %580)
  %582 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %96, i32 0, i32 0
  %583 = load %runtime.Type_Info*, %runtime.Type_Info** %582, align 8
  call void @runtime.print_type(%runtime.Type_Info* %583)
  %584 = bitcast { i64, i64 }* %98 to %..string*
  store %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$2ea", i64 0, i64 0), i64 2 }, %..string* %584, align 8
  %585 = load { i64, i64 }, { i64, i64 }* %98, align 8
  %586 = call { i64, i64 } @runtime.print_string({ i64, i64 } %585)
  %587 = bitcast %..string* %99 to i8*
  call void @llvm.memset.p0i8.i64(i8* %587, i8 0, i64 16, i1 false)
  store i64 0, i64* %100, align 8
  %588 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %96, i32 0, i32 1
  %589 = load { %..string*, i64 }, { %..string*, i64 }* %588, align 8
  %590 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %588, i32 0, i32 1
  %591 = load i64, i64* %590, align 8
  store i64 %591, i64* %101, align 8
  store i64 -1, i64* %102, align 8
  br label %for.index.loop78

for.index.loop78:                                 ; preds = %if.done81, %typeswitch.body77
  %592 = load i64, i64* %102, align 8
  %593 = add i64 %592, 1
  store i64 %593, i64* %102, align 8
  %594 = load i64, i64* %101, align 8
  %595 = icmp slt i64 %593, %594
  br i1 %595, label %for.index.body79, label %for.index.done82

for.index.body79:                                 ; preds = %for.index.loop78
  %596 = load i64, i64* %102, align 8
  %597 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %588, i32 0, i32 0
  %598 = load %..string*, %..string** %597, align 8
  %599 = getelementptr %..string, %..string* %598, i64 %596
  %600 = load %..string, %..string* %599, align 8
  store %..string %600, %..string* %103, align 8
  store i64 %596, i64* %104, align 8
  %601 = load i64, i64* %104, align 8
  %602 = icmp sgt i64 %601, 0
  %603 = zext i1 %602 to i8
  %604 = trunc i8 %603 to i1
  br i1 %604, label %if.then80, label %if.done81

if.then80:                                        ; preds = %for.index.body79
  %605 = bitcast { i64, i64 }* %105 to %..string*
  store %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$2d8", i64 0, i64 0), i64 2 }, %..string* %605, align 8
  %606 = load { i64, i64 }, { i64, i64 }* %105, align 8
  %607 = call { i64, i64 } @runtime.print_string({ i64, i64 } %606)
  br label %if.done81

if.done81:                                        ; preds = %if.then80, %for.index.body79
  %608 = load %..string, %..string* %103, align 8
  %609 = bitcast %..string* %103 to { i64, i64 }*
  %610 = load { i64, i64 }, { i64, i64 }* %609, align 8
  %611 = call { i64, i64 } @runtime.print_string({ i64, i64 } %610)
  br label %for.index.loop78

for.index.done82:                                 ; preds = %for.index.loop78
  %612 = bitcast { i64, i64 }* %106 to %..string*
  store %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$2e8", i64 0, i64 0), i64 1 }, %..string* %612, align 8
  %613 = load { i64, i64 }, { i64, i64 }* %106, align 8
  %614 = call { i64, i64 } @runtime.print_string({ i64, i64 } %613)
  br label %typeswitch.done92

typeswitch.body83:                                ; preds = %if.done
  %615 = bitcast i8* %138 to %runtime.Type_Info_Bit_Set*
  %616 = load %runtime.Type_Info_Bit_Set, %runtime.Type_Info_Bit_Set* %615, align 8
  store %runtime.Type_Info_Bit_Set %616, %runtime.Type_Info_Bit_Set* %107, align 8
  %617 = bitcast { i64, i64 }* %108 to %..string*
  store %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$2eb", i64 0, i64 0), i64 8 }, %..string* %617, align 8
  %618 = load { i64, i64 }, { i64, i64 }* %108, align 8
  %619 = call { i64, i64 } @runtime.print_string({ i64, i64 } %618)
  %620 = getelementptr inbounds %runtime.Type_Info_Bit_Set, %runtime.Type_Info_Bit_Set* %107, i32 0, i32 0
  %621 = load %runtime.Type_Info*, %runtime.Type_Info** %620, align 8
  %622 = call %runtime.Type_Info* @runtime.type_info_base(%runtime.Type_Info* %621)
  store %runtime.Type_Info* %622, %runtime.Type_Info** %109, align 8
  %623 = load %runtime.Type_Info*, %runtime.Type_Info** %109, align 8
  %624 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %623, i32 0, i32 5
  %625 = load { [15 x i64], i64 }, { [15 x i64], i64 }* %624, align 8
  %626 = bitcast { [15 x i64], i64 }* %624 to i8*
  %627 = getelementptr inbounds { [15 x i64], i64 }, { [15 x i64], i64 }* %624, i32 0, i32 1
  %628 = load i64, i64* %627, align 8
  switch i64 %628, label %typeswitch.default.body [
    i64 21, label %typeswitch.body84
    i64 3, label %typeswitch.body85
  ]

typeswitch.body84:                                ; preds = %typeswitch.body83
  %629 = bitcast i8* %626 to %runtime.Type_Info_Enum*
  %630 = load %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %629, align 8
  store %runtime.Type_Info_Enum %630, %runtime.Type_Info_Enum* %110, align 8
  %631 = getelementptr inbounds %runtime.Type_Info_Bit_Set, %runtime.Type_Info_Bit_Set* %107, i32 0, i32 0
  %632 = load %runtime.Type_Info*, %runtime.Type_Info** %631, align 8
  call void @runtime.print_type(%runtime.Type_Info* %632)
  br label %typeswitch.done

typeswitch.body85:                                ; preds = %typeswitch.body83
  %633 = bitcast i8* %626 to %runtime.Type_Info_Rune*
  %634 = load %runtime.Type_Info_Rune, %runtime.Type_Info_Rune* %633, align 1
  store %runtime.Type_Info_Rune %634, %runtime.Type_Info_Rune* %111, align 1
  %635 = getelementptr inbounds %runtime.Type_Info_Bit_Set, %runtime.Type_Info_Bit_Set* %107, i32 0, i32 2
  %636 = load i64, i64* %635, align 8
  %637 = trunc i64 %636 to i32
  call void @runtime.print_encoded_rune(i32 %637)
  %638 = bitcast { i64, i64 }* %112 to %..string*
  store %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$2ec", i64 0, i64 0), i64 2 }, %..string* %638, align 8
  %639 = load { i64, i64 }, { i64, i64 }* %112, align 8
  %640 = call { i64, i64 } @runtime.print_string({ i64, i64 } %639)
  %641 = getelementptr inbounds %runtime.Type_Info_Bit_Set, %runtime.Type_Info_Bit_Set* %107, i32 0, i32 3
  %642 = load i64, i64* %641, align 8
  %643 = trunc i64 %642 to i32
  call void @runtime.print_encoded_rune(i32 %643)
  br label %typeswitch.done

typeswitch.default.body:                          ; preds = %typeswitch.body83
  %644 = bitcast { [15 x i64], i64 }* %113 to i8*
  %645 = bitcast { [15 x i64], i64 }* %624 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %644, i8* align 1 %645, i64 128, i1 false)
  %646 = getelementptr inbounds %runtime.Type_Info_Bit_Set, %runtime.Type_Info_Bit_Set* %107, i32 0, i32 2
  %647 = load i64, i64* %646, align 8
  call void @runtime.print_i64(i64 %647)
  %648 = bitcast { i64, i64 }* %114 to %..string*
  store %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$2ec", i64 0, i64 0), i64 2 }, %..string* %648, align 8
  %649 = load { i64, i64 }, { i64, i64 }* %114, align 8
  %650 = call { i64, i64 } @runtime.print_string({ i64, i64 } %649)
  %651 = getelementptr inbounds %runtime.Type_Info_Bit_Set, %runtime.Type_Info_Bit_Set* %107, i32 0, i32 3
  %652 = load i64, i64* %651, align 8
  call void @runtime.print_i64(i64 %652)
  br label %typeswitch.done

typeswitch.done:                                  ; preds = %typeswitch.default.body, %typeswitch.body85, %typeswitch.body84
  %653 = getelementptr inbounds %runtime.Type_Info_Bit_Set, %runtime.Type_Info_Bit_Set* %107, i32 0, i32 1
  %654 = load %runtime.Type_Info*, %runtime.Type_Info** %653, align 8
  %655 = icmp ne %runtime.Type_Info* %654, null
  %656 = zext i1 %655 to i8
  %657 = trunc i8 %656 to i1
  br i1 %657, label %if.then86, label %if.done87

if.then86:                                        ; preds = %typeswitch.done
  %658 = bitcast { i64, i64 }* %115 to %..string*
  store %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$2ed", i64 0, i64 0), i64 2 }, %..string* %658, align 8
  %659 = load { i64, i64 }, { i64, i64 }* %115, align 8
  %660 = call { i64, i64 } @runtime.print_string({ i64, i64 } %659)
  %661 = getelementptr inbounds %runtime.Type_Info_Bit_Set, %runtime.Type_Info_Bit_Set* %107, i32 0, i32 1
  %662 = load %runtime.Type_Info*, %runtime.Type_Info** %661, align 8
  call void @runtime.print_type(%runtime.Type_Info* %662)
  br label %if.done87

if.done87:                                        ; preds = %if.then86, %typeswitch.done
  %663 = call { i64, i64 } @runtime.print_byte(i8 93)
  br label %typeswitch.done92

typeswitch.body88:                                ; preds = %if.done
  %664 = bitcast i8* %138 to %runtime.Type_Info_Simd_Vector*
  %665 = load %runtime.Type_Info_Simd_Vector, %runtime.Type_Info_Simd_Vector* %664, align 8
  store %runtime.Type_Info_Simd_Vector %665, %runtime.Type_Info_Simd_Vector* %116, align 8
  %666 = bitcast { i64, i64 }* %117 to %..string*
  store %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$2ee", i64 0, i64 0), i64 6 }, %..string* %666, align 8
  %667 = load { i64, i64 }, { i64, i64 }* %117, align 8
  %668 = call { i64, i64 } @runtime.print_string({ i64, i64 } %667)
  %669 = getelementptr inbounds %runtime.Type_Info_Simd_Vector, %runtime.Type_Info_Simd_Vector* %116, i32 0, i32 2
  %670 = load i64, i64* %669, align 8
  call void @runtime.print_u64(i64 %670)
  %671 = call { i64, i64 } @runtime.print_byte(i8 93)
  %672 = getelementptr inbounds %runtime.Type_Info_Simd_Vector, %runtime.Type_Info_Simd_Vector* %116, i32 0, i32 0
  %673 = load %runtime.Type_Info*, %runtime.Type_Info** %672, align 8
  call void @runtime.print_type(%runtime.Type_Info* %673)
  br label %typeswitch.done92

typeswitch.body89:                                ; preds = %if.done
  %674 = bitcast i8* %138 to %runtime.Type_Info_Relative_Pointer*
  %675 = load %runtime.Type_Info_Relative_Pointer, %runtime.Type_Info_Relative_Pointer* %674, align 8
  store %runtime.Type_Info_Relative_Pointer %675, %runtime.Type_Info_Relative_Pointer* %118, align 8
  %676 = bitcast { i64, i64 }* %119 to %..string*
  store %..string { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"csbs$2ef", i64 0, i64 0), i64 10 }, %..string* %676, align 8
  %677 = load { i64, i64 }, { i64, i64 }* %119, align 8
  %678 = call { i64, i64 } @runtime.print_string({ i64, i64 } %677)
  %679 = getelementptr inbounds %runtime.Type_Info_Relative_Pointer, %runtime.Type_Info_Relative_Pointer* %118, i32 0, i32 1
  %680 = load %runtime.Type_Info*, %runtime.Type_Info** %679, align 8
  call void @runtime.print_type(%runtime.Type_Info* %680)
  %681 = bitcast { i64, i64 }* %120 to %..string*
  store %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$2f0", i64 0, i64 0), i64 2 }, %..string* %681, align 8
  %682 = load { i64, i64 }, { i64, i64 }* %120, align 8
  %683 = call { i64, i64 } @runtime.print_string({ i64, i64 } %682)
  %684 = getelementptr inbounds %runtime.Type_Info_Relative_Pointer, %runtime.Type_Info_Relative_Pointer* %118, i32 0, i32 0
  %685 = load %runtime.Type_Info*, %runtime.Type_Info** %684, align 8
  call void @runtime.print_type(%runtime.Type_Info* %685)
  br label %typeswitch.done92

typeswitch.body90:                                ; preds = %if.done
  %686 = bitcast i8* %138 to %runtime.Type_Info_Relative_Slice*
  %687 = load %runtime.Type_Info_Relative_Slice, %runtime.Type_Info_Relative_Slice* %686, align 8
  store %runtime.Type_Info_Relative_Slice %687, %runtime.Type_Info_Relative_Slice* %121, align 8
  %688 = bitcast { i64, i64 }* %122 to %..string*
  store %..string { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"csbs$2ef", i64 0, i64 0), i64 10 }, %..string* %688, align 8
  %689 = load { i64, i64 }, { i64, i64 }* %122, align 8
  %690 = call { i64, i64 } @runtime.print_string({ i64, i64 } %689)
  %691 = getelementptr inbounds %runtime.Type_Info_Relative_Slice, %runtime.Type_Info_Relative_Slice* %121, i32 0, i32 1
  %692 = load %runtime.Type_Info*, %runtime.Type_Info** %691, align 8
  call void @runtime.print_type(%runtime.Type_Info* %692)
  %693 = bitcast { i64, i64 }* %123 to %..string*
  store %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$2f0", i64 0, i64 0), i64 2 }, %..string* %693, align 8
  %694 = load { i64, i64 }, { i64, i64 }* %123, align 8
  %695 = call { i64, i64 } @runtime.print_string({ i64, i64 } %694)
  %696 = getelementptr inbounds %runtime.Type_Info_Relative_Slice, %runtime.Type_Info_Relative_Slice* %121, i32 0, i32 0
  %697 = load %runtime.Type_Info*, %runtime.Type_Info** %696, align 8
  call void @runtime.print_type(%runtime.Type_Info* %697)
  br label %typeswitch.done92

typeswitch.body91:                                ; preds = %if.done
  %698 = bitcast i8* %138 to %runtime.Type_Info_Matrix*
  %699 = load %runtime.Type_Info_Matrix, %runtime.Type_Info_Matrix* %698, align 8
  store %runtime.Type_Info_Matrix %699, %runtime.Type_Info_Matrix* %124, align 8
  %700 = bitcast { i64, i64 }* %125 to %..string*
  store %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$2f1", i64 0, i64 0), i64 7 }, %..string* %700, align 8
  %701 = load { i64, i64 }, { i64, i64 }* %125, align 8
  %702 = call { i64, i64 } @runtime.print_string({ i64, i64 } %701)
  %703 = getelementptr inbounds %runtime.Type_Info_Matrix, %runtime.Type_Info_Matrix* %124, i32 0, i32 3
  %704 = load i64, i64* %703, align 8
  call void @runtime.print_u64(i64 %704)
  %705 = bitcast { i64, i64 }* %126 to %..string*
  store %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$2d8", i64 0, i64 0), i64 2 }, %..string* %705, align 8
  %706 = load { i64, i64 }, { i64, i64 }* %126, align 8
  %707 = call { i64, i64 } @runtime.print_string({ i64, i64 } %706)
  %708 = getelementptr inbounds %runtime.Type_Info_Matrix, %runtime.Type_Info_Matrix* %124, i32 0, i32 4
  %709 = load i64, i64* %708, align 8
  call void @runtime.print_u64(i64 %709)
  %710 = bitcast { i64, i64 }* %127 to %..string*
  store %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$2f2", i64 0, i64 0), i64 1 }, %..string* %710, align 8
  %711 = load { i64, i64 }, { i64, i64 }* %127, align 8
  %712 = call { i64, i64 } @runtime.print_string({ i64, i64 } %711)
  %713 = getelementptr inbounds %runtime.Type_Info_Matrix, %runtime.Type_Info_Matrix* %124, i32 0, i32 0
  %714 = load %runtime.Type_Info*, %runtime.Type_Info** %713, align 8
  call void @runtime.print_type(%runtime.Type_Info* %714)
  br label %typeswitch.done92

typeswitch.done92:                                ; preds = %typeswitch.body91, %typeswitch.body90, %typeswitch.body89, %typeswitch.body88, %if.done87, %for.index.done82, %for.index.done76, %for.index.done66, %typeswitch.body49, %typeswitch.body48, %typeswitch.body47, %if.done46, %typeswitch.body43, %if.done42, %if.done30, %typeswitch.body22, %typeswitch.body21, %if.done20, %typeswitch.body16, %typeswitch.body15, %switch.done14, %typeswitch.body10, %typeswitch.body9, %typeswitch.body8, %typeswitch.body7, %typeswitch.body6, %switch.done, %typeswitch.body, %if.done
  ret void
}

define internal i128 @runtime.udivmod128(i128 %0, i128 %1, i128* %2) {
decls:
  %3 = alloca i128, align 8
  %4 = alloca i128, align 8
  %5 = alloca i128*, align 8
  %6 = alloca [2 x i64], align 8
  %7 = alloca [2 x i64], align 8
  %8 = alloca [2 x i64], align 8
  %9 = alloca [2 x i64], align 8
  %10 = alloca i32, align 4
  %11 = alloca i64, align 8
  %12 = alloca i32, align 4
  %13 = alloca i128, align 8
  %14 = alloca i128, align 8
  %15 = alloca i128, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i128 %0, i128* %3, align 8
  store i128 %1, i128* %4, align 8
  store i128* %2, i128** %5, align 8
  %16 = load i128, i128* %3, align 8
  %17 = bitcast i128* %3 to [2 x i64]*
  %18 = load [2 x i64], [2 x i64]* %17, align 8
  store [2 x i64] %18, [2 x i64]* %6, align 8
  %19 = load i128, i128* %4, align 8
  %20 = bitcast i128* %4 to [2 x i64]*
  %21 = load [2 x i64], [2 x i64]* %20, align 8
  store [2 x i64] %21, [2 x i64]* %7, align 8
  %22 = bitcast [2 x i64]* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* %22, i8 0, i64 16, i1 false)
  %23 = bitcast [2 x i64]* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* %23, i8 0, i64 16, i1 false)
  store i32 0, i32* %10, align 4
  %24 = getelementptr [2 x i64], [2 x i64]* %6, i64 0, i64 1
  %25 = load i64, i64* %24, align 8
  %26 = icmp eq i64 %25, 0
  %27 = zext i1 %26 to i8
  %28 = trunc i8 %27 to i1
  br i1 %28, label %if.then, label %if.done6

if.then:                                          ; preds = %entry
  %29 = getelementptr [2 x i64], [2 x i64]* %7, i64 0, i64 1
  %30 = load i64, i64* %29, align 8
  %31 = icmp eq i64 %30, 0
  %32 = zext i1 %31 to i8
  %33 = trunc i8 %32 to i1
  br i1 %33, label %if.then1, label %if.done3

if.then1:                                         ; preds = %if.then
  %34 = load i128*, i128** %5, align 8
  %35 = icmp ne i128* %34, null
  %36 = zext i1 %35 to i8
  %37 = trunc i8 %36 to i1
  br i1 %37, label %if.then2, label %if.done

if.then2:                                         ; preds = %if.then1
  %38 = getelementptr [2 x i64], [2 x i64]* %6, i64 0, i64 0
  %39 = load i64, i64* %38, align 8
  %40 = getelementptr [2 x i64], [2 x i64]* %7, i64 0, i64 0
  %41 = load i64, i64* %40, align 8
  %42 = urem i64 %39, %41
  store i64 %42, i64* %11, align 8
  %43 = load i128*, i128** %5, align 8
  %44 = load i64, i64* %11, align 8
  %45 = zext i64 %44 to i128
  store i128 %45, i128* %43, align 8
  br label %if.done

if.done:                                          ; preds = %if.then2, %if.then1
  %46 = getelementptr [2 x i64], [2 x i64]* %6, i64 0, i64 0
  %47 = load i64, i64* %46, align 8
  %48 = getelementptr [2 x i64], [2 x i64]* %7, i64 0, i64 0
  %49 = load i64, i64* %48, align 8
  %50 = udiv i64 %47, %49
  %51 = zext i64 %50 to i128
  ret i128 %51

if.done3:                                         ; preds = %if.then
  %52 = load i128*, i128** %5, align 8
  %53 = icmp ne i128* %52, null
  %54 = zext i1 %53 to i8
  %55 = trunc i8 %54 to i1
  br i1 %55, label %if.then4, label %if.done5

if.then4:                                         ; preds = %if.done3
  %56 = load i128*, i128** %5, align 8
  %57 = getelementptr [2 x i64], [2 x i64]* %6, i64 0, i64 0
  %58 = load i64, i64* %57, align 8
  %59 = zext i64 %58 to i128
  store i128 %59, i128* %56, align 8
  br label %if.done5

if.done5:                                         ; preds = %if.then4, %if.done3
  ret i128 0

if.done6:                                         ; preds = %entry
  %60 = getelementptr [2 x i64], [2 x i64]* %7, i64 0, i64 0
  %61 = load i64, i64* %60, align 8
  %62 = icmp eq i64 %61, 0
  %63 = zext i1 %62 to i8
  %64 = trunc i8 %63 to i1
  br i1 %64, label %if.then7, label %if.else

if.then7:                                         ; preds = %if.done6
  %65 = getelementptr [2 x i64], [2 x i64]* %7, i64 0, i64 1
  %66 = load i64, i64* %65, align 8
  %67 = icmp eq i64 %66, 0
  %68 = zext i1 %67 to i8
  %69 = trunc i8 %68 to i1
  br i1 %69, label %if.then8, label %if.done11

if.then8:                                         ; preds = %if.then7
  %70 = load i128*, i128** %5, align 8
  %71 = icmp ne i128* %70, null
  %72 = zext i1 %71 to i8
  %73 = trunc i8 %72 to i1
  br i1 %73, label %if.then9, label %if.done10

if.then9:                                         ; preds = %if.then8
  %74 = load i128*, i128** %5, align 8
  %75 = getelementptr [2 x i64], [2 x i64]* %6, i64 0, i64 1
  %76 = load i64, i64* %75, align 8
  %77 = getelementptr [2 x i64], [2 x i64]* %7, i64 0, i64 0
  %78 = load i64, i64* %77, align 8
  %79 = urem i64 %76, %78
  %80 = zext i64 %79 to i128
  store i128 %80, i128* %74, align 8
  br label %if.done10

if.done10:                                        ; preds = %if.then9, %if.then8
  %81 = getelementptr [2 x i64], [2 x i64]* %6, i64 0, i64 1
  %82 = load i64, i64* %81, align 8
  %83 = getelementptr [2 x i64], [2 x i64]* %7, i64 0, i64 0
  %84 = load i64, i64* %83, align 8
  %85 = udiv i64 %82, %84
  %86 = zext i64 %85 to i128
  ret i128 %86

if.done11:                                        ; preds = %if.then7
  %87 = getelementptr [2 x i64], [2 x i64]* %6, i64 0, i64 0
  %88 = load i64, i64* %87, align 8
  %89 = icmp eq i64 %88, 0
  %90 = zext i1 %89 to i8
  %91 = trunc i8 %90 to i1
  br i1 %91, label %if.then12, label %if.done15

if.then12:                                        ; preds = %if.done11
  %92 = load i128*, i128** %5, align 8
  %93 = icmp ne i128* %92, null
  %94 = zext i1 %93 to i8
  %95 = trunc i8 %94 to i1
  br i1 %95, label %if.then13, label %if.done14

if.then13:                                        ; preds = %if.then12
  %96 = getelementptr [2 x i64], [2 x i64]* %9, i64 0, i64 1
  %97 = getelementptr [2 x i64], [2 x i64]* %6, i64 0, i64 1
  %98 = load i64, i64* %97, align 8
  %99 = getelementptr [2 x i64], [2 x i64]* %7, i64 0, i64 1
  %100 = load i64, i64* %99, align 8
  %101 = urem i64 %98, %100
  store i64 %101, i64* %96, align 8
  %102 = getelementptr [2 x i64], [2 x i64]* %9, i64 0, i64 0
  store i64 0, i64* %102, align 8
  %103 = load i128*, i128** %5, align 8
  %104 = load [2 x i64], [2 x i64]* %9, align 8
  %105 = bitcast [2 x i64]* %9 to i128*
  %106 = load i128, i128* %105, align 8
  store i128 %106, i128* %103, align 8
  br label %if.done14

if.done14:                                        ; preds = %if.then13, %if.then12
  %107 = getelementptr [2 x i64], [2 x i64]* %6, i64 0, i64 1
  %108 = load i64, i64* %107, align 8
  %109 = getelementptr [2 x i64], [2 x i64]* %7, i64 0, i64 1
  %110 = load i64, i64* %109, align 8
  %111 = udiv i64 %108, %110
  %112 = zext i64 %111 to i128
  ret i128 %112

if.done15:                                        ; preds = %if.done11
  %113 = getelementptr [2 x i64], [2 x i64]* %7, i64 0, i64 1
  %114 = load i64, i64* %113, align 8
  %115 = getelementptr [2 x i64], [2 x i64]* %7, i64 0, i64 1
  %116 = load i64, i64* %115, align 8
  %117 = sub i64 %116, 1
  %118 = and i64 %114, %117
  %119 = icmp eq i64 %118, 0
  %120 = zext i1 %119 to i8
  %121 = trunc i8 %120 to i1
  br i1 %121, label %if.then16, label %if.done19

if.then16:                                        ; preds = %if.done15
  %122 = load i128*, i128** %5, align 8
  %123 = icmp ne i128* %122, null
  %124 = zext i1 %123 to i8
  %125 = trunc i8 %124 to i1
  br i1 %125, label %if.then17, label %if.done18

if.then17:                                        ; preds = %if.then16
  %126 = getelementptr [2 x i64], [2 x i64]* %9, i64 0, i64 0
  %127 = getelementptr [2 x i64], [2 x i64]* %6, i64 0, i64 0
  %128 = load i64, i64* %127, align 8
  store i64 %128, i64* %126, align 8
  %129 = getelementptr [2 x i64], [2 x i64]* %9, i64 0, i64 1
  %130 = getelementptr [2 x i64], [2 x i64]* %6, i64 0, i64 1
  %131 = load i64, i64* %130, align 8
  %132 = getelementptr [2 x i64], [2 x i64]* %7, i64 0, i64 1
  %133 = load i64, i64* %132, align 8
  %134 = sub i64 %133, 1
  %135 = and i64 %131, %134
  store i64 %135, i64* %129, align 8
  %136 = load i128*, i128** %5, align 8
  %137 = load [2 x i64], [2 x i64]* %9, align 8
  %138 = bitcast [2 x i64]* %9 to i128*
  %139 = load i128, i128* %138, align 8
  store i128 %139, i128* %136, align 8
  br label %if.done18

if.done18:                                        ; preds = %if.then17, %if.then16
  %140 = getelementptr [2 x i64], [2 x i64]* %6, i64 0, i64 1
  %141 = load i64, i64* %140, align 8
  %142 = getelementptr [2 x i64], [2 x i64]* %7, i64 0, i64 1
  %143 = load i64, i64* %142, align 8
  %144 = call i64 @llvm.cttz.i64(i64 %143, i1 false)
  %145 = icmp ult i64 %144, 64
  %146 = lshr i64 %141, %144
  %147 = select i1 %145, i64 %146, i64 0
  %148 = zext i64 %147 to i128
  ret i128 %148

if.done19:                                        ; preds = %if.done15
  %149 = getelementptr [2 x i64], [2 x i64]* %7, i64 0, i64 1
  %150 = load i64, i64* %149, align 8
  %151 = call i64 @llvm.ctlz.i64(i64 %150, i1 false)
  %152 = trunc i64 %151 to i32
  %153 = getelementptr [2 x i64], [2 x i64]* %6, i64 0, i64 1
  %154 = load i64, i64* %153, align 8
  %155 = call i64 @llvm.ctlz.i64(i64 %154, i1 false)
  %156 = trunc i64 %155 to i32
  %157 = sub i32 %152, %156
  store i32 %157, i32* %10, align 4
  %158 = load i32, i32* %10, align 4
  %159 = icmp ugt i32 %158, 62
  %160 = zext i1 %159 to i8
  %161 = trunc i8 %160 to i1
  br i1 %161, label %if.then20, label %if.done23

if.then20:                                        ; preds = %if.done19
  %162 = load i128*, i128** %5, align 8
  %163 = icmp ne i128* %162, null
  %164 = zext i1 %163 to i8
  %165 = trunc i8 %164 to i1
  br i1 %165, label %if.then21, label %if.done22

if.then21:                                        ; preds = %if.then20
  %166 = load i128*, i128** %5, align 8
  %167 = load i128, i128* %3, align 8
  store i128 %167, i128* %166, align 8
  br label %if.done22

if.done22:                                        ; preds = %if.then21, %if.then20
  ret i128 0

if.done23:                                        ; preds = %if.done19
  %168 = load i32, i32* %10, align 4
  %169 = add i32 %168, 1
  store i32 %169, i32* %10, align 4
  %170 = getelementptr [2 x i64], [2 x i64]* %8, i64 0, i64 0
  store i64 0, i64* %170, align 8
  %171 = getelementptr [2 x i64], [2 x i64]* %8, i64 0, i64 1
  %172 = getelementptr [2 x i64], [2 x i64]* %6, i64 0, i64 0
  %173 = load i64, i64* %172, align 8
  %174 = load i32, i32* %10, align 4
  %175 = sub i32 64, %174
  %176 = zext i32 %175 to i64
  %177 = icmp ult i64 %176, 64
  %178 = shl i64 %173, %176
  %179 = select i1 %177, i64 %178, i64 0
  store i64 %179, i64* %171, align 8
  %180 = getelementptr [2 x i64], [2 x i64]* %9, i64 0, i64 1
  %181 = getelementptr [2 x i64], [2 x i64]* %6, i64 0, i64 1
  %182 = load i64, i64* %181, align 8
  %183 = load i32, i32* %10, align 4
  %184 = zext i32 %183 to i64
  %185 = icmp ult i64 %184, 64
  %186 = lshr i64 %182, %184
  %187 = select i1 %185, i64 %186, i64 0
  store i64 %187, i64* %180, align 8
  %188 = getelementptr [2 x i64], [2 x i64]* %9, i64 0, i64 0
  %189 = getelementptr [2 x i64], [2 x i64]* %6, i64 0, i64 1
  %190 = load i64, i64* %189, align 8
  %191 = load i32, i32* %10, align 4
  %192 = sub i32 64, %191
  %193 = zext i32 %192 to i64
  %194 = icmp ult i64 %193, 64
  %195 = shl i64 %190, %193
  %196 = select i1 %194, i64 %195, i64 0
  %197 = getelementptr [2 x i64], [2 x i64]* %6, i64 0, i64 0
  %198 = load i64, i64* %197, align 8
  %199 = load i32, i32* %10, align 4
  %200 = zext i32 %199 to i64
  %201 = icmp ult i64 %200, 64
  %202 = lshr i64 %198, %200
  %203 = select i1 %201, i64 %202, i64 0
  %204 = or i64 %196, %203
  store i64 %204, i64* %188, align 8
  br label %if.done42

if.else:                                          ; preds = %if.done6
  %205 = getelementptr [2 x i64], [2 x i64]* %7, i64 0, i64 1
  %206 = load i64, i64* %205, align 8
  %207 = icmp eq i64 %206, 0
  %208 = zext i1 %207 to i8
  %209 = trunc i8 %208 to i1
  br i1 %209, label %if.then24, label %if.else33

if.then24:                                        ; preds = %if.else
  %210 = getelementptr [2 x i64], [2 x i64]* %7, i64 0, i64 0
  %211 = load i64, i64* %210, align 8
  %212 = getelementptr [2 x i64], [2 x i64]* %7, i64 0, i64 0
  %213 = load i64, i64* %212, align 8
  %214 = sub i64 %213, 1
  %215 = and i64 %211, %214
  %216 = icmp eq i64 %215, 0
  %217 = zext i1 %216 to i8
  %218 = trunc i8 %217 to i1
  br i1 %218, label %if.then25, label %if.done30

if.then25:                                        ; preds = %if.then24
  %219 = load i128*, i128** %5, align 8
  %220 = icmp ne i128* %219, null
  %221 = zext i1 %220 to i8
  %222 = trunc i8 %221 to i1
  br i1 %222, label %if.then26, label %if.done27

if.then26:                                        ; preds = %if.then25
  %223 = load i128*, i128** %5, align 8
  %224 = getelementptr [2 x i64], [2 x i64]* %6, i64 0, i64 0
  %225 = load i64, i64* %224, align 8
  %226 = getelementptr [2 x i64], [2 x i64]* %7, i64 0, i64 0
  %227 = load i64, i64* %226, align 8
  %228 = sub i64 %227, 1
  %229 = and i64 %225, %228
  %230 = zext i64 %229 to i128
  store i128 %230, i128* %223, align 8
  br label %if.done27

if.done27:                                        ; preds = %if.then26, %if.then25
  %231 = getelementptr [2 x i64], [2 x i64]* %7, i64 0, i64 0
  %232 = load i64, i64* %231, align 8
  %233 = icmp eq i64 %232, 1
  %234 = zext i1 %233 to i8
  %235 = trunc i8 %234 to i1
  br i1 %235, label %if.then28, label %if.done29

if.then28:                                        ; preds = %if.done27
  %236 = load i128, i128* %3, align 8
  ret i128 %236

if.done29:                                        ; preds = %if.done27
  %237 = getelementptr [2 x i64], [2 x i64]* %7, i64 0, i64 0
  %238 = load i64, i64* %237, align 8
  %239 = call i64 @llvm.cttz.i64(i64 %238, i1 false)
  %240 = trunc i64 %239 to i32
  store i32 %240, i32* %10, align 4
  %241 = getelementptr [2 x i64], [2 x i64]* %8, i64 0, i64 1
  %242 = getelementptr [2 x i64], [2 x i64]* %6, i64 0, i64 1
  %243 = load i64, i64* %242, align 8
  %244 = load i32, i32* %10, align 4
  %245 = zext i32 %244 to i64
  %246 = icmp ult i64 %245, 64
  %247 = lshr i64 %243, %245
  %248 = select i1 %246, i64 %247, i64 0
  store i64 %248, i64* %241, align 8
  %249 = getelementptr [2 x i64], [2 x i64]* %8, i64 0, i64 0
  %250 = getelementptr [2 x i64], [2 x i64]* %6, i64 0, i64 1
  %251 = load i64, i64* %250, align 8
  %252 = load i32, i32* %10, align 4
  %253 = sub i32 64, %252
  %254 = zext i32 %253 to i64
  %255 = icmp ult i64 %254, 64
  %256 = shl i64 %251, %254
  %257 = select i1 %255, i64 %256, i64 0
  %258 = getelementptr [2 x i64], [2 x i64]* %6, i64 0, i64 0
  %259 = load i64, i64* %258, align 8
  %260 = load i32, i32* %10, align 4
  %261 = zext i32 %260 to i64
  %262 = icmp ult i64 %261, 64
  %263 = lshr i64 %259, %261
  %264 = select i1 %262, i64 %263, i64 0
  %265 = or i64 %257, %264
  store i64 %265, i64* %249, align 8
  %266 = load [2 x i64], [2 x i64]* %8, align 8
  %267 = bitcast [2 x i64]* %8 to i128*
  %268 = load i128, i128* %267, align 8
  ret i128 %268

if.done30:                                        ; preds = %if.then24
  %269 = getelementptr [2 x i64], [2 x i64]* %7, i64 0, i64 0
  %270 = load i64, i64* %269, align 8
  %271 = call i64 @llvm.ctlz.i64(i64 %270, i1 false)
  %272 = trunc i64 %271 to i32
  %273 = add i32 65, %272
  %274 = getelementptr [2 x i64], [2 x i64]* %6, i64 0, i64 1
  %275 = load i64, i64* %274, align 8
  %276 = call i64 @llvm.ctlz.i64(i64 %275, i1 false)
  %277 = trunc i64 %276 to i32
  %278 = sub i32 %273, %277
  store i32 %278, i32* %10, align 4
  %279 = load i32, i32* %10, align 4
  %280 = icmp eq i32 %279, 64
  %281 = zext i1 %280 to i8
  %282 = icmp eq i8 1, %281
  br i1 %282, label %switch.case.body, label %switch.case.next

switch.case.next:                                 ; preds = %if.done30
  %283 = load i32, i32* %10, align 4
  %284 = icmp ult i32 %283, 64
  %285 = zext i1 %284 to i8
  %286 = icmp eq i8 1, %285
  br i1 %286, label %switch.case.body32, label %switch.case.next31

switch.case.body:                                 ; preds = %if.done30
  %287 = getelementptr [2 x i64], [2 x i64]* %8, i64 0, i64 0
  store i64 0, i64* %287, align 8
  %288 = getelementptr [2 x i64], [2 x i64]* %8, i64 0, i64 1
  %289 = getelementptr [2 x i64], [2 x i64]* %6, i64 0, i64 0
  %290 = load i64, i64* %289, align 8
  store i64 %290, i64* %288, align 8
  %291 = getelementptr [2 x i64], [2 x i64]* %9, i64 0, i64 1
  store i64 0, i64* %291, align 8
  %292 = getelementptr [2 x i64], [2 x i64]* %9, i64 0, i64 0
  %293 = getelementptr [2 x i64], [2 x i64]* %6, i64 0, i64 1
  %294 = load i64, i64* %293, align 8
  store i64 %294, i64* %292, align 8
  br label %switch.done

switch.case.next31:                               ; preds = %switch.case.next
  br label %switch.default.body

switch.case.body32:                               ; preds = %switch.case.next
  %295 = getelementptr [2 x i64], [2 x i64]* %8, i64 0, i64 0
  store i64 0, i64* %295, align 8
  %296 = getelementptr [2 x i64], [2 x i64]* %8, i64 0, i64 1
  %297 = getelementptr [2 x i64], [2 x i64]* %6, i64 0, i64 0
  %298 = load i64, i64* %297, align 8
  %299 = load i32, i32* %10, align 4
  %300 = sub i32 64, %299
  %301 = zext i32 %300 to i64
  %302 = icmp ult i64 %301, 64
  %303 = shl i64 %298, %301
  %304 = select i1 %302, i64 %303, i64 0
  store i64 %304, i64* %296, align 8
  %305 = getelementptr [2 x i64], [2 x i64]* %9, i64 0, i64 1
  %306 = getelementptr [2 x i64], [2 x i64]* %6, i64 0, i64 1
  %307 = load i64, i64* %306, align 8
  %308 = load i32, i32* %10, align 4
  %309 = zext i32 %308 to i64
  %310 = icmp ult i64 %309, 64
  %311 = lshr i64 %307, %309
  %312 = select i1 %310, i64 %311, i64 0
  store i64 %312, i64* %305, align 8
  %313 = getelementptr [2 x i64], [2 x i64]* %9, i64 0, i64 0
  %314 = getelementptr [2 x i64], [2 x i64]* %6, i64 0, i64 1
  %315 = load i64, i64* %314, align 8
  %316 = load i32, i32* %10, align 4
  %317 = sub i32 64, %316
  %318 = zext i32 %317 to i64
  %319 = icmp ult i64 %318, 64
  %320 = shl i64 %315, %318
  %321 = select i1 %319, i64 %320, i64 0
  %322 = getelementptr [2 x i64], [2 x i64]* %6, i64 0, i64 0
  %323 = load i64, i64* %322, align 8
  %324 = load i32, i32* %10, align 4
  %325 = zext i32 %324 to i64
  %326 = icmp ult i64 %325, 64
  %327 = lshr i64 %323, %325
  %328 = select i1 %326, i64 %327, i64 0
  %329 = or i64 %321, %328
  store i64 %329, i64* %313, align 8
  br label %switch.done

switch.default.body:                              ; preds = %switch.case.next31
  %330 = getelementptr [2 x i64], [2 x i64]* %8, i64 0, i64 0
  %331 = getelementptr [2 x i64], [2 x i64]* %6, i64 0, i64 0
  %332 = load i64, i64* %331, align 8
  %333 = load i32, i32* %10, align 4
  %334 = sub i32 128, %333
  %335 = zext i32 %334 to i64
  %336 = icmp ult i64 %335, 64
  %337 = shl i64 %332, %335
  %338 = select i1 %336, i64 %337, i64 0
  store i64 %338, i64* %330, align 8
  %339 = getelementptr [2 x i64], [2 x i64]* %8, i64 0, i64 1
  %340 = getelementptr [2 x i64], [2 x i64]* %6, i64 0, i64 1
  %341 = load i64, i64* %340, align 8
  %342 = load i32, i32* %10, align 4
  %343 = sub i32 128, %342
  %344 = zext i32 %343 to i64
  %345 = icmp ult i64 %344, 64
  %346 = shl i64 %341, %344
  %347 = select i1 %345, i64 %346, i64 0
  %348 = getelementptr [2 x i64], [2 x i64]* %6, i64 0, i64 0
  %349 = load i64, i64* %348, align 8
  %350 = load i32, i32* %10, align 4
  %351 = sub i32 %350, 64
  %352 = zext i32 %351 to i64
  %353 = icmp ult i64 %352, 64
  %354 = lshr i64 %349, %352
  %355 = select i1 %353, i64 %354, i64 0
  %356 = or i64 %347, %355
  store i64 %356, i64* %339, align 8
  %357 = getelementptr [2 x i64], [2 x i64]* %9, i64 0, i64 1
  store i64 0, i64* %357, align 8
  %358 = getelementptr [2 x i64], [2 x i64]* %9, i64 0, i64 0
  %359 = getelementptr [2 x i64], [2 x i64]* %6, i64 0, i64 1
  %360 = load i64, i64* %359, align 8
  %361 = load i32, i32* %10, align 4
  %362 = sub i32 %361, 64
  %363 = zext i32 %362 to i64
  %364 = icmp ult i64 %363, 64
  %365 = lshr i64 %360, %363
  %366 = select i1 %364, i64 %365, i64 0
  store i64 %366, i64* %358, align 8
  br label %switch.done

switch.done:                                      ; preds = %switch.default.body, %switch.case.body32, %switch.case.body
  br label %if.done41

if.else33:                                        ; preds = %if.else
  %367 = getelementptr [2 x i64], [2 x i64]* %7, i64 0, i64 1
  %368 = load i64, i64* %367, align 8
  %369 = call i64 @llvm.ctlz.i64(i64 %368, i1 false)
  %370 = trunc i64 %369 to i32
  %371 = getelementptr [2 x i64], [2 x i64]* %6, i64 0, i64 1
  %372 = load i64, i64* %371, align 8
  %373 = call i64 @llvm.ctlz.i64(i64 %372, i1 false)
  %374 = trunc i64 %373 to i32
  %375 = sub i32 %370, %374
  store i32 %375, i32* %10, align 4
  %376 = load i32, i32* %10, align 4
  %377 = icmp ugt i32 %376, 63
  %378 = zext i1 %377 to i8
  %379 = trunc i8 %378 to i1
  br i1 %379, label %if.then34, label %if.done37

if.then34:                                        ; preds = %if.else33
  %380 = load i128*, i128** %5, align 8
  %381 = icmp ne i128* %380, null
  %382 = zext i1 %381 to i8
  %383 = trunc i8 %382 to i1
  br i1 %383, label %if.then35, label %if.done36

if.then35:                                        ; preds = %if.then34
  %384 = load i128*, i128** %5, align 8
  %385 = load i128, i128* %3, align 8
  store i128 %385, i128* %384, align 8
  br label %if.done36

if.done36:                                        ; preds = %if.then35, %if.then34
  ret i128 0

if.done37:                                        ; preds = %if.else33
  %386 = load i32, i32* %10, align 4
  %387 = add i32 %386, 1
  store i32 %387, i32* %10, align 4
  %388 = getelementptr [2 x i64], [2 x i64]* %8, i64 0, i64 0
  store i64 0, i64* %388, align 8
  %389 = load i32, i32* %10, align 4
  %390 = icmp eq i32 %389, 64
  %391 = zext i1 %390 to i8
  %392 = trunc i8 %391 to i1
  br i1 %392, label %if.then38, label %if.else39

if.then38:                                        ; preds = %if.done37
  %393 = getelementptr [2 x i64], [2 x i64]* %8, i64 0, i64 1
  %394 = getelementptr [2 x i64], [2 x i64]* %6, i64 0, i64 0
  %395 = load i64, i64* %394, align 8
  store i64 %395, i64* %393, align 8
  %396 = getelementptr [2 x i64], [2 x i64]* %9, i64 0, i64 1
  store i64 0, i64* %396, align 8
  %397 = getelementptr [2 x i64], [2 x i64]* %9, i64 0, i64 0
  %398 = getelementptr [2 x i64], [2 x i64]* %6, i64 0, i64 1
  %399 = load i64, i64* %398, align 8
  store i64 %399, i64* %397, align 8
  br label %if.done40

if.else39:                                        ; preds = %if.done37
  %400 = getelementptr [2 x i64], [2 x i64]* %9, i64 0, i64 1
  %401 = getelementptr [2 x i64], [2 x i64]* %6, i64 0, i64 1
  %402 = load i64, i64* %401, align 8
  %403 = load i32, i32* %10, align 4
  %404 = zext i32 %403 to i64
  %405 = icmp ult i64 %404, 64
  %406 = lshr i64 %402, %404
  %407 = select i1 %405, i64 %406, i64 0
  store i64 %407, i64* %400, align 8
  %408 = getelementptr [2 x i64], [2 x i64]* %9, i64 0, i64 0
  %409 = getelementptr [2 x i64], [2 x i64]* %6, i64 0, i64 1
  %410 = load i64, i64* %409, align 8
  %411 = load i32, i32* %10, align 4
  %412 = sub i32 64, %411
  %413 = zext i32 %412 to i64
  %414 = icmp ult i64 %413, 64
  %415 = shl i64 %410, %413
  %416 = select i1 %414, i64 %415, i64 0
  %417 = getelementptr [2 x i64], [2 x i64]* %6, i64 0, i64 0
  %418 = load i64, i64* %417, align 8
  %419 = load i32, i32* %10, align 4
  %420 = zext i32 %419 to i64
  %421 = icmp ult i64 %420, 64
  %422 = lshr i64 %418, %420
  %423 = select i1 %421, i64 %422, i64 0
  %424 = or i64 %416, %423
  store i64 %424, i64* %408, align 8
  %425 = getelementptr [2 x i64], [2 x i64]* %8, i64 0, i64 1
  %426 = getelementptr [2 x i64], [2 x i64]* %6, i64 0, i64 0
  %427 = load i64, i64* %426, align 8
  %428 = load i32, i32* %10, align 4
  %429 = sub i32 64, %428
  %430 = zext i32 %429 to i64
  %431 = icmp ult i64 %430, 64
  %432 = shl i64 %427, %430
  %433 = select i1 %431, i64 %432, i64 0
  store i64 %433, i64* %425, align 8
  br label %if.done40

if.done40:                                        ; preds = %if.else39, %if.then38
  br label %if.done41

if.done41:                                        ; preds = %if.done40, %switch.done
  br label %if.done42

if.done42:                                        ; preds = %if.done41, %if.done23
  store i32 0, i32* %12, align 4
  store i128 0, i128* %13, align 8
  br label %for.loop

for.loop:                                         ; preds = %for.post, %if.done42
  %434 = load i32, i32* %10, align 4
  %435 = icmp ugt i32 %434, 0
  %436 = zext i1 %435 to i8
  %437 = trunc i8 %436 to i1
  br i1 %437, label %for.body, label %for.done

for.body:                                         ; preds = %for.loop
  %438 = getelementptr [2 x i64], [2 x i64]* %9, i64 0, i64 1
  %439 = getelementptr [2 x i64], [2 x i64]* %9, i64 0, i64 1
  %440 = load i64, i64* %439, align 8
  %441 = shl i64 %440, 1
  %442 = select i1 true, i64 %441, i64 0
  %443 = getelementptr [2 x i64], [2 x i64]* %9, i64 0, i64 0
  %444 = load i64, i64* %443, align 8
  %445 = lshr i64 %444, 63
  %446 = select i1 true, i64 %445, i64 0
  %447 = or i64 %442, %446
  store i64 %447, i64* %438, align 8
  %448 = getelementptr [2 x i64], [2 x i64]* %9, i64 0, i64 0
  %449 = getelementptr [2 x i64], [2 x i64]* %9, i64 0, i64 0
  %450 = load i64, i64* %449, align 8
  %451 = shl i64 %450, 1
  %452 = select i1 true, i64 %451, i64 0
  %453 = getelementptr [2 x i64], [2 x i64]* %8, i64 0, i64 1
  %454 = load i64, i64* %453, align 8
  %455 = lshr i64 %454, 63
  %456 = select i1 true, i64 %455, i64 0
  %457 = or i64 %452, %456
  store i64 %457, i64* %448, align 8
  %458 = getelementptr [2 x i64], [2 x i64]* %8, i64 0, i64 1
  %459 = getelementptr [2 x i64], [2 x i64]* %8, i64 0, i64 1
  %460 = load i64, i64* %459, align 8
  %461 = shl i64 %460, 1
  %462 = select i1 true, i64 %461, i64 0
  %463 = getelementptr [2 x i64], [2 x i64]* %8, i64 0, i64 0
  %464 = load i64, i64* %463, align 8
  %465 = lshr i64 %464, 63
  %466 = select i1 true, i64 %465, i64 0
  %467 = or i64 %462, %466
  store i64 %467, i64* %458, align 8
  %468 = getelementptr [2 x i64], [2 x i64]* %8, i64 0, i64 0
  %469 = getelementptr [2 x i64], [2 x i64]* %8, i64 0, i64 0
  %470 = load i64, i64* %469, align 8
  %471 = shl i64 %470, 1
  %472 = select i1 true, i64 %471, i64 0
  %473 = load i32, i32* %12, align 4
  %474 = zext i32 %473 to i64
  %475 = or i64 %472, %474
  store i64 %475, i64* %468, align 8
  %476 = load [2 x i64], [2 x i64]* %9, align 8
  %477 = bitcast [2 x i64]* %9 to i128*
  %478 = load i128, i128* %477, align 8
  store i128 %478, i128* %13, align 8
  %479 = load i128, i128* %4, align 8
  %480 = load i128, i128* %13, align 8
  %481 = sub i128 %479, %480
  %482 = sub i128 %481, 1
  %483 = ashr i128 %482, 127
  %484 = select i1 true, i128 %483, i128 0
  store i128 %484, i128* %14, align 8
  %485 = load i128, i128* %14, align 8
  %486 = and i128 %485, 1
  %487 = trunc i128 %486 to i32
  store i32 %487, i32* %12, align 4
  %488 = load i128, i128* %4, align 8
  %489 = load i128, i128* %14, align 8
  %490 = and i128 %488, %489
  %491 = load i128, i128* %13, align 8
  %492 = sub i128 %491, %490
  store i128 %492, i128* %13, align 8
  %493 = load i128, i128* %13, align 8
  %494 = bitcast i128* %13 to [2 x i64]*
  %495 = load [2 x i64], [2 x i64]* %494, align 8
  store [2 x i64] %495, [2 x i64]* %9, align 8
  br label %for.post

for.post:                                         ; preds = %for.body
  %496 = load i32, i32* %10, align 4
  %497 = sub i32 %496, 1
  store i32 %497, i32* %10, align 4
  br label %for.loop

for.done:                                         ; preds = %for.loop
  %498 = load [2 x i64], [2 x i64]* %8, align 8
  %499 = bitcast [2 x i64]* %8 to i128*
  %500 = load i128, i128* %499, align 8
  %501 = shl i128 %500, 1
  %502 = select i1 true, i128 %501, i128 0
  %503 = load i32, i32* %12, align 4
  %504 = zext i32 %503 to i128
  %505 = or i128 %502, %504
  store i128 %505, i128* %15, align 8
  %506 = load i128*, i128** %5, align 8
  %507 = icmp ne i128* %506, null
  %508 = zext i1 %507 to i8
  %509 = trunc i8 %508 to i1
  br i1 %509, label %if.then43, label %if.done44

if.then43:                                        ; preds = %for.done
  %510 = load i128*, i128** %5, align 8
  %511 = load i128, i128* %13, align 8
  store i128 %511, i128* %510, align 8
  br label %if.done44

if.done44:                                        ; preds = %if.then43, %for.done
  %512 = load i128, i128* %15, align 8
  ret i128 %512
}

define internal void @src.undo_box_rune_append(%src.Undo_Manager* %0, i8* %1, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %2 = alloca %src.Undo_Manager*, align 8
  %3 = alloca i8*, align 8
  %4 = alloca %src.Undo_Item_Box_Rune_Append*, align 8
  %5 = alloca { i64, i32 }, align 8
  %6 = alloca %src.Undo_Item_Box_Rune_Pop, align 8
  %7 = alloca %src.Undo_Item_Box_Rune_Pop, align 8
  %8 = alloca { i8*, i64 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Undo_Manager* %0, %src.Undo_Manager** %2, align 8
  store i8* %1, i8** %3, align 8
  %9 = bitcast i8* %__.context_ptr to %runtime.Context*
  %10 = load i8*, i8** %3, align 8
  %11 = bitcast i8* %10 to %src.Undo_Item_Box_Rune_Append*
  store %src.Undo_Item_Box_Rune_Append* %11, %src.Undo_Item_Box_Rune_Append** %4, align 8
  %12 = load %src.Undo_Item_Box_Rune_Append*, %src.Undo_Item_Box_Rune_Append** %4, align 8
  %13 = getelementptr inbounds %src.Undo_Item_Box_Rune_Append, %src.Undo_Item_Box_Rune_Append* %12, i32 0, i32 0
  %14 = load %src.Box*, %src.Box** %13, align 8
  %15 = getelementptr inbounds %src.Box, %src.Box* %14, i32 0, i32 0
  %16 = load %src.Undo_Item_Box_Rune_Append*, %src.Undo_Item_Box_Rune_Append** %4, align 8
  %17 = getelementptr inbounds %src.Undo_Item_Box_Rune_Append, %src.Undo_Item_Box_Rune_Append* %16, i32 0, i32 1
  %18 = load i32, i32* %17, align 4
  %19 = bitcast %runtime.Context* %9 to i8*
  %20 = call { i64, i64 } @strings.write_rune(%strings.Builder* %15, i32 %18, i8* %19)
  %21 = bitcast { i64, i32 }* %5 to { i64, i64 }*
  store { i64, i64 } %20, { i64, i64 }* %21, align 8
  %22 = load { i64, i32 }, { i64, i32 }* %5, align 8
  %23 = bitcast %src.Undo_Item_Box_Rune_Pop* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* %23, i8 0, i64 24, i1 false)
  store %src.Undo_Item_Box_Rune_Pop zeroinitializer, %src.Undo_Item_Box_Rune_Pop* %7, align 8
  %24 = load %src.Undo_Item_Box_Rune_Append*, %src.Undo_Item_Box_Rune_Append** %4, align 8
  %25 = getelementptr inbounds %src.Undo_Item_Box_Rune_Append, %src.Undo_Item_Box_Rune_Append* %24, i32 0, i32 0
  %26 = load %src.Box*, %src.Box** %25, align 8
  %27 = getelementptr inbounds %src.Undo_Item_Box_Rune_Pop, %src.Undo_Item_Box_Rune_Pop* %7, i32 0, i32 0
  store %src.Box* %26, %src.Box** %27, align 8
  %28 = load %src.Undo_Item_Box_Rune_Append*, %src.Undo_Item_Box_Rune_Append** %4, align 8
  %29 = getelementptr inbounds %src.Undo_Item_Box_Rune_Append, %src.Undo_Item_Box_Rune_Append* %28, i32 0, i32 0
  %30 = load %src.Box*, %src.Box** %29, align 8
  %31 = getelementptr inbounds %src.Box, %src.Box* %30, i32 0, i32 2
  %32 = load i64, i64* %31, align 8
  %33 = getelementptr inbounds %src.Undo_Item_Box_Rune_Pop, %src.Undo_Item_Box_Rune_Pop* %7, i32 0, i32 1
  store i64 %32, i64* %33, align 8
  %34 = load %src.Undo_Item_Box_Rune_Append*, %src.Undo_Item_Box_Rune_Append** %4, align 8
  %35 = getelementptr inbounds %src.Undo_Item_Box_Rune_Append, %src.Undo_Item_Box_Rune_Append* %34, i32 0, i32 0
  %36 = load %src.Box*, %src.Box** %35, align 8
  %37 = getelementptr inbounds %src.Box, %src.Box* %36, i32 0, i32 2
  %38 = load i64, i64* %37, align 8
  %39 = getelementptr inbounds %src.Undo_Item_Box_Rune_Pop, %src.Undo_Item_Box_Rune_Pop* %7, i32 0, i32 2
  store i64 %38, i64* %39, align 8
  %40 = load %src.Undo_Item_Box_Rune_Pop, %src.Undo_Item_Box_Rune_Pop* %7, align 8
  store %src.Undo_Item_Box_Rune_Pop %40, %src.Undo_Item_Box_Rune_Pop* %6, align 8
  %41 = load %src.Undo_Item_Box_Rune_Append*, %src.Undo_Item_Box_Rune_Append** %4, align 8
  %42 = getelementptr inbounds %src.Undo_Item_Box_Rune_Append, %src.Undo_Item_Box_Rune_Append* %41, i32 0, i32 0
  %43 = load %src.Box*, %src.Box** %42, align 8
  %44 = getelementptr inbounds %src.Box, %src.Box* %43, i32 0, i32 2
  %45 = load i64, i64* %44, align 8
  %46 = add i64 %45, 1
  store i64 %46, i64* %44, align 8
  %47 = load %src.Undo_Item_Box_Rune_Append*, %src.Undo_Item_Box_Rune_Append** %4, align 8
  %48 = getelementptr inbounds %src.Undo_Item_Box_Rune_Append, %src.Undo_Item_Box_Rune_Append* %47, i32 0, i32 0
  %49 = load %src.Box*, %src.Box** %48, align 8
  %50 = getelementptr inbounds %src.Box, %src.Box* %49, i32 0, i32 3
  %51 = load i64, i64* %50, align 8
  %52 = add i64 %51, 1
  store i64 %52, i64* %50, align 8
  %53 = load %src.Undo_Manager*, %src.Undo_Manager** %2, align 8
  %54 = bitcast %src.Undo_Item_Box_Rune_Pop* %6 to i8*
  %55 = bitcast %runtime.Context* %9 to i8*
  %56 = call { i64, i64 } @src.undo_push(%src.Undo_Manager* %53, i8* bitcast (void (%src.Undo_Manager*, i8*, i8*)* @src.undo_box_rune_pop to i8*), i8* %54, i64 24, i8* %55)
  %57 = bitcast { i8*, i64 }* %8 to { i64, i64 }*
  store { i64, i64 } %56, { i64, i64 }* %57, align 8
  %58 = load { i8*, i64 }, { i8*, i64 }* %8, align 8
  ret void
}

define internal void @src.undo_box_rune_pop(%src.Undo_Manager* %0, i8* %1, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %2 = alloca %src.Undo_Manager*, align 8
  %3 = alloca i8*, align 8
  %4 = alloca %src.Undo_Item_Box_Rune_Pop*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i64, align 8
  %7 = alloca { i32, i64 }, align 8
  %8 = alloca %src.Undo_Item_Box_Rune_Append, align 8
  %9 = alloca %src.Undo_Item_Box_Rune_Append, align 8
  %10 = alloca { i8*, i64 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Undo_Manager* %0, %src.Undo_Manager** %2, align 8
  store i8* %1, i8** %3, align 8
  %11 = bitcast i8* %__.context_ptr to %runtime.Context*
  %12 = load i8*, i8** %3, align 8
  %13 = bitcast i8* %12 to %src.Undo_Item_Box_Rune_Pop*
  store %src.Undo_Item_Box_Rune_Pop* %13, %src.Undo_Item_Box_Rune_Pop** %4, align 8
  %14 = load %src.Undo_Item_Box_Rune_Pop*, %src.Undo_Item_Box_Rune_Pop** %4, align 8
  %15 = getelementptr inbounds %src.Undo_Item_Box_Rune_Pop, %src.Undo_Item_Box_Rune_Pop* %14, i32 0, i32 0
  %16 = load %src.Box*, %src.Box** %15, align 8
  %17 = getelementptr inbounds %src.Box, %src.Box* %16, i32 0, i32 0
  %18 = bitcast %runtime.Context* %11 to i8*
  %19 = call { i64, i64 } @strings.pop_rune(%strings.Builder* %17, i8* %18)
  %20 = bitcast { i32, i64 }* %7 to { i64, i64 }*
  store { i64, i64 } %19, { i64, i64 }* %20, align 8
  %21 = load { i32, i64 }, { i32, i64 }* %7, align 8
  %22 = getelementptr inbounds { i32, i64 }, { i32, i64 }* %7, i32 0, i32 0
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds { i32, i64 }, { i32, i64 }* %7, i32 0, i32 1
  %25 = load i64, i64* %24, align 8
  store i32 %23, i32* %5, align 4
  store i64 %25, i64* %6, align 8
  %26 = load %src.Undo_Item_Box_Rune_Pop*, %src.Undo_Item_Box_Rune_Pop** %4, align 8
  %27 = getelementptr inbounds %src.Undo_Item_Box_Rune_Pop, %src.Undo_Item_Box_Rune_Pop* %26, i32 0, i32 0
  %28 = load %src.Box*, %src.Box** %27, align 8
  %29 = getelementptr inbounds %src.Box, %src.Box* %28, i32 0, i32 2
  %30 = load %src.Undo_Item_Box_Rune_Pop*, %src.Undo_Item_Box_Rune_Pop** %4, align 8
  %31 = getelementptr inbounds %src.Undo_Item_Box_Rune_Pop, %src.Undo_Item_Box_Rune_Pop* %30, i32 0, i32 1
  %32 = load i64, i64* %31, align 8
  store i64 %32, i64* %29, align 8
  %33 = load %src.Undo_Item_Box_Rune_Pop*, %src.Undo_Item_Box_Rune_Pop** %4, align 8
  %34 = getelementptr inbounds %src.Undo_Item_Box_Rune_Pop, %src.Undo_Item_Box_Rune_Pop* %33, i32 0, i32 0
  %35 = load %src.Box*, %src.Box** %34, align 8
  %36 = getelementptr inbounds %src.Box, %src.Box* %35, i32 0, i32 3
  %37 = load %src.Undo_Item_Box_Rune_Pop*, %src.Undo_Item_Box_Rune_Pop** %4, align 8
  %38 = getelementptr inbounds %src.Undo_Item_Box_Rune_Pop, %src.Undo_Item_Box_Rune_Pop* %37, i32 0, i32 2
  %39 = load i64, i64* %38, align 8
  store i64 %39, i64* %36, align 8
  %40 = bitcast %src.Undo_Item_Box_Rune_Append* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* %40, i8 0, i64 16, i1 false)
  %41 = bitcast %src.Undo_Item_Box_Rune_Append* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* %41, i8 0, i64 16, i1 false)
  store %src.Undo_Item_Box_Rune_Append zeroinitializer, %src.Undo_Item_Box_Rune_Append* %9, align 8
  %42 = load %src.Undo_Item_Box_Rune_Pop*, %src.Undo_Item_Box_Rune_Pop** %4, align 8
  %43 = getelementptr inbounds %src.Undo_Item_Box_Rune_Pop, %src.Undo_Item_Box_Rune_Pop* %42, i32 0, i32 0
  %44 = load %src.Box*, %src.Box** %43, align 8
  %45 = getelementptr inbounds %src.Undo_Item_Box_Rune_Append, %src.Undo_Item_Box_Rune_Append* %9, i32 0, i32 0
  store %src.Box* %44, %src.Box** %45, align 8
  %46 = load i32, i32* %5, align 4
  %47 = getelementptr inbounds %src.Undo_Item_Box_Rune_Append, %src.Undo_Item_Box_Rune_Append* %9, i32 0, i32 1
  store i32 %46, i32* %47, align 4
  %48 = load %src.Undo_Item_Box_Rune_Append, %src.Undo_Item_Box_Rune_Append* %9, align 8
  store %src.Undo_Item_Box_Rune_Append %48, %src.Undo_Item_Box_Rune_Append* %8, align 8
  %49 = load %src.Undo_Manager*, %src.Undo_Manager** %2, align 8
  %50 = bitcast %src.Undo_Item_Box_Rune_Append* %8 to i8*
  %51 = bitcast %runtime.Context* %11 to i8*
  %52 = call { i64, i64 } @src.undo_push(%src.Undo_Manager* %49, i8* bitcast (void (%src.Undo_Manager*, i8*, i8*)* @src.undo_box_rune_append to i8*), i8* %50, i64 16, i8* %51)
  %53 = bitcast { i8*, i64 }* %10 to { i64, i64 }*
  store { i64, i64 } %52, { i64, i64 }* %53, align 8
  %54 = load { i8*, i64 }, { i8*, i64 }* %10, align 8
  ret void
}

define internal void @src.undo_box_rune_insert_at(%src.Undo_Manager* %0, i8* %1, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %2 = alloca %src.Undo_Manager*, align 8
  %3 = alloca i8*, align 8
  %4 = alloca %src.Undo_Item_Box_Rune_Insert_At*, align 8
  %5 = alloca { i32*, i64 }, align 8
  %6 = alloca %..string, align 8
  %7 = alloca { i32*, i64 }, align 8
  %8 = alloca %strings.Builder*, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca { i64, i64 }, align 8
  %14 = alloca %src.Undo_Item_Box_Rune_Remove_At, align 8
  %15 = alloca %src.Undo_Item_Box_Rune_Remove_At, align 8
  %16 = alloca { i8*, i64 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Undo_Manager* %0, %src.Undo_Manager** %2, align 8
  store i8* %1, i8** %3, align 8
  %17 = bitcast i8* %__.context_ptr to %runtime.Context*
  %18 = load i8*, i8** %3, align 8
  %19 = bitcast i8* %18 to %src.Undo_Item_Box_Rune_Insert_At*
  store %src.Undo_Item_Box_Rune_Insert_At* %19, %src.Undo_Item_Box_Rune_Insert_At** %4, align 8
  %20 = load %src.Undo_Item_Box_Rune_Insert_At*, %src.Undo_Item_Box_Rune_Insert_At** %4, align 8
  %21 = getelementptr inbounds %src.Undo_Item_Box_Rune_Insert_At, %src.Undo_Item_Box_Rune_Insert_At* %20, i32 0, i32 0
  %22 = load %src.Box*, %src.Box** %21, align 8
  %23 = getelementptr inbounds %src.Box, %src.Box* %22, i32 0, i32 4
  %24 = load %src.Undo_Item_Box_Rune_Insert_At*, %src.Undo_Item_Box_Rune_Insert_At** %4, align 8
  %25 = getelementptr inbounds %src.Undo_Item_Box_Rune_Insert_At, %src.Undo_Item_Box_Rune_Insert_At* %24, i32 0, i32 0
  %26 = load %src.Box*, %src.Box** %25, align 8
  %27 = getelementptr inbounds %src.Box, %src.Box* %26, i32 0, i32 0
  %28 = load %strings.Builder, %strings.Builder* %27, align 8
  %29 = bitcast %runtime.Context* %17 to i8*
  %30 = call { i64, i64 } @strings.to_string(%strings.Builder* %27, i8* %29)
  %31 = bitcast %..string* %6 to { i64, i64 }*
  store { i64, i64 } %30, { i64, i64 }* %31, align 8
  %32 = load %..string, %..string* %6, align 8
  %33 = getelementptr inbounds %runtime.Context, %runtime.Context* %17, i32 0, i32 1
  %34 = load %runtime.Allocator, %runtime.Allocator* %33, align 8
  %35 = bitcast %..string* %6 to { i64, i64 }*
  %36 = load { i64, i64 }, { i64, i64 }* %35, align 8
  %37 = bitcast %runtime.Allocator* %33 to { i64, i64 }*
  %38 = load { i64, i64 }, { i64, i64 }* %37, align 8
  %39 = bitcast %runtime.Context* %17 to i8*
  %40 = call { i64, i64 } @cutf8.ds_to_runes(%cutf8.Decode_State* %23, { i64, i64 } %36, { i64, i64 } %38, i8* %39)
  %41 = bitcast { i32*, i64 }* %7 to { i64, i64 }*
  store { i64, i64 } %40, { i64, i64 }* %41, align 8
  %42 = load { i32*, i64 }, { i32*, i64 }* %7, align 8
  store { i32*, i64 } %42, { i32*, i64 }* %5, align 8
  %43 = load %src.Undo_Item_Box_Rune_Insert_At*, %src.Undo_Item_Box_Rune_Insert_At** %4, align 8
  %44 = getelementptr inbounds %src.Undo_Item_Box_Rune_Insert_At, %src.Undo_Item_Box_Rune_Insert_At* %43, i32 0, i32 0
  %45 = load %src.Box*, %src.Box** %44, align 8
  %46 = getelementptr inbounds %src.Box, %src.Box* %45, i32 0, i32 0
  store %strings.Builder* %46, %strings.Builder** %8, align 8
  %47 = load %strings.Builder*, %strings.Builder** %8, align 8
  %48 = bitcast %runtime.Context* %17 to i8*
  call void @strings.builder_reset(%strings.Builder* %47, i8* %48)
  store i64 0, i64* %9, align 8
  store i64 0, i64* %10, align 8
  store i64 0, i64* %11, align 8
  br label %for.interval.loop

for.interval.loop:                                ; preds = %for.interval.post, %entry
  %49 = load { i32*, i64 }, { i32*, i64 }* %5, align 8
  %50 = getelementptr inbounds { i32*, i64 }, { i32*, i64 }* %5, i32 0, i32 1
  %51 = load i64, i64* %50, align 8
  %52 = load i64, i64* %10, align 8
  %53 = icmp slt i64 %52, %51
  br i1 %53, label %for.interval.body, label %for.interval.done

for.interval.body:                                ; preds = %for.interval.loop
  %54 = load i64, i64* %10, align 8
  %55 = load i64, i64* %11, align 8
  store i64 %54, i64* %12, align 8
  %56 = load i64, i64* %12, align 8
  %57 = load %src.Undo_Item_Box_Rune_Insert_At*, %src.Undo_Item_Box_Rune_Insert_At** %4, align 8
  %58 = getelementptr inbounds %src.Undo_Item_Box_Rune_Insert_At, %src.Undo_Item_Box_Rune_Insert_At* %57, i32 0, i32 1
  %59 = load i64, i64* %58, align 8
  %60 = icmp eq i64 %56, %59
  %61 = zext i1 %60 to i8
  %62 = trunc i8 %61 to i1
  br i1 %62, label %if.then, label %if.done

if.then:                                          ; preds = %for.interval.body
  %63 = load %strings.Builder*, %strings.Builder** %8, align 8
  %64 = load %src.Undo_Item_Box_Rune_Insert_At*, %src.Undo_Item_Box_Rune_Insert_At** %4, align 8
  %65 = getelementptr inbounds %src.Undo_Item_Box_Rune_Insert_At, %src.Undo_Item_Box_Rune_Insert_At* %64, i32 0, i32 2
  %66 = load i32, i32* %65, align 4
  %67 = bitcast %runtime.Context* %17 to i8*
  call void @src.builder_append_rune(%strings.Builder* %63, i32 %66, i8* %67)
  br label %if.done

if.done:                                          ; preds = %if.then, %for.interval.body
  %68 = load %strings.Builder*, %strings.Builder** %8, align 8
  %69 = load { i32*, i64 }, { i32*, i64 }* %5, align 8
  %70 = getelementptr inbounds { i32*, i64 }, { i32*, i64 }* %5, i32 0, i32 0
  %71 = load i32*, i32** %70, align 8
  %72 = load i64, i64* %12, align 8
  %73 = getelementptr inbounds { i32*, i64 }, { i32*, i64 }* %5, i32 0, i32 1
  %74 = load i64, i64* %73, align 8
  %75 = bitcast { i64, i64 }* %13 to %..string*
  store %..string { i8* getelementptr inbounds ([54 x i8], [54 x i8]* @"csbs$2f3", i64 0, i64 0), i64 53 }, %..string* %75, align 8
  %76 = load { i64, i64 }, { i64, i64 }* %13, align 8
  call void @runtime.bounds_check_error({ i64, i64 } %76, i32 123, i32 32, i64 %72, i64 %74)
  %77 = getelementptr i32, i32* %71, i64 %72
  %78 = load i32, i32* %77, align 4
  %79 = bitcast %runtime.Context* %17 to i8*
  call void @src.builder_append_rune(%strings.Builder* %68, i32 %78, i8* %79)
  br label %for.interval.post

for.interval.post:                                ; preds = %if.done
  %80 = load i64, i64* %10, align 8
  %81 = add i64 %80, 1
  store i64 %81, i64* %10, align 8
  %82 = load i64, i64* %11, align 8
  %83 = add i64 %82, 1
  store i64 %83, i64* %11, align 8
  br label %for.interval.loop

for.interval.done:                                ; preds = %for.interval.loop
  %84 = load %src.Undo_Item_Box_Rune_Insert_At*, %src.Undo_Item_Box_Rune_Insert_At** %4, align 8
  %85 = getelementptr inbounds %src.Undo_Item_Box_Rune_Insert_At, %src.Undo_Item_Box_Rune_Insert_At* %84, i32 0, i32 1
  %86 = load i64, i64* %85, align 8
  %87 = load { i32*, i64 }, { i32*, i64 }* %5, align 8
  %88 = getelementptr inbounds { i32*, i64 }, { i32*, i64 }* %5, i32 0, i32 1
  %89 = load i64, i64* %88, align 8
  %90 = icmp sge i64 %86, %89
  %91 = zext i1 %90 to i8
  %92 = trunc i8 %91 to i1
  br i1 %92, label %if.then1, label %if.done2

if.then1:                                         ; preds = %for.interval.done
  %93 = load %strings.Builder*, %strings.Builder** %8, align 8
  %94 = load %src.Undo_Item_Box_Rune_Insert_At*, %src.Undo_Item_Box_Rune_Insert_At** %4, align 8
  %95 = getelementptr inbounds %src.Undo_Item_Box_Rune_Insert_At, %src.Undo_Item_Box_Rune_Insert_At* %94, i32 0, i32 2
  %96 = load i32, i32* %95, align 4
  %97 = bitcast %runtime.Context* %17 to i8*
  call void @src.builder_append_rune(%strings.Builder* %93, i32 %96, i8* %97)
  br label %if.done2

if.done2:                                         ; preds = %if.then1, %for.interval.done
  %98 = load %src.Undo_Item_Box_Rune_Insert_At*, %src.Undo_Item_Box_Rune_Insert_At** %4, align 8
  %99 = getelementptr inbounds %src.Undo_Item_Box_Rune_Insert_At, %src.Undo_Item_Box_Rune_Insert_At* %98, i32 0, i32 0
  %100 = load %src.Box*, %src.Box** %99, align 8
  %101 = getelementptr inbounds %src.Box, %src.Box* %100, i32 0, i32 2
  %102 = load i64, i64* %101, align 8
  %103 = add i64 %102, 1
  store i64 %103, i64* %101, align 8
  %104 = load %src.Undo_Item_Box_Rune_Insert_At*, %src.Undo_Item_Box_Rune_Insert_At** %4, align 8
  %105 = getelementptr inbounds %src.Undo_Item_Box_Rune_Insert_At, %src.Undo_Item_Box_Rune_Insert_At* %104, i32 0, i32 0
  %106 = load %src.Box*, %src.Box** %105, align 8
  %107 = getelementptr inbounds %src.Box, %src.Box* %106, i32 0, i32 3
  %108 = load i64, i64* %107, align 8
  %109 = add i64 %108, 1
  store i64 %109, i64* %107, align 8
  %110 = bitcast %src.Undo_Item_Box_Rune_Remove_At* %15 to i8*
  call void @llvm.memset.p0i8.i64(i8* %110, i8 0, i64 16, i1 false)
  store %src.Undo_Item_Box_Rune_Remove_At zeroinitializer, %src.Undo_Item_Box_Rune_Remove_At* %15, align 8
  %111 = load %src.Undo_Item_Box_Rune_Insert_At*, %src.Undo_Item_Box_Rune_Insert_At** %4, align 8
  %112 = getelementptr inbounds %src.Undo_Item_Box_Rune_Insert_At, %src.Undo_Item_Box_Rune_Insert_At* %111, i32 0, i32 0
  %113 = load %src.Box*, %src.Box** %112, align 8
  %114 = getelementptr inbounds %src.Undo_Item_Box_Rune_Remove_At, %src.Undo_Item_Box_Rune_Remove_At* %15, i32 0, i32 0
  store %src.Box* %113, %src.Box** %114, align 8
  %115 = load %src.Undo_Item_Box_Rune_Insert_At*, %src.Undo_Item_Box_Rune_Insert_At** %4, align 8
  %116 = getelementptr inbounds %src.Undo_Item_Box_Rune_Insert_At, %src.Undo_Item_Box_Rune_Insert_At* %115, i32 0, i32 1
  %117 = load i64, i64* %116, align 8
  %118 = getelementptr inbounds %src.Undo_Item_Box_Rune_Remove_At, %src.Undo_Item_Box_Rune_Remove_At* %15, i32 0, i32 1
  store i64 %117, i64* %118, align 8
  %119 = load %src.Undo_Item_Box_Rune_Remove_At, %src.Undo_Item_Box_Rune_Remove_At* %15, align 8
  store %src.Undo_Item_Box_Rune_Remove_At %119, %src.Undo_Item_Box_Rune_Remove_At* %14, align 8
  %120 = load %src.Undo_Manager*, %src.Undo_Manager** %2, align 8
  %121 = bitcast %src.Undo_Item_Box_Rune_Remove_At* %14 to i8*
  %122 = bitcast %runtime.Context* %17 to i8*
  %123 = call { i64, i64 } @src.undo_push(%src.Undo_Manager* %120, i8* bitcast (void (%src.Undo_Manager*, i8*, i8*)* @src.undo_box_rune_remove_at to i8*), i8* %121, i64 16, i8* %122)
  %124 = bitcast { i8*, i64 }* %16 to { i64, i64 }*
  store { i64, i64 } %123, { i64, i64 }* %124, align 8
  %125 = load { i8*, i64 }, { i8*, i64 }* %16, align 8
  ret void
}

define internal void @src.undo_box_rune_remove_at(%src.Undo_Manager* %0, i8* %1, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %2 = alloca %src.Undo_Manager*, align 8
  %3 = alloca i8*, align 8
  %4 = alloca %src.Undo_Item_Box_Rune_Remove_At*, align 8
  %5 = alloca { i32*, i64 }, align 8
  %6 = alloca %..string, align 8
  %7 = alloca { i32*, i64 }, align 8
  %8 = alloca %strings.Builder*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca { i64, i64 }, align 8
  %15 = alloca { i64, i64 }, align 8
  %16 = alloca %src.Undo_Item_Box_Rune_Insert_At, align 8
  %17 = alloca %src.Undo_Item_Box_Rune_Insert_At, align 8
  %18 = alloca { i8*, i64 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Undo_Manager* %0, %src.Undo_Manager** %2, align 8
  store i8* %1, i8** %3, align 8
  %19 = bitcast i8* %__.context_ptr to %runtime.Context*
  %20 = load i8*, i8** %3, align 8
  %21 = bitcast i8* %20 to %src.Undo_Item_Box_Rune_Remove_At*
  store %src.Undo_Item_Box_Rune_Remove_At* %21, %src.Undo_Item_Box_Rune_Remove_At** %4, align 8
  %22 = load %src.Undo_Item_Box_Rune_Remove_At*, %src.Undo_Item_Box_Rune_Remove_At** %4, align 8
  %23 = getelementptr inbounds %src.Undo_Item_Box_Rune_Remove_At, %src.Undo_Item_Box_Rune_Remove_At* %22, i32 0, i32 0
  %24 = load %src.Box*, %src.Box** %23, align 8
  %25 = getelementptr inbounds %src.Box, %src.Box* %24, i32 0, i32 4
  %26 = load %src.Undo_Item_Box_Rune_Remove_At*, %src.Undo_Item_Box_Rune_Remove_At** %4, align 8
  %27 = getelementptr inbounds %src.Undo_Item_Box_Rune_Remove_At, %src.Undo_Item_Box_Rune_Remove_At* %26, i32 0, i32 0
  %28 = load %src.Box*, %src.Box** %27, align 8
  %29 = getelementptr inbounds %src.Box, %src.Box* %28, i32 0, i32 0
  %30 = load %strings.Builder, %strings.Builder* %29, align 8
  %31 = bitcast %runtime.Context* %19 to i8*
  %32 = call { i64, i64 } @strings.to_string(%strings.Builder* %29, i8* %31)
  %33 = bitcast %..string* %6 to { i64, i64 }*
  store { i64, i64 } %32, { i64, i64 }* %33, align 8
  %34 = load %..string, %..string* %6, align 8
  %35 = getelementptr inbounds %runtime.Context, %runtime.Context* %19, i32 0, i32 1
  %36 = load %runtime.Allocator, %runtime.Allocator* %35, align 8
  %37 = bitcast %..string* %6 to { i64, i64 }*
  %38 = load { i64, i64 }, { i64, i64 }* %37, align 8
  %39 = bitcast %runtime.Allocator* %35 to { i64, i64 }*
  %40 = load { i64, i64 }, { i64, i64 }* %39, align 8
  %41 = bitcast %runtime.Context* %19 to i8*
  %42 = call { i64, i64 } @cutf8.ds_to_runes(%cutf8.Decode_State* %25, { i64, i64 } %38, { i64, i64 } %40, i8* %41)
  %43 = bitcast { i32*, i64 }* %7 to { i64, i64 }*
  store { i64, i64 } %42, { i64, i64 }* %43, align 8
  %44 = load { i32*, i64 }, { i32*, i64 }* %7, align 8
  store { i32*, i64 } %44, { i32*, i64 }* %5, align 8
  %45 = load %src.Undo_Item_Box_Rune_Remove_At*, %src.Undo_Item_Box_Rune_Remove_At** %4, align 8
  %46 = getelementptr inbounds %src.Undo_Item_Box_Rune_Remove_At, %src.Undo_Item_Box_Rune_Remove_At* %45, i32 0, i32 0
  %47 = load %src.Box*, %src.Box** %46, align 8
  %48 = getelementptr inbounds %src.Box, %src.Box* %47, i32 0, i32 0
  store %strings.Builder* %48, %strings.Builder** %8, align 8
  %49 = load %strings.Builder*, %strings.Builder** %8, align 8
  %50 = bitcast %runtime.Context* %19 to i8*
  call void @strings.builder_reset(%strings.Builder* %49, i8* %50)
  store i32 0, i32* %9, align 4
  store i64 0, i64* %10, align 8
  store i64 0, i64* %11, align 8
  store i64 0, i64* %12, align 8
  br label %for.interval.loop

for.interval.loop:                                ; preds = %for.interval.post, %entry
  %51 = load { i32*, i64 }, { i32*, i64 }* %5, align 8
  %52 = getelementptr inbounds { i32*, i64 }, { i32*, i64 }* %5, i32 0, i32 1
  %53 = load i64, i64* %52, align 8
  %54 = load i64, i64* %11, align 8
  %55 = icmp slt i64 %54, %53
  br i1 %55, label %for.interval.body, label %for.interval.done

for.interval.body:                                ; preds = %for.interval.loop
  %56 = load i64, i64* %11, align 8
  %57 = load i64, i64* %12, align 8
  store i64 %56, i64* %13, align 8
  %58 = load i64, i64* %13, align 8
  %59 = load %src.Undo_Item_Box_Rune_Remove_At*, %src.Undo_Item_Box_Rune_Remove_At** %4, align 8
  %60 = getelementptr inbounds %src.Undo_Item_Box_Rune_Remove_At, %src.Undo_Item_Box_Rune_Remove_At* %59, i32 0, i32 1
  %61 = load i64, i64* %60, align 8
  %62 = icmp eq i64 %58, %61
  %63 = zext i1 %62 to i8
  %64 = trunc i8 %63 to i1
  br i1 %64, label %if.then, label %if.else

if.then:                                          ; preds = %for.interval.body
  %65 = load { i32*, i64 }, { i32*, i64 }* %5, align 8
  %66 = getelementptr inbounds { i32*, i64 }, { i32*, i64 }* %5, i32 0, i32 0
  %67 = load i32*, i32** %66, align 8
  %68 = load i64, i64* %13, align 8
  %69 = getelementptr inbounds { i32*, i64 }, { i32*, i64 }* %5, i32 0, i32 1
  %70 = load i64, i64* %69, align 8
  %71 = bitcast { i64, i64 }* %14 to %..string*
  store %..string { i8* getelementptr inbounds ([54 x i8], [54 x i8]* @"csbs$2f3", i64 0, i64 0), i64 53 }, %..string* %71, align 8
  %72 = load { i64, i64 }, { i64, i64 }* %14, align 8
  call void @runtime.bounds_check_error({ i64, i64 } %72, i32 154, i32 30, i64 %68, i64 %70)
  %73 = getelementptr i32, i32* %67, i64 %68
  %74 = load i32, i32* %73, align 4
  store i32 %74, i32* %9, align 4
  br label %if.done

if.else:                                          ; preds = %for.interval.body
  %75 = load %strings.Builder*, %strings.Builder** %8, align 8
  %76 = load { i32*, i64 }, { i32*, i64 }* %5, align 8
  %77 = getelementptr inbounds { i32*, i64 }, { i32*, i64 }* %5, i32 0, i32 0
  %78 = load i32*, i32** %77, align 8
  %79 = load i64, i64* %13, align 8
  %80 = getelementptr inbounds { i32*, i64 }, { i32*, i64 }* %5, i32 0, i32 1
  %81 = load i64, i64* %80, align 8
  %82 = bitcast { i64, i64 }* %15 to %..string*
  store %..string { i8* getelementptr inbounds ([54 x i8], [54 x i8]* @"csbs$2f3", i64 0, i64 0), i64 53 }, %..string* %82, align 8
  %83 = load { i64, i64 }, { i64, i64 }* %15, align 8
  call void @runtime.bounds_check_error({ i64, i64 } %83, i32 156, i32 33, i64 %79, i64 %81)
  %84 = getelementptr i32, i32* %78, i64 %79
  %85 = load i32, i32* %84, align 4
  %86 = bitcast %runtime.Context* %19 to i8*
  call void @src.builder_append_rune(%strings.Builder* %75, i32 %85, i8* %86)
  br label %if.done

if.done:                                          ; preds = %if.else, %if.then
  br label %for.interval.post

for.interval.post:                                ; preds = %if.done
  %87 = load i64, i64* %11, align 8
  %88 = add i64 %87, 1
  store i64 %88, i64* %11, align 8
  %89 = load i64, i64* %12, align 8
  %90 = add i64 %89, 1
  store i64 %90, i64* %12, align 8
  br label %for.interval.loop

for.interval.done:                                ; preds = %for.interval.loop
  %91 = load %src.Undo_Item_Box_Rune_Remove_At*, %src.Undo_Item_Box_Rune_Remove_At** %4, align 8
  %92 = getelementptr inbounds %src.Undo_Item_Box_Rune_Remove_At, %src.Undo_Item_Box_Rune_Remove_At* %91, i32 0, i32 0
  %93 = load %src.Box*, %src.Box** %92, align 8
  %94 = getelementptr inbounds %src.Box, %src.Box* %93, i32 0, i32 2
  %95 = load %src.Undo_Item_Box_Rune_Remove_At*, %src.Undo_Item_Box_Rune_Remove_At** %4, align 8
  %96 = getelementptr inbounds %src.Undo_Item_Box_Rune_Remove_At, %src.Undo_Item_Box_Rune_Remove_At* %95, i32 0, i32 1
  %97 = load i64, i64* %96, align 8
  store i64 %97, i64* %94, align 8
  %98 = load %src.Undo_Item_Box_Rune_Remove_At*, %src.Undo_Item_Box_Rune_Remove_At** %4, align 8
  %99 = getelementptr inbounds %src.Undo_Item_Box_Rune_Remove_At, %src.Undo_Item_Box_Rune_Remove_At* %98, i32 0, i32 0
  %100 = load %src.Box*, %src.Box** %99, align 8
  %101 = getelementptr inbounds %src.Box, %src.Box* %100, i32 0, i32 3
  %102 = load %src.Undo_Item_Box_Rune_Remove_At*, %src.Undo_Item_Box_Rune_Remove_At** %4, align 8
  %103 = getelementptr inbounds %src.Undo_Item_Box_Rune_Remove_At, %src.Undo_Item_Box_Rune_Remove_At* %102, i32 0, i32 1
  %104 = load i64, i64* %103, align 8
  store i64 %104, i64* %101, align 8
  %105 = bitcast %src.Undo_Item_Box_Rune_Insert_At* %16 to i8*
  call void @llvm.memset.p0i8.i64(i8* %105, i8 0, i64 24, i1 false)
  %106 = bitcast %src.Undo_Item_Box_Rune_Insert_At* %17 to i8*
  call void @llvm.memset.p0i8.i64(i8* %106, i8 0, i64 24, i1 false)
  store %src.Undo_Item_Box_Rune_Insert_At zeroinitializer, %src.Undo_Item_Box_Rune_Insert_At* %17, align 8
  %107 = load %src.Undo_Item_Box_Rune_Remove_At*, %src.Undo_Item_Box_Rune_Remove_At** %4, align 8
  %108 = getelementptr inbounds %src.Undo_Item_Box_Rune_Remove_At, %src.Undo_Item_Box_Rune_Remove_At* %107, i32 0, i32 0
  %109 = load %src.Box*, %src.Box** %108, align 8
  %110 = getelementptr inbounds %src.Undo_Item_Box_Rune_Insert_At, %src.Undo_Item_Box_Rune_Insert_At* %17, i32 0, i32 0
  store %src.Box* %109, %src.Box** %110, align 8
  %111 = load %src.Undo_Item_Box_Rune_Remove_At*, %src.Undo_Item_Box_Rune_Remove_At** %4, align 8
  %112 = getelementptr inbounds %src.Undo_Item_Box_Rune_Remove_At, %src.Undo_Item_Box_Rune_Remove_At* %111, i32 0, i32 1
  %113 = load i64, i64* %112, align 8
  %114 = getelementptr inbounds %src.Undo_Item_Box_Rune_Insert_At, %src.Undo_Item_Box_Rune_Insert_At* %17, i32 0, i32 1
  store i64 %113, i64* %114, align 8
  %115 = load i32, i32* %9, align 4
  %116 = getelementptr inbounds %src.Undo_Item_Box_Rune_Insert_At, %src.Undo_Item_Box_Rune_Insert_At* %17, i32 0, i32 2
  store i32 %115, i32* %116, align 4
  %117 = load %src.Undo_Item_Box_Rune_Insert_At, %src.Undo_Item_Box_Rune_Insert_At* %17, align 8
  store %src.Undo_Item_Box_Rune_Insert_At %117, %src.Undo_Item_Box_Rune_Insert_At* %16, align 8
  %118 = load %src.Undo_Manager*, %src.Undo_Manager** %2, align 8
  %119 = bitcast %src.Undo_Item_Box_Rune_Insert_At* %16 to i8*
  %120 = bitcast %runtime.Context* %19 to i8*
  %121 = call { i64, i64 } @src.undo_push(%src.Undo_Manager* %118, i8* bitcast (void (%src.Undo_Manager*, i8*, i8*)* @src.undo_box_rune_insert_at to i8*), i8* %119, i64 24, i8* %120)
  %122 = bitcast { i8*, i64 }* %18 to { i64, i64 }*
  store { i64, i64 } %121, { i64, i64 }* %122, align 8
  %123 = load { i8*, i64 }, { i8*, i64 }* %18, align 8
  ret void
}

define internal void @src.undo_box_remove_selection(%src.Undo_Manager* %0, i8* %1, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %2 = alloca %src.Undo_Manager*, align 8
  %3 = alloca i8*, align 8
  %4 = alloca %src.Undo_Item_Box_Remove_Selection*, align 8
  %5 = alloca %strings.Builder*, align 8
  %6 = alloca { i32*, i64 }, align 8
  %7 = alloca %..string, align 8
  %8 = alloca { i32*, i64 }, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca %src.Undo_Item_Box_Insert_Runes, align 8
  %13 = alloca %src.Undo_Item_Box_Insert_Runes, align 8
  %14 = alloca { i8*, i64 }, align 8
  %15 = alloca { i8*, i64 }, align 8
  %16 = alloca i32*, align 8
  %17 = alloca { i64, i64 }, align 8
  %18 = alloca { i32*, i64 }, align 8
  %19 = alloca { i32*, i64 }, align 8
  %20 = alloca i64, align 8
  %21 = alloca i64, align 8
  %22 = alloca i64, align 8
  %23 = alloca i64, align 8
  %24 = alloca i64, align 8
  %25 = alloca { i64, i64 }, align 8
  %26 = alloca { i64, i64 }, align 8
  %27 = alloca { i64, i64 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Undo_Manager* %0, %src.Undo_Manager** %2, align 8
  store i8* %1, i8** %3, align 8
  %28 = bitcast i8* %__.context_ptr to %runtime.Context*
  %29 = load i8*, i8** %3, align 8
  %30 = bitcast i8* %29 to %src.Undo_Item_Box_Remove_Selection*
  store %src.Undo_Item_Box_Remove_Selection* %30, %src.Undo_Item_Box_Remove_Selection** %4, align 8
  %31 = load %src.Undo_Item_Box_Remove_Selection*, %src.Undo_Item_Box_Remove_Selection** %4, align 8
  %32 = getelementptr inbounds %src.Undo_Item_Box_Remove_Selection, %src.Undo_Item_Box_Remove_Selection* %31, i32 0, i32 0
  %33 = load %src.Box*, %src.Box** %32, align 8
  %34 = getelementptr inbounds %src.Box, %src.Box* %33, i32 0, i32 0
  store %strings.Builder* %34, %strings.Builder** %5, align 8
  %35 = load %src.Undo_Item_Box_Remove_Selection*, %src.Undo_Item_Box_Remove_Selection** %4, align 8
  %36 = getelementptr inbounds %src.Undo_Item_Box_Remove_Selection, %src.Undo_Item_Box_Remove_Selection* %35, i32 0, i32 0
  %37 = load %src.Box*, %src.Box** %36, align 8
  %38 = getelementptr inbounds %src.Box, %src.Box* %37, i32 0, i32 4
  %39 = load %strings.Builder*, %strings.Builder** %5, align 8
  %40 = load %strings.Builder, %strings.Builder* %39, align 8
  %41 = bitcast %runtime.Context* %28 to i8*
  %42 = call { i64, i64 } @strings.to_string(%strings.Builder* %39, i8* %41)
  %43 = bitcast %..string* %7 to { i64, i64 }*
  store { i64, i64 } %42, { i64, i64 }* %43, align 8
  %44 = load %..string, %..string* %7, align 8
  %45 = getelementptr inbounds %runtime.Context, %runtime.Context* %28, i32 0, i32 1
  %46 = load %runtime.Allocator, %runtime.Allocator* %45, align 8
  %47 = bitcast %..string* %7 to { i64, i64 }*
  %48 = load { i64, i64 }, { i64, i64 }* %47, align 8
  %49 = bitcast %runtime.Allocator* %45 to { i64, i64 }*
  %50 = load { i64, i64 }, { i64, i64 }* %49, align 8
  %51 = bitcast %runtime.Context* %28 to i8*
  %52 = call { i64, i64 } @cutf8.ds_to_runes(%cutf8.Decode_State* %38, { i64, i64 } %48, { i64, i64 } %50, i8* %51)
  %53 = bitcast { i32*, i64 }* %8 to { i64, i64 }*
  store { i64, i64 } %52, { i64, i64 }* %53, align 8
  %54 = load { i32*, i64 }, { i32*, i64 }* %8, align 8
  store { i32*, i64 } %54, { i32*, i64 }* %6, align 8
  %55 = load %strings.Builder*, %strings.Builder** %5, align 8
  %56 = bitcast %runtime.Context* %28 to i8*
  call void @strings.builder_reset(%strings.Builder* %55, i8* %56)
  %57 = load %src.Undo_Item_Box_Remove_Selection*, %src.Undo_Item_Box_Remove_Selection** %4, align 8
  %58 = getelementptr inbounds %src.Undo_Item_Box_Remove_Selection, %src.Undo_Item_Box_Remove_Selection* %57, i32 0, i32 1
  %59 = load i64, i64* %58, align 8
  %60 = load %src.Undo_Item_Box_Remove_Selection*, %src.Undo_Item_Box_Remove_Selection** %4, align 8
  %61 = getelementptr inbounds %src.Undo_Item_Box_Remove_Selection, %src.Undo_Item_Box_Remove_Selection* %60, i32 0, i32 2
  %62 = load i64, i64* %61, align 8
  %63 = icmp slt i64 %59, %62
  %64 = select i1 %63, i64 %59, i64 %62
  store i64 %64, i64* %9, align 8
  %65 = load %src.Undo_Item_Box_Remove_Selection*, %src.Undo_Item_Box_Remove_Selection** %4, align 8
  %66 = getelementptr inbounds %src.Undo_Item_Box_Remove_Selection, %src.Undo_Item_Box_Remove_Selection* %65, i32 0, i32 1
  %67 = load i64, i64* %66, align 8
  %68 = load %src.Undo_Item_Box_Remove_Selection*, %src.Undo_Item_Box_Remove_Selection** %4, align 8
  %69 = getelementptr inbounds %src.Undo_Item_Box_Remove_Selection, %src.Undo_Item_Box_Remove_Selection* %68, i32 0, i32 2
  %70 = load i64, i64* %69, align 8
  %71 = icmp sgt i64 %67, %70
  %72 = select i1 %71, i64 %67, i64 %70
  store i64 %72, i64* %10, align 8
  %73 = load i64, i64* %10, align 8
  %74 = load i64, i64* %9, align 8
  %75 = sub i64 %73, %74
  store i64 %75, i64* %11, align 8
  %76 = bitcast %src.Undo_Item_Box_Insert_Runes* %13 to i8*
  call void @llvm.memset.p0i8.i64(i8* %76, i8 0, i64 40, i1 false)
  %77 = bitcast %src.Undo_Item_Box_Insert_Runes* %13 to i8*
  call void @llvm.memset.p0i8.i64(i8* %77, i8 0, i64 40, i1 false)
  %78 = load %src.Undo_Item_Box_Remove_Selection*, %src.Undo_Item_Box_Remove_Selection** %4, align 8
  %79 = getelementptr inbounds %src.Undo_Item_Box_Remove_Selection, %src.Undo_Item_Box_Remove_Selection* %78, i32 0, i32 0
  %80 = load %src.Box*, %src.Box** %79, align 8
  %81 = getelementptr inbounds %src.Undo_Item_Box_Insert_Runes, %src.Undo_Item_Box_Insert_Runes* %13, i32 0, i32 0
  store %src.Box* %80, %src.Box** %81, align 8
  %82 = load %src.Undo_Item_Box_Remove_Selection*, %src.Undo_Item_Box_Remove_Selection** %4, align 8
  %83 = getelementptr inbounds %src.Undo_Item_Box_Remove_Selection, %src.Undo_Item_Box_Remove_Selection* %82, i32 0, i32 1
  %84 = load i64, i64* %83, align 8
  %85 = getelementptr inbounds %src.Undo_Item_Box_Insert_Runes, %src.Undo_Item_Box_Insert_Runes* %13, i32 0, i32 1
  store i64 %84, i64* %85, align 8
  %86 = load %src.Undo_Item_Box_Remove_Selection*, %src.Undo_Item_Box_Remove_Selection** %4, align 8
  %87 = getelementptr inbounds %src.Undo_Item_Box_Remove_Selection, %src.Undo_Item_Box_Remove_Selection* %86, i32 0, i32 2
  %88 = load i64, i64* %87, align 8
  %89 = getelementptr inbounds %src.Undo_Item_Box_Insert_Runes, %src.Undo_Item_Box_Insert_Runes* %13, i32 0, i32 2
  store i64 %88, i64* %89, align 8
  %90 = load %src.Undo_Item_Box_Remove_Selection*, %src.Undo_Item_Box_Remove_Selection** %4, align 8
  %91 = getelementptr inbounds %src.Undo_Item_Box_Remove_Selection, %src.Undo_Item_Box_Remove_Selection* %90, i32 0, i32 3
  %92 = load i64, i64* %91, align 8
  %93 = getelementptr inbounds %src.Undo_Item_Box_Insert_Runes, %src.Undo_Item_Box_Insert_Runes* %13, i32 0, i32 3
  store i64 %92, i64* %93, align 8
  %94 = load i64, i64* %11, align 8
  %95 = getelementptr inbounds %src.Undo_Item_Box_Insert_Runes, %src.Undo_Item_Box_Insert_Runes* %13, i32 0, i32 4
  store i64 %94, i64* %95, align 8
  %96 = load %src.Undo_Item_Box_Insert_Runes, %src.Undo_Item_Box_Insert_Runes* %13, align 8
  store %src.Undo_Item_Box_Insert_Runes %96, %src.Undo_Item_Box_Insert_Runes* %12, align 8
  %97 = load %src.Undo_Manager*, %src.Undo_Manager** %2, align 8
  %98 = load i64, i64* %11, align 8
  %99 = mul i64 %98, 4
  %100 = add i64 40, %99
  %101 = bitcast %src.Undo_Item_Box_Insert_Runes* %12 to i8*
  %102 = bitcast %runtime.Context* %28 to i8*
  %103 = call { i64, i64 } @src.undo_push(%src.Undo_Manager* %97, i8* bitcast (void (%src.Undo_Manager*, i8*, i8*)* @src.undo_box_insert_runes to i8*), i8* %101, i64 %100, i8* %102)
  %104 = bitcast { i8*, i64 }* %15 to { i64, i64 }*
  store { i64, i64 } %103, { i64, i64 }* %104, align 8
  %105 = load { i8*, i64 }, { i8*, i64 }* %15, align 8
  store { i8*, i64 } %105, { i8*, i64 }* %14, align 8
  %106 = load { i8*, i64 }, { i8*, i64 }* %14, align 8
  %107 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %14, i32 0, i32 0
  %108 = load i8*, i8** %107, align 8
  %109 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %14, i32 0, i32 1
  %110 = load i64, i64* %109, align 8
  %111 = bitcast { i64, i64 }* %17 to %..string*
  store %..string { i8* getelementptr inbounds ([54 x i8], [54 x i8]* @"csbs$2f3", i64 0, i64 0), i64 53 }, %..string* %111, align 8
  %112 = load { i64, i64 }, { i64, i64 }* %17, align 8
  call void @runtime.bounds_check_error({ i64, i64 } %112, i32 209, i32 35, i64 40, i64 %110)
  %113 = getelementptr i8, i8* %108, i64 40
  %114 = bitcast i8* %113 to i32*
  store i32* %114, i32** %16, align 8
  %115 = load i32*, i32** %16, align 8
  %116 = load i64, i64* %11, align 8
  %117 = call { i64, i64 } @mem.slice_ptr-47489(i32* %115, i64 %116)
  %118 = bitcast { i32*, i64 }* %19 to { i64, i64 }*
  store { i64, i64 } %117, { i64, i64 }* %118, align 8
  %119 = load { i32*, i64 }, { i32*, i64 }* %19, align 8
  store { i32*, i64 } %119, { i32*, i64 }* %18, align 8
  store i64 0, i64* %20, align 8
  store i64 0, i64* %21, align 8
  store i64 0, i64* %22, align 8
  store i64 0, i64* %23, align 8
  br label %for.interval.loop

for.interval.loop:                                ; preds = %for.interval.post, %entry
  %120 = load { i32*, i64 }, { i32*, i64 }* %6, align 8
  %121 = getelementptr inbounds { i32*, i64 }, { i32*, i64 }* %6, i32 0, i32 1
  %122 = load i64, i64* %121, align 8
  %123 = load i64, i64* %22, align 8
  %124 = icmp slt i64 %123, %122
  br i1 %124, label %for.interval.body, label %for.interval.done

for.interval.body:                                ; preds = %for.interval.loop
  %125 = load i64, i64* %22, align 8
  %126 = load i64, i64* %23, align 8
  store i64 %125, i64* %24, align 8
  %127 = load i64, i64* %9, align 8
  %128 = load i64, i64* %24, align 8
  %129 = icmp sle i64 %127, %128
  %130 = zext i1 %129 to i8
  %131 = trunc i8 %130 to i1
  br i1 %131, label %cmp.and, label %if.else

cmp.and:                                          ; preds = %for.interval.body
  %132 = load i64, i64* %24, align 8
  %133 = load i64, i64* %10, align 8
  %134 = icmp slt i64 %132, %133
  %135 = zext i1 %134 to i8
  %136 = trunc i8 %135 to i1
  br i1 %136, label %if.then, label %if.else

if.then:                                          ; preds = %cmp.and
  %137 = load { i32*, i64 }, { i32*, i64 }* %18, align 8
  %138 = getelementptr inbounds { i32*, i64 }, { i32*, i64 }* %18, i32 0, i32 0
  %139 = load i32*, i32** %138, align 8
  %140 = load i64, i64* %20, align 8
  %141 = getelementptr inbounds { i32*, i64 }, { i32*, i64 }* %18, i32 0, i32 1
  %142 = load i64, i64* %141, align 8
  %143 = bitcast { i64, i64 }* %25 to %..string*
  store %..string { i8* getelementptr inbounds ([54 x i8], [54 x i8]* @"csbs$2f3", i64 0, i64 0), i64 53 }, %..string* %143, align 8
  %144 = load { i64, i64 }, { i64, i64 }* %25, align 8
  call void @runtime.bounds_check_error({ i64, i64 } %144, i32 216, i32 17, i64 %140, i64 %142)
  %145 = getelementptr i32, i32* %139, i64 %140
  %146 = load { i32*, i64 }, { i32*, i64 }* %6, align 8
  %147 = getelementptr inbounds { i32*, i64 }, { i32*, i64 }* %6, i32 0, i32 0
  %148 = load i32*, i32** %147, align 8
  %149 = load i64, i64* %24, align 8
  %150 = getelementptr inbounds { i32*, i64 }, { i32*, i64 }* %6, i32 0, i32 1
  %151 = load i64, i64* %150, align 8
  %152 = bitcast { i64, i64 }* %26 to %..string*
  store %..string { i8* getelementptr inbounds ([54 x i8], [54 x i8]* @"csbs$2f3", i64 0, i64 0), i64 53 }, %..string* %152, align 8
  %153 = load { i64, i64 }, { i64, i64 }* %26, align 8
  call void @runtime.bounds_check_error({ i64, i64 } %153, i32 216, i32 36, i64 %149, i64 %151)
  %154 = getelementptr i32, i32* %148, i64 %149
  %155 = load i32, i32* %154, align 4
  store i32 %155, i32* %145, align 4
  %156 = load i64, i64* %20, align 8
  %157 = add i64 %156, 1
  store i64 %157, i64* %20, align 8
  br label %if.done

if.else:                                          ; preds = %cmp.and, %for.interval.body
  %158 = load %strings.Builder*, %strings.Builder** %5, align 8
  %159 = load { i32*, i64 }, { i32*, i64 }* %6, align 8
  %160 = getelementptr inbounds { i32*, i64 }, { i32*, i64 }* %6, i32 0, i32 0
  %161 = load i32*, i32** %160, align 8
  %162 = load i64, i64* %24, align 8
  %163 = getelementptr inbounds { i32*, i64 }, { i32*, i64 }* %6, i32 0, i32 1
  %164 = load i64, i64* %163, align 8
  %165 = bitcast { i64, i64 }* %27 to %..string*
  store %..string { i8* getelementptr inbounds ([54 x i8], [54 x i8]* @"csbs$2f3", i64 0, i64 0), i64 53 }, %..string* %165, align 8
  %166 = load { i64, i64 }, { i64, i64 }* %27, align 8
  call void @runtime.bounds_check_error({ i64, i64 } %166, i32 219, i32 33, i64 %162, i64 %164)
  %167 = getelementptr i32, i32* %161, i64 %162
  %168 = load i32, i32* %167, align 4
  %169 = bitcast %runtime.Context* %28 to i8*
  call void @src.builder_append_rune(%strings.Builder* %158, i32 %168, i8* %169)
  br label %if.done

if.done:                                          ; preds = %if.else, %if.then
  br label %for.interval.post

for.interval.post:                                ; preds = %if.done
  %170 = load i64, i64* %22, align 8
  %171 = add i64 %170, 1
  store i64 %171, i64* %22, align 8
  %172 = load i64, i64* %23, align 8
  %173 = add i64 %172, 1
  store i64 %173, i64* %23, align 8
  br label %for.interval.loop

for.interval.done:                                ; preds = %for.interval.loop
  %174 = load %src.Undo_Item_Box_Remove_Selection*, %src.Undo_Item_Box_Remove_Selection** %4, align 8
  %175 = getelementptr inbounds %src.Undo_Item_Box_Remove_Selection, %src.Undo_Item_Box_Remove_Selection* %174, i32 0, i32 0
  %176 = load %src.Box*, %src.Box** %175, align 8
  %177 = getelementptr inbounds %src.Box, %src.Box* %176, i32 0, i32 2
  %178 = load i64, i64* %9, align 8
  store i64 %178, i64* %177, align 8
  %179 = load %src.Undo_Item_Box_Remove_Selection*, %src.Undo_Item_Box_Remove_Selection** %4, align 8
  %180 = getelementptr inbounds %src.Undo_Item_Box_Remove_Selection, %src.Undo_Item_Box_Remove_Selection* %179, i32 0, i32 0
  %181 = load %src.Box*, %src.Box** %180, align 8
  %182 = getelementptr inbounds %src.Box, %src.Box* %181, i32 0, i32 3
  %183 = load i64, i64* %9, align 8
  store i64 %183, i64* %182, align 8
  ret void
}

define internal void @src.undo_box_insert_runes(%src.Undo_Manager* %0, i8* %1, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %2 = alloca %src.Undo_Manager*, align 8
  %3 = alloca i8*, align 8
  %4 = alloca %src.Undo_Item_Box_Insert_Runes*, align 8
  %5 = alloca %strings.Builder*, align 8
  %6 = alloca { i32*, i64 }, align 8
  %7 = alloca %..string, align 8
  %8 = alloca { i32*, i64 }, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i32*, align 8
  %13 = alloca { i32*, i64 }, align 8
  %14 = alloca { i32*, i64 }, align 8
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  %17 = alloca i64, align 8
  %18 = alloca i64, align 8
  %19 = alloca i64, align 8
  %20 = alloca i64, align 8
  %21 = alloca i64, align 8
  %22 = alloca i64, align 8
  %23 = alloca { i64, i64 }, align 8
  %24 = alloca { i64, i64 }, align 8
  %25 = alloca i64, align 8
  %26 = alloca i64, align 8
  %27 = alloca i64, align 8
  %28 = alloca i64, align 8
  %29 = alloca { i64, i64 }, align 8
  %30 = alloca %src.Undo_Item_Box_Remove_Selection, align 8
  %31 = alloca %src.Undo_Item_Box_Remove_Selection, align 8
  %32 = alloca { i8*, i64 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Undo_Manager* %0, %src.Undo_Manager** %2, align 8
  store i8* %1, i8** %3, align 8
  %33 = bitcast i8* %__.context_ptr to %runtime.Context*
  %34 = load i8*, i8** %3, align 8
  %35 = bitcast i8* %34 to %src.Undo_Item_Box_Insert_Runes*
  store %src.Undo_Item_Box_Insert_Runes* %35, %src.Undo_Item_Box_Insert_Runes** %4, align 8
  %36 = load %src.Undo_Item_Box_Insert_Runes*, %src.Undo_Item_Box_Insert_Runes** %4, align 8
  %37 = getelementptr inbounds %src.Undo_Item_Box_Insert_Runes, %src.Undo_Item_Box_Insert_Runes* %36, i32 0, i32 0
  %38 = load %src.Box*, %src.Box** %37, align 8
  %39 = getelementptr inbounds %src.Box, %src.Box* %38, i32 0, i32 0
  store %strings.Builder* %39, %strings.Builder** %5, align 8
  %40 = load %src.Undo_Item_Box_Insert_Runes*, %src.Undo_Item_Box_Insert_Runes** %4, align 8
  %41 = getelementptr inbounds %src.Undo_Item_Box_Insert_Runes, %src.Undo_Item_Box_Insert_Runes* %40, i32 0, i32 0
  %42 = load %src.Box*, %src.Box** %41, align 8
  %43 = getelementptr inbounds %src.Box, %src.Box* %42, i32 0, i32 4
  %44 = load %strings.Builder*, %strings.Builder** %5, align 8
  %45 = load %strings.Builder, %strings.Builder* %44, align 8
  %46 = bitcast %runtime.Context* %33 to i8*
  %47 = call { i64, i64 } @strings.to_string(%strings.Builder* %44, i8* %46)
  %48 = bitcast %..string* %7 to { i64, i64 }*
  store { i64, i64 } %47, { i64, i64 }* %48, align 8
  %49 = load %..string, %..string* %7, align 8
  %50 = getelementptr inbounds %runtime.Context, %runtime.Context* %33, i32 0, i32 1
  %51 = load %runtime.Allocator, %runtime.Allocator* %50, align 8
  %52 = bitcast %..string* %7 to { i64, i64 }*
  %53 = load { i64, i64 }, { i64, i64 }* %52, align 8
  %54 = bitcast %runtime.Allocator* %50 to { i64, i64 }*
  %55 = load { i64, i64 }, { i64, i64 }* %54, align 8
  %56 = bitcast %runtime.Context* %33 to i8*
  %57 = call { i64, i64 } @cutf8.ds_to_runes(%cutf8.Decode_State* %43, { i64, i64 } %53, { i64, i64 } %55, i8* %56)
  %58 = bitcast { i32*, i64 }* %8 to { i64, i64 }*
  store { i64, i64 } %57, { i64, i64 }* %58, align 8
  %59 = load { i32*, i64 }, { i32*, i64 }* %8, align 8
  store { i32*, i64 } %59, { i32*, i64 }* %6, align 8
  %60 = load %strings.Builder*, %strings.Builder** %5, align 8
  %61 = bitcast %runtime.Context* %33 to i8*
  call void @strings.builder_reset(%strings.Builder* %60, i8* %61)
  %62 = load %src.Undo_Item_Box_Insert_Runes*, %src.Undo_Item_Box_Insert_Runes** %4, align 8
  %63 = getelementptr inbounds %src.Undo_Item_Box_Insert_Runes, %src.Undo_Item_Box_Insert_Runes* %62, i32 0, i32 1
  %64 = load i64, i64* %63, align 8
  %65 = load %src.Undo_Item_Box_Insert_Runes*, %src.Undo_Item_Box_Insert_Runes** %4, align 8
  %66 = getelementptr inbounds %src.Undo_Item_Box_Insert_Runes, %src.Undo_Item_Box_Insert_Runes* %65, i32 0, i32 2
  %67 = load i64, i64* %66, align 8
  %68 = icmp slt i64 %64, %67
  %69 = select i1 %68, i64 %64, i64 %67
  store i64 %69, i64* %9, align 8
  %70 = load %src.Undo_Item_Box_Insert_Runes*, %src.Undo_Item_Box_Insert_Runes** %4, align 8
  %71 = getelementptr inbounds %src.Undo_Item_Box_Insert_Runes, %src.Undo_Item_Box_Insert_Runes* %70, i32 0, i32 1
  %72 = load i64, i64* %71, align 8
  %73 = load %src.Undo_Item_Box_Insert_Runes*, %src.Undo_Item_Box_Insert_Runes** %4, align 8
  %74 = getelementptr inbounds %src.Undo_Item_Box_Insert_Runes, %src.Undo_Item_Box_Insert_Runes* %73, i32 0, i32 2
  %75 = load i64, i64* %74, align 8
  %76 = icmp sgt i64 %72, %75
  %77 = select i1 %76, i64 %72, i64 %75
  store i64 %77, i64* %10, align 8
  %78 = load %src.Undo_Item_Box_Insert_Runes*, %src.Undo_Item_Box_Insert_Runes** %4, align 8
  %79 = getelementptr inbounds %src.Undo_Item_Box_Insert_Runes, %src.Undo_Item_Box_Insert_Runes* %78, i32 0, i32 3
  %80 = load i64, i64* %79, align 8
  %81 = icmp ne i64 %80, 0
  %82 = zext i1 %81 to i8
  %83 = trunc i8 %82 to i1
  br i1 %83, label %if.then, label %if.else2

if.then:                                          ; preds = %entry
  %84 = load %src.Undo_Item_Box_Insert_Runes*, %src.Undo_Item_Box_Insert_Runes** %4, align 8
  %85 = getelementptr inbounds %src.Undo_Item_Box_Insert_Runes, %src.Undo_Item_Box_Insert_Runes* %84, i32 0, i32 3
  %86 = load i64, i64* %85, align 8
  %87 = icmp eq i64 %86, 1
  %88 = zext i1 %87 to i8
  %89 = trunc i8 %88 to i1
  br i1 %89, label %if.then1, label %if.else

if.then1:                                         ; preds = %if.then
  %90 = load i64, i64* %9, align 8
  br label %if.done

if.else:                                          ; preds = %if.then
  %91 = load i64, i64* %10, align 8
  br label %if.done

if.done:                                          ; preds = %if.else, %if.then1
  %92 = phi i64 [ %90, %if.then1 ], [ %91, %if.else ]
  store i64 %92, i64* %11, align 8
  %93 = load %src.Undo_Item_Box_Insert_Runes*, %src.Undo_Item_Box_Insert_Runes** %4, align 8
  %94 = getelementptr inbounds %src.Undo_Item_Box_Insert_Runes, %src.Undo_Item_Box_Insert_Runes* %93, i32 0, i32 0
  %95 = load %src.Box*, %src.Box** %94, align 8
  %96 = getelementptr inbounds %src.Box, %src.Box* %95, i32 0, i32 2
  %97 = load i64, i64* %11, align 8
  store i64 %97, i64* %96, align 8
  %98 = load %src.Undo_Item_Box_Insert_Runes*, %src.Undo_Item_Box_Insert_Runes** %4, align 8
  %99 = getelementptr inbounds %src.Undo_Item_Box_Insert_Runes, %src.Undo_Item_Box_Insert_Runes* %98, i32 0, i32 0
  %100 = load %src.Box*, %src.Box** %99, align 8
  %101 = getelementptr inbounds %src.Box, %src.Box* %100, i32 0, i32 3
  %102 = load i64, i64* %11, align 8
  store i64 %102, i64* %101, align 8
  br label %if.done3

if.else2:                                         ; preds = %entry
  %103 = load %src.Undo_Item_Box_Insert_Runes*, %src.Undo_Item_Box_Insert_Runes** %4, align 8
  %104 = getelementptr inbounds %src.Undo_Item_Box_Insert_Runes, %src.Undo_Item_Box_Insert_Runes* %103, i32 0, i32 0
  %105 = load %src.Box*, %src.Box** %104, align 8
  %106 = getelementptr inbounds %src.Box, %src.Box* %105, i32 0, i32 2
  %107 = load %src.Undo_Item_Box_Insert_Runes*, %src.Undo_Item_Box_Insert_Runes** %4, align 8
  %108 = getelementptr inbounds %src.Undo_Item_Box_Insert_Runes, %src.Undo_Item_Box_Insert_Runes* %107, i32 0, i32 1
  %109 = load i64, i64* %108, align 8
  store i64 %109, i64* %106, align 8
  %110 = load %src.Undo_Item_Box_Insert_Runes*, %src.Undo_Item_Box_Insert_Runes** %4, align 8
  %111 = getelementptr inbounds %src.Undo_Item_Box_Insert_Runes, %src.Undo_Item_Box_Insert_Runes* %110, i32 0, i32 0
  %112 = load %src.Box*, %src.Box** %111, align 8
  %113 = getelementptr inbounds %src.Box, %src.Box* %112, i32 0, i32 3
  %114 = load %src.Undo_Item_Box_Insert_Runes*, %src.Undo_Item_Box_Insert_Runes** %4, align 8
  %115 = getelementptr inbounds %src.Undo_Item_Box_Insert_Runes, %src.Undo_Item_Box_Insert_Runes* %114, i32 0, i32 2
  %116 = load i64, i64* %115, align 8
  store i64 %116, i64* %113, align 8
  br label %if.done3

if.done3:                                         ; preds = %if.else2, %if.done
  %117 = load i8*, i8** %3, align 8
  %118 = ptrtoint i8* %117 to i64
  %119 = add i64 %118, 40
  %120 = inttoptr i64 %119 to i32*
  store i32* %120, i32** %12, align 8
  %121 = load i32*, i32** %12, align 8
  %122 = load %src.Undo_Item_Box_Insert_Runes*, %src.Undo_Item_Box_Insert_Runes** %4, align 8
  %123 = getelementptr inbounds %src.Undo_Item_Box_Insert_Runes, %src.Undo_Item_Box_Insert_Runes* %122, i32 0, i32 4
  %124 = load i64, i64* %123, align 8
  %125 = call { i64, i64 } @mem.slice_ptr-47489(i32* %121, i64 %124)
  %126 = bitcast { i32*, i64 }* %14 to { i64, i64 }*
  store { i64, i64 } %125, { i64, i64 }* %126, align 8
  %127 = load { i32*, i64 }, { i32*, i64 }* %14, align 8
  store { i32*, i64 } %127, { i32*, i64 }* %13, align 8
  store i64 0, i64* %15, align 8
  store i64 0, i64* %16, align 8
  store i64 0, i64* %17, align 8
  br label %for.interval.loop

for.interval.loop:                                ; preds = %for.interval.post8, %if.done3
  %128 = load { i32*, i64 }, { i32*, i64 }* %6, align 8
  %129 = getelementptr inbounds { i32*, i64 }, { i32*, i64 }* %6, i32 0, i32 1
  %130 = load i64, i64* %129, align 8
  %131 = load i64, i64* %16, align 8
  %132 = icmp slt i64 %131, %130
  br i1 %132, label %for.interval.body, label %for.interval.done9

for.interval.body:                                ; preds = %for.interval.loop
  %133 = load i64, i64* %16, align 8
  %134 = load i64, i64* %17, align 8
  store i64 %133, i64* %18, align 8
  %135 = load i64, i64* %18, align 8
  %136 = load i64, i64* %9, align 8
  %137 = icmp eq i64 %135, %136
  %138 = zext i1 %137 to i8
  %139 = trunc i8 %138 to i1
  br i1 %139, label %if.then4, label %if.done7

if.then4:                                         ; preds = %for.interval.body
  store i64 0, i64* %19, align 8
  store i64 0, i64* %20, align 8
  store i64 0, i64* %21, align 8
  br label %for.interval.loop5

for.interval.loop5:                               ; preds = %for.interval.post, %if.then4
  %140 = load %src.Undo_Item_Box_Insert_Runes*, %src.Undo_Item_Box_Insert_Runes** %4, align 8
  %141 = getelementptr inbounds %src.Undo_Item_Box_Insert_Runes, %src.Undo_Item_Box_Insert_Runes* %140, i32 0, i32 4
  %142 = load i64, i64* %141, align 8
  %143 = load i64, i64* %20, align 8
  %144 = icmp slt i64 %143, %142
  br i1 %144, label %for.interval.body6, label %for.interval.done

for.interval.body6:                               ; preds = %for.interval.loop5
  %145 = load i64, i64* %20, align 8
  %146 = load i64, i64* %21, align 8
  store i64 %145, i64* %22, align 8
  %147 = load %strings.Builder*, %strings.Builder** %5, align 8
  %148 = load { i32*, i64 }, { i32*, i64 }* %13, align 8
  %149 = getelementptr inbounds { i32*, i64 }, { i32*, i64 }* %13, i32 0, i32 0
  %150 = load i32*, i32** %149, align 8
  %151 = load i64, i64* %22, align 8
  %152 = getelementptr inbounds { i32*, i64 }, { i32*, i64 }* %13, i32 0, i32 1
  %153 = load i64, i64* %152, align 8
  %154 = bitcast { i64, i64 }* %23 to %..string*
  store %..string { i8* getelementptr inbounds ([54 x i8], [54 x i8]* @"csbs$2f3", i64 0, i64 0), i64 53 }, %..string* %154, align 8
  %155 = load { i64, i64 }, { i64, i64 }* %23, align 8
  call void @runtime.bounds_check_error({ i64, i64 } %155, i32 268, i32 41, i64 %151, i64 %153)
  %156 = getelementptr i32, i32* %150, i64 %151
  %157 = load i32, i32* %156, align 4
  %158 = bitcast %runtime.Context* %33 to i8*
  call void @src.builder_append_rune(%strings.Builder* %147, i32 %157, i8* %158)
  br label %for.interval.post

for.interval.post:                                ; preds = %for.interval.body6
  %159 = load i64, i64* %20, align 8
  %160 = add i64 %159, 1
  store i64 %160, i64* %20, align 8
  %161 = load i64, i64* %21, align 8
  %162 = add i64 %161, 1
  store i64 %162, i64* %21, align 8
  br label %for.interval.loop5

for.interval.done:                                ; preds = %for.interval.loop5
  br label %if.done7

if.done7:                                         ; preds = %for.interval.done, %for.interval.body
  %163 = load %strings.Builder*, %strings.Builder** %5, align 8
  %164 = load { i32*, i64 }, { i32*, i64 }* %6, align 8
  %165 = getelementptr inbounds { i32*, i64 }, { i32*, i64 }* %6, i32 0, i32 0
  %166 = load i32*, i32** %165, align 8
  %167 = load i64, i64* %18, align 8
  %168 = getelementptr inbounds { i32*, i64 }, { i32*, i64 }* %6, i32 0, i32 1
  %169 = load i64, i64* %168, align 8
  %170 = bitcast { i64, i64 }* %24 to %..string*
  store %..string { i8* getelementptr inbounds ([54 x i8], [54 x i8]* @"csbs$2f3", i64 0, i64 0), i64 53 }, %..string* %170, align 8
  %171 = load { i64, i64 }, { i64, i64 }* %24, align 8
  call void @runtime.bounds_check_error({ i64, i64 } %171, i32 272, i32 32, i64 %167, i64 %169)
  %172 = getelementptr i32, i32* %166, i64 %167
  %173 = load i32, i32* %172, align 4
  %174 = bitcast %runtime.Context* %33 to i8*
  call void @src.builder_append_rune(%strings.Builder* %163, i32 %173, i8* %174)
  br label %for.interval.post8

for.interval.post8:                               ; preds = %if.done7
  %175 = load i64, i64* %16, align 8
  %176 = add i64 %175, 1
  store i64 %176, i64* %16, align 8
  %177 = load i64, i64* %17, align 8
  %178 = add i64 %177, 1
  store i64 %178, i64* %17, align 8
  br label %for.interval.loop

for.interval.done9:                               ; preds = %for.interval.loop
  %179 = load i64, i64* %9, align 8
  %180 = load { i32*, i64 }, { i32*, i64 }* %6, align 8
  %181 = getelementptr inbounds { i32*, i64 }, { i32*, i64 }* %6, i32 0, i32 1
  %182 = load i64, i64* %181, align 8
  %183 = icmp sge i64 %179, %182
  %184 = zext i1 %183 to i8
  %185 = trunc i8 %184 to i1
  br i1 %185, label %if.then10, label %if.done15

if.then10:                                        ; preds = %for.interval.done9
  store i64 0, i64* %25, align 8
  store i64 0, i64* %26, align 8
  store i64 0, i64* %27, align 8
  br label %for.interval.loop11

for.interval.loop11:                              ; preds = %for.interval.post13, %if.then10
  %186 = load %src.Undo_Item_Box_Insert_Runes*, %src.Undo_Item_Box_Insert_Runes** %4, align 8
  %187 = getelementptr inbounds %src.Undo_Item_Box_Insert_Runes, %src.Undo_Item_Box_Insert_Runes* %186, i32 0, i32 4
  %188 = load i64, i64* %187, align 8
  %189 = load i64, i64* %26, align 8
  %190 = icmp slt i64 %189, %188
  br i1 %190, label %for.interval.body12, label %for.interval.done14

for.interval.body12:                              ; preds = %for.interval.loop11
  %191 = load i64, i64* %26, align 8
  %192 = load i64, i64* %27, align 8
  store i64 %191, i64* %28, align 8
  %193 = load %strings.Builder*, %strings.Builder** %5, align 8
  %194 = load { i32*, i64 }, { i32*, i64 }* %13, align 8
  %195 = getelementptr inbounds { i32*, i64 }, { i32*, i64 }* %13, i32 0, i32 0
  %196 = load i32*, i32** %195, align 8
  %197 = load i64, i64* %28, align 8
  %198 = getelementptr inbounds { i32*, i64 }, { i32*, i64 }* %13, i32 0, i32 1
  %199 = load i64, i64* %198, align 8
  %200 = bitcast { i64, i64 }* %29 to %..string*
  store %..string { i8* getelementptr inbounds ([54 x i8], [54 x i8]* @"csbs$2f3", i64 0, i64 0), i64 53 }, %..string* %200, align 8
  %201 = load { i64, i64 }, { i64, i64 }* %29, align 8
  call void @runtime.bounds_check_error({ i64, i64 } %201, i32 278, i32 40, i64 %197, i64 %199)
  %202 = getelementptr i32, i32* %196, i64 %197
  %203 = load i32, i32* %202, align 4
  %204 = bitcast %runtime.Context* %33 to i8*
  call void @src.builder_append_rune(%strings.Builder* %193, i32 %203, i8* %204)
  br label %for.interval.post13

for.interval.post13:                              ; preds = %for.interval.body12
  %205 = load i64, i64* %26, align 8
  %206 = add i64 %205, 1
  store i64 %206, i64* %26, align 8
  %207 = load i64, i64* %27, align 8
  %208 = add i64 %207, 1
  store i64 %208, i64* %27, align 8
  br label %for.interval.loop11

for.interval.done14:                              ; preds = %for.interval.loop11
  br label %if.done15

if.done15:                                        ; preds = %for.interval.done14, %for.interval.done9
  %209 = bitcast %src.Undo_Item_Box_Remove_Selection* %31 to i8*
  call void @llvm.memset.p0i8.i64(i8* %209, i8 0, i64 32, i1 false)
  store %src.Undo_Item_Box_Remove_Selection zeroinitializer, %src.Undo_Item_Box_Remove_Selection* %31, align 8
  %210 = load %src.Undo_Item_Box_Insert_Runes*, %src.Undo_Item_Box_Insert_Runes** %4, align 8
  %211 = getelementptr inbounds %src.Undo_Item_Box_Insert_Runes, %src.Undo_Item_Box_Insert_Runes* %210, i32 0, i32 0
  %212 = load %src.Box*, %src.Box** %211, align 8
  %213 = getelementptr inbounds %src.Undo_Item_Box_Remove_Selection, %src.Undo_Item_Box_Remove_Selection* %31, i32 0, i32 0
  store %src.Box* %212, %src.Box** %213, align 8
  %214 = load %src.Undo_Item_Box_Insert_Runes*, %src.Undo_Item_Box_Insert_Runes** %4, align 8
  %215 = getelementptr inbounds %src.Undo_Item_Box_Insert_Runes, %src.Undo_Item_Box_Insert_Runes* %214, i32 0, i32 1
  %216 = load i64, i64* %215, align 8
  %217 = getelementptr inbounds %src.Undo_Item_Box_Remove_Selection, %src.Undo_Item_Box_Remove_Selection* %31, i32 0, i32 1
  store i64 %216, i64* %217, align 8
  %218 = load %src.Undo_Item_Box_Insert_Runes*, %src.Undo_Item_Box_Insert_Runes** %4, align 8
  %219 = getelementptr inbounds %src.Undo_Item_Box_Insert_Runes, %src.Undo_Item_Box_Insert_Runes* %218, i32 0, i32 2
  %220 = load i64, i64* %219, align 8
  %221 = getelementptr inbounds %src.Undo_Item_Box_Remove_Selection, %src.Undo_Item_Box_Remove_Selection* %31, i32 0, i32 2
  store i64 %220, i64* %221, align 8
  %222 = load %src.Undo_Item_Box_Insert_Runes*, %src.Undo_Item_Box_Insert_Runes** %4, align 8
  %223 = getelementptr inbounds %src.Undo_Item_Box_Insert_Runes, %src.Undo_Item_Box_Insert_Runes* %222, i32 0, i32 3
  %224 = load i64, i64* %223, align 8
  %225 = getelementptr inbounds %src.Undo_Item_Box_Remove_Selection, %src.Undo_Item_Box_Remove_Selection* %31, i32 0, i32 3
  store i64 %224, i64* %225, align 8
  %226 = load %src.Undo_Item_Box_Remove_Selection, %src.Undo_Item_Box_Remove_Selection* %31, align 8
  store %src.Undo_Item_Box_Remove_Selection %226, %src.Undo_Item_Box_Remove_Selection* %30, align 8
  %227 = load %src.Undo_Manager*, %src.Undo_Manager** %2, align 8
  %228 = bitcast %src.Undo_Item_Box_Remove_Selection* %30 to i8*
  %229 = bitcast %runtime.Context* %33 to i8*
  %230 = call { i64, i64 } @src.undo_push(%src.Undo_Manager* %227, i8* bitcast (void (%src.Undo_Manager*, i8*, i8*)* @src.undo_box_remove_selection to i8*), i8* %228, i64 32, i8* %229)
  %231 = bitcast { i8*, i64 }* %32 to { i64, i64 }*
  store { i64, i64 } %230, { i64, i64 }* %231, align 8
  %232 = load { i8*, i64 }, { i8*, i64 }* %32, align 8
  ret void
}

define internal void @src.undo_box_uppercased_content_reset(%src.Undo_Manager* %0, i8* %1, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %2 = alloca %src.Undo_Manager*, align 8
  %3 = alloca i8*, align 8
  %4 = alloca %src.Undo_Builder_Uppercased_Content_Reset*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca %..string, align 8
  %7 = alloca %..string, align 8
  %8 = alloca %src.Undo_Builder_Uppercased_Content, align 8
  %9 = alloca %src.Undo_Builder_Uppercased_Content, align 8
  %10 = alloca { i8*, i64 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Undo_Manager* %0, %src.Undo_Manager** %2, align 8
  store i8* %1, i8** %3, align 8
  %11 = bitcast i8* %__.context_ptr to %runtime.Context*
  %12 = load i8*, i8** %3, align 8
  %13 = bitcast i8* %12 to %src.Undo_Builder_Uppercased_Content_Reset*
  store %src.Undo_Builder_Uppercased_Content_Reset* %13, %src.Undo_Builder_Uppercased_Content_Reset** %4, align 8
  %14 = load i8*, i8** %3, align 8
  %15 = ptrtoint i8* %14 to i64
  %16 = add i64 %15, 16
  %17 = inttoptr i64 %16 to i8*
  store i8* %17, i8** %5, align 8
  %18 = load i8*, i8** %5, align 8
  %19 = load %src.Undo_Builder_Uppercased_Content_Reset*, %src.Undo_Builder_Uppercased_Content_Reset** %4, align 8
  %20 = getelementptr inbounds %src.Undo_Builder_Uppercased_Content_Reset, %src.Undo_Builder_Uppercased_Content_Reset* %19, i32 0, i32 1
  %21 = load i64, i64* %20, align 8
  %22 = bitcast %runtime.Context* %11 to i8*
  %23 = call { i64, i64 } @strings.string_from_ptr(i8* %18, i64 %21, i8* %22)
  %24 = bitcast %..string* %7 to { i64, i64 }*
  store { i64, i64 } %23, { i64, i64 }* %24, align 8
  %25 = load %..string, %..string* %7, align 8
  store %..string %25, %..string* %6, align 8
  %26 = load %src.Undo_Builder_Uppercased_Content_Reset*, %src.Undo_Builder_Uppercased_Content_Reset** %4, align 8
  %27 = getelementptr inbounds %src.Undo_Builder_Uppercased_Content_Reset, %src.Undo_Builder_Uppercased_Content_Reset* %26, i32 0, i32 0
  %28 = load %strings.Builder*, %strings.Builder** %27, align 8
  %29 = bitcast %runtime.Context* %11 to i8*
  call void @strings.builder_reset(%strings.Builder* %28, i8* %29)
  %30 = load %src.Undo_Builder_Uppercased_Content_Reset*, %src.Undo_Builder_Uppercased_Content_Reset** %4, align 8
  %31 = getelementptr inbounds %src.Undo_Builder_Uppercased_Content_Reset, %src.Undo_Builder_Uppercased_Content_Reset* %30, i32 0, i32 0
  %32 = load %strings.Builder*, %strings.Builder** %31, align 8
  %33 = load %..string, %..string* %6, align 8
  %34 = bitcast %..string* %6 to { i64, i64 }*
  %35 = load { i64, i64 }, { i64, i64 }* %34, align 8
  %36 = bitcast %runtime.Context* %11 to i8*
  %37 = call i64 @strings.write_string(%strings.Builder* %32, { i64, i64 } %35, i8* %36)
  %38 = bitcast %src.Undo_Builder_Uppercased_Content* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* %38, i8 0, i64 8, i1 false)
  store %src.Undo_Builder_Uppercased_Content zeroinitializer, %src.Undo_Builder_Uppercased_Content* %9, align 8
  %39 = load %src.Undo_Builder_Uppercased_Content_Reset*, %src.Undo_Builder_Uppercased_Content_Reset** %4, align 8
  %40 = getelementptr inbounds %src.Undo_Builder_Uppercased_Content_Reset, %src.Undo_Builder_Uppercased_Content_Reset* %39, i32 0, i32 0
  %41 = load %strings.Builder*, %strings.Builder** %40, align 8
  %42 = getelementptr inbounds %src.Undo_Builder_Uppercased_Content, %src.Undo_Builder_Uppercased_Content* %9, i32 0, i32 0
  store %strings.Builder* %41, %strings.Builder** %42, align 8
  %43 = load %src.Undo_Builder_Uppercased_Content, %src.Undo_Builder_Uppercased_Content* %9, align 8
  store %src.Undo_Builder_Uppercased_Content %43, %src.Undo_Builder_Uppercased_Content* %8, align 8
  %44 = load %src.Undo_Manager*, %src.Undo_Manager** %2, align 8
  %45 = bitcast %src.Undo_Builder_Uppercased_Content* %8 to i8*
  %46 = bitcast %runtime.Context* %11 to i8*
  %47 = call { i64, i64 } @src.undo_push(%src.Undo_Manager* %44, i8* bitcast (void (%src.Undo_Manager*, i8*, i8*)* @src.undo_box_uppercased_content to i8*), i8* %45, i64 8, i8* %46)
  %48 = bitcast { i8*, i64 }* %10 to { i64, i64 }*
  store { i64, i64 } %47, { i64, i64 }* %48, align 8
  %49 = load { i8*, i64 }, { i8*, i64 }* %10, align 8
  ret void
}

define internal void @src.undo_box_uppercased_content(%src.Undo_Manager* %0, i8* %1, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %2 = alloca %src.Undo_Manager*, align 8
  %3 = alloca i8*, align 8
  %4 = alloca %src.Undo_Builder_Uppercased_Content*, align 8
  %5 = alloca %src.Undo_Builder_Uppercased_Content_Reset, align 8
  %6 = alloca %src.Undo_Builder_Uppercased_Content_Reset, align 8
  %7 = alloca { i8*, i64 }, align 8
  %8 = alloca { i8*, i64 }, align 8
  %9 = alloca i8*, align 8
  %10 = alloca { i64, i64 }, align 8
  %11 = alloca %..string, align 8
  %12 = alloca %..string, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Undo_Manager* %0, %src.Undo_Manager** %2, align 8
  store i8* %1, i8** %3, align 8
  %13 = bitcast i8* %__.context_ptr to %runtime.Context*
  %14 = load i8*, i8** %3, align 8
  %15 = bitcast i8* %14 to %src.Undo_Builder_Uppercased_Content*
  store %src.Undo_Builder_Uppercased_Content* %15, %src.Undo_Builder_Uppercased_Content** %4, align 8
  %16 = bitcast %src.Undo_Builder_Uppercased_Content_Reset* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* %16, i8 0, i64 16, i1 false)
  store %src.Undo_Builder_Uppercased_Content_Reset zeroinitializer, %src.Undo_Builder_Uppercased_Content_Reset* %6, align 8
  %17 = load %src.Undo_Builder_Uppercased_Content*, %src.Undo_Builder_Uppercased_Content** %4, align 8
  %18 = getelementptr inbounds %src.Undo_Builder_Uppercased_Content, %src.Undo_Builder_Uppercased_Content* %17, i32 0, i32 0
  %19 = load %strings.Builder*, %strings.Builder** %18, align 8
  %20 = getelementptr inbounds %src.Undo_Builder_Uppercased_Content_Reset, %src.Undo_Builder_Uppercased_Content_Reset* %6, i32 0, i32 0
  store %strings.Builder* %19, %strings.Builder** %20, align 8
  %21 = load %src.Undo_Builder_Uppercased_Content*, %src.Undo_Builder_Uppercased_Content** %4, align 8
  %22 = getelementptr inbounds %src.Undo_Builder_Uppercased_Content, %src.Undo_Builder_Uppercased_Content* %21, i32 0, i32 0
  %23 = load %strings.Builder*, %strings.Builder** %22, align 8
  %24 = getelementptr inbounds %strings.Builder, %strings.Builder* %23, i32 0, i32 0
  %25 = load { i8*, i64, i64, %runtime.Allocator }, { i8*, i64, i64, %runtime.Allocator }* %24, align 8
  %26 = getelementptr inbounds { i8*, i64, i64, %runtime.Allocator }, { i8*, i64, i64, %runtime.Allocator }* %24, i32 0, i32 1
  %27 = load i64, i64* %26, align 8
  %28 = getelementptr inbounds %src.Undo_Builder_Uppercased_Content_Reset, %src.Undo_Builder_Uppercased_Content_Reset* %6, i32 0, i32 1
  store i64 %27, i64* %28, align 8
  %29 = load %src.Undo_Builder_Uppercased_Content_Reset, %src.Undo_Builder_Uppercased_Content_Reset* %6, align 8
  store %src.Undo_Builder_Uppercased_Content_Reset %29, %src.Undo_Builder_Uppercased_Content_Reset* %5, align 8
  %30 = load %src.Undo_Manager*, %src.Undo_Manager** %2, align 8
  %31 = getelementptr inbounds %src.Undo_Builder_Uppercased_Content_Reset, %src.Undo_Builder_Uppercased_Content_Reset* %5, i32 0, i32 1
  %32 = load i64, i64* %31, align 8
  %33 = add i64 16, %32
  %34 = bitcast %src.Undo_Builder_Uppercased_Content_Reset* %5 to i8*
  %35 = bitcast %runtime.Context* %13 to i8*
  %36 = call { i64, i64 } @src.undo_push(%src.Undo_Manager* %30, i8* bitcast (void (%src.Undo_Manager*, i8*, i8*)* @src.undo_box_uppercased_content_reset to i8*), i8* %34, i64 %33, i8* %35)
  %37 = bitcast { i8*, i64 }* %8 to { i64, i64 }*
  store { i64, i64 } %36, { i64, i64 }* %37, align 8
  %38 = load { i8*, i64 }, { i8*, i64 }* %8, align 8
  store { i8*, i64 } %38, { i8*, i64 }* %7, align 8
  %39 = load { i8*, i64 }, { i8*, i64 }* %7, align 8
  %40 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %7, i32 0, i32 0
  %41 = load i8*, i8** %40, align 8
  %42 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %7, i32 0, i32 1
  %43 = load i64, i64* %42, align 8
  %44 = bitcast { i64, i64 }* %10 to %..string*
  store %..string { i8* getelementptr inbounds ([54 x i8], [54 x i8]* @"csbs$2f3", i64 0, i64 0), i64 53 }, %..string* %44, align 8
  %45 = load { i64, i64 }, { i64, i64 }* %10, align 8
  call void @runtime.bounds_check_error({ i64, i64 } %45, i32 331, i32 32, i64 16, i64 %43)
  %46 = getelementptr i8, i8* %41, i64 16
  store i8* %46, i8** %9, align 8
  %47 = load i8*, i8** %9, align 8
  %48 = load %src.Undo_Builder_Uppercased_Content*, %src.Undo_Builder_Uppercased_Content** %4, align 8
  %49 = getelementptr inbounds %src.Undo_Builder_Uppercased_Content, %src.Undo_Builder_Uppercased_Content* %48, i32 0, i32 0
  %50 = load %strings.Builder*, %strings.Builder** %49, align 8
  %51 = getelementptr inbounds %strings.Builder, %strings.Builder* %50, i32 0, i32 0
  %52 = load { i8*, i64, i64, %runtime.Allocator }, { i8*, i64, i64, %runtime.Allocator }* %51, align 8
  %53 = call i8* @runtime.raw_dynamic_array_data-47534({ i8*, i64, i64, %runtime.Allocator }* %51)
  %54 = getelementptr inbounds %src.Undo_Builder_Uppercased_Content_Reset, %src.Undo_Builder_Uppercased_Content_Reset* %5, i32 0, i32 1
  %55 = load i64, i64* %54, align 8
  %56 = call i8* @mem.copy(i8* %47, i8* %53, i64 %55)
  %57 = load %src.Undo_Builder_Uppercased_Content*, %src.Undo_Builder_Uppercased_Content** %4, align 8
  %58 = getelementptr inbounds %src.Undo_Builder_Uppercased_Content, %src.Undo_Builder_Uppercased_Content* %57, i32 0, i32 0
  %59 = load %strings.Builder*, %strings.Builder** %58, align 8
  %60 = load %strings.Builder, %strings.Builder* %59, align 8
  %61 = bitcast %runtime.Context* %13 to i8*
  %62 = call { i64, i64 } @strings.to_string(%strings.Builder* %59, i8* %61)
  %63 = bitcast %..string* %12 to { i64, i64 }*
  store { i64, i64 } %62, { i64, i64 }* %63, align 8
  %64 = load %..string, %..string* %12, align 8
  store %..string %64, %..string* %11, align 8
  %65 = load %src.Undo_Builder_Uppercased_Content*, %src.Undo_Builder_Uppercased_Content** %4, align 8
  %66 = getelementptr inbounds %src.Undo_Builder_Uppercased_Content, %src.Undo_Builder_Uppercased_Content* %65, i32 0, i32 0
  %67 = load %strings.Builder*, %strings.Builder** %66, align 8
  %68 = load %..string, %..string* %11, align 8
  %69 = bitcast %..string* %11 to { i64, i64 }*
  %70 = load { i64, i64 }, { i64, i64 }* %69, align 8
  %71 = bitcast %runtime.Context* %13 to i8*
  call void @src.builder_write_uppercased_string(%strings.Builder* %67, { i64, i64 } %70, i8* %71)
  ret void
}

define internal i64 @src.text_box_message(%src.Element* %0, i64 %1, i64 %2, i8* %3, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %4 = alloca %src.Element*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i8*, align 8
  %8 = alloca %src.Text_Box*, align 8
  %9 = alloca %fontstash.Font*, align 8
  %10 = alloca float, align 4
  %11 = alloca { %fontstash.Font*, float }, align 8
  %12 = alloca %..string, align 8
  %13 = alloca %runtime.Source_Code_Location, align 8
  %14 = alloca [4 x i8]*, align 8
  %15 = alloca i8, align 1
  %16 = alloca i8, align 1
  %17 = alloca i8, align 1
  %18 = alloca i8, align 1
  %19 = alloca %src.Render_Target*, align 8
  %20 = alloca %fontstash.Font*, align 8
  %21 = alloca float, align 4
  %22 = alloca { %fontstash.Font*, float }, align 8
  %23 = alloca float, align 4
  %24 = alloca float, align 4
  %25 = alloca %..string, align 8
  %26 = alloca %..string, align 8
  %27 = alloca float, align 4
  %28 = alloca float, align 4
  %29 = alloca { <2 x float>, <2 x float> }, align 8
  %30 = alloca { <2 x float>, <2 x float> }, align 8
  %31 = alloca { i64, i64 }, align 8
  %32 = alloca %..string, align 8
  %33 = alloca { <2 x float>, <2 x float> }, align 8
  %34 = alloca { <2 x float>, <2 x float> }, align 8
  %35 = alloca %src.Rect, align 8
  %36 = alloca [4 x i8], align 8
  %37 = alloca [4 x i8], align 8
  %38 = alloca %fontstash.Font*, align 8
  %39 = alloca float, align 4
  %40 = alloca { %fontstash.Font*, float }, align 8
  %41 = alloca float, align 4
  %42 = alloca float, align 4
  %43 = alloca float, align 4
  %44 = alloca i64, align 8
  %45 = alloca i64, align 8
  %46 = alloca i64, align 8
  %47 = alloca %src.Rect, align 8
  %48 = alloca %src.Rect, align 8
  %49 = alloca i64, align 8
  %50 = alloca float, align 4
  %51 = alloca %..string, align 8
  %52 = alloca i64, align 8
  %53 = alloca i64, align 8
  %54 = alloca %..string, align 8
  %55 = alloca i64, align 8
  %56 = alloca %src.Rect, align 8
  %57 = alloca %..string, align 8
  %58 = alloca i8, align 1
  %59 = alloca i8, align 1
  %60 = alloca i8, align 1
  %61 = alloca %runtime.Source_Code_Location, align 8
  %62 = alloca i32, align 4
  %63 = alloca i64, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Element* %0, %src.Element** %4, align 8
  store i64 %1, i64* %5, align 8
  store i64 %2, i64* %6, align 8
  store i8* %3, i8** %7, align 8
  %64 = bitcast i8* %__.context_ptr to %runtime.Context*
  %65 = load %src.Element*, %src.Element** %4, align 8
  %66 = bitcast %src.Element* %65 to %src.Text_Box*
  store %src.Text_Box* %66, %src.Text_Box** %8, align 8
  %67 = load i64, i64* %5, align 8
  switch i64 %67, label %switch.done [
    i64 3, label %switch.case.body
    i64 24, label %switch.case.body1
    i64 32, label %switch.case.body2
    i64 2, label %switch.case.body4
    i64 27, label %switch.case.body16
    i64 4, label %switch.case.body19
    i64 1, label %switch.case.body20
    i64 28, label %switch.case.body21
    i64 31, label %switch.case.body27
    i64 16, label %switch.case.body28
    i64 15, label %switch.case.body31
    i64 9, label %switch.case.body34
    i64 10, label %switch.case.body35
  ]

switch.case.body:                                 ; preds = %entry
  %68 = load %src.Text_Box*, %src.Text_Box** %8, align 8
  %69 = getelementptr inbounds %src.Text_Box, %src.Text_Box* %68, i32 0, i32 0
  %70 = bitcast %runtime.Context* %64 to i8*
  %71 = call { i64, float } @src.element_retrieve_font_options(%src.Element* %69, i8* %70)
  %72 = bitcast { %fontstash.Font*, float }* %11 to { i64, float }*
  store { i64, float } %71, { i64, float }* %72, align 8
  %73 = load { %fontstash.Font*, float }, { %fontstash.Font*, float }* %11, align 8
  %74 = getelementptr inbounds { %fontstash.Font*, float }, { %fontstash.Font*, float }* %11, i32 0, i32 0
  %75 = load %fontstash.Font*, %fontstash.Font** %74, align 8
  %76 = getelementptr inbounds { %fontstash.Font*, float }, { %fontstash.Font*, float }* %11, i32 0, i32 1
  %77 = load float, float* %76, align 4
  store %fontstash.Font* %75, %fontstash.Font** %9, align 8
  store float %77, float* %10, align 4
  %78 = load %src.Text_Box*, %src.Text_Box** %8, align 8
  %79 = getelementptr inbounds %src.Text_Box, %src.Text_Box* %78, i32 0, i32 1
  %80 = getelementptr inbounds %src.Box, %src.Box* %79, i32 0, i32 1
  call void @runtime.clear_dynamic_array-47554({ %..string*, i64, i64, %runtime.Allocator }* %80)
  %81 = load %src.Text_Box*, %src.Text_Box** %8, align 8
  %82 = getelementptr inbounds %src.Text_Box, %src.Text_Box* %81, i32 0, i32 1
  %83 = getelementptr inbounds %src.Box, %src.Box* %82, i32 0, i32 1
  %84 = load %src.Text_Box*, %src.Text_Box** %8, align 8
  %85 = getelementptr inbounds %src.Text_Box, %src.Text_Box* %84, i32 0, i32 1
  %86 = getelementptr inbounds %src.Box, %src.Box* %85, i32 0, i32 0
  %87 = load %strings.Builder, %strings.Builder* %86, align 8
  %88 = bitcast %runtime.Context* %64 to i8*
  %89 = call { i64, i64 } @strings.to_string(%strings.Builder* %86, i8* %88)
  %90 = bitcast %..string* %12 to { i64, i64 }*
  store { i64, i64 } %89, { i64, i64 }* %90, align 8
  %91 = load %..string, %..string* %12, align 8
  %92 = bitcast %..string* %12 to { i64, i64 }*
  %93 = load { i64, i64 }, { i64, i64 }* %92, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([54 x i8], [54 x i8]* @"csbs$2f3", i64 0, i64 0), i64 53 }, i32 350, i32 4, %..string { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"csbs$2f4", i64 0, i64 0), i64 16 } }, %runtime.Source_Code_Location* %13, align 8
  %94 = bitcast %runtime.Context* %64 to i8*
  call void @runtime.append_elem-47577({ %..string*, i64, i64, %runtime.Allocator }* %83, { i64, i64 } %93, %runtime.Source_Code_Location* %13, i8* %94)
  br label %switch.done

switch.case.body1:                                ; preds = %entry
  ret i64 1

switch.case.body2:                                ; preds = %entry
  %95 = load i8*, i8** %7, align 8
  %96 = bitcast i8* %95 to [4 x i8]*
  store [4 x i8]* %96, [4 x i8]** %14, align 8
  %97 = load %src.Element*, %src.Element** %4, align 8
  %98 = getelementptr inbounds %src.Element, %src.Element* %97, i32 0, i32 4
  %99 = load %src.Window*, %src.Window** %98, align 8
  %100 = getelementptr inbounds %src.Window, %src.Window* %99, i32 0, i32 4
  %101 = load %src.Element*, %src.Element** %100, align 8
  %102 = load %src.Element*, %src.Element** %4, align 8
  %103 = icmp eq %src.Element* %101, %102
  %104 = zext i1 %103 to i8
  store i8 %104, i8* %15, align 1
  %105 = load %src.Element*, %src.Element** %4, align 8
  %106 = getelementptr inbounds %src.Element, %src.Element* %105, i32 0, i32 4
  %107 = load %src.Window*, %src.Window** %106, align 8
  %108 = getelementptr inbounds %src.Window, %src.Window* %107, i32 0, i32 1
  %109 = load %src.Element*, %src.Element** %108, align 8
  %110 = load %src.Element*, %src.Element** %4, align 8
  %111 = icmp eq %src.Element* %109, %110
  %112 = zext i1 %111 to i8
  store i8 %112, i8* %16, align 1
  %113 = load %src.Element*, %src.Element** %4, align 8
  %114 = getelementptr inbounds %src.Element, %src.Element* %113, i32 0, i32 4
  %115 = load %src.Window*, %src.Window** %114, align 8
  %116 = getelementptr inbounds %src.Window, %src.Window* %115, i32 0, i32 2
  %117 = load %src.Element*, %src.Element** %116, align 8
  %118 = load %src.Element*, %src.Element** %4, align 8
  %119 = icmp eq %src.Element* %117, %118
  %120 = zext i1 %119 to i8
  store i8 %120, i8* %17, align 1
  %121 = load [4 x i8]*, [4 x i8]** %14, align 8
  %122 = load i8, i8* %16, align 1
  %123 = trunc i8 %122 to i1
  br i1 %123, label %if.then, label %cmp.or

cmp.or:                                           ; preds = %switch.case.body2
  %124 = load i8, i8* %17, align 1
  %125 = trunc i8 %124 to i1
  br i1 %125, label %if.then, label %cmp.or3

cmp.or3:                                          ; preds = %cmp.or
  %126 = load i8, i8* %15, align 1
  %127 = trunc i8 %126 to i1
  br i1 %127, label %if.then, label %if.else

if.then:                                          ; preds = %cmp.or3, %cmp.or, %switch.case.body2
  %128 = load [4 x i8], [4 x i8]* getelementptr inbounds (%src.Theme, %src.Theme* @src.theme, i64 0, i32 2), align 1
  br label %if.done

if.else:                                          ; preds = %cmp.or3
  %129 = load [4 x i8], [4 x i8]* getelementptr inbounds (%src.Theme, %src.Theme* @src.theme, i64 0, i32 5), align 1
  br label %if.done

if.done:                                          ; preds = %if.else, %if.then
  %130 = phi [4 x i8] [ %128, %if.then ], [ %129, %if.else ]
  store [4 x i8] %130, [4 x i8]* %121, align 1
  br label %switch.done

switch.case.body4:                                ; preds = %entry
  %131 = load %src.Element*, %src.Element** %4, align 8
  %132 = getelementptr inbounds %src.Element, %src.Element* %131, i32 0, i32 4
  %133 = load %src.Window*, %src.Window** %132, align 8
  %134 = getelementptr inbounds %src.Window, %src.Window* %133, i32 0, i32 4
  %135 = load %src.Element*, %src.Element** %134, align 8
  %136 = load %src.Element*, %src.Element** %4, align 8
  %137 = icmp eq %src.Element* %135, %136
  %138 = zext i1 %137 to i8
  store i8 %138, i8* %18, align 1
  %139 = load %src.Element*, %src.Element** %4, align 8
  %140 = getelementptr inbounds %src.Element, %src.Element* %139, i32 0, i32 4
  %141 = load %src.Window*, %src.Window** %140, align 8
  %142 = getelementptr inbounds %src.Window, %src.Window* %141, i32 0, i32 24
  %143 = load %src.Render_Target*, %src.Render_Target** %142, align 8
  store %src.Render_Target* %143, %src.Render_Target** %19, align 8
  %144 = load %src.Element*, %src.Element** %4, align 8
  %145 = bitcast %runtime.Context* %64 to i8*
  %146 = call { i64, float } @src.element_retrieve_font_options(%src.Element* %144, i8* %145)
  %147 = bitcast { %fontstash.Font*, float }* %22 to { i64, float }*
  store { i64, float } %146, { i64, float }* %147, align 8
  %148 = load { %fontstash.Font*, float }, { %fontstash.Font*, float }* %22, align 8
  %149 = getelementptr inbounds { %fontstash.Font*, float }, { %fontstash.Font*, float }* %22, i32 0, i32 0
  %150 = load %fontstash.Font*, %fontstash.Font** %149, align 8
  %151 = getelementptr inbounds { %fontstash.Font*, float }, { %fontstash.Font*, float }* %22, i32 0, i32 1
  %152 = load float, float* %151, align 4
  store %fontstash.Font* %150, %fontstash.Font** %20, align 8
  store float %152, float* %21, align 4
  %153 = load float, float* %21, align 4
  %154 = load float, float* @src.SCALE, align 4
  %155 = fmul float %153, %154
  store float %155, float* %23, align 4
  %156 = load float, float* @src.SCALE, align 4
  %157 = fmul float 5.000000e+00, %156
  store float %157, float* %24, align 4
  %158 = load %src.Text_Box*, %src.Text_Box** %8, align 8
  %159 = getelementptr inbounds %src.Text_Box, %src.Text_Box* %158, i32 0, i32 1
  %160 = getelementptr inbounds %src.Box, %src.Box* %159, i32 0, i32 0
  %161 = load %strings.Builder, %strings.Builder* %160, align 8
  %162 = bitcast %runtime.Context* %64 to i8*
  %163 = call { i64, i64 } @strings.to_string(%strings.Builder* %160, i8* %162)
  %164 = bitcast %..string* %26 to { i64, i64 }*
  store { i64, i64 } %163, { i64, i64 }* %164, align 8
  %165 = load %..string, %..string* %26, align 8
  store %..string %165, %..string* %25, align 8
  %166 = load %src.Element*, %src.Element** %4, align 8
  %167 = load %..string, %..string* %25, align 8
  %168 = bitcast %..string* %25 to { i64, i64 }*
  %169 = load { i64, i64 }, { i64, i64 }* %168, align 8
  %170 = bitcast %runtime.Context* %64 to i8*
  %171 = call float @src.estring_width(%src.Element* %166, { i64, i64 } %169, i8* %170)
  %172 = load float, float* %24, align 4
  %173 = fsub float %171, %172
  store float %173, float* %27, align 4
  store float 0.000000e+00, float* %28, align 4
  %174 = load %src.Text_Box*, %src.Text_Box** %8, align 8
  %175 = getelementptr inbounds %src.Text_Box, %src.Text_Box* %174, i32 0, i32 2
  %176 = load float, float* %175, align 4
  %177 = load float, float* %27, align 4
  %178 = load %src.Element*, %src.Element** %4, align 8
  %179 = getelementptr inbounds %src.Element, %src.Element* %178, i32 0, i32 5
  %180 = load %src.Rect, %src.Rect* %179, align 4
  %181 = bitcast { <2 x float>, <2 x float> }* %29 to %src.Rect*
  store %src.Rect %180, %src.Rect* %181, align 4
  %182 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %29, align 8
  %183 = bitcast %runtime.Context* %64 to i8*
  %184 = call float @src.rect_width({ <2 x float>, <2 x float> } %182, i8* %183)
  %185 = fsub float %177, %184
  %186 = fcmp ogt float %176, %185
  %187 = zext i1 %186 to i8
  %188 = trunc i8 %187 to i1
  br i1 %188, label %if.then5, label %if.done6

if.then5:                                         ; preds = %switch.case.body4
  %189 = load %src.Text_Box*, %src.Text_Box** %8, align 8
  %190 = getelementptr inbounds %src.Text_Box, %src.Text_Box* %189, i32 0, i32 2
  %191 = load float, float* %27, align 4
  %192 = load %src.Element*, %src.Element** %4, align 8
  %193 = getelementptr inbounds %src.Element, %src.Element* %192, i32 0, i32 5
  %194 = load %src.Rect, %src.Rect* %193, align 4
  %195 = bitcast { <2 x float>, <2 x float> }* %30 to %src.Rect*
  store %src.Rect %194, %src.Rect* %195, align 4
  %196 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %30, align 8
  %197 = bitcast %runtime.Context* %64 to i8*
  %198 = call float @src.rect_width({ <2 x float>, <2 x float> } %196, i8* %197)
  %199 = fsub float %191, %198
  store float %199, float* %190, align 4
  br label %if.done6

if.done6:                                         ; preds = %if.then5, %switch.case.body4
  %200 = load %src.Text_Box*, %src.Text_Box** %8, align 8
  %201 = getelementptr inbounds %src.Text_Box, %src.Text_Box* %200, i32 0, i32 2
  %202 = load float, float* %201, align 4
  %203 = fcmp olt float %202, 0.000000e+00
  %204 = zext i1 %203 to i8
  %205 = trunc i8 %204 to i1
  br i1 %205, label %if.then7, label %if.done8

if.then7:                                         ; preds = %if.done6
  %206 = load %src.Text_Box*, %src.Text_Box** %8, align 8
  %207 = getelementptr inbounds %src.Text_Box, %src.Text_Box* %206, i32 0, i32 2
  store float 0.000000e+00, float* %207, align 4
  br label %if.done8

if.done8:                                         ; preds = %if.then7, %if.done6
  %208 = load %src.Element*, %src.Element** %4, align 8
  %209 = load %src.Text_Box*, %src.Text_Box** %8, align 8
  %210 = getelementptr inbounds %src.Text_Box, %src.Text_Box* %209, i32 0, i32 1
  %211 = getelementptr inbounds %src.Box, %src.Box* %210, i32 0, i32 2
  %212 = load i64, i64* %211, align 8
  %213 = load %..string, %..string* %25, align 8
  %214 = getelementptr inbounds %..string, %..string* %25, i32 0, i32 1
  %215 = load i64, i64* %214, align 8
  %216 = bitcast { i64, i64 }* %31 to %..string*
  store %..string { i8* getelementptr inbounds ([54 x i8], [54 x i8]* @"csbs$2f3", i64 0, i64 0), i64 53 }, %..string* %216, align 8
  %217 = load { i64, i64 }, { i64, i64 }* %31, align 8
  call void @runtime.slice_expr_error_hi({ i64, i64 } %217, i32 389, i32 42, i64 %212, i64 %215)
  %218 = getelementptr inbounds %..string, %..string* %25, i32 0, i32 0
  %219 = load i8*, i8** %218, align 8
  %220 = getelementptr i8, i8* %219, i64 0
  %221 = sub i64 %212, 0
  %222 = getelementptr inbounds %..string, %..string* %32, i32 0, i32 0
  store i8* %220, i8** %222, align 8
  %223 = getelementptr inbounds %..string, %..string* %32, i32 0, i32 1
  store i64 %221, i64* %223, align 8
  %224 = load %..string, %..string* %32, align 8
  %225 = bitcast %..string* %32 to { i64, i64 }*
  %226 = load { i64, i64 }, { i64, i64 }* %225, align 8
  %227 = bitcast %runtime.Context* %64 to i8*
  %228 = call float @src.estring_width(%src.Element* %208, { i64, i64 } %226, i8* %227)
  %229 = load %src.Text_Box*, %src.Text_Box** %8, align 8
  %230 = getelementptr inbounds %src.Text_Box, %src.Text_Box* %229, i32 0, i32 2
  %231 = load float, float* %230, align 4
  %232 = fsub float %228, %231
  store float %232, float* %28, align 4
  %233 = load float, float* %28, align 4
  %234 = fcmp olt float %233, 0.000000e+00
  %235 = zext i1 %234 to i8
  %236 = trunc i8 %235 to i1
  br i1 %236, label %if.then9, label %if.else10

if.then9:                                         ; preds = %if.done8
  %237 = load %src.Text_Box*, %src.Text_Box** %8, align 8
  %238 = getelementptr inbounds %src.Text_Box, %src.Text_Box* %237, i32 0, i32 2
  %239 = load float, float* %28, align 4
  %240 = load %src.Text_Box*, %src.Text_Box** %8, align 8
  %241 = getelementptr inbounds %src.Text_Box, %src.Text_Box* %240, i32 0, i32 2
  %242 = load float, float* %241, align 4
  %243 = fadd float %239, %242
  store float %243, float* %238, align 4
  br label %if.done13

if.else10:                                        ; preds = %if.done8
  %244 = load float, float* %28, align 4
  %245 = load %src.Element*, %src.Element** %4, align 8
  %246 = getelementptr inbounds %src.Element, %src.Element* %245, i32 0, i32 5
  %247 = load %src.Rect, %src.Rect* %246, align 4
  %248 = bitcast { <2 x float>, <2 x float> }* %33 to %src.Rect*
  store %src.Rect %247, %src.Rect* %248, align 4
  %249 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %33, align 8
  %250 = bitcast %runtime.Context* %64 to i8*
  %251 = call float @src.rect_width({ <2 x float>, <2 x float> } %249, i8* %250)
  %252 = fcmp ogt float %244, %251
  %253 = zext i1 %252 to i8
  %254 = trunc i8 %253 to i1
  br i1 %254, label %if.then11, label %if.done12

if.then11:                                        ; preds = %if.else10
  %255 = load %src.Text_Box*, %src.Text_Box** %8, align 8
  %256 = getelementptr inbounds %src.Text_Box, %src.Text_Box* %255, i32 0, i32 2
  %257 = load float, float* %28, align 4
  %258 = load %src.Element*, %src.Element** %4, align 8
  %259 = getelementptr inbounds %src.Element, %src.Element* %258, i32 0, i32 5
  %260 = load %src.Rect, %src.Rect* %259, align 4
  %261 = bitcast { <2 x float>, <2 x float> }* %34 to %src.Rect*
  store %src.Rect %260, %src.Rect* %261, align 4
  %262 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %34, align 8
  %263 = bitcast %runtime.Context* %64 to i8*
  %264 = call float @src.rect_width({ <2 x float>, <2 x float> } %262, i8* %263)
  %265 = fsub float %257, %264
  %266 = load %src.Text_Box*, %src.Text_Box** %8, align 8
  %267 = getelementptr inbounds %src.Text_Box, %src.Text_Box* %266, i32 0, i32 2
  %268 = load float, float* %267, align 4
  %269 = fadd float %265, %268
  %270 = fadd float %269, 1.000000e+00
  store float %270, float* %256, align 4
  br label %if.done12

if.done12:                                        ; preds = %if.then11, %if.else10
  br label %if.done13

if.done13:                                        ; preds = %if.done12, %if.then9
  %271 = load %src.Element*, %src.Element** %4, align 8
  %272 = getelementptr inbounds %src.Element, %src.Element* %271, i32 0, i32 5
  %273 = load %src.Rect, %src.Rect* %272, align 4
  store %src.Rect %273, %src.Rect* %35, align 4
  %274 = load %src.Element*, %src.Element** %4, align 8
  %275 = getelementptr inbounds %src.Element, %src.Element* %274, i32 0, i32 5
  %276 = getelementptr inbounds %src.Rect, %src.Rect* %275, i32 0, i32 0
  %277 = load float, float* %24, align 4
  %278 = load float, float* %276, align 4
  %279 = fadd float %278, %277
  store float %279, float* %276, align 4
  %280 = bitcast [4 x i8]* %36 to i8*
  call void @llvm.memset.p0i8.i64(i8* %280, i8 0, i64 4, i1 false)
  %281 = load %src.Element*, %src.Element** %4, align 8
  %282 = bitcast [4 x i8]* %36 to i8*
  %283 = bitcast %runtime.Context* %64 to i8*
  %284 = call i64 @src.element_message(%src.Element* %281, i64 32, i64 0, i8* %282, i8* %283)
  %285 = load i8, i8* %18, align 1
  %286 = trunc i8 %285 to i1
  br i1 %286, label %if.then14, label %if.done15

if.then14:                                        ; preds = %if.done13
  %287 = load %src.Render_Target*, %src.Render_Target** %19, align 8
  %288 = load %src.Rect, %src.Rect* %35, align 4
  %289 = bitcast %runtime.Context* %64 to i8*
  %290 = call i64 @src.theme_panel(i64 2, i8* %289)
  %291 = bitcast [4 x i8]* %37 to i64*
  store i64 %290, i64* %291, align 8
  %292 = load [4 x i8], [4 x i8]* %37, align 1
  %293 = load float, float* @src.ROUNDNESS, align 4
  %294 = bitcast %src.Rect* %35 to { <2 x float>, <2 x float> }*
  %295 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %294, align 8
  %296 = bitcast [4 x i8]* %37 to i64*
  %297 = load i64, i64* %296, align 8
  %298 = bitcast %runtime.Context* %64 to i8*
  call void @src.render_rect(%src.Render_Target* %287, { <2 x float>, <2 x float> } %295, i64 %297, float %293, i8* %298)
  %299 = load %src.Text_Box*, %src.Text_Box** %8, align 8
  %300 = getelementptr inbounds %src.Text_Box, %src.Text_Box* %299, i32 0, i32 0
  %301 = bitcast %runtime.Context* %64 to i8*
  %302 = call { i64, float } @src.element_retrieve_font_options(%src.Element* %300, i8* %301)
  %303 = bitcast { %fontstash.Font*, float }* %40 to { i64, float }*
  store { i64, float } %302, { i64, float }* %303, align 8
  %304 = load { %fontstash.Font*, float }, { %fontstash.Font*, float }* %40, align 8
  %305 = getelementptr inbounds { %fontstash.Font*, float }, { %fontstash.Font*, float }* %40, i32 0, i32 0
  %306 = load %fontstash.Font*, %fontstash.Font** %305, align 8
  %307 = getelementptr inbounds { %fontstash.Font*, float }, { %fontstash.Font*, float }* %40, i32 0, i32 1
  %308 = load float, float* %307, align 4
  store %fontstash.Font* %306, %fontstash.Font** %38, align 8
  store float %308, float* %39, align 4
  %309 = load float, float* %39, align 4
  %310 = load float, float* @src.SCALE, align 4
  %311 = fmul float %309, %310
  store float %311, float* %41, align 4
  %312 = load %src.Text_Box*, %src.Text_Box** %8, align 8
  %313 = getelementptr inbounds %src.Text_Box, %src.Text_Box* %312, i32 0, i32 0
  %314 = getelementptr inbounds %src.Element, %src.Element* %313, i32 0, i32 5
  %315 = getelementptr inbounds %src.Rect, %src.Rect* %314, i32 0, i32 0
  %316 = load float, float* %315, align 4
  %317 = load %src.Text_Box*, %src.Text_Box** %8, align 8
  %318 = getelementptr inbounds %src.Text_Box, %src.Text_Box* %317, i32 0, i32 2
  %319 = load float, float* %318, align 4
  %320 = fsub float %316, %319
  store float %320, float* %42, align 4
  %321 = load %src.Text_Box*, %src.Text_Box** %8, align 8
  %322 = getelementptr inbounds %src.Text_Box, %src.Text_Box* %321, i32 0, i32 0
  %323 = getelementptr inbounds %src.Element, %src.Element* %322, i32 0, i32 5
  %324 = getelementptr inbounds %src.Rect, %src.Rect* %323, i32 0, i32 2
  %325 = load float, float* %324, align 4
  store float %325, float* %43, align 4
  %326 = load %src.Text_Box*, %src.Text_Box** %8, align 8
  %327 = getelementptr inbounds %src.Text_Box, %src.Text_Box* %326, i32 0, i32 1
  %328 = bitcast %runtime.Context* %64 to i8*
  %329 = call { i64, i64 } @src.box_low_and_high(%src.Box* %327, i8* %328)
  %330 = extractvalue { i64, i64 } %329, 0
  %331 = extractvalue { i64, i64 } %329, 1
  store i64 %330, i64* %44, align 8
  store i64 %331, i64* %45, align 8
  %332 = load %src.Render_Target*, %src.Render_Target** %19, align 8
  %333 = load %src.Text_Box*, %src.Text_Box** %8, align 8
  %334 = load %fontstash.Font*, %fontstash.Font** %38, align 8
  %335 = load float, float* %41, align 4
  %336 = load float, float* %42, align 4
  %337 = load float, float* %43, align 4
  %338 = load [4 x i8], [4 x i8]* getelementptr inbounds (%src.Theme, %src.Theme* @src.theme, i64 0, i32 9), align 1
  %339 = getelementptr inbounds %src.Text_Box, %src.Text_Box* %333, i32 0, i32 1
  %340 = bitcast i64* %46 to [4 x i8]*
  store [4 x i8] %338, [4 x i8]* %340, align 1
  %341 = load i64, i64* %46, align 8
  %342 = bitcast %runtime.Context* %64 to i8*
  call void @src.box_render_selection(%src.Render_Target* %332, %src.Box* %339, %fontstash.Font* %334, float %335, float %336, float %337, i64 %341, i8* %342)
  %343 = load %src.Text_Box*, %src.Text_Box** %8, align 8
  %344 = load %fontstash.Font*, %fontstash.Font** %38, align 8
  %345 = load float, float* %41, align 4
  %346 = load float, float* %42, align 4
  %347 = load float, float* %43, align 4
  %348 = getelementptr inbounds %src.Text_Box, %src.Text_Box* %343, i32 0, i32 1
  %349 = bitcast %runtime.Context* %64 to i8*
  %350 = call { <2 x float>, <2 x float> } @src.box_layout_caret(%src.Box* %348, %fontstash.Font* %344, float %345, float %346, float %347, i8* %349)
  %351 = bitcast %src.Rect* %48 to { <2 x float>, <2 x float> }*
  store { <2 x float>, <2 x float> } %350, { <2 x float>, <2 x float> }* %351, align 8
  %352 = load %src.Rect, %src.Rect* %48, align 4
  store %src.Rect %352, %src.Rect* %47, align 4
  %353 = load %src.Render_Target*, %src.Render_Target** %19, align 8
  %354 = load %src.Rect, %src.Rect* %47, align 4
  %355 = load [4 x i8], [4 x i8]* getelementptr inbounds (%src.Theme, %src.Theme* @src.theme, i64 0, i32 7), align 1
  %356 = bitcast %src.Rect* %47 to { <2 x float>, <2 x float> }*
  %357 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %356, align 8
  %358 = bitcast i64* %49 to [4 x i8]*
  store [4 x i8] %355, [4 x i8]* %358, align 1
  %359 = load i64, i64* %49, align 8
  %360 = bitcast %runtime.Context* %64 to i8*
  call void @src.render_rect(%src.Render_Target* %353, { <2 x float>, <2 x float> } %357, i64 %359, float 0.000000e+00, i8* %360)
  br label %if.done15

if.done15:                                        ; preds = %if.then14, %if.done13
  %361 = load %src.Render_Target*, %src.Render_Target** %19, align 8
  %362 = load %src.Rect, %src.Rect* %35, align 4
  %363 = load [4 x i8], [4 x i8]* %36, align 1
  %364 = load float, float* @src.ROUNDNESS, align 4
  %365 = load float, float* @src.LINE_WIDTH, align 4
  %366 = bitcast %src.Rect* %35 to { <2 x float>, <2 x float> }*
  %367 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %366, align 8
  %368 = bitcast [4 x i8]* %36 to i64*
  %369 = load i64, i64* %368, align 8
  %370 = bitcast %runtime.Context* %64 to i8*
  call void @src.render_rect_outline(%src.Render_Target* %361, { <2 x float>, <2 x float> } %367, i64 %369, float %364, float %365, i8* %370)
  store float 0.000000e+00, float* %50, align 4
  %371 = bitcast %..string* %51 to i8*
  call void @llvm.memset.p0i8.i64(i8* %371, i8 0, i64 16, i1 false)
  store i64 0, i64* %52, align 8
  %372 = load %src.Text_Box*, %src.Text_Box** %8, align 8
  %373 = getelementptr inbounds %src.Text_Box, %src.Text_Box* %372, i32 0, i32 1
  %374 = getelementptr inbounds %src.Box, %src.Box* %373, i32 0, i32 1
  %375 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %374, i32 0, i32 1
  store i64 -1, i64* %53, align 8
  br label %for.index.loop

for.index.loop:                                   ; preds = %for.index.body, %if.done15
  %376 = load i64, i64* %53, align 8
  %377 = add i64 %376, 1
  store i64 %377, i64* %53, align 8
  %378 = load i64, i64* %375, align 8
  %379 = icmp slt i64 %377, %378
  br i1 %379, label %for.index.body, label %for.index.done

for.index.body:                                   ; preds = %for.index.loop
  %380 = load i64, i64* %53, align 8
  %381 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %374, i32 0, i32 0
  %382 = load %..string*, %..string** %381, align 8
  %383 = getelementptr %..string, %..string* %382, i64 %380
  %384 = load %..string, %..string* %383, align 8
  store %..string %384, %..string* %54, align 8
  store i64 %380, i64* %55, align 8
  %385 = load %src.Render_Target*, %src.Render_Target** %19, align 8
  %386 = load %fontstash.Font*, %fontstash.Font** %20, align 8
  %387 = load %..string, %..string* %54, align 8
  %388 = load %src.Element*, %src.Element** %4, align 8
  %389 = getelementptr inbounds %src.Element, %src.Element* %388, i32 0, i32 5
  %390 = getelementptr inbounds %src.Rect, %src.Rect* %389, i32 0, i32 0
  %391 = load float, float* %390, align 4
  %392 = load %src.Text_Box*, %src.Text_Box** %8, align 8
  %393 = getelementptr inbounds %src.Text_Box, %src.Text_Box* %392, i32 0, i32 2
  %394 = load float, float* %393, align 4
  %395 = fsub float %391, %394
  %396 = load %src.Element*, %src.Element** %4, align 8
  %397 = getelementptr inbounds %src.Element, %src.Element* %396, i32 0, i32 5
  %398 = getelementptr inbounds %src.Rect, %src.Rect* %397, i32 0, i32 2
  %399 = load float, float* %398, align 4
  %400 = load float, float* %50, align 4
  %401 = fadd float %399, %400
  %402 = load [4 x i8], [4 x i8]* %36, align 1
  %403 = load float, float* %23, align 4
  %404 = bitcast %..string* %54 to { i64, i64 }*
  %405 = load { i64, i64 }, { i64, i64 }* %404, align 8
  %406 = bitcast [4 x i8]* %36 to i64*
  %407 = load i64, i64* %406, align 8
  %408 = bitcast %runtime.Context* %64 to i8*
  %409 = call { <2 x float>, <2 x float> } @src.render_string(%src.Render_Target* %385, %fontstash.Font* %386, { i64, i64 } %405, float %395, float %401, i64 %407, float %403, i8* %408)
  %410 = bitcast %src.Rect* %56 to { <2 x float>, <2 x float> }*
  store { <2 x float>, <2 x float> } %409, { <2 x float>, <2 x float> }* %410, align 8
  %411 = load %src.Rect, %src.Rect* %56, align 4
  %412 = load float, float* %23, align 4
  %413 = load float, float* %50, align 4
  %414 = fadd float %413, %412
  store float %414, float* %50, align 4
  br label %for.index.loop

for.index.done:                                   ; preds = %for.index.loop
  br label %switch.done

switch.case.body16:                               ; preds = %entry
  %415 = load i8*, i8** %7, align 8
  %416 = bitcast i8* %415 to %..string*
  %417 = load %..string, %..string* %416, align 8
  store %..string %417, %..string* %57, align 8
  %418 = load %src.Element*, %src.Element** %4, align 8
  %419 = getelementptr inbounds %src.Element, %src.Element* %418, i32 0, i32 4
  %420 = load %src.Window*, %src.Window** %419, align 8
  %421 = getelementptr inbounds %src.Window, %src.Window* %420, i32 0, i32 34
  %422 = load i8, i8* %421, align 1
  store i8 %422, i8* %58, align 1
  %423 = load %src.Element*, %src.Element** %4, align 8
  %424 = getelementptr inbounds %src.Element, %src.Element* %423, i32 0, i32 4
  %425 = load %src.Window*, %src.Window** %424, align 8
  %426 = getelementptr inbounds %src.Window, %src.Window* %425, i32 0, i32 33
  %427 = load i8, i8* %426, align 1
  store i8 %427, i8* %59, align 1
  %428 = load %src.Text_Box*, %src.Text_Box** %8, align 8
  %429 = load %src.Text_Box*, %src.Text_Box** %8, align 8
  %430 = getelementptr inbounds %src.Text_Box, %src.Text_Box* %429, i32 0, i32 1
  %431 = load %..string, %..string* %57, align 8
  %432 = load i8, i8* %59, align 1
  %433 = load i8, i8* %58, align 1
  %434 = getelementptr inbounds %src.Text_Box, %src.Text_Box* %428, i32 0, i32 0
  %435 = bitcast %..string* %57 to { i64, i64 }*
  %436 = load { i64, i64 }, { i64, i64 }* %435, align 8
  %437 = icmp ne i8 %432, 0
  %438 = icmp ne i8 %433, 0
  %439 = bitcast %runtime.Context* %64 to i8*
  %440 = call i8 @src.box_evaluate_combo(%src.Element* %434, %src.Box* %430, { i64, i64 } %436, i1 %437, i1 %438, i8* %439)
  store i8 %440, i8* %60, align 1
  %441 = load i8, i8* %60, align 1
  %442 = trunc i8 %441 to i1
  br i1 %442, label %if.then17, label %if.done18

if.then17:                                        ; preds = %switch.case.body16
  %443 = load %src.Element*, %src.Element** %4, align 8
  %444 = bitcast %runtime.Context* %64 to i8*
  call void @src.element_repaint(%src.Element* %443, i8* %444)
  br label %if.done18

if.done18:                                        ; preds = %if.then17, %switch.case.body16
  %445 = load i8, i8* %60, align 1
  %446 = icmp ne i8 %445, 0
  %447 = zext i1 %446 to i64
  ret i64 %447

switch.case.body19:                               ; preds = %entry
  %448 = load %src.Text_Box*, %src.Text_Box** %8, align 8
  %449 = getelementptr inbounds %src.Text_Box, %src.Text_Box* %448, i32 0, i32 1
  %450 = getelementptr inbounds %src.Box, %src.Box* %449, i32 0, i32 0
  %451 = getelementptr inbounds %strings.Builder, %strings.Builder* %450, i32 0, i32 0
  %452 = load { i8*, i64, i64, %runtime.Allocator }, { i8*, i64, i64, %runtime.Allocator }* %451, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([54 x i8], [54 x i8]* @"csbs$2f3", i64 0, i64 0), i64 53 }, i32 457, i32 4, %..string { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"csbs$2f4", i64 0, i64 0), i64 16 } }, %runtime.Source_Code_Location* %61, align 8
  %453 = bitcast %runtime.Context* %64 to i8*
  %454 = call i8 @runtime.delete_dynamic_array-47636({ i8*, i64, i64, %runtime.Allocator }* %451, %runtime.Source_Code_Location* %61, i8* %453)
  br label %switch.done

switch.case.body20:                               ; preds = %entry
  %455 = load %src.Element*, %src.Element** %4, align 8
  %456 = bitcast %runtime.Context* %64 to i8*
  call void @src.element_repaint(%src.Element* %455, i8* %456)
  br label %switch.done

switch.case.body21:                               ; preds = %entry
  %457 = load i8*, i8** %7, align 8
  %458 = bitcast i8* %457 to i32*
  %459 = load i32, i32* %458, align 4
  store i32 %459, i32* %62, align 4
  %460 = load %src.Text_Box*, %src.Text_Box** %8, align 8
  %461 = getelementptr inbounds %src.Text_Box, %src.Text_Box* %460, i32 0, i32 3
  %462 = load i8, i8* %461, align 1
  %463 = trunc i8 %462 to i1
  br i1 %463, label %if.then22, label %if.else25

if.then22:                                        ; preds = %switch.case.body21
  %464 = load i32, i32* %62, align 4
  %465 = bitcast %runtime.Context* %64 to i8*
  %466 = call i8 @unicode.is_number(i32 %464, i8* %465)
  %467 = trunc i8 %466 to i1
  br i1 %467, label %if.then23, label %if.done24

if.then23:                                        ; preds = %if.then22
  %468 = load %src.Element*, %src.Element** %4, align 8
  %469 = load %src.Text_Box*, %src.Text_Box** %8, align 8
  %470 = load i32, i32* %62, align 4
  %471 = getelementptr inbounds %src.Text_Box, %src.Text_Box* %469, i32 0, i32 1
  %472 = bitcast %runtime.Context* %64 to i8*
  call void @src.box_insert(%src.Element* %468, %src.Box* %471, i32 %470, i8* %472)
  %473 = load %src.Element*, %src.Element** %4, align 8
  %474 = bitcast %runtime.Context* %64 to i8*
  call void @src.element_repaint(%src.Element* %473, i8* %474)
  br label %if.done24

if.done24:                                        ; preds = %if.then23, %if.then22
  br label %if.done26

if.else25:                                        ; preds = %switch.case.body21
  %475 = load %src.Element*, %src.Element** %4, align 8
  %476 = load %src.Text_Box*, %src.Text_Box** %8, align 8
  %477 = load i32, i32* %62, align 4
  %478 = getelementptr inbounds %src.Text_Box, %src.Text_Box* %476, i32 0, i32 1
  %479 = bitcast %runtime.Context* %64 to i8*
  call void @src.box_insert(%src.Element* %475, %src.Box* %478, i32 %477, i8* %479)
  %480 = load %src.Element*, %src.Element** %4, align 8
  %481 = bitcast %runtime.Context* %64 to i8*
  call void @src.element_repaint(%src.Element* %480, i8* %481)
  br label %if.done26

if.done26:                                        ; preds = %if.else25, %if.done24
  ret i64 1

switch.case.body27:                               ; preds = %entry
  %482 = load %src.Text_Box*, %src.Text_Box** %8, align 8
  %483 = load i64, i64* %6, align 8
  %484 = load i8*, i8** %7, align 8
  %485 = getelementptr inbounds %src.Text_Box, %src.Text_Box* %482, i32 0, i32 1
  %486 = bitcast %runtime.Context* %64 to i8*
  call void @src.box_set_caret(%src.Box* %485, i64 %483, i8* %484, i8* %486)
  br label %switch.done

switch.case.body28:                               ; preds = %entry
  %487 = load %src.Element*, %src.Element** %4, align 8
  %488 = bitcast %runtime.Context* %64 to i8*
  %489 = call i8 @src.element_focus(%src.Element* %487, i8* %488)
  %490 = load %src.Text_Box*, %src.Text_Box** %8, align 8
  %491 = getelementptr inbounds %src.Text_Box, %src.Text_Box* %490, i32 0, i32 1
  %492 = getelementptr inbounds %src.Box, %src.Box* %491, i32 0, i32 3
  %493 = load i64, i64* %492, align 8
  store i64 %493, i64* %63, align 8
  %494 = load %src.Text_Box*, %src.Text_Box** %8, align 8
  %495 = load %src.Text_Box*, %src.Text_Box** %8, align 8
  %496 = load i64, i64* %6, align 8
  %497 = getelementptr inbounds %src.Text_Box, %src.Text_Box* %494, i32 0, i32 0
  %498 = getelementptr inbounds %src.Text_Box, %src.Text_Box* %495, i32 0, i32 1
  %499 = bitcast %runtime.Context* %64 to i8*
  %500 = call i8 @src.element_box_mouse_selection(%src.Element* %497, %src.Box* %498, i64 %496, i1 false, i8* %499)
  %501 = load %src.Element*, %src.Element** %4, align 8
  %502 = getelementptr inbounds %src.Element, %src.Element* %501, i32 0, i32 4
  %503 = load %src.Window*, %src.Window** %502, align 8
  %504 = getelementptr inbounds %src.Window, %src.Window* %503, i32 0, i32 34
  %505 = load i8, i8* %504, align 1
  %506 = trunc i8 %505 to i1
  br i1 %506, label %cmp.and, label %if.done30

cmp.and:                                          ; preds = %switch.case.body28
  %507 = load i64, i64* %6, align 8
  %508 = icmp eq i64 %507, 0
  %509 = zext i1 %508 to i8
  %510 = trunc i8 %509 to i1
  br i1 %510, label %if.then29, label %if.done30

if.then29:                                        ; preds = %cmp.and
  %511 = load %src.Text_Box*, %src.Text_Box** %8, align 8
  %512 = getelementptr inbounds %src.Text_Box, %src.Text_Box* %511, i32 0, i32 1
  %513 = getelementptr inbounds %src.Box, %src.Box* %512, i32 0, i32 3
  %514 = load i64, i64* %63, align 8
  store i64 %514, i64* %513, align 8
  br label %if.done30

if.done30:                                        ; preds = %if.then29, %cmp.and, %switch.case.body28
  br label %switch.done

switch.case.body31:                               ; preds = %entry
  %515 = load %src.Element*, %src.Element** %4, align 8
  %516 = getelementptr inbounds %src.Element, %src.Element* %515, i32 0, i32 4
  %517 = load %src.Window*, %src.Window** %516, align 8
  %518 = getelementptr inbounds %src.Window, %src.Window* %517, i32 0, i32 17
  %519 = load i64, i64* %518, align 8
  %520 = icmp eq i64 %519, 1
  %521 = zext i1 %520 to i8
  %522 = trunc i8 %521 to i1
  br i1 %522, label %if.then32, label %if.done33

if.then32:                                        ; preds = %switch.case.body31
  %523 = load %src.Text_Box*, %src.Text_Box** %8, align 8
  %524 = load %src.Text_Box*, %src.Text_Box** %8, align 8
  %525 = load i64, i64* %6, align 8
  %526 = getelementptr inbounds %src.Text_Box, %src.Text_Box* %523, i32 0, i32 0
  %527 = getelementptr inbounds %src.Text_Box, %src.Text_Box* %524, i32 0, i32 1
  %528 = bitcast %runtime.Context* %64 to i8*
  %529 = call i8 @src.element_box_mouse_selection(%src.Element* %526, %src.Box* %527, i64 %525, i1 true, i8* %528)
  %530 = load %src.Text_Box*, %src.Text_Box** %8, align 8
  %531 = getelementptr inbounds %src.Text_Box, %src.Text_Box* %530, i32 0, i32 0
  %532 = bitcast %runtime.Context* %64 to i8*
  call void @src.element_repaint(%src.Element* %531, i8* %532)
  br label %if.done33

if.done33:                                        ; preds = %if.then32, %switch.case.body31
  br label %switch.done

switch.case.body34:                               ; preds = %entry
  %533 = load float, float* @src.SCALE, align 4
  %534 = fmul float %533, 2.000000e+02
  %535 = fptosi float %534 to i64
  ret i64 %535

switch.case.body35:                               ; preds = %entry
  %536 = load %src.Element*, %src.Element** %4, align 8
  %537 = bitcast %runtime.Context* %64 to i8*
  %538 = call float @src.efont_size(%src.Element* %536, i8* %537)
  %539 = fptosi float %538 to i64
  ret i64 %539

switch.done:                                      ; preds = %if.done33, %if.done30, %switch.case.body27, %switch.case.body20, %switch.case.body19, %for.index.done, %if.done, %switch.case.body, %entry
  ret i64 0
}

define internal %src.Text_Box* @src.text_box_init(%src.Element* %0, i32 %1, { i64, i64 } %2, i64 %3, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %4 = alloca %src.Element*, align 8
  %5 = alloca i32, align 4
  %6 = alloca %..string, align 8
  %7 = alloca i64, align 8
  %8 = alloca %src.Text_Box*, align 8
  %9 = alloca i32, align 4
  %10 = alloca %strings.Builder, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Element* %0, %src.Element** %4, align 8
  store i32 %1, i32* %5, align 4
  %11 = bitcast %..string* %6 to { i64, i64 }*
  store { i64, i64 } %2, { i64, i64 }* %11, align 8
  %12 = load %..string, %..string* %6, align 8
  store i64 %3, i64* %7, align 8
  store %src.Text_Box* null, %src.Text_Box** %8, align 8
  %13 = bitcast i8* %__.context_ptr to %runtime.Context*
  %14 = load i32, i32* %5, align 4
  store i32 %14, i32* %9, align 4
  %15 = load i32, i32* %9, align 4
  %16 = or i32 %15, 1024
  store i32 %16, i32* %9, align 4
  %17 = load %src.Element*, %src.Element** %4, align 8
  %18 = load i32, i32* %9, align 4
  %19 = load i64, i64* %7, align 8
  %20 = getelementptr inbounds %runtime.Context, %runtime.Context* %13, i32 0, i32 0
  %21 = load %runtime.Allocator, %runtime.Allocator* %20, align 8
  %22 = bitcast %runtime.Allocator* %20 to { i64, i64 }*
  %23 = load { i64, i64 }, { i64, i64 }* %22, align 8
  %24 = bitcast %runtime.Context* %13 to i8*
  %25 = call %src.Text_Box* @src.element_init-47674(%src.Element* %17, i32 %18, i8* bitcast (i64 (%src.Element*, i64, i64, i8*, i8*)* @src.text_box_message to i8*), i64 %19, { i64, i64 } %23, i8* %24)
  store %src.Text_Box* %25, %src.Text_Box** %8, align 8
  %26 = load %src.Text_Box*, %src.Text_Box** %8, align 8
  %27 = getelementptr inbounds %src.Text_Box, %src.Text_Box* %26, i32 0, i32 1
  %28 = getelementptr inbounds %src.Box, %src.Box* %27, i32 0, i32 0
  %29 = getelementptr inbounds %runtime.Context, %runtime.Context* %13, i32 0, i32 0
  %30 = load %runtime.Allocator, %runtime.Allocator* %29, align 8
  %31 = bitcast %runtime.Allocator* %29 to { i64, i64 }*
  %32 = load { i64, i64 }, { i64, i64 }* %31, align 8
  %33 = bitcast %strings.Builder* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* %33, i8 0, i64 40, i1 false)
  %34 = bitcast %runtime.Context* %13 to i8*
  call void @strings.builder_make_len_cap(%strings.Builder* sret %10, i64 0, i64 32, { i64, i64 } %32, i8* %34)
  %35 = load %strings.Builder, %strings.Builder* %10, align 8
  store %strings.Builder %35, %strings.Builder* %28, align 8
  %36 = load %src.Text_Box*, %src.Text_Box** %8, align 8
  %37 = getelementptr inbounds %src.Text_Box, %src.Text_Box* %36, i32 0, i32 1
  %38 = getelementptr inbounds %src.Box, %src.Box* %37, i32 0, i32 0
  %39 = load %..string, %..string* %6, align 8
  %40 = bitcast %..string* %6 to { i64, i64 }*
  %41 = load { i64, i64 }, { i64, i64 }* %40, align 8
  %42 = bitcast %runtime.Context* %13 to i8*
  %43 = call i64 @strings.write_string(%strings.Builder* %38, { i64, i64 } %41, i8* %42)
  %44 = load %src.Text_Box*, %src.Text_Box** %8, align 8
  %45 = getelementptr inbounds %src.Text_Box, %src.Text_Box* %44, i32 0, i32 1
  %46 = bitcast %runtime.Context* %13 to i8*
  call void @src.box_move_end(%src.Box* %45, i1 false, i8* %46)
  %47 = load %src.Text_Box*, %src.Text_Box** %8, align 8
  store %src.Text_Box* %47, %src.Text_Box** %8, align 8
  ret %src.Text_Box* %47
}

define internal void @src.task_box_paint_default(%src.Task_Box* %0, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %1 = alloca %src.Task_Box*, align 8
  %2 = alloca i8, align 1
  %3 = alloca %src.Render_Target*, align 8
  %4 = alloca %fontstash.Font*, align 8
  %5 = alloca float, align 4
  %6 = alloca { %fontstash.Font*, float }, align 8
  %7 = alloca float, align 4
  %8 = alloca [4 x i8], align 8
  %9 = alloca float, align 4
  %10 = alloca %..string, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca %..string, align 8
  %14 = alloca i64, align 8
  %15 = alloca %src.Rect, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Task_Box* %0, %src.Task_Box** %1, align 8
  %16 = bitcast i8* %__.context_ptr to %runtime.Context*
  %17 = load %src.Task_Box*, %src.Task_Box** %1, align 8
  %18 = getelementptr inbounds %src.Task_Box, %src.Task_Box* %17, i32 0, i32 0
  %19 = getelementptr inbounds %src.Element, %src.Element* %18, i32 0, i32 4
  %20 = load %src.Window*, %src.Window** %19, align 8
  %21 = getelementptr inbounds %src.Window, %src.Window* %20, i32 0, i32 4
  %22 = load %src.Element*, %src.Element** %21, align 8
  %23 = load %src.Task_Box*, %src.Task_Box** %1, align 8
  %24 = getelementptr inbounds %src.Task_Box, %src.Task_Box* %23, i32 0, i32 0
  %25 = icmp eq %src.Element* %22, %24
  %26 = zext i1 %25 to i8
  store i8 %26, i8* %2, align 1
  %27 = load %src.Task_Box*, %src.Task_Box** %1, align 8
  %28 = getelementptr inbounds %src.Task_Box, %src.Task_Box* %27, i32 0, i32 0
  %29 = getelementptr inbounds %src.Element, %src.Element* %28, i32 0, i32 4
  %30 = load %src.Window*, %src.Window** %29, align 8
  %31 = getelementptr inbounds %src.Window, %src.Window* %30, i32 0, i32 24
  %32 = load %src.Render_Target*, %src.Render_Target** %31, align 8
  store %src.Render_Target* %32, %src.Render_Target** %3, align 8
  %33 = load %src.Task_Box*, %src.Task_Box** %1, align 8
  %34 = getelementptr inbounds %src.Task_Box, %src.Task_Box* %33, i32 0, i32 0
  %35 = bitcast %runtime.Context* %16 to i8*
  %36 = call { i64, float } @src.element_retrieve_font_options(%src.Element* %34, i8* %35)
  %37 = bitcast { %fontstash.Font*, float }* %6 to { i64, float }*
  store { i64, float } %36, { i64, float }* %37, align 8
  %38 = load { %fontstash.Font*, float }, { %fontstash.Font*, float }* %6, align 8
  %39 = getelementptr inbounds { %fontstash.Font*, float }, { %fontstash.Font*, float }* %6, i32 0, i32 0
  %40 = load %fontstash.Font*, %fontstash.Font** %39, align 8
  %41 = getelementptr inbounds { %fontstash.Font*, float }, { %fontstash.Font*, float }* %6, i32 0, i32 1
  %42 = load float, float* %41, align 4
  store %fontstash.Font* %40, %fontstash.Font** %4, align 8
  store float %42, float* %5, align 4
  %43 = load float, float* %5, align 4
  %44 = load float, float* @src.SCALE, align 4
  %45 = fmul float %43, %44
  store float %45, float* %7, align 4
  %46 = bitcast [4 x i8]* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* %46, i8 0, i64 4, i1 false)
  %47 = load %src.Task_Box*, %src.Task_Box** %1, align 8
  %48 = getelementptr inbounds %src.Task_Box, %src.Task_Box* %47, i32 0, i32 0
  %49 = bitcast [4 x i8]* %8 to i8*
  %50 = bitcast %runtime.Context* %16 to i8*
  %51 = call i64 @src.element_message(%src.Element* %48, i64 32, i64 0, i8* %49, i8* %50)
  store float 0.000000e+00, float* %9, align 4
  %52 = bitcast %..string* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* %52, i8 0, i64 16, i1 false)
  store i64 0, i64* %11, align 8
  %53 = load %src.Task_Box*, %src.Task_Box** %1, align 8
  %54 = getelementptr inbounds %src.Task_Box, %src.Task_Box* %53, i32 0, i32 1
  %55 = getelementptr inbounds %src.Box, %src.Box* %54, i32 0, i32 1
  %56 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %55, i32 0, i32 1
  store i64 -1, i64* %12, align 8
  br label %for.index.loop

for.index.loop:                                   ; preds = %for.index.body, %entry
  %57 = load i64, i64* %12, align 8
  %58 = add i64 %57, 1
  store i64 %58, i64* %12, align 8
  %59 = load i64, i64* %56, align 8
  %60 = icmp slt i64 %58, %59
  br i1 %60, label %for.index.body, label %for.index.done

for.index.body:                                   ; preds = %for.index.loop
  %61 = load i64, i64* %12, align 8
  %62 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %55, i32 0, i32 0
  %63 = load %..string*, %..string** %62, align 8
  %64 = getelementptr %..string, %..string* %63, i64 %61
  %65 = load %..string, %..string* %64, align 8
  store %..string %65, %..string* %13, align 8
  store i64 %61, i64* %14, align 8
  %66 = load %src.Render_Target*, %src.Render_Target** %3, align 8
  %67 = load %fontstash.Font*, %fontstash.Font** %4, align 8
  %68 = load %..string, %..string* %13, align 8
  %69 = load %src.Task_Box*, %src.Task_Box** %1, align 8
  %70 = getelementptr inbounds %src.Task_Box, %src.Task_Box* %69, i32 0, i32 0
  %71 = getelementptr inbounds %src.Element, %src.Element* %70, i32 0, i32 5
  %72 = getelementptr inbounds %src.Rect, %src.Rect* %71, i32 0, i32 0
  %73 = load float, float* %72, align 4
  %74 = load %src.Task_Box*, %src.Task_Box** %1, align 8
  %75 = getelementptr inbounds %src.Task_Box, %src.Task_Box* %74, i32 0, i32 0
  %76 = getelementptr inbounds %src.Element, %src.Element* %75, i32 0, i32 5
  %77 = getelementptr inbounds %src.Rect, %src.Rect* %76, i32 0, i32 2
  %78 = load float, float* %77, align 4
  %79 = load float, float* %9, align 4
  %80 = fadd float %78, %79
  %81 = load [4 x i8], [4 x i8]* %8, align 1
  %82 = load float, float* %7, align 4
  %83 = bitcast %..string* %13 to { i64, i64 }*
  %84 = load { i64, i64 }, { i64, i64 }* %83, align 8
  %85 = bitcast [4 x i8]* %8 to i64*
  %86 = load i64, i64* %85, align 8
  %87 = bitcast %runtime.Context* %16 to i8*
  %88 = call { <2 x float>, <2 x float> } @src.render_string(%src.Render_Target* %66, %fontstash.Font* %67, { i64, i64 } %84, float %73, float %80, i64 %86, float %82, i8* %87)
  %89 = bitcast %src.Rect* %15 to { <2 x float>, <2 x float> }*
  store { <2 x float>, <2 x float> } %88, { <2 x float>, <2 x float> }* %89, align 8
  %90 = load %src.Rect, %src.Rect* %15, align 4
  %91 = load float, float* %7, align 4
  %92 = load float, float* %9, align 4
  %93 = fadd float %92, %91
  store float %93, float* %9, align 4
  br label %for.index.loop

for.index.done:                                   ; preds = %for.index.loop
  ret void
}

define internal i64 @src.task_box_message(%src.Element* %0, i64 %1, i64 %2, i8* %3, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %4 = alloca %src.Element*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i8*, align 8
  %8 = alloca %src.Task_Box*, align 8
  %9 = alloca [4 x i8]*, align 8
  %10 = alloca [4 x i8], align 8
  %11 = alloca %..string, align 8
  %12 = alloca i8, align 1
  %13 = alloca i8, align 1
  %14 = alloca i8, align 1
  %15 = alloca %runtime.Source_Code_Location, align 8
  %16 = alloca i32, align 4
  br label %entry

entry:                                            ; preds = %decls
  store %src.Element* %0, %src.Element** %4, align 8
  store i64 %1, i64* %5, align 8
  store i64 %2, i64* %6, align 8
  store i8* %3, i8** %7, align 8
  %17 = bitcast i8* %__.context_ptr to %runtime.Context*
  %18 = load %src.Element*, %src.Element** %4, align 8
  %19 = bitcast %src.Element* %18 to %src.Task_Box*
  store %src.Task_Box* %19, %src.Task_Box** %8, align 8
  %20 = load i64, i64* %5, align 8
  switch i64 %20, label %switch.done [
    i64 24, label %switch.case.body
    i64 32, label %switch.case.body1
    i64 2, label %switch.case.body2
    i64 27, label %switch.case.body3
    i64 4, label %switch.case.body4
    i64 1, label %switch.case.body5
    i64 28, label %switch.case.body6
    i64 31, label %switch.case.body7
  ]

switch.case.body:                                 ; preds = %entry
  ret i64 1

switch.case.body1:                                ; preds = %entry
  %21 = load i8*, i8** %7, align 8
  %22 = bitcast i8* %21 to [4 x i8]*
  store [4 x i8]* %22, [4 x i8]** %9, align 8
  %23 = load [4 x i8]*, [4 x i8]** %9, align 8
  %24 = bitcast %runtime.Context* %17 to i8*
  %25 = call i64 @src.theme_task_text(i8 0, i8* %24)
  %26 = bitcast [4 x i8]* %10 to i64*
  store i64 %25, i64* %26, align 8
  %27 = load [4 x i8], [4 x i8]* %10, align 1
  store [4 x i8] %27, [4 x i8]* %23, align 1
  br label %switch.done

switch.case.body2:                                ; preds = %entry
  %28 = load %src.Task_Box*, %src.Task_Box** %8, align 8
  %29 = bitcast %runtime.Context* %17 to i8*
  call void @src.task_box_paint_default(%src.Task_Box* %28, i8* %29)
  br label %switch.done

switch.case.body3:                                ; preds = %entry
  %30 = load i8*, i8** %7, align 8
  %31 = bitcast i8* %30 to %..string*
  %32 = load %..string, %..string* %31, align 8
  store %..string %32, %..string* %11, align 8
  %33 = load %src.Element*, %src.Element** %4, align 8
  %34 = getelementptr inbounds %src.Element, %src.Element* %33, i32 0, i32 4
  %35 = load %src.Window*, %src.Window** %34, align 8
  %36 = getelementptr inbounds %src.Window, %src.Window* %35, i32 0, i32 34
  %37 = load i8, i8* %36, align 1
  store i8 %37, i8* %12, align 1
  %38 = load %src.Element*, %src.Element** %4, align 8
  %39 = getelementptr inbounds %src.Element, %src.Element* %38, i32 0, i32 4
  %40 = load %src.Window*, %src.Window** %39, align 8
  %41 = getelementptr inbounds %src.Window, %src.Window* %40, i32 0, i32 33
  %42 = load i8, i8* %41, align 1
  store i8 %42, i8* %13, align 1
  %43 = load %src.Task_Box*, %src.Task_Box** %8, align 8
  %44 = load %src.Task_Box*, %src.Task_Box** %8, align 8
  %45 = getelementptr inbounds %src.Task_Box, %src.Task_Box* %44, i32 0, i32 1
  %46 = load %..string, %..string* %11, align 8
  %47 = load i8, i8* %13, align 1
  %48 = load i8, i8* %12, align 1
  %49 = getelementptr inbounds %src.Task_Box, %src.Task_Box* %43, i32 0, i32 0
  %50 = bitcast %..string* %11 to { i64, i64 }*
  %51 = load { i64, i64 }, { i64, i64 }* %50, align 8
  %52 = icmp ne i8 %47, 0
  %53 = icmp ne i8 %48, 0
  %54 = bitcast %runtime.Context* %17 to i8*
  %55 = call i8 @src.box_evaluate_combo(%src.Element* %49, %src.Box* %45, { i64, i64 } %51, i1 %52, i1 %53, i8* %54)
  store i8 %55, i8* %14, align 1
  %56 = load i8, i8* %14, align 1
  %57 = trunc i8 %56 to i1
  br i1 %57, label %if.then, label %if.done

if.then:                                          ; preds = %switch.case.body3
  %58 = load %src.Element*, %src.Element** %4, align 8
  %59 = bitcast %runtime.Context* %17 to i8*
  call void @src.element_repaint(%src.Element* %58, i8* %59)
  br label %if.done

if.done:                                          ; preds = %if.then, %switch.case.body3
  %60 = load i8, i8* %14, align 1
  %61 = icmp ne i8 %60, 0
  %62 = zext i1 %61 to i64
  ret i64 %62

switch.case.body4:                                ; preds = %entry
  %63 = load %src.Task_Box*, %src.Task_Box** %8, align 8
  %64 = getelementptr inbounds %src.Task_Box, %src.Task_Box* %63, i32 0, i32 1
  %65 = getelementptr inbounds %src.Box, %src.Box* %64, i32 0, i32 0
  %66 = getelementptr inbounds %strings.Builder, %strings.Builder* %65, i32 0, i32 0
  %67 = load { i8*, i64, i64, %runtime.Allocator }, { i8*, i64, i64, %runtime.Allocator }* %66, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([54 x i8], [54 x i8]* @"csbs$2f3", i64 0, i64 0), i64 53 }, i32 591, i32 4, %..string { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"csbs$2f5", i64 0, i64 0), i64 16 } }, %runtime.Source_Code_Location* %15, align 8
  %68 = bitcast %runtime.Context* %17 to i8*
  %69 = call i8 @runtime.delete_dynamic_array-47636({ i8*, i64, i64, %runtime.Allocator }* %66, %runtime.Source_Code_Location* %15, i8* %68)
  br label %switch.done

switch.case.body5:                                ; preds = %entry
  %70 = load %src.Element*, %src.Element** %4, align 8
  %71 = bitcast %runtime.Context* %17 to i8*
  call void @src.element_repaint(%src.Element* %70, i8* %71)
  br label %switch.done

switch.case.body6:                                ; preds = %entry
  %72 = load i8*, i8** %7, align 8
  %73 = bitcast i8* %72 to i32*
  %74 = load i32, i32* %73, align 4
  store i32 %74, i32* %16, align 4
  %75 = load %src.Element*, %src.Element** %4, align 8
  %76 = load %src.Task_Box*, %src.Task_Box** %8, align 8
  %77 = load i32, i32* %16, align 4
  %78 = getelementptr inbounds %src.Task_Box, %src.Task_Box* %76, i32 0, i32 1
  %79 = bitcast %runtime.Context* %17 to i8*
  call void @src.box_insert(%src.Element* %75, %src.Box* %78, i32 %77, i8* %79)
  %80 = load %src.Element*, %src.Element** %4, align 8
  %81 = bitcast %runtime.Context* %17 to i8*
  call void @src.element_repaint(%src.Element* %80, i8* %81)
  ret i64 1

switch.case.body7:                                ; preds = %entry
  %82 = load %src.Task_Box*, %src.Task_Box** %8, align 8
  %83 = load i64, i64* %6, align 8
  %84 = load i8*, i8** %7, align 8
  %85 = getelementptr inbounds %src.Task_Box, %src.Task_Box* %82, i32 0, i32 1
  %86 = bitcast %runtime.Context* %17 to i8*
  call void @src.box_set_caret(%src.Box* %85, i64 %83, i8* %84, i8* %86)
  br label %switch.done

switch.done:                                      ; preds = %switch.case.body7, %switch.case.body5, %switch.case.body4, %switch.case.body2, %switch.case.body1, %entry
  ret i64 0
}

define internal %src.Task_Box* @src.task_box_init(%src.Element* %0, i32 %1, { i64, i64 } %2, i64 %3, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %4 = alloca %src.Element*, align 8
  %5 = alloca i32, align 4
  %6 = alloca %..string, align 8
  %7 = alloca i64, align 8
  %8 = alloca %src.Task_Box*, align 8
  %9 = alloca %strings.Builder, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Element* %0, %src.Element** %4, align 8
  store i32 %1, i32* %5, align 4
  %10 = bitcast %..string* %6 to { i64, i64 }*
  store { i64, i64 } %2, { i64, i64 }* %10, align 8
  %11 = load %..string, %..string* %6, align 8
  store i64 %3, i64* %7, align 8
  store %src.Task_Box* null, %src.Task_Box** %8, align 8
  %12 = bitcast i8* %__.context_ptr to %runtime.Context*
  %13 = load %src.Element*, %src.Element** %4, align 8
  %14 = load i32, i32* %5, align 4
  %15 = load i64, i64* %7, align 8
  %16 = getelementptr inbounds %runtime.Context, %runtime.Context* %12, i32 0, i32 0
  %17 = load %runtime.Allocator, %runtime.Allocator* %16, align 8
  %18 = bitcast %runtime.Allocator* %16 to { i64, i64 }*
  %19 = load { i64, i64 }, { i64, i64 }* %18, align 8
  %20 = bitcast %runtime.Context* %12 to i8*
  %21 = call %src.Task_Box* @src.element_init-47735(%src.Element* %13, i32 %14, i8* bitcast (i64 (%src.Element*, i64, i64, i8*, i8*)* @src.task_box_message to i8*), i64 %15, { i64, i64 } %19, i8* %20)
  store %src.Task_Box* %21, %src.Task_Box** %8, align 8
  %22 = load %src.Task_Box*, %src.Task_Box** %8, align 8
  %23 = getelementptr inbounds %src.Task_Box, %src.Task_Box* %22, i32 0, i32 1
  %24 = getelementptr inbounds %src.Box, %src.Box* %23, i32 0, i32 0
  %25 = getelementptr inbounds %runtime.Context, %runtime.Context* %12, i32 0, i32 0
  %26 = load %runtime.Allocator, %runtime.Allocator* %25, align 8
  %27 = bitcast %runtime.Allocator* %25 to { i64, i64 }*
  %28 = load { i64, i64 }, { i64, i64 }* %27, align 8
  %29 = bitcast %strings.Builder* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* %29, i8 0, i64 40, i1 false)
  %30 = bitcast %runtime.Context* %12 to i8*
  call void @strings.builder_make_len_cap(%strings.Builder* sret %9, i64 0, i64 32, { i64, i64 } %28, i8* %30)
  %31 = load %strings.Builder, %strings.Builder* %9, align 8
  store %strings.Builder %31, %strings.Builder* %24, align 8
  %32 = load %src.Task_Box*, %src.Task_Box** %8, align 8
  %33 = getelementptr inbounds %src.Task_Box, %src.Task_Box* %32, i32 0, i32 1
  %34 = getelementptr inbounds %src.Box, %src.Box* %33, i32 0, i32 0
  %35 = load %..string, %..string* %6, align 8
  %36 = bitcast %..string* %6 to { i64, i64 }*
  %37 = load { i64, i64 }, { i64, i64 }* %36, align 8
  %38 = bitcast %runtime.Context* %12 to i8*
  %39 = call i64 @strings.write_string(%strings.Builder* %34, { i64, i64 } %37, i8* %38)
  %40 = load %src.Task_Box*, %src.Task_Box** %8, align 8
  %41 = getelementptr inbounds %src.Task_Box, %src.Task_Box* %40, i32 0, i32 1
  %42 = bitcast %runtime.Context* %12 to i8*
  call void @src.box_move_end(%src.Box* %41, i1 false, i8* %42)
  %43 = load %src.Task_Box*, %src.Task_Box** %8, align 8
  store %src.Task_Box* %43, %src.Task_Box** %8, align 8
  ret %src.Task_Box* %43
}

define internal i8 @src.box_evaluate_combo(%src.Element* %0, %src.Box* %1, { i64, i64 } %2, i1 zeroext %3, i1 zeroext %4, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %5 = alloca %src.Element*, align 8
  %6 = alloca %src.Box*, align 8
  %7 = alloca %..string, align 8
  %8 = alloca i8, align 1
  %9 = alloca i8, align 1
  %10 = alloca i8, align 1
  %11 = alloca { i64, i64 }, align 8
  %12 = alloca { i64, i64 }, align 8
  %13 = alloca { i64, i64 }, align 8
  %14 = alloca { i64, i64 }, align 8
  %15 = alloca { i64, i64 }, align 8
  %16 = alloca { i64, i64 }, align 8
  %17 = alloca { i64, i64 }, align 8
  %18 = alloca { i64, i64 }, align 8
  %19 = alloca { i64, i64 }, align 8
  %20 = alloca { i64, i64 }, align 8
  %21 = alloca { i64, i64 }, align 8
  %22 = alloca { i64, i64 }, align 8
  %23 = alloca { i64, i64 }, align 8
  %24 = alloca { i64, i64 }, align 8
  %25 = alloca { i64, i64 }, align 8
  %26 = alloca { i64, i64 }, align 8
  %27 = alloca { i64, i64 }, align 8
  %28 = alloca { i64, i64 }, align 8
  %29 = alloca { i64, i64 }, align 8
  %30 = alloca { i64, i64 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Element* %0, %src.Element** %5, align 8
  store %src.Box* %1, %src.Box** %6, align 8
  %31 = bitcast %..string* %7 to { i64, i64 }*
  store { i64, i64 } %2, { i64, i64 }* %31, align 8
  %32 = load %..string, %..string* %7, align 8
  %33 = zext i1 %3 to i8
  store i8 %33, i8* %8, align 1
  %34 = zext i1 %4 to i8
  store i8 %34, i8* %9, align 1
  store i8 0, i8* %10, align 1
  %35 = bitcast i8* %__.context_ptr to %runtime.Context*
  store i8 1, i8* %10, align 1
  %36 = load %..string, %..string* %7, align 8
  %37 = bitcast %..string* %7 to { i64, i64 }*
  %38 = load { i64, i64 }, { i64, i64 }* %37, align 8
  %39 = bitcast { i64, i64 }* %11 to %..string*
  store %..string { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @"csbs$2f6", i64 0, i64 0), i64 15 }, %..string* %39, align 8
  %40 = load { i64, i64 }, { i64, i64 }* %11, align 8
  %41 = call i8 @runtime.string_eq({ i64, i64 } %38, { i64, i64 } %40)
  %42 = trunc i8 %41 to i1
  br i1 %42, label %switch.case.body, label %switch.case.next

switch.case.next:                                 ; preds = %entry
  %43 = bitcast %..string* %7 to { i64, i64 }*
  %44 = load { i64, i64 }, { i64, i64 }* %43, align 8
  %45 = bitcast { i64, i64 }* %12 to %..string*
  store %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$2f7", i64 0, i64 0), i64 9 }, %..string* %45, align 8
  %46 = load { i64, i64 }, { i64, i64 }* %12, align 8
  %47 = call i8 @runtime.string_eq({ i64, i64 } %44, { i64, i64 } %46)
  %48 = trunc i8 %47 to i1
  br i1 %48, label %switch.case.body, label %switch.case.next1

switch.case.next1:                                ; preds = %switch.case.next
  %49 = bitcast %..string* %7 to { i64, i64 }*
  %50 = load { i64, i64 }, { i64, i64 }* %49, align 8
  %51 = bitcast { i64, i64 }* %13 to %..string*
  store %..string { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"csbs$2f8", i64 0, i64 0), i64 10 }, %..string* %51, align 8
  %52 = load { i64, i64 }, { i64, i64 }* %13, align 8
  %53 = call i8 @runtime.string_eq({ i64, i64 } %50, { i64, i64 } %52)
  %54 = trunc i8 %53 to i1
  br i1 %54, label %switch.case.body, label %switch.case.next2

switch.case.next2:                                ; preds = %switch.case.next1
  %55 = bitcast %..string* %7 to { i64, i64 }*
  %56 = load { i64, i64 }, { i64, i64 }* %55, align 8
  %57 = bitcast { i64, i64 }* %14 to %..string*
  store %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$2f9", i64 0, i64 0), i64 4 }, %..string* %57, align 8
  %58 = load { i64, i64 }, { i64, i64 }* %14, align 8
  %59 = call i8 @runtime.string_eq({ i64, i64 } %56, { i64, i64 } %58)
  %60 = trunc i8 %59 to i1
  br i1 %60, label %switch.case.body, label %switch.case.next3

switch.case.next3:                                ; preds = %switch.case.next2
  %61 = bitcast %..string* %7 to { i64, i64 }*
  %62 = load { i64, i64 }, { i64, i64 }* %61, align 8
  %63 = bitcast { i64, i64 }* %15 to %..string*
  store %..string { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"csbs$2fa", i64 0, i64 0), i64 16 }, %..string* %63, align 8
  %64 = load { i64, i64 }, { i64, i64 }* %15, align 8
  %65 = call i8 @runtime.string_eq({ i64, i64 } %62, { i64, i64 } %64)
  %66 = trunc i8 %65 to i1
  br i1 %66, label %switch.case.body8, label %switch.case.next4

switch.case.body:                                 ; preds = %switch.case.next2, %switch.case.next1, %switch.case.next, %entry
  %67 = load %src.Box*, %src.Box** %6, align 8
  %68 = load i8, i8* %8, align 1
  %69 = load i8, i8* %9, align 1
  %70 = icmp ne i8 %68, 0
  %71 = icmp ne i8 %69, 0
  %72 = bitcast %runtime.Context* %35 to i8*
  call void @src.box_move_left(%src.Box* %67, i1 %70, i1 %71, i8* %72)
  br label %switch.done

switch.case.next4:                                ; preds = %switch.case.next3
  %73 = bitcast %..string* %7 to { i64, i64 }*
  %74 = load { i64, i64 }, { i64, i64 }* %73, align 8
  %75 = bitcast { i64, i64 }* %16 to %..string*
  store %..string { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"csbs$2fb", i64 0, i64 0), i64 10 }, %..string* %75, align 8
  %76 = load { i64, i64 }, { i64, i64 }* %16, align 8
  %77 = call i8 @runtime.string_eq({ i64, i64 } %74, { i64, i64 } %76)
  %78 = trunc i8 %77 to i1
  br i1 %78, label %switch.case.body8, label %switch.case.next5

switch.case.next5:                                ; preds = %switch.case.next4
  %79 = bitcast %..string* %7 to { i64, i64 }*
  %80 = load { i64, i64 }, { i64, i64 }* %79, align 8
  %81 = bitcast { i64, i64 }* %17 to %..string*
  store %..string { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"csbs$2fc", i64 0, i64 0), i64 11 }, %..string* %81, align 8
  %82 = load { i64, i64 }, { i64, i64 }* %17, align 8
  %83 = call i8 @runtime.string_eq({ i64, i64 } %80, { i64, i64 } %82)
  %84 = trunc i8 %83 to i1
  br i1 %84, label %switch.case.body8, label %switch.case.next6

switch.case.next6:                                ; preds = %switch.case.next5
  %85 = bitcast %..string* %7 to { i64, i64 }*
  %86 = load { i64, i64 }, { i64, i64 }* %85, align 8
  %87 = bitcast { i64, i64 }* %18 to %..string*
  store %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$2fd", i64 0, i64 0), i64 5 }, %..string* %87, align 8
  %88 = load { i64, i64 }, { i64, i64 }* %18, align 8
  %89 = call i8 @runtime.string_eq({ i64, i64 } %86, { i64, i64 } %88)
  %90 = trunc i8 %89 to i1
  br i1 %90, label %switch.case.body8, label %switch.case.next7

switch.case.next7:                                ; preds = %switch.case.next6
  %91 = bitcast %..string* %7 to { i64, i64 }*
  %92 = load { i64, i64 }, { i64, i64 }* %91, align 8
  %93 = bitcast { i64, i64 }* %19 to %..string*
  store %..string { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"csbs$2fe", i64 0, i64 0), i64 10 }, %..string* %93, align 8
  %94 = load { i64, i64 }, { i64, i64 }* %19, align 8
  %95 = call i8 @runtime.string_eq({ i64, i64 } %92, { i64, i64 } %94)
  %96 = trunc i8 %95 to i1
  br i1 %96, label %switch.case.body11, label %switch.case.next9

switch.case.body8:                                ; preds = %switch.case.next6, %switch.case.next5, %switch.case.next4, %switch.case.next3
  %97 = load %src.Box*, %src.Box** %6, align 8
  %98 = load i8, i8* %8, align 1
  %99 = load i8, i8* %9, align 1
  %100 = icmp ne i8 %98, 0
  %101 = icmp ne i8 %99, 0
  %102 = bitcast %runtime.Context* %35 to i8*
  call void @src.box_move_right(%src.Box* %97, i1 %100, i1 %101, i8* %102)
  br label %switch.done

switch.case.next9:                                ; preds = %switch.case.next7
  %103 = bitcast %..string* %7 to { i64, i64 }*
  %104 = load { i64, i64 }, { i64, i64 }* %103, align 8
  %105 = bitcast { i64, i64 }* %20 to %..string*
  store %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$2ff", i64 0, i64 0), i64 4 }, %..string* %105, align 8
  %106 = load { i64, i64 }, { i64, i64 }* %20, align 8
  %107 = call i8 @runtime.string_eq({ i64, i64 } %104, { i64, i64 } %106)
  %108 = trunc i8 %107 to i1
  br i1 %108, label %switch.case.body11, label %switch.case.next10

switch.case.next10:                               ; preds = %switch.case.next9
  %109 = bitcast %..string* %7 to { i64, i64 }*
  %110 = load { i64, i64 }, { i64, i64 }* %109, align 8
  %111 = bitcast { i64, i64 }* %21 to %..string*
  store %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$300", i64 0, i64 0), i64 9 }, %..string* %111, align 8
  %112 = load { i64, i64 }, { i64, i64 }* %21, align 8
  %113 = call i8 @runtime.string_eq({ i64, i64 } %110, { i64, i64 } %112)
  %114 = trunc i8 %113 to i1
  br i1 %114, label %switch.case.body14, label %switch.case.next12

switch.case.body11:                               ; preds = %switch.case.next9, %switch.case.next7
  %115 = load %src.Box*, %src.Box** %6, align 8
  %116 = load i8, i8* %9, align 1
  %117 = icmp ne i8 %116, 0
  %118 = bitcast %runtime.Context* %35 to i8*
  call void @src.box_move_home(%src.Box* %115, i1 %117, i8* %118)
  br label %switch.done

switch.case.next12:                               ; preds = %switch.case.next10
  %119 = bitcast %..string* %7 to { i64, i64 }*
  %120 = load { i64, i64 }, { i64, i64 }* %119, align 8
  %121 = bitcast { i64, i64 }* %22 to %..string*
  store %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$301", i64 0, i64 0), i64 3 }, %..string* %121, align 8
  %122 = load { i64, i64 }, { i64, i64 }* %22, align 8
  %123 = call i8 @runtime.string_eq({ i64, i64 } %120, { i64, i64 } %122)
  %124 = trunc i8 %123 to i1
  br i1 %124, label %switch.case.body14, label %switch.case.next13

switch.case.next13:                               ; preds = %switch.case.next12
  %125 = bitcast %..string* %7 to { i64, i64 }*
  %126 = load { i64, i64 }, { i64, i64 }* %125, align 8
  %127 = bitcast { i64, i64 }* %23 to %..string*
  store %..string { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"csbs$302", i64 0, i64 0), i64 14 }, %..string* %127, align 8
  %128 = load { i64, i64 }, { i64, i64 }* %23, align 8
  %129 = call i8 @runtime.string_eq({ i64, i64 } %126, { i64, i64 } %128)
  %130 = trunc i8 %129 to i1
  br i1 %130, label %switch.case.body18, label %switch.case.next15

switch.case.body14:                               ; preds = %switch.case.next12, %switch.case.next10
  %131 = load %src.Box*, %src.Box** %6, align 8
  %132 = load i8, i8* %9, align 1
  %133 = icmp ne i8 %132, 0
  %134 = bitcast %runtime.Context* %35 to i8*
  call void @src.box_move_end(%src.Box* %131, i1 %133, i8* %134)
  br label %switch.done

switch.case.next15:                               ; preds = %switch.case.next13
  %135 = bitcast %..string* %7 to { i64, i64 }*
  %136 = load { i64, i64 }, { i64, i64 }* %135, align 8
  %137 = bitcast { i64, i64 }* %24 to %..string*
  store %..string { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @"csbs$303", i64 0, i64 0), i64 15 }, %..string* %137, align 8
  %138 = load { i64, i64 }, { i64, i64 }* %24, align 8
  %139 = call i8 @runtime.string_eq({ i64, i64 } %136, { i64, i64 } %138)
  %140 = trunc i8 %139 to i1
  br i1 %140, label %switch.case.body18, label %switch.case.next16

switch.case.next16:                               ; preds = %switch.case.next15
  %141 = bitcast %..string* %7 to { i64, i64 }*
  %142 = load { i64, i64 }, { i64, i64 }* %141, align 8
  %143 = bitcast { i64, i64 }* %25 to %..string*
  store %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$304", i64 0, i64 0), i64 9 }, %..string* %143, align 8
  %144 = load { i64, i64 }, { i64, i64 }* %25, align 8
  %145 = call i8 @runtime.string_eq({ i64, i64 } %142, { i64, i64 } %144)
  %146 = trunc i8 %145 to i1
  br i1 %146, label %switch.case.body18, label %switch.case.next17

switch.case.next17:                               ; preds = %switch.case.next16
  %147 = bitcast %..string* %7 to { i64, i64 }*
  %148 = load { i64, i64 }, { i64, i64 }* %147, align 8
  %149 = bitcast { i64, i64 }* %26 to %..string*
  store %..string { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"csbs$305", i64 0, i64 0), i64 11 }, %..string* %149, align 8
  %150 = load { i64, i64 }, { i64, i64 }* %26, align 8
  %151 = call i8 @runtime.string_eq({ i64, i64 } %148, { i64, i64 } %150)
  %152 = trunc i8 %151 to i1
  br i1 %152, label %switch.case.body21, label %switch.case.next19

switch.case.body18:                               ; preds = %switch.case.next16, %switch.case.next15, %switch.case.next13
  %153 = load %src.Element*, %src.Element** %5, align 8
  %154 = load %src.Box*, %src.Box** %6, align 8
  %155 = load i8, i8* %8, align 1
  %156 = load i8, i8* %9, align 1
  %157 = icmp ne i8 %155, 0
  %158 = icmp ne i8 %156, 0
  %159 = bitcast %runtime.Context* %35 to i8*
  %160 = call i8 @src.box_backspace(%src.Element* %153, %src.Box* %154, i1 %157, i1 %158, i8* %159)
  store i8 %160, i8* %10, align 1
  br label %switch.done

switch.case.next19:                               ; preds = %switch.case.next17
  %161 = bitcast %..string* %7 to { i64, i64 }*
  %162 = load { i64, i64 }, { i64, i64 }* %161, align 8
  %163 = bitcast { i64, i64 }* %27 to %..string*
  store %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$306", i64 0, i64 0), i64 6 }, %..string* %163, align 8
  %164 = load { i64, i64 }, { i64, i64 }* %27, align 8
  %165 = call i8 @runtime.string_eq({ i64, i64 } %162, { i64, i64 } %164)
  %166 = trunc i8 %165 to i1
  br i1 %166, label %switch.case.body21, label %switch.case.next20

switch.case.next20:                               ; preds = %switch.case.next19
  %167 = bitcast %..string* %7 to { i64, i64 }*
  %168 = load { i64, i64 }, { i64, i64 }* %167, align 8
  %169 = bitcast { i64, i64 }* %28 to %..string*
  store %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$307", i64 0, i64 0), i64 6 }, %..string* %169, align 8
  %170 = load { i64, i64 }, { i64, i64 }* %28, align 8
  %171 = call i8 @runtime.string_eq({ i64, i64 } %168, { i64, i64 } %170)
  %172 = trunc i8 %171 to i1
  br i1 %172, label %switch.case.body23, label %switch.case.next22

switch.case.body21:                               ; preds = %switch.case.next19, %switch.case.next17
  %173 = load %src.Element*, %src.Element** %5, align 8
  %174 = load %src.Box*, %src.Box** %6, align 8
  %175 = load i8, i8* %8, align 1
  %176 = load i8, i8* %9, align 1
  %177 = icmp ne i8 %175, 0
  %178 = icmp ne i8 %176, 0
  %179 = bitcast %runtime.Context* %35 to i8*
  %180 = call i8 @src.box_delete(%src.Element* %173, %src.Box* %174, i1 %177, i1 %178, i8* %179)
  store i8 %180, i8* %10, align 1
  br label %switch.done

switch.case.next22:                               ; preds = %switch.case.next20
  %181 = bitcast %..string* %7 to { i64, i64 }*
  %182 = load { i64, i64 }, { i64, i64 }* %181, align 8
  %183 = bitcast { i64, i64 }* %29 to %..string*
  store %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$308", i64 0, i64 0), i64 6 }, %..string* %183, align 8
  %184 = load { i64, i64 }, { i64, i64 }* %29, align 8
  %185 = call i8 @runtime.string_eq({ i64, i64 } %182, { i64, i64 } %184)
  %186 = trunc i8 %185 to i1
  br i1 %186, label %switch.case.body25, label %switch.case.next24

switch.case.body23:                               ; preds = %switch.case.next20
  %187 = load %src.Box*, %src.Box** %6, align 8
  %188 = bitcast %runtime.Context* %35 to i8*
  call void @src.box_select_all(%src.Box* %187, i8* %188)
  br label %switch.done

switch.case.next24:                               ; preds = %switch.case.next22
  %189 = bitcast %..string* %7 to { i64, i64 }*
  %190 = load { i64, i64 }, { i64, i64 }* %189, align 8
  %191 = bitcast { i64, i64 }* %30 to %..string*
  store %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$309", i64 0, i64 0), i64 6 }, %..string* %191, align 8
  %192 = load { i64, i64 }, { i64, i64 }* %30, align 8
  %193 = call i8 @runtime.string_eq({ i64, i64 } %190, { i64, i64 } %192)
  %194 = trunc i8 %193 to i1
  br i1 %194, label %switch.case.body27, label %switch.case.next26

switch.case.body25:                               ; preds = %switch.case.next22
  %195 = load %src.Element*, %src.Element** %5, align 8
  %196 = getelementptr inbounds %src.Element, %src.Element* %195, i32 0, i32 4
  %197 = load %src.Window*, %src.Window** %196, align 8
  %198 = load %src.Box*, %src.Box** %6, align 8
  %199 = bitcast %runtime.Context* %35 to i8*
  %200 = call i8 @src.box_copy_selection(%src.Window* %197, %src.Box* %198, i8* %199)
  store i8 %200, i8* %10, align 1
  store i8 0, i8* @src.last_was_task_copy, align 1
  br label %switch.done

switch.case.next26:                               ; preds = %switch.case.next24
  br label %switch.default.body

switch.case.body27:                               ; preds = %switch.case.next24
  %201 = load i8, i8* @src.last_was_task_copy, align 1
  %202 = trunc i8 %201 to i1
  br i1 %202, label %if.else, label %if.then

if.then:                                          ; preds = %switch.case.body27
  %203 = load %src.Element*, %src.Element** %5, align 8
  %204 = load %src.Box*, %src.Box** %6, align 8
  %205 = bitcast %runtime.Context* %35 to i8*
  %206 = call i8 @src.box_paste(%src.Element* %203, %src.Box* %204, i8* %205)
  store i8 %206, i8* %10, align 1
  br label %if.done

if.else:                                          ; preds = %switch.case.body27
  store i8 0, i8* %10, align 1
  br label %if.done

if.done:                                          ; preds = %if.else, %if.then
  br label %switch.done

switch.default.body:                              ; preds = %switch.case.next26
  store i8 0, i8* %10, align 1
  br label %switch.done

switch.done:                                      ; preds = %switch.default.body, %if.done, %switch.case.body25, %switch.case.body23, %switch.case.body21, %switch.case.body18, %switch.case.body14, %switch.case.body11, %switch.case.body8, %switch.case.body
  %207 = load i8, i8* %10, align 1
  store i8 %207, i8* %10, align 1
  ret i8 %207
}

define internal i8 @src.box_copy_selection(%src.Window* %0, %src.Box* %1, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %2 = alloca %src.Window*, align 8
  %3 = alloca %src.Box*, align 8
  %4 = alloca i8, align 1
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca %..string, align 8
  %8 = alloca i8, align 1
  %9 = alloca %..string, align 8
  %10 = alloca { %..string, i8 }, align 8
  %11 = alloca %strings.Builder*, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Window* %0, %src.Window** %2, align 8
  store %src.Box* %1, %src.Box** %3, align 8
  store i8 0, i8* %4, align 1
  %12 = bitcast i8* %__.context_ptr to %runtime.Context*
  %13 = load %src.Box*, %src.Box** %3, align 8
  %14 = getelementptr inbounds %src.Box, %src.Box* %13, i32 0, i32 2
  %15 = load i64, i64* %14, align 8
  %16 = load %src.Box*, %src.Box** %3, align 8
  %17 = getelementptr inbounds %src.Box, %src.Box* %16, i32 0, i32 3
  %18 = load i64, i64* %17, align 8
  %19 = icmp eq i64 %15, %18
  %20 = zext i1 %19 to i8
  %21 = trunc i8 %20 to i1
  br i1 %21, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  %22 = load i8, i8* %4, align 1
  store i8 %22, i8* %4, align 1
  ret i8 %22

if.done:                                          ; preds = %entry
  %23 = load %src.Box*, %src.Box** %3, align 8
  %24 = getelementptr inbounds %src.Box, %src.Box* %23, i32 0, i32 4
  store %cutf8.Decode_State zeroinitializer, %cutf8.Decode_State* %24, align 8
  %25 = load %src.Box*, %src.Box** %3, align 8
  %26 = bitcast %runtime.Context* %12 to i8*
  %27 = call { i64, i64 } @src.box_low_and_high(%src.Box* %25, i8* %26)
  %28 = extractvalue { i64, i64 } %27, 0
  %29 = extractvalue { i64, i64 } %27, 1
  store i64 %28, i64* %5, align 8
  store i64 %29, i64* %6, align 8
  %30 = load %src.Box*, %src.Box** %3, align 8
  %31 = getelementptr inbounds %src.Box, %src.Box* %30, i32 0, i32 4
  %32 = load %src.Box*, %src.Box** %3, align 8
  %33 = getelementptr inbounds %src.Box, %src.Box* %32, i32 0, i32 0
  %34 = load %strings.Builder, %strings.Builder* %33, align 8
  %35 = bitcast %runtime.Context* %12 to i8*
  %36 = call { i64, i64 } @strings.to_string(%strings.Builder* %33, i8* %35)
  %37 = bitcast %..string* %9 to { i64, i64 }*
  store { i64, i64 } %36, { i64, i64 }* %37, align 8
  %38 = load %..string, %..string* %9, align 8
  %39 = load i64, i64* %5, align 8
  %40 = load i64, i64* %6, align 8
  %41 = bitcast %..string* %9 to { i64, i64 }*
  %42 = load { i64, i64 }, { i64, i64 }* %41, align 8
  %43 = bitcast { %..string, i8 }* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* %43, i8 0, i64 24, i1 false)
  %44 = bitcast %runtime.Context* %12 to i8*
  call void @cutf8.ds_string_selection({ %..string, i8 }* sret %10, %cutf8.Decode_State* %31, { i64, i64 } %42, i64 %39, i64 %40, i8* %44)
  %45 = load { %..string, i8 }, { %..string, i8 }* %10, align 8
  %46 = getelementptr inbounds { %..string, i8 }, { %..string, i8 }* %10, i32 0, i32 0
  %47 = load %..string, %..string* %46, align 8
  %48 = getelementptr inbounds { %..string, i8 }, { %..string, i8 }* %10, i32 0, i32 1
  %49 = load i8, i8* %48, align 1
  store %..string %47, %..string* %7, align 8
  store i8 %49, i8* %8, align 1
  %50 = load i8, i8* %8, align 1
  %51 = trunc i8 %50 to i1
  br i1 %51, label %if.then1, label %if.done2

if.then1:                                         ; preds = %if.done
  %52 = load %src.Window*, %src.Window** %2, align 8
  %53 = getelementptr inbounds %src.Window, %src.Window* %52, i32 0, i32 45
  store %strings.Builder* %53, %strings.Builder** %11, align 8
  %54 = load %strings.Builder*, %strings.Builder** %11, align 8
  %55 = bitcast %runtime.Context* %12 to i8*
  call void @strings.builder_reset(%strings.Builder* %54, i8* %55)
  %56 = load %strings.Builder*, %strings.Builder** %11, align 8
  %57 = load %..string, %..string* %7, align 8
  %58 = bitcast %..string* %7 to { i64, i64 }*
  %59 = load { i64, i64 }, { i64, i64 }* %58, align 8
  %60 = bitcast %runtime.Context* %12 to i8*
  %61 = call i64 @strings.write_string(%strings.Builder* %56, { i64, i64 } %59, i8* %60)
  store i8 1, i8* %4, align 1
  br label %if.done2

if.done2:                                         ; preds = %if.then1, %if.done
  %62 = load i8, i8* %4, align 1
  store i8 %62, i8* %4, align 1
  ret i8 %62
}

define internal i8 @src.box_paste(%src.Element* %0, %src.Box* %1, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %2 = alloca %src.Element*, align 8
  %3 = alloca %src.Box*, align 8
  %4 = alloca i8, align 1
  %5 = alloca %strings.Builder*, align 8
  %6 = alloca %..string, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Element* %0, %src.Element** %2, align 8
  store %src.Box* %1, %src.Box** %3, align 8
  store i8 0, i8* %4, align 1
  %7 = bitcast i8* %__.context_ptr to %runtime.Context*
  %8 = load %src.Element*, %src.Element** %2, align 8
  %9 = getelementptr inbounds %src.Element, %src.Element* %8, i32 0, i32 4
  %10 = load %src.Window*, %src.Window** %9, align 8
  %11 = getelementptr inbounds %src.Window, %src.Window* %10, i32 0, i32 45
  store %strings.Builder* %11, %strings.Builder** %5, align 8
  %12 = load %strings.Builder*, %strings.Builder** %5, align 8
  %13 = getelementptr inbounds %strings.Builder, %strings.Builder* %12, i32 0, i32 0
  %14 = load { i8*, i64, i64, %runtime.Allocator }, { i8*, i64, i64, %runtime.Allocator }* %13, align 8
  %15 = getelementptr inbounds { i8*, i64, i64, %runtime.Allocator }, { i8*, i64, i64, %runtime.Allocator }* %13, i32 0, i32 1
  %16 = load i64, i64* %15, align 8
  %17 = icmp ne i64 %16, 0
  %18 = zext i1 %17 to i8
  %19 = trunc i8 %18 to i1
  br i1 %19, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  %20 = load %src.Element*, %src.Element** %2, align 8
  %21 = load %src.Box*, %src.Box** %3, align 8
  %22 = load %strings.Builder*, %strings.Builder** %5, align 8
  %23 = load %strings.Builder, %strings.Builder* %22, align 8
  %24 = bitcast %runtime.Context* %7 to i8*
  %25 = call { i64, i64 } @strings.to_string(%strings.Builder* %22, i8* %24)
  %26 = bitcast %..string* %6 to { i64, i64 }*
  store { i64, i64 } %25, { i64, i64 }* %26, align 8
  %27 = load %..string, %..string* %6, align 8
  %28 = bitcast %..string* %6 to { i64, i64 }*
  %29 = load { i64, i64 }, { i64, i64 }* %28, align 8
  %30 = bitcast %runtime.Context* %7 to i8*
  call void @src.box_replace(%src.Element* %20, %src.Box* %21, { i64, i64 } %29, i64 0, i1 true, i8* %30)
  store i8 1, i8* %4, align 1
  br label %if.done

if.done:                                          ; preds = %if.then, %entry
  %31 = load i8, i8* %4, align 1
  store i8 %31, i8* %4, align 1
  ret i8 %31
}

define internal void @src.box_move_left(%src.Box* %0, i1 zeroext %1, i1 zeroext %2, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %3 = alloca %src.Box*, align 8
  %4 = alloca i8, align 1
  %5 = alloca i8, align 1
  br label %entry

entry:                                            ; preds = %decls
  store %src.Box* %0, %src.Box** %3, align 8
  %6 = zext i1 %1 to i8
  store i8 %6, i8* %4, align 1
  %7 = zext i1 %2 to i8
  store i8 %7, i8* %5, align 1
  %8 = bitcast i8* %__.context_ptr to %runtime.Context*
  %9 = load %src.Box*, %src.Box** %3, align 8
  %10 = load i8, i8* %4, align 1
  %11 = load i8, i8* %5, align 1
  %12 = icmp ne i8 %10, 0
  %13 = icmp ne i8 %11, 0
  %14 = bitcast %runtime.Context* %8 to i8*
  call void @src.box_move_caret(%src.Box* %9, i1 true, i1 %12, i1 %13, i8* %14)
  %15 = load %src.Box*, %src.Box** %3, align 8
  %16 = load i8, i8* %5, align 1
  %17 = icmp ne i8 %16, 0
  %18 = bitcast %runtime.Context* %8 to i8*
  call void @src.box_check_shift(%src.Box* %15, i1 %17, i8* %18)
  ret void
}

define internal void @src.box_move_right(%src.Box* %0, i1 zeroext %1, i1 zeroext %2, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %3 = alloca %src.Box*, align 8
  %4 = alloca i8, align 1
  %5 = alloca i8, align 1
  br label %entry

entry:                                            ; preds = %decls
  store %src.Box* %0, %src.Box** %3, align 8
  %6 = zext i1 %1 to i8
  store i8 %6, i8* %4, align 1
  %7 = zext i1 %2 to i8
  store i8 %7, i8* %5, align 1
  %8 = bitcast i8* %__.context_ptr to %runtime.Context*
  %9 = load %src.Box*, %src.Box** %3, align 8
  %10 = load i8, i8* %4, align 1
  %11 = load i8, i8* %5, align 1
  %12 = icmp ne i8 %10, 0
  %13 = icmp ne i8 %11, 0
  %14 = bitcast %runtime.Context* %8 to i8*
  call void @src.box_move_caret(%src.Box* %9, i1 false, i1 %12, i1 %13, i8* %14)
  %15 = load %src.Box*, %src.Box** %3, align 8
  %16 = load i8, i8* %5, align 1
  %17 = icmp ne i8 %16, 0
  %18 = bitcast %runtime.Context* %8 to i8*
  call void @src.box_check_shift(%src.Box* %15, i1 %17, i8* %18)
  ret void
}

define internal void @src.box_move_home(%src.Box* %0, i1 zeroext %1, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %2 = alloca %src.Box*, align 8
  %3 = alloca i8, align 1
  br label %entry

entry:                                            ; preds = %decls
  store %src.Box* %0, %src.Box** %2, align 8
  %4 = zext i1 %1 to i8
  store i8 %4, i8* %3, align 1
  %5 = bitcast i8* %__.context_ptr to %runtime.Context*
  %6 = load %src.Box*, %src.Box** %2, align 8
  %7 = getelementptr inbounds %src.Box, %src.Box* %6, i32 0, i32 2
  store i64 0, i64* %7, align 8
  %8 = load %src.Box*, %src.Box** %2, align 8
  %9 = load i8, i8* %3, align 1
  %10 = icmp ne i8 %9, 0
  %11 = bitcast %runtime.Context* %5 to i8*
  call void @src.box_check_shift(%src.Box* %8, i1 %10, i8* %11)
  ret void
}

define internal void @src.box_move_end(%src.Box* %0, i1 zeroext %1, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %2 = alloca %src.Box*, align 8
  %3 = alloca i8, align 1
  %4 = alloca i64, align 8
  %5 = alloca %..string, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Box* %0, %src.Box** %2, align 8
  %6 = zext i1 %1 to i8
  store i8 %6, i8* %3, align 1
  %7 = bitcast i8* %__.context_ptr to %runtime.Context*
  %8 = load %src.Box*, %src.Box** %2, align 8
  %9 = getelementptr inbounds %src.Box, %src.Box* %8, i32 0, i32 4
  %10 = load %src.Box*, %src.Box** %2, align 8
  %11 = getelementptr inbounds %src.Box, %src.Box* %10, i32 0, i32 0
  %12 = load %strings.Builder, %strings.Builder* %11, align 8
  %13 = bitcast %runtime.Context* %7 to i8*
  %14 = call { i64, i64 } @strings.to_string(%strings.Builder* %11, i8* %13)
  %15 = bitcast %..string* %5 to { i64, i64 }*
  store { i64, i64 } %14, { i64, i64 }* %15, align 8
  %16 = load %..string, %..string* %5, align 8
  %17 = bitcast %..string* %5 to { i64, i64 }*
  %18 = load { i64, i64 }, { i64, i64 }* %17, align 8
  %19 = bitcast %runtime.Context* %7 to i8*
  %20 = call i64 @cutf8.ds_recount(%cutf8.Decode_State* %9, { i64, i64 } %18, i8* %19)
  store i64 %20, i64* %4, align 8
  %21 = load %src.Box*, %src.Box** %2, align 8
  %22 = getelementptr inbounds %src.Box, %src.Box* %21, i32 0, i32 2
  %23 = load i64, i64* %4, align 8
  store i64 %23, i64* %22, align 8
  %24 = load %src.Box*, %src.Box** %2, align 8
  %25 = load i8, i8* %3, align 1
  %26 = icmp ne i8 %25, 0
  %27 = bitcast %runtime.Context* %7 to i8*
  call void @src.box_check_shift(%src.Box* %24, i1 %26, i8* %27)
  ret void
}

define internal i8 @src.box_backspace(%src.Element* %0, %src.Box* %1, i1 zeroext %2, i1 zeroext %3, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %4 = alloca %src.Element*, align 8
  %5 = alloca %src.Box*, align 8
  %6 = alloca i8, align 1
  %7 = alloca i8, align 1
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca { i64, i64 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Element* %0, %src.Element** %4, align 8
  store %src.Box* %1, %src.Box** %5, align 8
  %12 = zext i1 %2 to i8
  store i8 %12, i8* %6, align 1
  %13 = zext i1 %3 to i8
  store i8 %13, i8* %7, align 1
  %14 = bitcast i8* %__.context_ptr to %runtime.Context*
  %15 = load %src.Box*, %src.Box** %5, align 8
  %16 = getelementptr inbounds %src.Box, %src.Box* %15, i32 0, i32 2
  %17 = load i64, i64* %16, align 8
  store i64 %17, i64* %8, align 8
  %18 = load %src.Box*, %src.Box** %5, align 8
  %19 = getelementptr inbounds %src.Box, %src.Box* %18, i32 0, i32 3
  %20 = load i64, i64* %19, align 8
  store i64 %20, i64* %9, align 8
  %21 = load %src.Box*, %src.Box** %5, align 8
  %22 = getelementptr inbounds %src.Box, %src.Box* %21, i32 0, i32 2
  %23 = load i64, i64* %22, align 8
  %24 = icmp eq i64 %23, 0
  %25 = zext i1 %24 to i8
  %26 = trunc i8 %25 to i1
  br i1 %26, label %cmp.and, label %if.done

cmp.and:                                          ; preds = %entry
  %27 = load %src.Box*, %src.Box** %5, align 8
  %28 = getelementptr inbounds %src.Box, %src.Box* %27, i32 0, i32 3
  %29 = load i64, i64* %28, align 8
  %30 = icmp eq i64 %29, 0
  %31 = zext i1 %30 to i8
  %32 = trunc i8 %31 to i1
  br i1 %32, label %if.then, label %if.done

if.then:                                          ; preds = %cmp.and
  ret i8 0

if.done:                                          ; preds = %cmp.and, %entry
  store i64 0, i64* %10, align 8
  %33 = load %src.Box*, %src.Box** %5, align 8
  %34 = getelementptr inbounds %src.Box, %src.Box* %33, i32 0, i32 2
  %35 = load i64, i64* %34, align 8
  %36 = load %src.Box*, %src.Box** %5, align 8
  %37 = getelementptr inbounds %src.Box, %src.Box* %36, i32 0, i32 3
  %38 = load i64, i64* %37, align 8
  %39 = icmp eq i64 %35, %38
  %40 = zext i1 %39 to i8
  %41 = trunc i8 %40 to i1
  br i1 %41, label %if.then1, label %if.done2

if.then1:                                         ; preds = %if.done
  %42 = load %src.Box*, %src.Box** %5, align 8
  %43 = load i8, i8* %6, align 1
  %44 = load i8, i8* %7, align 1
  %45 = icmp ne i8 %43, 0
  %46 = icmp ne i8 %44, 0
  %47 = bitcast %runtime.Context* %14 to i8*
  call void @src.box_move_caret(%src.Box* %42, i1 true, i1 %45, i1 %46, i8* %47)
  store i64 -1, i64* %10, align 8
  br label %if.done2

if.done2:                                         ; preds = %if.then1, %if.done
  %48 = load %src.Element*, %src.Element** %4, align 8
  %49 = load %src.Box*, %src.Box** %5, align 8
  %50 = load i64, i64* %10, align 8
  %51 = bitcast { i64, i64 }* %11 to %..string*
  store %..string zeroinitializer, %..string* %51, align 8
  %52 = load { i64, i64 }, { i64, i64 }* %11, align 8
  %53 = bitcast %runtime.Context* %14 to i8*
  call void @src.box_replace(%src.Element* %48, %src.Box* %49, { i64, i64 } %52, i64 %50, i1 true, i8* %53)
  %54 = load %src.Box*, %src.Box** %5, align 8
  %55 = getelementptr inbounds %src.Box, %src.Box* %54, i32 0, i32 2
  %56 = load i64, i64* %55, align 8
  %57 = load i64, i64* %8, align 8
  %58 = icmp eq i64 %56, %57
  %59 = zext i1 %58 to i8
  %60 = trunc i8 %59 to i1
  br i1 %60, label %cmp.and3, label %if.done5

cmp.and3:                                         ; preds = %if.done2
  %61 = load %src.Box*, %src.Box** %5, align 8
  %62 = getelementptr inbounds %src.Box, %src.Box* %61, i32 0, i32 3
  %63 = load i64, i64* %62, align 8
  %64 = load i64, i64* %9, align 8
  %65 = icmp eq i64 %63, %64
  %66 = zext i1 %65 to i8
  %67 = trunc i8 %66 to i1
  br i1 %67, label %if.then4, label %if.done5

if.then4:                                         ; preds = %cmp.and3
  ret i8 0

if.done5:                                         ; preds = %cmp.and3, %if.done2
  ret i8 1
}

define internal i8 @src.box_delete(%src.Element* %0, %src.Box* %1, i1 zeroext %2, i1 zeroext %3, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %4 = alloca %src.Element*, align 8
  %5 = alloca %src.Box*, align 8
  %6 = alloca i8, align 1
  %7 = alloca i8, align 1
  %8 = alloca i64, align 8
  %9 = alloca { i64, i64 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Element* %0, %src.Element** %4, align 8
  store %src.Box* %1, %src.Box** %5, align 8
  %10 = zext i1 %2 to i8
  store i8 %10, i8* %6, align 1
  %11 = zext i1 %3 to i8
  store i8 %11, i8* %7, align 1
  %12 = bitcast i8* %__.context_ptr to %runtime.Context*
  store i64 0, i64* %8, align 8
  %13 = load %src.Box*, %src.Box** %5, align 8
  %14 = getelementptr inbounds %src.Box, %src.Box* %13, i32 0, i32 2
  %15 = load i64, i64* %14, align 8
  %16 = load %src.Box*, %src.Box** %5, align 8
  %17 = getelementptr inbounds %src.Box, %src.Box* %16, i32 0, i32 3
  %18 = load i64, i64* %17, align 8
  %19 = icmp eq i64 %15, %18
  %20 = zext i1 %19 to i8
  %21 = trunc i8 %20 to i1
  br i1 %21, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  %22 = load %src.Box*, %src.Box** %5, align 8
  %23 = load i8, i8* %6, align 1
  %24 = load i8, i8* %7, align 1
  %25 = icmp ne i8 %23, 0
  %26 = icmp ne i8 %24, 0
  %27 = bitcast %runtime.Context* %12 to i8*
  call void @src.box_move_caret(%src.Box* %22, i1 false, i1 %25, i1 %26, i8* %27)
  store i64 1, i64* %8, align 8
  br label %if.done

if.done:                                          ; preds = %if.then, %entry
  %28 = load %src.Element*, %src.Element** %4, align 8
  %29 = load %src.Box*, %src.Box** %5, align 8
  %30 = load i64, i64* %8, align 8
  %31 = bitcast { i64, i64 }* %9 to %..string*
  store %..string zeroinitializer, %..string* %31, align 8
  %32 = load { i64, i64 }, { i64, i64 }* %9, align 8
  %33 = bitcast %runtime.Context* %12 to i8*
  call void @src.box_replace(%src.Element* %28, %src.Box* %29, { i64, i64 } %32, i64 %30, i1 true, i8* %33)
  ret i8 1
}

define internal void @src.box_select_all(%src.Box* %0, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %1 = alloca %src.Box*, align 8
  %2 = alloca i64, align 8
  %3 = alloca %..string, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Box* %0, %src.Box** %1, align 8
  %4 = bitcast i8* %__.context_ptr to %runtime.Context*
  %5 = load %src.Box*, %src.Box** %1, align 8
  %6 = getelementptr inbounds %src.Box, %src.Box* %5, i32 0, i32 4
  %7 = load %src.Box*, %src.Box** %1, align 8
  %8 = getelementptr inbounds %src.Box, %src.Box* %7, i32 0, i32 0
  %9 = load %strings.Builder, %strings.Builder* %8, align 8
  %10 = bitcast %runtime.Context* %4 to i8*
  %11 = call { i64, i64 } @strings.to_string(%strings.Builder* %8, i8* %10)
  %12 = bitcast %..string* %3 to { i64, i64 }*
  store { i64, i64 } %11, { i64, i64 }* %12, align 8
  %13 = load %..string, %..string* %3, align 8
  %14 = bitcast %..string* %3 to { i64, i64 }*
  %15 = load { i64, i64 }, { i64, i64 }* %14, align 8
  %16 = bitcast %runtime.Context* %4 to i8*
  %17 = call i64 @cutf8.ds_recount(%cutf8.Decode_State* %6, { i64, i64 } %15, i8* %16)
  store i64 %17, i64* %2, align 8
  %18 = load %src.Box*, %src.Box** %1, align 8
  %19 = getelementptr inbounds %src.Box, %src.Box* %18, i32 0, i32 2
  %20 = load i64, i64* %2, align 8
  store i64 %20, i64* %19, align 8
  %21 = load %src.Box*, %src.Box** %1, align 8
  %22 = getelementptr inbounds %src.Box, %src.Box* %21, i32 0, i32 3
  store i64 0, i64* %22, align 8
  ret void
}

define internal void @src.box_force_changes(%src.Undo_Manager* %0, %src.Box* %1, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %2 = alloca %src.Undo_Manager*, align 8
  %3 = alloca %src.Box*, align 8
  %4 = alloca %time.Tick, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Undo_Manager* %0, %src.Undo_Manager** %2, align 8
  store %src.Box* %1, %src.Box** %3, align 8
  %5 = bitcast i8* %__.context_ptr to %runtime.Context*
  %6 = load %src.Box*, %src.Box** %3, align 8
  %7 = getelementptr inbounds %src.Box, %src.Box* %6, i32 0, i32 15
  %8 = load %time.Tick, %time.Tick* %7, align 8
  store %time.Tick zeroinitializer, %time.Tick* %4, align 8
  %9 = bitcast %time.Tick* %7 to i8*
  %10 = bitcast %time.Tick* %4 to i8*
  %11 = call i8 @runtime.memory_equal(i8* %9, i8* %10, i64 8)
  %12 = icmp eq i8 %11, 0
  %13 = zext i1 %12 to i8
  %14 = trunc i8 %13 to i1
  br i1 %14, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  %15 = load %src.Box*, %src.Box** %3, align 8
  %16 = getelementptr inbounds %src.Box, %src.Box* %15, i32 0, i32 15
  store %time.Tick zeroinitializer, %time.Tick* %16, align 8
  %17 = load %src.Undo_Manager*, %src.Undo_Manager** %2, align 8
  %18 = bitcast %runtime.Context* %5 to i8*
  call void @src.undo_group_end(%src.Undo_Manager* %17, i8* %18)
  br label %if.done

if.done:                                          ; preds = %if.then, %entry
  ret void
}

define internal void @src.box_check_changes(%src.Undo_Manager* %0, %src.Box* %1, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %2 = alloca %src.Undo_Manager*, align 8
  %3 = alloca %src.Box*, align 8
  %4 = alloca %time.Tick, align 8
  %5 = alloca i64, align 8
  %6 = alloca %time.Tick, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Undo_Manager* %0, %src.Undo_Manager** %2, align 8
  store %src.Box* %1, %src.Box** %3, align 8
  %7 = bitcast i8* %__.context_ptr to %runtime.Context*
  %8 = load %src.Box*, %src.Box** %3, align 8
  %9 = getelementptr inbounds %src.Box, %src.Box* %8, i32 0, i32 15
  %10 = load %time.Tick, %time.Tick* %9, align 8
  store %time.Tick zeroinitializer, %time.Tick* %4, align 8
  %11 = bitcast %time.Tick* %9 to i8*
  %12 = bitcast %time.Tick* %4 to i8*
  %13 = call i8 @runtime.memory_equal(i8* %11, i8* %12, i64 8)
  %14 = icmp eq i8 %13, 0
  %15 = zext i1 %14 to i8
  %16 = trunc i8 %15 to i1
  br i1 %16, label %if.then, label %if.done2

if.then:                                          ; preds = %entry
  %17 = load %src.Box*, %src.Box** %3, align 8
  %18 = getelementptr inbounds %src.Box, %src.Box* %17, i32 0, i32 15
  %19 = load %time.Tick, %time.Tick* %18, align 8
  %20 = bitcast %time.Tick* %18 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = call i64 @time.tick_since(i64 %21)
  store i64 %22, i64* %5, align 8
  %23 = load i64, i64* %5, align 8
  %24 = icmp sgt i64 %23, 300000000
  %25 = zext i1 %24 to i8
  %26 = trunc i8 %25 to i1
  br i1 %26, label %if.then1, label %if.done

if.then1:                                         ; preds = %if.then
  %27 = load %src.Undo_Manager*, %src.Undo_Manager** %2, align 8
  %28 = bitcast %runtime.Context* %7 to i8*
  call void @src.undo_group_end(%src.Undo_Manager* %27, i8* %28)
  br label %if.done

if.done:                                          ; preds = %if.then1, %if.then
  br label %if.done2

if.done2:                                         ; preds = %if.done, %entry
  %29 = load %src.Box*, %src.Box** %3, align 8
  %30 = getelementptr inbounds %src.Box, %src.Box* %29, i32 0, i32 15
  %31 = call i64 @time.tick_now()
  %32 = bitcast %time.Tick* %6 to i64*
  store i64 %31, i64* %32, align 8
  %33 = load %time.Tick, %time.Tick* %6, align 8
  store %time.Tick %33, %time.Tick* %30, align 8
  ret void
}

define internal void @src.box_insert(%src.Element* %0, %src.Box* %1, i32 %2, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %3 = alloca %src.Element*, align 8
  %4 = alloca %src.Box*, align 8
  %5 = alloca i32, align 4
  %6 = alloca { i64, i64 }, align 8
  %7 = alloca %strings.Builder*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %..string, align 8
  %10 = alloca %src.Undo_Manager*, align 8
  %11 = alloca %src.Undo_Item_Box_Rune_Append, align 8
  %12 = alloca %src.Undo_Item_Box_Rune_Append, align 8
  %13 = alloca %src.Undo_Item_Box_Rune_Insert_At, align 8
  %14 = alloca %src.Undo_Item_Box_Rune_Insert_At, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Element* %0, %src.Element** %3, align 8
  store %src.Box* %1, %src.Box** %4, align 8
  store i32 %2, i32* %5, align 4
  %15 = bitcast i8* %__.context_ptr to %runtime.Context*
  %16 = load %src.Box*, %src.Box** %4, align 8
  %17 = getelementptr inbounds %src.Box, %src.Box* %16, i32 0, i32 2
  %18 = load i64, i64* %17, align 8
  %19 = load %src.Box*, %src.Box** %4, align 8
  %20 = getelementptr inbounds %src.Box, %src.Box* %19, i32 0, i32 3
  %21 = load i64, i64* %20, align 8
  %22 = icmp ne i64 %18, %21
  %23 = zext i1 %22 to i8
  %24 = trunc i8 %23 to i1
  br i1 %24, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  %25 = load %src.Element*, %src.Element** %3, align 8
  %26 = load %src.Box*, %src.Box** %4, align 8
  %27 = bitcast { i64, i64 }* %6 to %..string*
  store %..string zeroinitializer, %..string* %27, align 8
  %28 = load { i64, i64 }, { i64, i64 }* %6, align 8
  %29 = bitcast %runtime.Context* %15 to i8*
  call void @src.box_replace(%src.Element* %25, %src.Box* %26, { i64, i64 } %28, i64 0, i1 true, i8* %29)
  br label %if.done

if.done:                                          ; preds = %if.then, %entry
  %30 = load %src.Box*, %src.Box** %4, align 8
  %31 = getelementptr inbounds %src.Box, %src.Box* %30, i32 0, i32 0
  store %strings.Builder* %31, %strings.Builder** %7, align 8
  %32 = load %src.Box*, %src.Box** %4, align 8
  %33 = getelementptr inbounds %src.Box, %src.Box* %32, i32 0, i32 4
  %34 = load %src.Box*, %src.Box** %4, align 8
  %35 = getelementptr inbounds %src.Box, %src.Box* %34, i32 0, i32 0
  %36 = load %strings.Builder, %strings.Builder* %35, align 8
  %37 = bitcast %runtime.Context* %15 to i8*
  %38 = call { i64, i64 } @strings.to_string(%strings.Builder* %35, i8* %37)
  %39 = bitcast %..string* %9 to { i64, i64 }*
  store { i64, i64 } %38, { i64, i64 }* %39, align 8
  %40 = load %..string, %..string* %9, align 8
  %41 = bitcast %..string* %9 to { i64, i64 }*
  %42 = load { i64, i64 }, { i64, i64 }* %41, align 8
  %43 = bitcast %runtime.Context* %15 to i8*
  %44 = call i64 @cutf8.ds_recount(%cutf8.Decode_State* %33, { i64, i64 } %42, i8* %43)
  store i64 %44, i64* %8, align 8
  %45 = bitcast %runtime.Context* %15 to i8*
  %46 = call %src.Undo_Manager* @src.mode_panel_manager_begin(i8* %45)
  store %src.Undo_Manager* %46, %src.Undo_Manager** %10, align 8
  %47 = load %src.Undo_Manager*, %src.Undo_Manager** %10, align 8
  %48 = load %src.Box*, %src.Box** %4, align 8
  %49 = bitcast %runtime.Context* %15 to i8*
  call void @src.box_check_changes(%src.Undo_Manager* %47, %src.Box* %48, i8* %49)
  %50 = load %src.Undo_Manager*, %src.Undo_Manager** %10, align 8
  %51 = bitcast %runtime.Context* %15 to i8*
  call void @src.task_head_tail_push(%src.Undo_Manager* %50, i8* %51)
  %52 = load %src.Box*, %src.Box** %4, align 8
  %53 = getelementptr inbounds %src.Box, %src.Box* %52, i32 0, i32 2
  %54 = load i64, i64* %53, align 8
  %55 = load i64, i64* %8, align 8
  %56 = icmp eq i64 %54, %55
  %57 = zext i1 %56 to i8
  %58 = trunc i8 %57 to i1
  br i1 %58, label %if.then1, label %if.else

if.then1:                                         ; preds = %if.done
  %59 = bitcast %src.Undo_Item_Box_Rune_Append* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* %59, i8 0, i64 16, i1 false)
  %60 = bitcast %src.Undo_Item_Box_Rune_Append* %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* %60, i8 0, i64 16, i1 false)
  store %src.Undo_Item_Box_Rune_Append zeroinitializer, %src.Undo_Item_Box_Rune_Append* %12, align 8
  %61 = load %src.Box*, %src.Box** %4, align 8
  %62 = getelementptr inbounds %src.Undo_Item_Box_Rune_Append, %src.Undo_Item_Box_Rune_Append* %12, i32 0, i32 0
  store %src.Box* %61, %src.Box** %62, align 8
  %63 = load i32, i32* %5, align 4
  %64 = getelementptr inbounds %src.Undo_Item_Box_Rune_Append, %src.Undo_Item_Box_Rune_Append* %12, i32 0, i32 1
  store i32 %63, i32* %64, align 4
  %65 = load %src.Undo_Item_Box_Rune_Append, %src.Undo_Item_Box_Rune_Append* %12, align 8
  store %src.Undo_Item_Box_Rune_Append %65, %src.Undo_Item_Box_Rune_Append* %11, align 8
  %66 = load %src.Undo_Manager*, %src.Undo_Manager** %10, align 8
  %67 = bitcast %src.Undo_Item_Box_Rune_Append* %11 to i8*
  %68 = bitcast %runtime.Context* %15 to i8*
  call void @src.undo_box_rune_append(%src.Undo_Manager* %66, i8* %67, i8* %68)
  br label %if.done2

if.else:                                          ; preds = %if.done
  %69 = bitcast %src.Undo_Item_Box_Rune_Insert_At* %13 to i8*
  call void @llvm.memset.p0i8.i64(i8* %69, i8 0, i64 24, i1 false)
  %70 = bitcast %src.Undo_Item_Box_Rune_Insert_At* %14 to i8*
  call void @llvm.memset.p0i8.i64(i8* %70, i8 0, i64 24, i1 false)
  store %src.Undo_Item_Box_Rune_Insert_At zeroinitializer, %src.Undo_Item_Box_Rune_Insert_At* %14, align 8
  %71 = load %src.Box*, %src.Box** %4, align 8
  %72 = getelementptr inbounds %src.Undo_Item_Box_Rune_Insert_At, %src.Undo_Item_Box_Rune_Insert_At* %14, i32 0, i32 0
  store %src.Box* %71, %src.Box** %72, align 8
  %73 = load i32, i32* %5, align 4
  %74 = getelementptr inbounds %src.Undo_Item_Box_Rune_Insert_At, %src.Undo_Item_Box_Rune_Insert_At* %14, i32 0, i32 2
  store i32 %73, i32* %74, align 4
  %75 = load %src.Box*, %src.Box** %4, align 8
  %76 = getelementptr inbounds %src.Box, %src.Box* %75, i32 0, i32 2
  %77 = load i64, i64* %76, align 8
  %78 = getelementptr inbounds %src.Undo_Item_Box_Rune_Insert_At, %src.Undo_Item_Box_Rune_Insert_At* %14, i32 0, i32 1
  store i64 %77, i64* %78, align 8
  %79 = load %src.Undo_Item_Box_Rune_Insert_At, %src.Undo_Item_Box_Rune_Insert_At* %14, align 8
  store %src.Undo_Item_Box_Rune_Insert_At %79, %src.Undo_Item_Box_Rune_Insert_At* %13, align 8
  %80 = load %src.Undo_Manager*, %src.Undo_Manager** %10, align 8
  %81 = bitcast %src.Undo_Item_Box_Rune_Insert_At* %13 to i8*
  %82 = bitcast %runtime.Context* %15 to i8*
  call void @src.undo_box_rune_insert_at(%src.Undo_Manager* %80, i8* %81, i8* %82)
  br label %if.done2

if.done2:                                         ; preds = %if.else, %if.then1
  %83 = load %src.Element*, %src.Element** %3, align 8
  %84 = bitcast %runtime.Context* %15 to i8*
  %85 = call i64 @src.element_message(%src.Element* %83, i64 30, i64 0, i8* null, i8* %84)
  ret void
}

define internal void @src.box_replace(%src.Element* %0, %src.Box* %1, { i64, i64 } %2, i64 %3, i1 zeroext %4, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %5 = alloca %src.Element*, align 8
  %6 = alloca %src.Box*, align 8
  %7 = alloca %..string, align 8
  %8 = alloca i64, align 8
  %9 = alloca i8, align 1
  %10 = alloca %src.Undo_Manager*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca %src.Undo_Item_Box_Rune_Remove_At, align 8
  %14 = alloca %src.Undo_Item_Box_Rune_Remove_At, align 8
  %15 = alloca %src.Undo_Item_Box_Remove_Selection, align 8
  %16 = alloca %src.Undo_Item_Box_Remove_Selection, align 8
  %17 = alloca i32, align 4
  %18 = alloca i64, align 8
  %19 = alloca { i32, i64, i8 }, align 8
  %20 = alloca i32, align 4
  %21 = alloca i64, align 8
  %22 = alloca i64, align 8
  %23 = alloca %src.Undo_Item_Box_Remove_Selection, align 8
  %24 = alloca %src.Undo_Item_Box_Remove_Selection, align 8
  %25 = alloca { i8*, i64 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Element* %0, %src.Element** %5, align 8
  store %src.Box* %1, %src.Box** %6, align 8
  %26 = bitcast %..string* %7 to { i64, i64 }*
  store { i64, i64 } %2, { i64, i64 }* %26, align 8
  %27 = load %..string, %..string* %7, align 8
  store i64 %3, i64* %8, align 8
  %28 = zext i1 %4 to i8
  store i8 %28, i8* %9, align 1
  %29 = bitcast i8* %__.context_ptr to %runtime.Context*
  %30 = bitcast %runtime.Context* %29 to i8*
  %31 = call %src.Undo_Manager* @src.mode_panel_manager_begin(i8* %30)
  store %src.Undo_Manager* %31, %src.Undo_Manager** %10, align 8
  %32 = load %src.Undo_Manager*, %src.Undo_Manager** %10, align 8
  %33 = load %src.Box*, %src.Box** %6, align 8
  %34 = bitcast %runtime.Context* %29 to i8*
  call void @src.box_check_changes(%src.Undo_Manager* %32, %src.Box* %33, i8* %34)
  %35 = load %src.Undo_Manager*, %src.Undo_Manager** %10, align 8
  %36 = bitcast %runtime.Context* %29 to i8*
  call void @src.task_head_tail_push(%src.Undo_Manager* %35, i8* %36)
  %37 = load %src.Box*, %src.Box** %6, align 8
  %38 = getelementptr inbounds %src.Box, %src.Box* %37, i32 0, i32 2
  %39 = load i64, i64* %38, align 8
  %40 = load %src.Box*, %src.Box** %6, align 8
  %41 = getelementptr inbounds %src.Box, %src.Box* %40, i32 0, i32 3
  %42 = load i64, i64* %41, align 8
  %43 = icmp ne i64 %39, %42
  %44 = zext i1 %43 to i8
  %45 = trunc i8 %44 to i1
  br i1 %45, label %if.then, label %if.done4

if.then:                                          ; preds = %entry
  %46 = load %src.Box*, %src.Box** %6, align 8
  %47 = bitcast %runtime.Context* %29 to i8*
  %48 = call { i64, i64 } @src.box_low_and_high(%src.Box* %46, i8* %47)
  %49 = extractvalue { i64, i64 } %48, 0
  %50 = extractvalue { i64, i64 } %48, 1
  store i64 %49, i64* %11, align 8
  store i64 %50, i64* %12, align 8
  %51 = load i64, i64* %12, align 8
  %52 = load i64, i64* %11, align 8
  %53 = sub i64 %51, %52
  %54 = icmp eq i64 %53, 1
  %55 = zext i1 %54 to i8
  %56 = trunc i8 %55 to i1
  br i1 %56, label %if.then1, label %if.else

if.then1:                                         ; preds = %if.then
  %57 = bitcast %src.Undo_Item_Box_Rune_Remove_At* %14 to i8*
  call void @llvm.memset.p0i8.i64(i8* %57, i8 0, i64 16, i1 false)
  store %src.Undo_Item_Box_Rune_Remove_At zeroinitializer, %src.Undo_Item_Box_Rune_Remove_At* %14, align 8
  %58 = load %src.Box*, %src.Box** %6, align 8
  %59 = getelementptr inbounds %src.Undo_Item_Box_Rune_Remove_At, %src.Undo_Item_Box_Rune_Remove_At* %14, i32 0, i32 0
  store %src.Box* %58, %src.Box** %59, align 8
  %60 = load i64, i64* %11, align 8
  %61 = getelementptr inbounds %src.Undo_Item_Box_Rune_Remove_At, %src.Undo_Item_Box_Rune_Remove_At* %14, i32 0, i32 1
  store i64 %60, i64* %61, align 8
  %62 = load %src.Undo_Item_Box_Rune_Remove_At, %src.Undo_Item_Box_Rune_Remove_At* %14, align 8
  store %src.Undo_Item_Box_Rune_Remove_At %62, %src.Undo_Item_Box_Rune_Remove_At* %13, align 8
  %63 = load %src.Undo_Manager*, %src.Undo_Manager** %10, align 8
  %64 = bitcast %src.Undo_Item_Box_Rune_Remove_At* %13 to i8*
  %65 = bitcast %runtime.Context* %29 to i8*
  call void @src.undo_box_rune_remove_at(%src.Undo_Manager* %63, i8* %64, i8* %65)
  br label %if.done

if.else:                                          ; preds = %if.then
  %66 = bitcast %src.Undo_Item_Box_Remove_Selection* %16 to i8*
  call void @llvm.memset.p0i8.i64(i8* %66, i8 0, i64 32, i1 false)
  store %src.Undo_Item_Box_Remove_Selection zeroinitializer, %src.Undo_Item_Box_Remove_Selection* %16, align 8
  %67 = load %src.Box*, %src.Box** %6, align 8
  %68 = getelementptr inbounds %src.Undo_Item_Box_Remove_Selection, %src.Undo_Item_Box_Remove_Selection* %16, i32 0, i32 0
  store %src.Box* %67, %src.Box** %68, align 8
  %69 = load %src.Box*, %src.Box** %6, align 8
  %70 = getelementptr inbounds %src.Box, %src.Box* %69, i32 0, i32 2
  %71 = load i64, i64* %70, align 8
  %72 = getelementptr inbounds %src.Undo_Item_Box_Remove_Selection, %src.Undo_Item_Box_Remove_Selection* %16, i32 0, i32 1
  store i64 %71, i64* %72, align 8
  %73 = load %src.Box*, %src.Box** %6, align 8
  %74 = getelementptr inbounds %src.Box, %src.Box* %73, i32 0, i32 3
  %75 = load i64, i64* %74, align 8
  %76 = getelementptr inbounds %src.Undo_Item_Box_Remove_Selection, %src.Undo_Item_Box_Remove_Selection* %16, i32 0, i32 2
  store i64 %75, i64* %76, align 8
  %77 = load i64, i64* %8, align 8
  %78 = getelementptr inbounds %src.Undo_Item_Box_Remove_Selection, %src.Undo_Item_Box_Remove_Selection* %16, i32 0, i32 3
  store i64 %77, i64* %78, align 8
  %79 = load %src.Undo_Item_Box_Remove_Selection, %src.Undo_Item_Box_Remove_Selection* %16, align 8
  store %src.Undo_Item_Box_Remove_Selection %79, %src.Undo_Item_Box_Remove_Selection* %15, align 8
  %80 = load %src.Undo_Manager*, %src.Undo_Manager** %10, align 8
  %81 = bitcast %src.Undo_Item_Box_Remove_Selection* %15 to i8*
  %82 = bitcast %runtime.Context* %29 to i8*
  call void @src.undo_box_remove_selection(%src.Undo_Manager* %80, i8* %81, i8* %82)
  br label %if.done

if.done:                                          ; preds = %if.else, %if.then1
  %83 = load i8, i8* %9, align 1
  %84 = trunc i8 %83 to i1
  br i1 %84, label %if.then2, label %if.done3

if.then2:                                         ; preds = %if.done
  %85 = load %src.Element*, %src.Element** %5, align 8
  %86 = bitcast %runtime.Context* %29 to i8*
  %87 = call i64 @src.element_message(%src.Element* %85, i64 30, i64 0, i8* null, i8* %86)
  br label %if.done3

if.done3:                                         ; preds = %if.then2, %if.done
  br label %if.done4

if.done4:                                         ; preds = %if.done3, %entry
  %88 = load %..string, %..string* %7, align 8
  %89 = getelementptr inbounds %..string, %..string* %7, i32 0, i32 1
  %90 = load i64, i64* %89, align 8
  %91 = icmp ne i64 %90, 0
  %92 = zext i1 %91 to i8
  %93 = trunc i8 %92 to i1
  br i1 %93, label %if.then5, label %if.done6

if.then5:                                         ; preds = %if.done4
  %94 = load %src.Box*, %src.Box** %6, align 8
  %95 = getelementptr inbounds %src.Box, %src.Box* %94, i32 0, i32 4
  store %cutf8.Decode_State zeroinitializer, %cutf8.Decode_State* %95, align 8
  store i32 0, i32* %17, align 4
  store i64 0, i64* %18, align 8
  br label %for.tuple.loop

for.tuple.loop:                                   ; preds = %for.tuple.body, %if.then5
  %96 = load %src.Box*, %src.Box** %6, align 8
  %97 = getelementptr inbounds %src.Box, %src.Box* %96, i32 0, i32 4
  %98 = load %..string, %..string* %7, align 8
  %99 = bitcast %..string* %7 to { i64, i64 }*
  %100 = load { i64, i64 }, { i64, i64 }* %99, align 8
  %101 = bitcast { i32, i64, i8 }* %19 to i8*
  call void @llvm.memset.p0i8.i64(i8* %101, i8 0, i64 24, i1 false)
  %102 = bitcast %runtime.Context* %29 to i8*
  call void @cutf8.ds_iter({ i32, i64, i8 }* sret %19, %cutf8.Decode_State* %97, { i64, i64 } %100, i8* %102)
  %103 = load { i32, i64, i8 }, { i32, i64, i8 }* %19, align 8
  %104 = getelementptr inbounds { i32, i64, i8 }, { i32, i64, i8 }* %19, i32 0, i32 2
  %105 = load i8, i8* %104, align 1
  %106 = trunc i8 %105 to i1
  br i1 %106, label %for.tuple.body, label %for.tuple.done

for.tuple.body:                                   ; preds = %for.tuple.loop
  %107 = getelementptr inbounds { i32, i64, i8 }, { i32, i64, i8 }* %19, i32 0, i32 0
  %108 = load i32, i32* %107, align 4
  %109 = getelementptr inbounds { i32, i64, i8 }, { i32, i64, i8 }* %19, i32 0, i32 1
  %110 = load i64, i64* %109, align 8
  store i32 %108, i32* %20, align 4
  store i64 %110, i64* %21, align 8
  %111 = load %src.Box*, %src.Box** %6, align 8
  %112 = getelementptr inbounds %src.Box, %src.Box* %111, i32 0, i32 0
  %113 = load i32, i32* %20, align 4
  %114 = load %src.Box*, %src.Box** %6, align 8
  %115 = getelementptr inbounds %src.Box, %src.Box* %114, i32 0, i32 2
  %116 = load i64, i64* %115, align 8
  %117 = load i64, i64* %21, align 8
  %118 = add i64 %116, %117
  %119 = bitcast %runtime.Context* %29 to i8*
  call void @src.builder_insert_rune_at(%strings.Builder* %112, i32 %113, i64 %118, i8* %119)
  br label %for.tuple.loop

for.tuple.done:                                   ; preds = %for.tuple.loop
  %120 = load %src.Box*, %src.Box** %6, align 8
  %121 = getelementptr inbounds %src.Box, %src.Box* %120, i32 0, i32 2
  %122 = load i64, i64* %121, align 8
  store i64 %122, i64* %22, align 8
  %123 = load %src.Box*, %src.Box** %6, align 8
  %124 = getelementptr inbounds %src.Box, %src.Box* %123, i32 0, i32 2
  %125 = load %src.Box*, %src.Box** %6, align 8
  %126 = getelementptr inbounds %src.Box, %src.Box* %125, i32 0, i32 4
  %127 = getelementptr inbounds %cutf8.Decode_State, %cutf8.Decode_State* %126, i32 0, i32 4
  %128 = load i64, i64* %127, align 8
  %129 = load i64, i64* %124, align 8
  %130 = add i64 %129, %128
  store i64 %130, i64* %124, align 8
  %131 = load %src.Box*, %src.Box** %6, align 8
  %132 = getelementptr inbounds %src.Box, %src.Box* %131, i32 0, i32 3
  %133 = load %src.Box*, %src.Box** %6, align 8
  %134 = getelementptr inbounds %src.Box, %src.Box* %133, i32 0, i32 2
  %135 = load i64, i64* %134, align 8
  store i64 %135, i64* %132, align 8
  %136 = bitcast %src.Undo_Item_Box_Remove_Selection* %24 to i8*
  call void @llvm.memset.p0i8.i64(i8* %136, i8 0, i64 32, i1 false)
  store %src.Undo_Item_Box_Remove_Selection zeroinitializer, %src.Undo_Item_Box_Remove_Selection* %24, align 8
  %137 = load %src.Box*, %src.Box** %6, align 8
  %138 = getelementptr inbounds %src.Undo_Item_Box_Remove_Selection, %src.Undo_Item_Box_Remove_Selection* %24, i32 0, i32 0
  store %src.Box* %137, %src.Box** %138, align 8
  %139 = load i64, i64* %22, align 8
  %140 = getelementptr inbounds %src.Undo_Item_Box_Remove_Selection, %src.Undo_Item_Box_Remove_Selection* %24, i32 0, i32 1
  store i64 %139, i64* %140, align 8
  %141 = load i64, i64* %22, align 8
  %142 = load %src.Box*, %src.Box** %6, align 8
  %143 = getelementptr inbounds %src.Box, %src.Box* %142, i32 0, i32 4
  %144 = getelementptr inbounds %cutf8.Decode_State, %cutf8.Decode_State* %143, i32 0, i32 4
  %145 = load i64, i64* %144, align 8
  %146 = add i64 %141, %145
  %147 = getelementptr inbounds %src.Undo_Item_Box_Remove_Selection, %src.Undo_Item_Box_Remove_Selection* %24, i32 0, i32 2
  store i64 %146, i64* %147, align 8
  %148 = load %src.Undo_Item_Box_Remove_Selection, %src.Undo_Item_Box_Remove_Selection* %24, align 8
  store %src.Undo_Item_Box_Remove_Selection %148, %src.Undo_Item_Box_Remove_Selection* %23, align 8
  %149 = load %src.Undo_Manager*, %src.Undo_Manager** %10, align 8
  %150 = bitcast %src.Undo_Item_Box_Remove_Selection* %23 to i8*
  %151 = bitcast %runtime.Context* %29 to i8*
  %152 = call { i64, i64 } @src.undo_push(%src.Undo_Manager* %149, i8* bitcast (void (%src.Undo_Manager*, i8*, i8*)* @src.undo_box_remove_selection to i8*), i8* %150, i64 32, i8* %151)
  %153 = bitcast { i8*, i64 }* %25 to { i64, i64 }*
  store { i64, i64 } %152, { i64, i64 }* %153, align 8
  %154 = load { i8*, i64 }, { i8*, i64 }* %25, align 8
  br label %if.done6

if.done6:                                         ; preds = %for.tuple.done, %if.done4
  ret void
}

define internal void @src.box_check_shift(%src.Box* %0, i1 zeroext %1, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %2 = alloca %src.Box*, align 8
  %3 = alloca i8, align 1
  br label %entry

entry:                                            ; preds = %decls
  store %src.Box* %0, %src.Box** %2, align 8
  %4 = zext i1 %1 to i8
  store i8 %4, i8* %3, align 1
  %5 = bitcast i8* %__.context_ptr to %runtime.Context*
  %6 = load i8, i8* %3, align 1
  %7 = trunc i8 %6 to i1
  br i1 %7, label %if.done, label %if.then

if.then:                                          ; preds = %entry
  %8 = load %src.Box*, %src.Box** %2, align 8
  %9 = getelementptr inbounds %src.Box, %src.Box* %8, i32 0, i32 3
  %10 = load %src.Box*, %src.Box** %2, align 8
  %11 = getelementptr inbounds %src.Box, %src.Box* %10, i32 0, i32 2
  %12 = load i64, i64* %11, align 8
  store i64 %12, i64* %9, align 8
  br label %if.done

if.done:                                          ; preds = %if.then, %entry
  ret void
}

define internal void @src.box_move_caret(%src.Box* %0, i1 zeroext %1, i1 zeroext %2, i1 zeroext %3, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %4 = alloca %src.Box*, align 8
  %5 = alloca i8, align 1
  %6 = alloca i8, align 1
  %7 = alloca i8, align 1
  %8 = alloca { i32*, i64 }, align 8
  %9 = alloca %..string, align 8
  %10 = alloca { i32*, i64 }, align 8
  %11 = alloca i32, align 4
  %12 = alloca { i64, i64 }, align 8
  %13 = alloca i32, align 4
  %14 = alloca { i64, i64 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Box* %0, %src.Box** %4, align 8
  %15 = zext i1 %1 to i8
  store i8 %15, i8* %5, align 1
  %16 = zext i1 %2 to i8
  store i8 %16, i8* %6, align 1
  %17 = zext i1 %3 to i8
  store i8 %17, i8* %7, align 1
  %18 = bitcast i8* %__.context_ptr to %runtime.Context*
  %19 = load i8, i8* %7, align 1
  %20 = trunc i8 %19 to i1
  br i1 %20, label %if.done8, label %cmp.and

cmp.and:                                          ; preds = %entry
  %21 = load %src.Box*, %src.Box** %4, align 8
  %22 = getelementptr inbounds %src.Box, %src.Box* %21, i32 0, i32 2
  %23 = load i64, i64* %22, align 8
  %24 = load %src.Box*, %src.Box** %4, align 8
  %25 = getelementptr inbounds %src.Box, %src.Box* %24, i32 0, i32 3
  %26 = load i64, i64* %25, align 8
  %27 = icmp ne i64 %23, %26
  %28 = zext i1 %27 to i8
  %29 = trunc i8 %28 to i1
  br i1 %29, label %if.then, label %if.done8

if.then:                                          ; preds = %cmp.and
  %30 = load %src.Box*, %src.Box** %4, align 8
  %31 = getelementptr inbounds %src.Box, %src.Box* %30, i32 0, i32 2
  %32 = load i64, i64* %31, align 8
  %33 = load %src.Box*, %src.Box** %4, align 8
  %34 = getelementptr inbounds %src.Box, %src.Box* %33, i32 0, i32 3
  %35 = load i64, i64* %34, align 8
  %36 = icmp slt i64 %32, %35
  %37 = zext i1 %36 to i8
  %38 = trunc i8 %37 to i1
  br i1 %38, label %if.then1, label %if.else3

if.then1:                                         ; preds = %if.then
  %39 = load i8, i8* %5, align 1
  %40 = trunc i8 %39 to i1
  br i1 %40, label %if.then2, label %if.else

if.then2:                                         ; preds = %if.then1
  %41 = load %src.Box*, %src.Box** %4, align 8
  %42 = getelementptr inbounds %src.Box, %src.Box* %41, i32 0, i32 3
  %43 = load %src.Box*, %src.Box** %4, align 8
  %44 = getelementptr inbounds %src.Box, %src.Box* %43, i32 0, i32 2
  %45 = load i64, i64* %44, align 8
  store i64 %45, i64* %42, align 8
  br label %if.done

if.else:                                          ; preds = %if.then1
  %46 = load %src.Box*, %src.Box** %4, align 8
  %47 = getelementptr inbounds %src.Box, %src.Box* %46, i32 0, i32 2
  %48 = load %src.Box*, %src.Box** %4, align 8
  %49 = getelementptr inbounds %src.Box, %src.Box* %48, i32 0, i32 3
  %50 = load i64, i64* %49, align 8
  store i64 %50, i64* %47, align 8
  br label %if.done

if.done:                                          ; preds = %if.else, %if.then2
  br label %if.done7

if.else3:                                         ; preds = %if.then
  %51 = load i8, i8* %5, align 1
  %52 = trunc i8 %51 to i1
  br i1 %52, label %if.then4, label %if.else5

if.then4:                                         ; preds = %if.else3
  %53 = load %src.Box*, %src.Box** %4, align 8
  %54 = getelementptr inbounds %src.Box, %src.Box* %53, i32 0, i32 2
  %55 = load %src.Box*, %src.Box** %4, align 8
  %56 = getelementptr inbounds %src.Box, %src.Box* %55, i32 0, i32 3
  %57 = load i64, i64* %56, align 8
  store i64 %57, i64* %54, align 8
  br label %if.done6

if.else5:                                         ; preds = %if.else3
  %58 = load %src.Box*, %src.Box** %4, align 8
  %59 = getelementptr inbounds %src.Box, %src.Box* %58, i32 0, i32 3
  %60 = load %src.Box*, %src.Box** %4, align 8
  %61 = getelementptr inbounds %src.Box, %src.Box* %60, i32 0, i32 2
  %62 = load i64, i64* %61, align 8
  store i64 %62, i64* %59, align 8
  br label %if.done6

if.done6:                                         ; preds = %if.else5, %if.then4
  br label %if.done7

if.done7:                                         ; preds = %if.done6, %if.done
  ret void

if.done8:                                         ; preds = %cmp.and, %entry
  %63 = load %src.Box*, %src.Box** %4, align 8
  %64 = getelementptr inbounds %src.Box, %src.Box* %63, i32 0, i32 4
  %65 = load %src.Box*, %src.Box** %4, align 8
  %66 = getelementptr inbounds %src.Box, %src.Box* %65, i32 0, i32 0
  %67 = load %strings.Builder, %strings.Builder* %66, align 8
  %68 = bitcast %runtime.Context* %18 to i8*
  %69 = call { i64, i64 } @strings.to_string(%strings.Builder* %66, i8* %68)
  %70 = bitcast %..string* %9 to { i64, i64 }*
  store { i64, i64 } %69, { i64, i64 }* %70, align 8
  %71 = load %..string, %..string* %9, align 8
  %72 = getelementptr inbounds %runtime.Context, %runtime.Context* %18, i32 0, i32 1
  %73 = load %runtime.Allocator, %runtime.Allocator* %72, align 8
  %74 = bitcast %..string* %9 to { i64, i64 }*
  %75 = load { i64, i64 }, { i64, i64 }* %74, align 8
  %76 = bitcast %runtime.Allocator* %72 to { i64, i64 }*
  %77 = load { i64, i64 }, { i64, i64 }* %76, align 8
  %78 = bitcast %runtime.Context* %18 to i8*
  %79 = call { i64, i64 } @cutf8.ds_to_runes(%cutf8.Decode_State* %64, { i64, i64 } %75, { i64, i64 } %77, i8* %78)
  %80 = bitcast { i32*, i64 }* %10 to { i64, i64 }*
  store { i64, i64 } %79, { i64, i64 }* %80, align 8
  %81 = load { i32*, i64 }, { i32*, i64 }* %10, align 8
  store { i32*, i64 } %81, { i32*, i64 }* %8, align 8
  br label %for.body

for.body:                                         ; preds = %if.done24, %if.done8
  %82 = load %src.Box*, %src.Box** %4, align 8
  %83 = getelementptr inbounds %src.Box, %src.Box* %82, i32 0, i32 2
  %84 = load i64, i64* %83, align 8
  %85 = icmp sgt i64 %84, 0
  %86 = zext i1 %85 to i8
  %87 = trunc i8 %86 to i1
  br i1 %87, label %cmp.and9, label %if.else11

cmp.and9:                                         ; preds = %for.body
  %88 = load i8, i8* %5, align 1
  %89 = trunc i8 %88 to i1
  br i1 %89, label %if.then10, label %if.else11

if.then10:                                        ; preds = %cmp.and9
  %90 = load %src.Box*, %src.Box** %4, align 8
  %91 = getelementptr inbounds %src.Box, %src.Box* %90, i32 0, i32 2
  %92 = load i64, i64* %91, align 8
  %93 = sub i64 %92, 1
  store i64 %93, i64* %91, align 8
  br label %if.done16

if.else11:                                        ; preds = %cmp.and9, %for.body
  %94 = load %src.Box*, %src.Box** %4, align 8
  %95 = getelementptr inbounds %src.Box, %src.Box* %94, i32 0, i32 2
  %96 = load i64, i64* %95, align 8
  %97 = load { i32*, i64 }, { i32*, i64 }* %8, align 8
  %98 = getelementptr inbounds { i32*, i64 }, { i32*, i64 }* %8, i32 0, i32 1
  %99 = load i64, i64* %98, align 8
  %100 = icmp slt i64 %96, %99
  %101 = zext i1 %100 to i8
  %102 = trunc i8 %101 to i1
  br i1 %102, label %cmp.and12, label %if.else14

cmp.and12:                                        ; preds = %if.else11
  %103 = load i8, i8* %5, align 1
  %104 = trunc i8 %103 to i1
  br i1 %104, label %if.else14, label %if.then13

if.then13:                                        ; preds = %cmp.and12
  %105 = load %src.Box*, %src.Box** %4, align 8
  %106 = getelementptr inbounds %src.Box, %src.Box* %105, i32 0, i32 2
  %107 = load i64, i64* %106, align 8
  %108 = add i64 %107, 1
  store i64 %108, i64* %106, align 8
  br label %if.done15

if.else14:                                        ; preds = %cmp.and12, %if.else11
  ret void

if.done15:                                        ; preds = %if.then13
  br label %if.done16

if.done16:                                        ; preds = %if.done15, %if.then10
  %109 = load i8, i8* %6, align 1
  %110 = trunc i8 %109 to i1
  br i1 %110, label %if.else18, label %if.then17

if.then17:                                        ; preds = %if.done16
  ret void

if.else18:                                        ; preds = %if.done16
  %111 = load %src.Box*, %src.Box** %4, align 8
  %112 = getelementptr inbounds %src.Box, %src.Box* %111, i32 0, i32 2
  %113 = load i64, i64* %112, align 8
  %114 = load { i32*, i64 }, { i32*, i64 }* %8, align 8
  %115 = getelementptr inbounds { i32*, i64 }, { i32*, i64 }* %8, i32 0, i32 1
  %116 = load i64, i64* %115, align 8
  %117 = icmp ne i64 %113, %116
  %118 = zext i1 %117 to i8
  %119 = trunc i8 %118 to i1
  br i1 %119, label %cmp.and19, label %if.done23

cmp.and19:                                        ; preds = %if.else18
  %120 = load %src.Box*, %src.Box** %4, align 8
  %121 = getelementptr inbounds %src.Box, %src.Box* %120, i32 0, i32 2
  %122 = load i64, i64* %121, align 8
  %123 = icmp ne i64 %122, 0
  %124 = zext i1 %123 to i8
  %125 = trunc i8 %124 to i1
  br i1 %125, label %if.then20, label %if.done23

if.then20:                                        ; preds = %cmp.and19
  %126 = load { i32*, i64 }, { i32*, i64 }* %8, align 8
  %127 = getelementptr inbounds { i32*, i64 }, { i32*, i64 }* %8, i32 0, i32 0
  %128 = load i32*, i32** %127, align 8
  %129 = load %src.Box*, %src.Box** %4, align 8
  %130 = getelementptr inbounds %src.Box, %src.Box* %129, i32 0, i32 2
  %131 = load i64, i64* %130, align 8
  %132 = sub i64 %131, 1
  %133 = getelementptr inbounds { i32*, i64 }, { i32*, i64 }* %8, i32 0, i32 1
  %134 = load i64, i64* %133, align 8
  %135 = bitcast { i64, i64 }* %12 to %..string*
  store %..string { i8* getelementptr inbounds ([54 x i8], [54 x i8]* @"csbs$2f3", i64 0, i64 0), i64 53 }, %..string* %135, align 8
  %136 = load { i64, i64 }, { i64, i64 }* %12, align 8
  call void @runtime.bounds_check_error({ i64, i64 } %136, i32 945, i32 20, i64 %132, i64 %134)
  %137 = getelementptr i32, i32* %128, i64 %132
  %138 = load i32, i32* %137, align 4
  store i32 %138, i32* %11, align 4
  %139 = load { i32*, i64 }, { i32*, i64 }* %8, align 8
  %140 = getelementptr inbounds { i32*, i64 }, { i32*, i64 }* %8, i32 0, i32 0
  %141 = load i32*, i32** %140, align 8
  %142 = load %src.Box*, %src.Box** %4, align 8
  %143 = getelementptr inbounds %src.Box, %src.Box* %142, i32 0, i32 2
  %144 = load i64, i64* %143, align 8
  %145 = getelementptr inbounds { i32*, i64 }, { i32*, i64 }* %8, i32 0, i32 1
  %146 = load i64, i64* %145, align 8
  %147 = bitcast { i64, i64 }* %14 to %..string*
  store %..string { i8* getelementptr inbounds ([54 x i8], [54 x i8]* @"csbs$2f3", i64 0, i64 0), i64 53 }, %..string* %147, align 8
  %148 = load { i64, i64 }, { i64, i64 }* %14, align 8
  call void @runtime.bounds_check_error({ i64, i64 } %148, i32 946, i32 20, i64 %144, i64 %146)
  %149 = getelementptr i32, i32* %141, i64 %144
  %150 = load i32, i32* %149, align 4
  store i32 %150, i32* %13, align 4
  %151 = load i32, i32* %11, align 4
  %152 = bitcast %runtime.Context* %18 to i8*
  %153 = call i8 @unicode.is_letter(i32 %151, i8* %152)
  %154 = load i32, i32* %13, align 4
  %155 = bitcast %runtime.Context* %18 to i8*
  %156 = call i8 @unicode.is_letter(i32 %154, i8* %155)
  %157 = icmp ne i8 %153, %156
  %158 = zext i1 %157 to i8
  %159 = trunc i8 %158 to i1
  br i1 %159, label %if.then21, label %if.done22

if.then21:                                        ; preds = %if.then20
  ret void

if.done22:                                        ; preds = %if.then20
  br label %if.done23

if.done23:                                        ; preds = %if.done22, %cmp.and19, %if.else18
  br label %if.done24

if.done24:                                        ; preds = %if.done23
  br label %for.body

for.done:                                         ; No predecessors!
  ret void
}

define internal void @src.box_set_caret(%src.Box* %0, i64 %1, i8* %2, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %3 = alloca %src.Box*, align 8
  %4 = alloca i64, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i64*, align 8
  %7 = alloca i64, align 8
  %8 = alloca %..string, align 8
  %9 = alloca i64, align 8
  %10 = alloca %..string, align 8
  %11 = alloca %..string, align 8
  %12 = alloca %..any, align 8
  %13 = alloca { %..any*, i64 }, align 8
  %14 = alloca [1 x %..any], align 8
  %15 = alloca { i64, i64 }, align 8
  %16 = alloca %runtime.Source_Code_Location, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Box* %0, %src.Box** %3, align 8
  store i64 %1, i64* %4, align 8
  store i8* %2, i8** %5, align 8
  %17 = bitcast i8* %__.context_ptr to %runtime.Context*
  %18 = load i64, i64* %4, align 8
  switch i64 %18, label %switch.default.body [
    i64 0, label %switch.case.body
    i64 1, label %switch.case.body1
    i64 2, label %switch.case.body2
    i64 3, label %switch.case.body3
  ]

switch.case.body:                                 ; preds = %entry
  %19 = load i8*, i8** %5, align 8
  %20 = bitcast i8* %19 to i64*
  store i64* %20, i64** %6, align 8
  %21 = load %src.Box*, %src.Box** %3, align 8
  %22 = getelementptr inbounds %src.Box, %src.Box* %21, i32 0, i32 2
  %23 = load i64*, i64** %6, align 8
  %24 = load i64, i64* %23, align 8
  store i64 %24, i64* %22, align 8
  %25 = load %src.Box*, %src.Box** %3, align 8
  %26 = getelementptr inbounds %src.Box, %src.Box* %25, i32 0, i32 3
  %27 = load i64*, i64** %6, align 8
  %28 = load i64, i64* %27, align 8
  store i64 %28, i64* %26, align 8
  br label %switch.done

switch.case.body1:                                ; preds = %entry
  %29 = load %src.Box*, %src.Box** %3, align 8
  %30 = getelementptr inbounds %src.Box, %src.Box* %29, i32 0, i32 2
  store i64 0, i64* %30, align 8
  %31 = load %src.Box*, %src.Box** %3, align 8
  %32 = getelementptr inbounds %src.Box, %src.Box* %31, i32 0, i32 3
  store i64 0, i64* %32, align 8
  br label %switch.done

switch.case.body2:                                ; preds = %entry
  %33 = load %src.Box*, %src.Box** %3, align 8
  %34 = getelementptr inbounds %src.Box, %src.Box* %33, i32 0, i32 4
  %35 = load %src.Box*, %src.Box** %3, align 8
  %36 = getelementptr inbounds %src.Box, %src.Box* %35, i32 0, i32 0
  %37 = load %strings.Builder, %strings.Builder* %36, align 8
  %38 = bitcast %runtime.Context* %17 to i8*
  %39 = call { i64, i64 } @strings.to_string(%strings.Builder* %36, i8* %38)
  %40 = bitcast %..string* %8 to { i64, i64 }*
  store { i64, i64 } %39, { i64, i64 }* %40, align 8
  %41 = load %..string, %..string* %8, align 8
  %42 = bitcast %..string* %8 to { i64, i64 }*
  %43 = load { i64, i64 }, { i64, i64 }* %42, align 8
  %44 = bitcast %runtime.Context* %17 to i8*
  %45 = call i64 @cutf8.ds_recount(%cutf8.Decode_State* %34, { i64, i64 } %43, i8* %44)
  store i64 %45, i64* %7, align 8
  %46 = load %src.Box*, %src.Box** %3, align 8
  %47 = getelementptr inbounds %src.Box, %src.Box* %46, i32 0, i32 2
  %48 = load i64, i64* %7, align 8
  store i64 %48, i64* %47, align 8
  %49 = load %src.Box*, %src.Box** %3, align 8
  %50 = getelementptr inbounds %src.Box, %src.Box* %49, i32 0, i32 3
  %51 = load %src.Box*, %src.Box** %3, align 8
  %52 = getelementptr inbounds %src.Box, %src.Box* %51, i32 0, i32 2
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %50, align 8
  br label %switch.done

switch.case.body3:                                ; preds = %entry
  %54 = load %src.Box*, %src.Box** %3, align 8
  %55 = getelementptr inbounds %src.Box, %src.Box* %54, i32 0, i32 4
  %56 = load %src.Box*, %src.Box** %3, align 8
  %57 = getelementptr inbounds %src.Box, %src.Box* %56, i32 0, i32 0
  %58 = load %strings.Builder, %strings.Builder* %57, align 8
  %59 = bitcast %runtime.Context* %17 to i8*
  %60 = call { i64, i64 } @strings.to_string(%strings.Builder* %57, i8* %59)
  %61 = bitcast %..string* %10 to { i64, i64 }*
  store { i64, i64 } %60, { i64, i64 }* %61, align 8
  %62 = load %..string, %..string* %10, align 8
  %63 = bitcast %..string* %10 to { i64, i64 }*
  %64 = load { i64, i64 }, { i64, i64 }* %63, align 8
  %65 = bitcast %runtime.Context* %17 to i8*
  %66 = call i64 @cutf8.ds_recount(%cutf8.Decode_State* %55, { i64, i64 } %64, i8* %65)
  store i64 %66, i64* %9, align 8
  %67 = load %src.Box*, %src.Box** %3, align 8
  %68 = getelementptr inbounds %src.Box, %src.Box* %67, i32 0, i32 3
  store i64 0, i64* %68, align 8
  %69 = load %src.Box*, %src.Box** %3, align 8
  %70 = getelementptr inbounds %src.Box, %src.Box* %69, i32 0, i32 2
  %71 = load i64, i64* %9, align 8
  store i64 %71, i64* %70, align 8
  br label %switch.done

switch.default.body:                              ; preds = %entry
  store %..string { i8* getelementptr inbounds ([39 x i8], [39 x i8]* @"csbs$30a", i64 0, i64 0), i64 38 }, %..string* %11, align 8
  %72 = bitcast %..string* %11 to i8*
  %73 = getelementptr inbounds %..any, %..any* %12, i32 0, i32 0
  %74 = getelementptr inbounds %..any, %..any* %12, i32 0, i32 1
  store i8* %72, i8** %73, align 8
  store i64 432345564227567633, i64* %74, align 8
  %75 = load %..any, %..any* %12, align 8
  %76 = bitcast { %..any*, i64 }* %13 to i8*
  call void @llvm.memset.p0i8.i64(i8* %76, i8 0, i64 16, i1 false)
  %77 = bitcast [1 x %..any]* %14 to i8*
  call void @llvm.memset.p0i8.i64(i8* %77, i8 0, i64 16, i1 false)
  %78 = getelementptr [1 x %..any], [1 x %..any]* %14, i64 0, i64 0
  store %..any %75, %..any* %78, align 8
  %79 = getelementptr [1 x %..any], [1 x %..any]* %14, i64 0, i64 0
  %80 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %13, i32 0, i32 0
  store %..any* %79, %..any** %80, align 8
  %81 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %13, i32 0, i32 1
  store i64 1, i64* %81, align 8
  %82 = load { %..any*, i64 }, { %..any*, i64 }* %13, align 8
  %83 = bitcast { %..any*, i64 }* %13 to { i64, i64 }*
  %84 = load { i64, i64 }, { i64, i64 }* %83, align 8
  %85 = bitcast { i64, i64 }* %15 to %..string*
  store %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$2ad", i64 0, i64 0), i64 1 }, %..string* %85, align 8
  %86 = load { i64, i64 }, { i64, i64 }* %15, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([54 x i8], [54 x i8]* @"csbs$2f3", i64 0, i64 0), i64 53 }, i32 981, i32 8, %..string { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @"csbs$30b", i64 0, i64 0), i64 13 } }, %runtime.Source_Code_Location* %16, align 8
  %87 = bitcast %runtime.Context* %17 to i8*
  call void @log.info({ i64, i64 } %84, { i64, i64 } %86, %runtime.Source_Code_Location* %16, i8* %87)
  br label %switch.done

switch.done:                                      ; preds = %switch.default.body, %switch.case.body3, %switch.case.body2, %switch.case.body1, %switch.case.body
  ret void
}

define internal void @src.builder_write_uppercased_string(%strings.Builder* %0, { i64, i64 } %1, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %2 = alloca %strings.Builder*, align 8
  %3 = alloca %..string, align 8
  %4 = alloca i32, align 4
  %5 = alloca %cutf8.Decode_State, align 8
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = alloca { i32, i64, i8 }, align 8
  %9 = alloca i32, align 4
  %10 = alloca i64, align 8
  %11 = alloca i32, align 4
  br label %entry

entry:                                            ; preds = %decls
  store %strings.Builder* %0, %strings.Builder** %2, align 8
  %12 = bitcast %..string* %3 to { i64, i64 }*
  store { i64, i64 } %1, { i64, i64 }* %12, align 8
  %13 = load %..string, %..string* %3, align 8
  %14 = bitcast i8* %__.context_ptr to %runtime.Context*
  store i32 0, i32* %4, align 4
  %15 = bitcast %cutf8.Decode_State* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* %15, i8 0, i64 32, i1 false)
  %16 = load %strings.Builder*, %strings.Builder** %2, align 8
  %17 = bitcast %runtime.Context* %14 to i8*
  call void @strings.builder_reset(%strings.Builder* %16, i8* %17)
  store i32 0, i32* %6, align 4
  store i64 0, i64* %7, align 8
  br label %for.tuple.loop

for.tuple.loop:                                   ; preds = %if.done, %entry
  %18 = load %..string, %..string* %3, align 8
  %19 = bitcast %..string* %3 to { i64, i64 }*
  %20 = load { i64, i64 }, { i64, i64 }* %19, align 8
  %21 = bitcast { i32, i64, i8 }* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* %21, i8 0, i64 24, i1 false)
  %22 = bitcast %runtime.Context* %14 to i8*
  call void @cutf8.ds_iter({ i32, i64, i8 }* sret %8, %cutf8.Decode_State* %5, { i64, i64 } %20, i8* %22)
  %23 = load { i32, i64, i8 }, { i32, i64, i8 }* %8, align 8
  %24 = getelementptr inbounds { i32, i64, i8 }, { i32, i64, i8 }* %8, i32 0, i32 2
  %25 = load i8, i8* %24, align 1
  %26 = trunc i8 %25 to i1
  br i1 %26, label %for.tuple.body, label %for.tuple.done

for.tuple.body:                                   ; preds = %for.tuple.loop
  %27 = getelementptr inbounds { i32, i64, i8 }, { i32, i64, i8 }* %8, i32 0, i32 0
  %28 = load i32, i32* %27, align 4
  %29 = getelementptr inbounds { i32, i64, i8 }, { i32, i64, i8 }* %8, i32 0, i32 1
  %30 = load i64, i64* %29, align 8
  store i32 %28, i32* %9, align 4
  store i64 %30, i64* %10, align 8
  %31 = load i32, i32* %9, align 4
  store i32 %31, i32* %11, align 4
  %32 = load i64, i64* %10, align 8
  %33 = icmp eq i64 %32, 0
  %34 = zext i1 %33 to i8
  %35 = trunc i8 %34 to i1
  br i1 %35, label %if.then, label %cmp.or

cmp.or:                                           ; preds = %for.tuple.body
  %36 = load i32, i32* %4, align 4
  %37 = icmp ne i32 %36, 0
  %38 = zext i1 %37 to i8
  %39 = trunc i8 %38 to i1
  br i1 %39, label %cmp.and, label %if.done

cmp.and:                                          ; preds = %cmp.or
  %40 = load i32, i32* %4, align 4
  %41 = icmp eq i32 %40, 32
  %42 = zext i1 %41 to i8
  %43 = trunc i8 %42 to i1
  br i1 %43, label %if.then, label %if.done

if.then:                                          ; preds = %cmp.and, %for.tuple.body
  %44 = load i32, i32* %11, align 4
  %45 = bitcast %runtime.Context* %14 to i8*
  %46 = call i32 @unicode.to_upper(i32 %44, i8* %45)
  store i32 %46, i32* %11, align 4
  br label %if.done

if.done:                                          ; preds = %if.then, %cmp.and, %cmp.or
  %47 = load %strings.Builder*, %strings.Builder** %2, align 8
  %48 = load i32, i32* %11, align 4
  %49 = bitcast %runtime.Context* %14 to i8*
  call void @src.builder_append_rune(%strings.Builder* %47, i32 %48, i8* %49)
  %50 = load i32, i32* %11, align 4
  store i32 %50, i32* %4, align 4
  br label %for.tuple.loop

for.tuple.done:                                   ; preds = %for.tuple.loop
  ret void
}

define internal void @src.builder_append_rune(%strings.Builder* %0, i32 %1, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %2 = alloca %strings.Builder*, align 8
  %3 = alloca i32, align 4
  %4 = alloca [4 x i8], align 1
  %5 = alloca i64, align 8
  %6 = alloca { [4 x i8], i64 }, align 8
  %7 = alloca %runtime.Source_Code_Location, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca { i64, i64 }, align 8
  %13 = alloca %runtime.Source_Code_Location, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %strings.Builder* %0, %strings.Builder** %2, align 8
  store i32 %1, i32* %3, align 4
  %14 = bitcast i8* %__.context_ptr to %runtime.Context*
  %15 = load i32, i32* %3, align 4
  %16 = bitcast %runtime.Context* %14 to i8*
  %17 = call { i64, i64 } @utf8.encode_rune(i32 %15, i8* %16)
  %18 = bitcast { [4 x i8], i64 }* %6 to { i64, i64 }*
  store { i64, i64 } %17, { i64, i64 }* %18, align 8
  %19 = load { [4 x i8], i64 }, { [4 x i8], i64 }* %6, align 8
  %20 = getelementptr inbounds { [4 x i8], i64 }, { [4 x i8], i64 }* %6, i32 0, i32 0
  %21 = load [4 x i8], [4 x i8]* %20, align 1
  %22 = getelementptr inbounds { [4 x i8], i64 }, { [4 x i8], i64 }* %6, i32 0, i32 1
  %23 = load i64, i64* %22, align 8
  store [4 x i8] %21, [4 x i8]* %4, align 1
  store i64 %23, i64* %5, align 8
  %24 = load i64, i64* %5, align 8
  %25 = icmp eq i64 %24, 1
  %26 = zext i1 %25 to i8
  %27 = trunc i8 %26 to i1
  br i1 %27, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %28 = load %strings.Builder*, %strings.Builder** %2, align 8
  %29 = getelementptr inbounds %strings.Builder, %strings.Builder* %28, i32 0, i32 0
  %30 = getelementptr [4 x i8], [4 x i8]* %4, i64 0, i64 0
  %31 = load i8, i8* %30, align 1
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([54 x i8], [54 x i8]* @"csbs$2f3", i64 0, i64 0), i64 53 }, i32 1009, i32 3, %..string { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @"csbs$30c", i64 0, i64 0), i64 19 } }, %runtime.Source_Code_Location* %7, align 8
  %32 = bitcast %runtime.Context* %14 to i8*
  call void @runtime.append_elem-47786({ i8*, i64, i64, %runtime.Allocator }* %29, i8 %31, %runtime.Source_Code_Location* %7, i8* %32)
  br label %if.done

if.else:                                          ; preds = %entry
  store i64 0, i64* %8, align 8
  store i64 0, i64* %9, align 8
  store i64 0, i64* %10, align 8
  br label %for.interval.loop

for.interval.loop:                                ; preds = %for.interval.post, %if.else
  %33 = load i64, i64* %5, align 8
  %34 = load i64, i64* %9, align 8
  %35 = icmp slt i64 %34, %33
  br i1 %35, label %for.interval.body, label %for.interval.done

for.interval.body:                                ; preds = %for.interval.loop
  %36 = load i64, i64* %9, align 8
  %37 = load i64, i64* %10, align 8
  store i64 %36, i64* %11, align 8
  %38 = load %strings.Builder*, %strings.Builder** %2, align 8
  %39 = getelementptr inbounds %strings.Builder, %strings.Builder* %38, i32 0, i32 0
  %40 = load i64, i64* %11, align 8
  %41 = getelementptr [4 x i8], [4 x i8]* %4, i64 0, i64 %40
  %42 = bitcast { i64, i64 }* %12 to %..string*
  store %..string { i8* getelementptr inbounds ([54 x i8], [54 x i8]* @"csbs$2f3", i64 0, i64 0), i64 53 }, %..string* %42, align 8
  %43 = load { i64, i64 }, { i64, i64 }* %12, align 8
  call void @runtime.bounds_check_error({ i64, i64 } %43, i32 1012, i32 31, i64 %40, i64 4)
  %44 = load i8, i8* %41, align 1
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([54 x i8], [54 x i8]* @"csbs$2f3", i64 0, i64 0), i64 53 }, i32 1012, i32 4, %..string { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @"csbs$30c", i64 0, i64 0), i64 19 } }, %runtime.Source_Code_Location* %13, align 8
  %45 = bitcast %runtime.Context* %14 to i8*
  call void @runtime.append_elem-47786({ i8*, i64, i64, %runtime.Allocator }* %39, i8 %44, %runtime.Source_Code_Location* %13, i8* %45)
  br label %for.interval.post

for.interval.post:                                ; preds = %for.interval.body
  %46 = load i64, i64* %9, align 8
  %47 = add i64 %46, 1
  store i64 %47, i64* %9, align 8
  %48 = load i64, i64* %10, align 8
  %49 = add i64 %48, 1
  store i64 %49, i64* %10, align 8
  br label %for.interval.loop

for.interval.done:                                ; preds = %for.interval.loop
  br label %if.done

if.done:                                          ; preds = %for.interval.done, %if.then
  ret void
}

define internal void @src.builder_insert_rune_at(%strings.Builder* %0, i32 %1, i64 %2, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %3 = alloca %strings.Builder*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i64, align 8
  %6 = alloca %cutf8.Decode_State, align 8
  %7 = alloca { i32*, i64 }, align 8
  %8 = alloca %..string, align 8
  %9 = alloca { i32*, i64 }, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca { i64, i64 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %strings.Builder* %0, %strings.Builder** %3, align 8
  store i32 %1, i32* %4, align 4
  store i64 %2, i64* %5, align 8
  %15 = bitcast i8* %__.context_ptr to %runtime.Context*
  %16 = bitcast %cutf8.Decode_State* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* %16, i8 0, i64 32, i1 false)
  %17 = load %strings.Builder*, %strings.Builder** %3, align 8
  %18 = load %strings.Builder, %strings.Builder* %17, align 8
  %19 = bitcast %runtime.Context* %15 to i8*
  %20 = call { i64, i64 } @strings.to_string(%strings.Builder* %17, i8* %19)
  %21 = bitcast %..string* %8 to { i64, i64 }*
  store { i64, i64 } %20, { i64, i64 }* %21, align 8
  %22 = load %..string, %..string* %8, align 8
  %23 = getelementptr inbounds %runtime.Context, %runtime.Context* %15, i32 0, i32 1
  %24 = load %runtime.Allocator, %runtime.Allocator* %23, align 8
  %25 = bitcast %..string* %8 to { i64, i64 }*
  %26 = load { i64, i64 }, { i64, i64 }* %25, align 8
  %27 = bitcast %runtime.Allocator* %23 to { i64, i64 }*
  %28 = load { i64, i64 }, { i64, i64 }* %27, align 8
  %29 = bitcast %runtime.Context* %15 to i8*
  %30 = call { i64, i64 } @cutf8.ds_to_runes(%cutf8.Decode_State* %6, { i64, i64 } %26, { i64, i64 } %28, i8* %29)
  %31 = bitcast { i32*, i64 }* %9 to { i64, i64 }*
  store { i64, i64 } %30, { i64, i64 }* %31, align 8
  %32 = load { i32*, i64 }, { i32*, i64 }* %9, align 8
  store { i32*, i64 } %32, { i32*, i64 }* %7, align 8
  %33 = load i64, i64* %5, align 8
  %34 = load { i32*, i64 }, { i32*, i64 }* %7, align 8
  %35 = getelementptr inbounds { i32*, i64 }, { i32*, i64 }* %7, i32 0, i32 1
  %36 = load i64, i64* %35, align 8
  %37 = icmp eq i64 %33, %36
  %38 = zext i1 %37 to i8
  %39 = trunc i8 %38 to i1
  br i1 %39, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %40 = load %strings.Builder*, %strings.Builder** %3, align 8
  %41 = load i32, i32* %4, align 4
  %42 = bitcast %runtime.Context* %15 to i8*
  call void @src.builder_append_rune(%strings.Builder* %40, i32 %41, i8* %42)
  br label %if.done2

if.else:                                          ; preds = %entry
  %43 = load %strings.Builder*, %strings.Builder** %3, align 8
  %44 = bitcast %runtime.Context* %15 to i8*
  call void @strings.builder_reset(%strings.Builder* %43, i8* %44)
  store i64 0, i64* %10, align 8
  store i64 0, i64* %11, align 8
  store i64 0, i64* %12, align 8
  br label %for.interval.loop

for.interval.loop:                                ; preds = %for.interval.post, %if.else
  %45 = load { i32*, i64 }, { i32*, i64 }* %7, align 8
  %46 = getelementptr inbounds { i32*, i64 }, { i32*, i64 }* %7, i32 0, i32 1
  %47 = load i64, i64* %46, align 8
  %48 = load i64, i64* %11, align 8
  %49 = icmp slt i64 %48, %47
  br i1 %49, label %for.interval.body, label %for.interval.done

for.interval.body:                                ; preds = %for.interval.loop
  %50 = load i64, i64* %11, align 8
  %51 = load i64, i64* %12, align 8
  store i64 %50, i64* %13, align 8
  %52 = load i64, i64* %13, align 8
  %53 = load i64, i64* %5, align 8
  %54 = icmp eq i64 %52, %53
  %55 = zext i1 %54 to i8
  %56 = trunc i8 %55 to i1
  br i1 %56, label %if.then1, label %if.done

if.then1:                                         ; preds = %for.interval.body
  %57 = load %strings.Builder*, %strings.Builder** %3, align 8
  %58 = load i32, i32* %4, align 4
  %59 = bitcast %runtime.Context* %15 to i8*
  call void @src.builder_append_rune(%strings.Builder* %57, i32 %58, i8* %59)
  br label %if.done

if.done:                                          ; preds = %if.then1, %for.interval.body
  %60 = load %strings.Builder*, %strings.Builder** %3, align 8
  %61 = load { i32*, i64 }, { i32*, i64 }* %7, align 8
  %62 = getelementptr inbounds { i32*, i64 }, { i32*, i64 }* %7, i32 0, i32 0
  %63 = load i32*, i32** %62, align 8
  %64 = load i64, i64* %13, align 8
  %65 = getelementptr inbounds { i32*, i64 }, { i32*, i64 }* %7, i32 0, i32 1
  %66 = load i64, i64* %65, align 8
  %67 = bitcast { i64, i64 }* %14 to %..string*
  store %..string { i8* getelementptr inbounds ([54 x i8], [54 x i8]* @"csbs$2f3", i64 0, i64 0), i64 53 }, %..string* %67, align 8
  %68 = load { i64, i64 }, { i64, i64 }* %14, align 8
  call void @runtime.bounds_check_error({ i64, i64 } %68, i32 1032, i32 39, i64 %64, i64 %66)
  %69 = getelementptr i32, i32* %63, i64 %64
  %70 = load i32, i32* %69, align 4
  %71 = bitcast %runtime.Context* %15 to i8*
  call void @src.builder_append_rune(%strings.Builder* %60, i32 %70, i8* %71)
  br label %for.interval.post

for.interval.post:                                ; preds = %if.done
  %72 = load i64, i64* %11, align 8
  %73 = add i64 %72, 1
  store i64 %73, i64* %11, align 8
  %74 = load i64, i64* %12, align 8
  %75 = add i64 %74, 1
  store i64 %75, i64* %12, align 8
  br label %for.interval.loop

for.interval.done:                                ; preds = %for.interval.loop
  br label %if.done2

if.done2:                                         ; preds = %for.interval.done, %if.then
  ret void
}

define internal { i64, i64 } @src.box_low_and_high(%src.Box* %0, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %1 = alloca %src.Box*, align 8
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca { i64, i64 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Box* %0, %src.Box** %1, align 8
  store i64 0, i64* %2, align 8
  store i64 0, i64* %3, align 8
  %5 = bitcast i8* %__.context_ptr to %runtime.Context*
  %6 = load %src.Box*, %src.Box** %1, align 8
  %7 = getelementptr inbounds %src.Box, %src.Box* %6, i32 0, i32 2
  %8 = load i64, i64* %7, align 8
  %9 = load %src.Box*, %src.Box** %1, align 8
  %10 = getelementptr inbounds %src.Box, %src.Box* %9, i32 0, i32 3
  %11 = load i64, i64* %10, align 8
  %12 = icmp slt i64 %8, %11
  %13 = select i1 %12, i64 %8, i64 %11
  store i64 %13, i64* %2, align 8
  %14 = load %src.Box*, %src.Box** %1, align 8
  %15 = getelementptr inbounds %src.Box, %src.Box* %14, i32 0, i32 2
  %16 = load i64, i64* %15, align 8
  %17 = load %src.Box*, %src.Box** %1, align 8
  %18 = getelementptr inbounds %src.Box, %src.Box* %17, i32 0, i32 3
  %19 = load i64, i64* %18, align 8
  %20 = icmp sgt i64 %16, %19
  %21 = select i1 %20, i64 %16, i64 %19
  store i64 %21, i64* %3, align 8
  %22 = load i64, i64* %2, align 8
  %23 = load i64, i64* %3, align 8
  store i64 %22, i64* %2, align 8
  store i64 %23, i64* %3, align 8
  %24 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %4, i32 0, i32 0
  %25 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %4, i32 0, i32 1
  store i64 %22, i64* %24, align 8
  store i64 %23, i64* %25, align 8
  %26 = load { i64, i64 }, { i64, i64 }* %4, align 8
  ret { i64, i64 } %26
}

define internal { <2 x float>, <2 x float> } @src.box_layout_caret(%src.Box* %0, %fontstash.Font* %1, float %2, float %3, float %4, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %5 = alloca %src.Box*, align 8
  %6 = alloca %fontstash.Font*, align 8
  %7 = alloca float, align 4
  %8 = alloca float, align 4
  %9 = alloca float, align 4
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca { %..string*, i64 }, align 8
  %13 = alloca %runtime.Source_Code_Location, align 8
  %14 = alloca i64, align 8
  %15 = alloca %..string, align 8
  %16 = alloca { i64, i64 }, align 8
  %17 = alloca float, align 4
  %18 = alloca float, align 4
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca %cutf8.Decode_State, align 8
  %22 = alloca i32, align 4
  %23 = alloca i64, align 8
  %24 = alloca { i32, i64, i8 }, align 8
  %25 = alloca i32, align 4
  %26 = alloca i64, align 8
  %27 = alloca %src.Rect, align 8
  %28 = alloca %src.Rect, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Box* %0, %src.Box** %5, align 8
  store %fontstash.Font* %1, %fontstash.Font** %6, align 8
  store float %2, float* %7, align 4
  store float %3, float* %8, align 4
  store float %4, float* %9, align 4
  %29 = bitcast i8* %__.context_ptr to %runtime.Context*
  %30 = load %src.Box*, %src.Box** %5, align 8
  %31 = getelementptr inbounds %src.Box, %src.Box* %30, i32 0, i32 1
  %32 = load { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %31, align 8
  %33 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %31, i32 0, i32 1
  %34 = load i64, i64* %33, align 8
  %35 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %31, i32 0, i32 0
  %36 = load %..string*, %..string** %35, align 8
  %37 = getelementptr %..string, %..string* %36, i64 0
  %38 = sub i64 %34, 0
  %39 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %12, i32 0, i32 0
  store %..string* %37, %..string** %39, align 8
  %40 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %12, i32 0, i32 1
  store i64 %38, i64* %40, align 8
  %41 = load { %..string*, i64 }, { %..string*, i64 }* %12, align 8
  %42 = load %src.Box*, %src.Box** %5, align 8
  %43 = getelementptr inbounds %src.Box, %src.Box* %42, i32 0, i32 2
  %44 = load i64, i64* %43, align 8
  %45 = bitcast { %..string*, i64 }* %12 to { i64, i64 }*
  %46 = load { i64, i64 }, { i64, i64 }* %45, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([54 x i8], [54 x i8]* @"csbs$2f3", i64 0, i64 0), i64 53 }, i32 1055, i32 40, %..string { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"csbs$30d", i64 0, i64 0), i64 16 } }, %runtime.Source_Code_Location* %13, align 8
  %47 = bitcast %runtime.Context* %29 to i8*
  %48 = call { i64, i64 } @fontstash.codepoint_index_to_line({ i64, i64 } %46, i64 %44, %runtime.Source_Code_Location* %13, i8* %47)
  %49 = extractvalue { i64, i64 } %48, 0
  %50 = extractvalue { i64, i64 } %48, 1
  store i64 %49, i64* %10, align 8
  store i64 %50, i64* %11, align 8
  %51 = load %src.Box*, %src.Box** %5, align 8
  %52 = getelementptr inbounds %src.Box, %src.Box* %51, i32 0, i32 2
  %53 = load i64, i64* %52, align 8
  %54 = load i64, i64* %11, align 8
  %55 = sub i64 %53, %54
  store i64 %55, i64* %14, align 8
  %56 = load %src.Box*, %src.Box** %5, align 8
  %57 = getelementptr inbounds %src.Box, %src.Box* %56, i32 0, i32 1
  %58 = load { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %57, align 8
  %59 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %57, i32 0, i32 0
  %60 = load %..string*, %..string** %59, align 8
  %61 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %57, i32 0, i32 1
  %62 = load i64, i64* %61, align 8
  %63 = load i64, i64* %10, align 8
  %64 = bitcast { i64, i64 }* %16 to %..string*
  store %..string { i8* getelementptr inbounds ([54 x i8], [54 x i8]* @"csbs$2f3", i64 0, i64 0), i64 53 }, %..string* %64, align 8
  %65 = load { i64, i64 }, { i64, i64 }* %16, align 8
  call void @runtime.bounds_check_error({ i64, i64 } %65, i32 1061, i32 28, i64 %63, i64 %62)
  %66 = getelementptr %..string, %..string* %60, i64 %63
  %67 = load %..string, %..string* %66, align 8
  store %..string %67, %..string* %15, align 8
  store float 0.000000e+00, float* %17, align 4
  %68 = load %fontstash.Font*, %fontstash.Font** %6, align 8
  %69 = load float, float* %7, align 4
  %70 = bitcast %runtime.Context* %29 to i8*
  %71 = call float @fontstash.scale_for_pixel_height(%fontstash.Font* %68, float %69, i8* %70)
  store float %71, float* %18, align 4
  store i32 0, i32* %19, align 4
  store i32 0, i32* %20, align 4
  %72 = bitcast %cutf8.Decode_State* %21 to i8*
  call void @llvm.memset.p0i8.i64(i8* %72, i8 0, i64 32, i1 false)
  store i32 0, i32* %22, align 4
  store i64 0, i64* %23, align 8
  br label %for.tuple.loop

for.tuple.loop:                                   ; preds = %if.done, %entry
  %73 = load %..string, %..string* %15, align 8
  %74 = bitcast %..string* %15 to { i64, i64 }*
  %75 = load { i64, i64 }, { i64, i64 }* %74, align 8
  %76 = bitcast { i32, i64, i8 }* %24 to i8*
  call void @llvm.memset.p0i8.i64(i8* %76, i8 0, i64 24, i1 false)
  %77 = bitcast %runtime.Context* %29 to i8*
  call void @cutf8.ds_iter({ i32, i64, i8 }* sret %24, %cutf8.Decode_State* %21, { i64, i64 } %75, i8* %77)
  %78 = load { i32, i64, i8 }, { i32, i64, i8 }* %24, align 8
  %79 = getelementptr inbounds { i32, i64, i8 }, { i32, i64, i8 }* %24, i32 0, i32 2
  %80 = load i8, i8* %79, align 1
  %81 = trunc i8 %80 to i1
  br i1 %81, label %for.tuple.body, label %for.tuple.done

for.tuple.body:                                   ; preds = %for.tuple.loop
  %82 = getelementptr inbounds { i32, i64, i8 }, { i32, i64, i8 }* %24, i32 0, i32 0
  %83 = load i32, i32* %82, align 4
  %84 = getelementptr inbounds { i32, i64, i8 }, { i32, i64, i8 }* %24, i32 0, i32 1
  %85 = load i64, i64* %84, align 8
  store i32 %83, i32* %25, align 4
  store i64 %85, i64* %26, align 8
  %86 = load i64, i64* %26, align 8
  %87 = load i64, i64* %14, align 8
  %88 = icmp sge i64 %86, %87
  %89 = zext i1 %88 to i8
  %90 = trunc i8 %89 to i1
  br i1 %90, label %if.then, label %if.done

if.then:                                          ; preds = %for.tuple.body
  br label %for.tuple.done

unreachable:                                      ; No predecessors!
  br label %if.done

if.done:                                          ; preds = %unreachable, %for.tuple.body
  %91 = load %fontstash.Font*, %fontstash.Font** %6, align 8
  %92 = load i32, i32* %25, align 4
  %93 = load float, float* %18, align 4
  %94 = bitcast %runtime.Context* %29 to i8*
  %95 = call float @fontstash.codepoint_xadvance(%fontstash.Font* %91, i32 %92, float %93, i8* %94)
  %96 = load float, float* %17, align 4
  %97 = fadd float %96, %95
  store float %97, float* %17, align 4
  br label %for.tuple.loop

for.tuple.done:                                   ; preds = %if.then, %for.tuple.loop
  %98 = load float, float* %8, align 4
  %99 = load float, float* %17, align 4
  %100 = fadd float %98, %99
  %101 = load float, float* %9, align 4
  %102 = load i64, i64* %10, align 8
  %103 = sitofp i64 %102 to float
  %104 = load float, float* %7, align 4
  %105 = fmul float %103, %104
  %106 = fadd float %101, %105
  %107 = load float, float* @src.SCALE, align 4
  %108 = fmul float 2.000000e+00, %107
  %109 = call float @math.round_f32(float %108)
  %110 = load float, float* %7, align 4
  %111 = bitcast %runtime.Context* %29 to i8*
  %112 = call { <2 x float>, <2 x float> } @src.rect_wh(float %100, float %106, float %109, float %110, i8* %111)
  %113 = bitcast %src.Rect* %28 to { <2 x float>, <2 x float> }*
  store { <2 x float>, <2 x float> } %112, { <2 x float>, <2 x float> }* %113, align 8
  %114 = load %src.Rect, %src.Rect* %28, align 4
  store %src.Rect %114, %src.Rect* %27, align 4
  %115 = load %src.Rect, %src.Rect* %27, align 4
  %116 = bitcast %src.Rect* %27 to { <2 x float>, <2 x float> }*
  %117 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %116, align 8
  ret { <2 x float>, <2 x float> } %117
}

define internal void @src.wrap_state_init(%src.Wrap_State* noalias sret %agg.result, { i64, i64 } %0, %fontstash.Font* %1, float %2, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %3 = alloca { %..string*, i64 }, align 8
  %4 = alloca %fontstash.Font*, align 8
  %5 = alloca float, align 4
  %6 = alloca %src.Wrap_State, align 8
  br label %entry

entry:                                            ; preds = %decls
  %7 = bitcast { %..string*, i64 }* %3 to { i64, i64 }*
  store { i64, i64 } %0, { i64, i64 }* %7, align 8
  %8 = load { %..string*, i64 }, { %..string*, i64 }* %3, align 8
  store %fontstash.Font* %1, %fontstash.Font** %4, align 8
  store float %2, float* %5, align 4
  %9 = bitcast i8* %__.context_ptr to %runtime.Context*
  %10 = bitcast %src.Wrap_State* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* %10, i8 0, i64 80, i1 false)
  %11 = bitcast %src.Wrap_State* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* %11, i8 0, i64 80, i1 false)
  %12 = load { %..string*, i64 }, { %..string*, i64 }* %3, align 8
  %13 = getelementptr inbounds %src.Wrap_State, %src.Wrap_State* %6, i32 0, i32 3
  store { %..string*, i64 } %12, { %..string*, i64 }* %13, align 8
  %14 = load %fontstash.Font*, %fontstash.Font** %4, align 8
  %15 = getelementptr inbounds %src.Wrap_State, %src.Wrap_State* %6, i32 0, i32 0
  store %fontstash.Font* %14, %fontstash.Font** %15, align 8
  %16 = load float, float* %5, align 4
  %17 = getelementptr inbounds %src.Wrap_State, %src.Wrap_State* %6, i32 0, i32 1
  store float %16, float* %17, align 4
  %18 = load %src.Wrap_State, %src.Wrap_State* %6, align 8
  %19 = bitcast %src.Wrap_State* %agg.result to i8*
  %20 = bitcast %src.Wrap_State* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %19, i8* %20, i64 80, i1 false)
  ret void
}

define internal i8 @src.wrap_state_iter(%src.Wrap_State* %0, i64 %1, i64 %2, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %3 = alloca %src.Wrap_State*, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca %..string, align 8
  %7 = alloca { i64, i64 }, align 8
  %8 = alloca float, align 4
  %9 = alloca float, align 4
  %10 = alloca float, align 4
  %11 = alloca %cutf8.Decode_State, align 8
  %12 = alloca float, align 4
  %13 = alloca i32, align 4
  %14 = alloca i64, align 8
  %15 = alloca { i32, i64, i8 }, align 8
  %16 = alloca i32, align 4
  %17 = alloca i64, align 8
  %18 = alloca float, align 4
  %19 = alloca float, align 4
  %20 = alloca %src.Rect, align 4
  br label %entry

entry:                                            ; preds = %decls
  store %src.Wrap_State* %0, %src.Wrap_State** %3, align 8
  store i64 %1, i64* %4, align 8
  store i64 %2, i64* %5, align 8
  %21 = bitcast i8* %__.context_ptr to %runtime.Context*
  %22 = load %src.Wrap_State*, %src.Wrap_State** %3, align 8
  %23 = getelementptr inbounds %src.Wrap_State, %src.Wrap_State* %22, i32 0, i32 8
  %24 = load i64, i64* %23, align 8
  %25 = load %src.Wrap_State*, %src.Wrap_State** %3, align 8
  %26 = getelementptr inbounds %src.Wrap_State, %src.Wrap_State* %25, i32 0, i32 3
  %27 = load { %..string*, i64 }, { %..string*, i64 }* %26, align 8
  %28 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %26, i32 0, i32 1
  %29 = load i64, i64* %28, align 8
  %30 = sub i64 %29, 1
  %31 = icmp sgt i64 %24, %30
  %32 = zext i1 %31 to i8
  %33 = trunc i8 %32 to i1
  br i1 %33, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  ret i8 0

if.done:                                          ; preds = %entry
  %34 = load %src.Wrap_State*, %src.Wrap_State** %3, align 8
  %35 = getelementptr inbounds %src.Wrap_State, %src.Wrap_State* %34, i32 0, i32 3
  %36 = load { %..string*, i64 }, { %..string*, i64 }* %35, align 8
  %37 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %35, i32 0, i32 0
  %38 = load %..string*, %..string** %37, align 8
  %39 = load %src.Wrap_State*, %src.Wrap_State** %3, align 8
  %40 = getelementptr inbounds %src.Wrap_State, %src.Wrap_State* %39, i32 0, i32 8
  %41 = load i64, i64* %40, align 8
  %42 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %35, i32 0, i32 1
  %43 = load i64, i64* %42, align 8
  %44 = bitcast { i64, i64 }* %7 to %..string*
  store %..string { i8* getelementptr inbounds ([54 x i8], [54 x i8]* @"csbs$2f3", i64 0, i64 0), i64 53 }, %..string* %44, align 8
  %45 = load { i64, i64 }, { i64, i64 }* %7, align 8
  call void @runtime.bounds_check_error({ i64, i64 } %45, i32 1121, i32 16, i64 %41, i64 %43)
  %46 = getelementptr %..string, %..string* %38, i64 %41
  %47 = load %..string, %..string* %46, align 8
  store %..string %47, %..string* %6, align 8
  %48 = load %src.Wrap_State*, %src.Wrap_State** %3, align 8
  %49 = getelementptr inbounds %src.Wrap_State, %src.Wrap_State* %48, i32 0, i32 8
  %50 = load i64, i64* %49, align 8
  %51 = add i64 %50, 1
  store i64 %51, i64* %49, align 8
  %52 = load %src.Wrap_State*, %src.Wrap_State** %3, align 8
  %53 = getelementptr inbounds %src.Wrap_State, %src.Wrap_State* %52, i32 0, i32 4
  store i8 0, i8* %53, align 1
  store float 0.000000e+00, float* %8, align 4
  store float -1.000000e+00, float* %9, align 4
  store float 0.000000e+00, float* %10, align 4
  %54 = bitcast %cutf8.Decode_State* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* %54, i8 0, i64 32, i1 false)
  %55 = load %src.Wrap_State*, %src.Wrap_State** %3, align 8
  %56 = getelementptr inbounds %src.Wrap_State, %src.Wrap_State* %55, i32 0, i32 0
  %57 = load %fontstash.Font*, %fontstash.Font** %56, align 8
  %58 = load %src.Wrap_State*, %src.Wrap_State** %3, align 8
  %59 = getelementptr inbounds %src.Wrap_State, %src.Wrap_State* %58, i32 0, i32 1
  %60 = load float, float* %59, align 4
  %61 = bitcast %runtime.Context* %21 to i8*
  %62 = call float @fontstash.scale_for_pixel_height(%fontstash.Font* %57, float %60, i8* %61)
  store float %62, float* %12, align 4
  store i32 0, i32* %13, align 4
  store i64 0, i64* %14, align 8
  br label %for.tuple.loop

for.tuple.loop:                                   ; preds = %if.done4, %if.done
  %63 = load %..string, %..string* %6, align 8
  %64 = bitcast %..string* %6 to { i64, i64 }*
  %65 = load { i64, i64 }, { i64, i64 }* %64, align 8
  %66 = bitcast { i32, i64, i8 }* %15 to i8*
  call void @llvm.memset.p0i8.i64(i8* %66, i8 0, i64 24, i1 false)
  %67 = bitcast %runtime.Context* %21 to i8*
  call void @cutf8.ds_iter({ i32, i64, i8 }* sret %15, %cutf8.Decode_State* %11, { i64, i64 } %65, i8* %67)
  %68 = load { i32, i64, i8 }, { i32, i64, i8 }* %15, align 8
  %69 = getelementptr inbounds { i32, i64, i8 }, { i32, i64, i8 }* %15, i32 0, i32 2
  %70 = load i8, i8* %69, align 1
  %71 = trunc i8 %70 to i1
  br i1 %71, label %for.tuple.body, label %for.tuple.done

for.tuple.body:                                   ; preds = %for.tuple.loop
  %72 = getelementptr inbounds { i32, i64, i8 }, { i32, i64, i8 }* %15, i32 0, i32 0
  %73 = load i32, i32* %72, align 4
  %74 = getelementptr inbounds { i32, i64, i8 }, { i32, i64, i8 }* %15, i32 0, i32 1
  %75 = load i64, i64* %74, align 8
  store i32 %73, i32* %16, align 4
  store i64 %75, i64* %17, align 8
  %76 = load %src.Wrap_State*, %src.Wrap_State** %3, align 8
  %77 = getelementptr inbounds %src.Wrap_State, %src.Wrap_State* %76, i32 0, i32 0
  %78 = load %fontstash.Font*, %fontstash.Font** %77, align 8
  %79 = load i32, i32* %16, align 4
  %80 = load float, float* %12, align 4
  %81 = bitcast %runtime.Context* %21 to i8*
  %82 = call float @fontstash.codepoint_xadvance(%fontstash.Font* %78, i32 %79, float %80, i8* %81)
  store float %82, float* %18, align 4
  %83 = load i64, i64* %4, align 8
  %84 = load i64, i64* %17, align 8
  %85 = load %src.Wrap_State*, %src.Wrap_State** %3, align 8
  %86 = getelementptr inbounds %src.Wrap_State, %src.Wrap_State* %85, i32 0, i32 9
  %87 = load i64, i64* %86, align 8
  %88 = add i64 %84, %87
  %89 = icmp sle i64 %83, %88
  %90 = zext i1 %89 to i8
  %91 = trunc i8 %90 to i1
  br i1 %91, label %cmp.and, label %if.done4

cmp.and:                                          ; preds = %for.tuple.body
  %92 = load i64, i64* %17, align 8
  %93 = load %src.Wrap_State*, %src.Wrap_State** %3, align 8
  %94 = getelementptr inbounds %src.Wrap_State, %src.Wrap_State* %93, i32 0, i32 9
  %95 = load i64, i64* %94, align 8
  %96 = add i64 %92, %95
  %97 = load i64, i64* %5, align 8
  %98 = icmp sle i64 %96, %97
  %99 = zext i1 %98 to i8
  %100 = trunc i8 %99 to i1
  br i1 %100, label %if.then1, label %if.done4

if.then1:                                         ; preds = %cmp.and
  %101 = load float, float* %9, align 4
  %102 = fcmp oeq float %101, -1.000000e+00
  %103 = zext i1 %102 to i8
  %104 = trunc i8 %103 to i1
  br i1 %104, label %if.then2, label %if.done3

if.then2:                                         ; preds = %if.then1
  %105 = load float, float* %8, align 4
  store float %105, float* %9, align 4
  br label %if.done3

if.done3:                                         ; preds = %if.then2, %if.then1
  %106 = load float, float* %8, align 4
  store float %106, float* %10, align 4
  br label %if.done4

if.done4:                                         ; preds = %if.done3, %cmp.and, %for.tuple.body
  %107 = load float, float* %18, align 4
  %108 = load float, float* %8, align 4
  %109 = fadd float %108, %107
  store float %109, float* %8, align 4
  br label %for.tuple.loop

for.tuple.done:                                   ; preds = %for.tuple.loop
  %110 = load i64, i64* %5, align 8
  %111 = load %src.Wrap_State*, %src.Wrap_State** %3, align 8
  %112 = getelementptr inbounds %src.Wrap_State, %src.Wrap_State* %111, i32 0, i32 9
  %113 = load i64, i64* %112, align 8
  %114 = getelementptr inbounds %cutf8.Decode_State, %cutf8.Decode_State* %11, i32 0, i32 4
  %115 = load i64, i64* %114, align 8
  %116 = add i64 %113, %115
  %117 = icmp eq i64 %110, %116
  %118 = zext i1 %117 to i8
  %119 = trunc i8 %118 to i1
  br i1 %119, label %if.then5, label %if.done6

if.then5:                                         ; preds = %for.tuple.done
  %120 = load float, float* %8, align 4
  store float %120, float* %10, align 4
  br label %if.done6

if.done6:                                         ; preds = %if.then5, %for.tuple.done
  %121 = load %src.Wrap_State*, %src.Wrap_State** %3, align 8
  %122 = getelementptr inbounds %src.Wrap_State, %src.Wrap_State* %121, i32 0, i32 9
  %123 = getelementptr inbounds %cutf8.Decode_State, %cutf8.Decode_State* %11, i32 0, i32 4
  %124 = load i64, i64* %123, align 8
  %125 = load i64, i64* %122, align 8
  %126 = add i64 %125, %124
  store i64 %126, i64* %122, align 8
  %127 = load float, float* %9, align 4
  %128 = fcmp one float %127, -1.000000e+00
  %129 = zext i1 %128 to i8
  %130 = trunc i8 %129 to i1
  br i1 %130, label %if.then7, label %if.done8

if.then7:                                         ; preds = %if.done6
  %131 = load %src.Wrap_State*, %src.Wrap_State** %3, align 8
  %132 = getelementptr inbounds %src.Wrap_State, %src.Wrap_State* %131, i32 0, i32 10
  %133 = load float, float* %132, align 4
  %134 = load %src.Wrap_State*, %src.Wrap_State** %3, align 8
  %135 = getelementptr inbounds %src.Wrap_State, %src.Wrap_State* %134, i32 0, i32 1
  %136 = load float, float* %135, align 4
  %137 = fmul float %133, %136
  store float %137, float* %19, align 4
  %138 = load %src.Wrap_State*, %src.Wrap_State** %3, align 8
  %139 = getelementptr inbounds %src.Wrap_State, %src.Wrap_State* %138, i32 0, i32 6
  %140 = bitcast %src.Rect* %20 to i8*
  call void @llvm.memset.p0i8.i64(i8* %140, i8 0, i64 16, i1 false)
  store %src.Rect zeroinitializer, %src.Rect* %20, align 4
  %141 = load float, float* %9, align 4
  %142 = getelementptr inbounds %src.Rect, %src.Rect* %20, i32 0, i32 0
  store float %141, float* %142, align 4
  %143 = load float, float* %10, align 4
  %144 = getelementptr inbounds %src.Rect, %src.Rect* %20, i32 0, i32 1
  store float %143, float* %144, align 4
  %145 = load float, float* %19, align 4
  %146 = getelementptr inbounds %src.Rect, %src.Rect* %20, i32 0, i32 2
  store float %145, float* %146, align 4
  %147 = load float, float* %19, align 4
  %148 = load %src.Wrap_State*, %src.Wrap_State** %3, align 8
  %149 = getelementptr inbounds %src.Wrap_State, %src.Wrap_State* %148, i32 0, i32 1
  %150 = load float, float* %149, align 4
  %151 = fadd float %147, %150
  %152 = getelementptr inbounds %src.Rect, %src.Rect* %20, i32 0, i32 3
  store float %151, float* %152, align 4
  %153 = load %src.Rect, %src.Rect* %20, align 4
  store %src.Rect %153, %src.Rect* %139, align 4
  %154 = load %src.Wrap_State*, %src.Wrap_State** %3, align 8
  %155 = getelementptr inbounds %src.Wrap_State, %src.Wrap_State* %154, i32 0, i32 4
  store i8 1, i8* %155, align 1
  br label %if.done8

if.done8:                                         ; preds = %if.then7, %if.done6
  %156 = load %src.Wrap_State*, %src.Wrap_State** %3, align 8
  %157 = getelementptr inbounds %src.Wrap_State, %src.Wrap_State* %156, i32 0, i32 10
  %158 = load float, float* %157, align 4
  %159 = fadd float %158, 1.000000e+00
  store float %159, float* %157, align 4
  ret i8 1
}

define internal void @src.box_render_selection(%src.Render_Target* %0, %src.Box* %1, %fontstash.Font* %2, float %3, float %4, float %5, i64 %6, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %7 = alloca %src.Render_Target*, align 8
  %8 = alloca %src.Box*, align 8
  %9 = alloca %fontstash.Font*, align 8
  %10 = alloca float, align 4
  %11 = alloca float, align 4
  %12 = alloca float, align 4
  %13 = alloca [4 x i8], align 8
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  %16 = alloca %src.Wrap_State, align 8
  %17 = alloca { %..string*, i64 }, align 8
  %18 = alloca %src.Wrap_State, align 8
  %19 = alloca %src.Rect, align 8
  %20 = alloca %src.Rect, align 8
  %21 = alloca %src.Rect, align 8
  %22 = alloca %src.Rect, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Render_Target* %0, %src.Render_Target** %7, align 8
  store %src.Box* %1, %src.Box** %8, align 8
  store %fontstash.Font* %2, %fontstash.Font** %9, align 8
  store float %3, float* %10, align 4
  store float %4, float* %11, align 4
  store float %5, float* %12, align 4
  %23 = bitcast [4 x i8]* %13 to i64*
  store i64 %6, i64* %23, align 8
  %24 = load [4 x i8], [4 x i8]* %13, align 1
  %25 = bitcast i8* %__.context_ptr to %runtime.Context*
  %26 = load %src.Box*, %src.Box** %8, align 8
  %27 = bitcast %runtime.Context* %25 to i8*
  %28 = call { i64, i64 } @src.box_low_and_high(%src.Box* %26, i8* %27)
  %29 = extractvalue { i64, i64 } %28, 0
  %30 = extractvalue { i64, i64 } %28, 1
  store i64 %29, i64* %14, align 8
  store i64 %30, i64* %15, align 8
  %31 = load i64, i64* %14, align 8
  %32 = load i64, i64* %15, align 8
  %33 = icmp eq i64 %31, %32
  %34 = zext i1 %33 to i8
  %35 = trunc i8 %34 to i1
  br i1 %35, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  ret void

if.done:                                          ; preds = %entry
  %36 = bitcast %src.Wrap_State* %16 to i8*
  call void @llvm.memset.p0i8.i64(i8* %36, i8 0, i64 80, i1 false)
  %37 = load %src.Box*, %src.Box** %8, align 8
  %38 = getelementptr inbounds %src.Box, %src.Box* %37, i32 0, i32 1
  %39 = load { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %38, align 8
  %40 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %38, i32 0, i32 1
  %41 = load i64, i64* %40, align 8
  %42 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %38, i32 0, i32 0
  %43 = load %..string*, %..string** %42, align 8
  %44 = getelementptr %..string, %..string* %43, i64 0
  %45 = sub i64 %41, 0
  %46 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %17, i32 0, i32 0
  store %..string* %44, %..string** %46, align 8
  %47 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %17, i32 0, i32 1
  store i64 %45, i64* %47, align 8
  %48 = load { %..string*, i64 }, { %..string*, i64 }* %17, align 8
  %49 = load %fontstash.Font*, %fontstash.Font** %9, align 8
  %50 = load float, float* %10, align 4
  %51 = bitcast { %..string*, i64 }* %17 to { i64, i64 }*
  %52 = load { i64, i64 }, { i64, i64 }* %51, align 8
  %53 = bitcast %src.Wrap_State* %18 to i8*
  call void @llvm.memset.p0i8.i64(i8* %53, i8 0, i64 80, i1 false)
  %54 = bitcast %runtime.Context* %25 to i8*
  call void @src.wrap_state_init(%src.Wrap_State* sret %18, { i64, i64 } %52, %fontstash.Font* %49, float %50, i8* %54)
  %55 = load %src.Wrap_State, %src.Wrap_State* %18, align 8
  %56 = bitcast %src.Wrap_State* %16 to i8*
  %57 = bitcast %src.Wrap_State* %18 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %56, i8* align 8 %57, i64 80, i1 false)
  br label %for.loop

for.loop:                                         ; preds = %if.done2, %if.done
  %58 = load i64, i64* %14, align 8
  %59 = load i64, i64* %15, align 8
  %60 = bitcast %runtime.Context* %25 to i8*
  %61 = call i8 @src.wrap_state_iter(%src.Wrap_State* %16, i64 %58, i64 %59, i8* %60)
  %62 = trunc i8 %61 to i1
  br i1 %62, label %for.body, label %for.done

for.body:                                         ; preds = %for.loop
  %63 = getelementptr inbounds %src.Wrap_State, %src.Wrap_State* %16, i32 0, i32 4
  %64 = load i8, i8* %63, align 1
  %65 = trunc i8 %64 to i1
  br i1 %65, label %if.then1, label %if.done2

if.then1:                                         ; preds = %for.body
  %66 = getelementptr inbounds %src.Wrap_State, %src.Wrap_State* %16, i32 0, i32 6
  %67 = load %src.Rect, %src.Rect* %66, align 4
  store %src.Rect %67, %src.Rect* %19, align 4
  %68 = load %src.Rect, %src.Rect* %19, align 4
  %69 = load float, float* %11, align 4
  %70 = load float, float* %12, align 4
  %71 = bitcast %runtime.Context* %25 to i8*
  %72 = call { <2 x float>, <2 x float> } @src.rect_xxyy(float %69, float %70, i8* %71)
  %73 = bitcast %src.Rect* %21 to { <2 x float>, <2 x float> }*
  store { <2 x float>, <2 x float> } %72, { <2 x float>, <2 x float> }* %73, align 8
  %74 = load %src.Rect, %src.Rect* %21, align 4
  %75 = bitcast %src.Rect* %19 to { <2 x float>, <2 x float> }*
  %76 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %75, align 8
  %77 = bitcast %src.Rect* %21 to { <2 x float>, <2 x float> }*
  %78 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %77, align 8
  %79 = bitcast %runtime.Context* %25 to i8*
  %80 = call { <2 x float>, <2 x float> } @src.rect_add({ <2 x float>, <2 x float> } %76, { <2 x float>, <2 x float> } %78, i8* %79)
  %81 = bitcast %src.Rect* %22 to { <2 x float>, <2 x float> }*
  store { <2 x float>, <2 x float> } %80, { <2 x float>, <2 x float> }* %81, align 8
  %82 = load %src.Rect, %src.Rect* %22, align 4
  store %src.Rect %82, %src.Rect* %20, align 4
  %83 = load %src.Render_Target*, %src.Render_Target** %7, align 8
  %84 = load %src.Rect, %src.Rect* %20, align 4
  %85 = load [4 x i8], [4 x i8]* %13, align 1
  %86 = bitcast %src.Rect* %20 to { <2 x float>, <2 x float> }*
  %87 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %86, align 8
  %88 = bitcast [4 x i8]* %13 to i64*
  %89 = load i64, i64* %88, align 8
  %90 = bitcast %runtime.Context* %25 to i8*
  call void @src.render_rect(%src.Render_Target* %83, { <2 x float>, <2 x float> } %87, i64 %89, float 0.000000e+00, i8* %90)
  br label %if.done2

if.done2:                                         ; preds = %if.then1, %for.body
  br label %for.loop

for.done:                                         ; preds = %for.loop
  ret void
}

define internal i8 @src.element_box_mouse_selection(%src.Element* %0, %src.Box* %1, i64 %2, i1 zeroext %3, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %4 = alloca %src.Element*, align 8
  %5 = alloca %src.Box*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i8, align 1
  %8 = alloca i8, align 1
  %9 = alloca %..string, align 8
  %10 = alloca %..string, align 8
  %11 = alloca %fontstash.Font*, align 8
  %12 = alloca float, align 4
  %13 = alloca { %fontstash.Font*, float }, align 8
  %14 = alloca float, align 4
  %15 = alloca float, align 4
  %16 = alloca %src.element_box_mouse_selection.Mouse_Character_Selection-3, align 8
  %17 = alloca %cutf8.Decode_State*, align 8
  %18 = alloca i64, align 8
  %19 = alloca %..string, align 8
  %20 = alloca i64, align 8
  %21 = alloca %..string, align 8
  %22 = alloca i32, align 4
  %23 = alloca i64, align 8
  %24 = alloca { i32, i64, i8 }, align 8
  %25 = alloca i32, align 4
  %26 = alloca i64, align 8
  %27 = alloca %..string, align 8
  %28 = alloca i64, align 8
  %29 = alloca %..string, align 8
  %30 = alloca i64, align 8
  %31 = alloca i32, align 4
  %32 = alloca i64, align 8
  %33 = alloca float, align 4
  %34 = alloca float, align 4
  %35 = alloca i32, align 4
  %36 = alloca i64, align 8
  %37 = alloca { i32, i64, i8 }, align 8
  %38 = alloca i32, align 4
  %39 = alloca i64, align 8
  %40 = alloca float, align 4
  %41 = alloca %..string, align 8
  %42 = alloca i64, align 8
  %43 = alloca i64, align 8
  %44 = alloca %..string, align 8
  %45 = alloca i64, align 8
  %46 = alloca i64, align 8
  %47 = alloca i64, align 8
  %48 = alloca i64, align 8
  %49 = alloca i64, align 8
  %50 = alloca i64, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Element* %0, %src.Element** %4, align 8
  store %src.Box* %1, %src.Box** %5, align 8
  store i64 %2, i64* %6, align 8
  %51 = zext i1 %3 to i8
  store i8 %51, i8* %7, align 1
  store i8 0, i8* %8, align 1
  %52 = bitcast i8* %__.context_ptr to %runtime.Context*
  %53 = load %src.Box*, %src.Box** %5, align 8
  %54 = getelementptr inbounds %src.Box, %src.Box* %53, i32 0, i32 0
  %55 = load %strings.Builder, %strings.Builder* %54, align 8
  %56 = bitcast %runtime.Context* %52 to i8*
  %57 = call { i64, i64 } @strings.to_string(%strings.Builder* %54, i8* %56)
  %58 = bitcast %..string* %10 to { i64, i64 }*
  store { i64, i64 } %57, { i64, i64 }* %58, align 8
  %59 = load %..string, %..string* %10, align 8
  store %..string %59, %..string* %9, align 8
  %60 = load %src.Element*, %src.Element** %4, align 8
  %61 = bitcast %runtime.Context* %52 to i8*
  %62 = call { i64, float } @src.element_retrieve_font_options(%src.Element* %60, i8* %61)
  %63 = bitcast { %fontstash.Font*, float }* %13 to { i64, float }*
  store { i64, float } %62, { i64, float }* %63, align 8
  %64 = load { %fontstash.Font*, float }, { %fontstash.Font*, float }* %13, align 8
  %65 = getelementptr inbounds { %fontstash.Font*, float }, { %fontstash.Font*, float }* %13, i32 0, i32 0
  %66 = load %fontstash.Font*, %fontstash.Font** %65, align 8
  %67 = getelementptr inbounds { %fontstash.Font*, float }, { %fontstash.Font*, float }* %13, i32 0, i32 1
  %68 = load float, float* %67, align 4
  store %fontstash.Font* %66, %fontstash.Font** %11, align 8
  store float %68, float* %12, align 4
  %69 = load float, float* %12, align 4
  %70 = load float, float* @src.SCALE, align 4
  %71 = fmul float %69, %70
  store float %71, float* %14, align 4
  %72 = load %fontstash.Font*, %fontstash.Font** %11, align 8
  %73 = load float, float* %14, align 4
  %74 = bitcast %runtime.Context* %52 to i8*
  %75 = call float @fontstash.scale_for_pixel_height(%fontstash.Font* %72, float %73, i8* %74)
  store float %75, float* %15, align 4
  %76 = bitcast %src.element_box_mouse_selection.Mouse_Character_Selection-3* %16 to i8*
  call void @llvm.memset.p0i8.i64(i8* %76, i8 0, i64 40, i1 false)
  %77 = getelementptr inbounds %src.element_box_mouse_selection.Mouse_Character_Selection-3, %src.element_box_mouse_selection.Mouse_Character_Selection-3* %16, i32 0, i32 0
  %78 = load %src.Element*, %src.Element** %4, align 8
  %79 = getelementptr inbounds %src.Element, %src.Element* %78, i32 0, i32 4
  %80 = load %src.Window*, %src.Window** %79, align 8
  %81 = getelementptr inbounds %src.Window, %src.Window* %80, i32 0, i32 12
  %82 = load float, float* %81, align 4
  %83 = load %src.Element*, %src.Element** %4, align 8
  %84 = getelementptr inbounds %src.Element, %src.Element* %83, i32 0, i32 5
  %85 = getelementptr inbounds %src.Rect, %src.Rect* %84, i32 0, i32 0
  %86 = load float, float* %85, align 4
  %87 = fsub float %82, %86
  store float %87, float* %77, align 4
  %88 = getelementptr inbounds %src.element_box_mouse_selection.Mouse_Character_Selection-3, %src.element_box_mouse_selection.Mouse_Character_Selection-3* %16, i32 0, i32 1
  %89 = load %src.Element*, %src.Element** %4, align 8
  %90 = getelementptr inbounds %src.Element, %src.Element* %89, i32 0, i32 4
  %91 = load %src.Window*, %src.Window** %90, align 8
  %92 = getelementptr inbounds %src.Window, %src.Window* %91, i32 0, i32 13
  %93 = load float, float* %92, align 4
  %94 = load %src.Element*, %src.Element** %4, align 8
  %95 = getelementptr inbounds %src.Element, %src.Element* %94, i32 0, i32 5
  %96 = getelementptr inbounds %src.Rect, %src.Rect* %95, i32 0, i32 2
  %97 = load float, float* %96, align 4
  %98 = fsub float %93, %97
  store float %98, float* %88, align 4
  %99 = load %src.Box*, %src.Box** %5, align 8
  %100 = getelementptr inbounds %src.Box, %src.Box* %99, i32 0, i32 4
  store %cutf8.Decode_State* %100, %cutf8.Decode_State** %17, align 8
  %101 = load i64, i64* %6, align 8
  %102 = srem i64 %101, 3
  store i64 %102, i64* %18, align 8
  %103 = load i64, i64* %18, align 8
  %104 = icmp eq i64 %103, 0
  %105 = zext i1 %104 to i8
  %106 = trunc i8 %105 to i1
  br i1 %106, label %cmp.and, label %if.done

cmp.and:                                          ; preds = %entry
  %107 = load i8, i8* %7, align 1
  %108 = trunc i8 %107 to i1
  br i1 %108, label %if.done, label %if.then

if.then:                                          ; preds = %cmp.and
  %109 = load %src.Box*, %src.Box** %5, align 8
  %110 = getelementptr inbounds %src.Box, %src.Box* %109, i32 0, i32 5
  store i8 0, i8* %110, align 1
  %111 = load %src.Box*, %src.Box** %5, align 8
  %112 = getelementptr inbounds %src.Box, %src.Box* %111, i32 0, i32 9
  store i8 0, i8* %112, align 1
  br label %if.done

if.done:                                          ; preds = %if.then, %cmp.and, %entry
  %113 = load i64, i64* %18, align 8
  %114 = icmp eq i64 %113, 0
  %115 = zext i1 %114 to i8
  %116 = trunc i8 %115 to i1
  br i1 %116, label %if.then1, label %if.else

if.then1:                                         ; preds = %if.done
  %117 = bitcast %..string* %19 to i8*
  call void @llvm.memset.p0i8.i64(i8* %117, i8 0, i64 16, i1 false)
  %118 = load %src.Box*, %src.Box** %5, align 8
  %119 = getelementptr inbounds %src.Box, %src.Box* %118, i32 0, i32 1
  %120 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %119, i32 0, i32 1
  store i64 -1, i64* %20, align 8
  br label %for.index.loop

for.index.loop:                                   ; preds = %for.tuple.done, %if.then1
  %121 = load i64, i64* %20, align 8
  %122 = add i64 %121, 1
  store i64 %122, i64* %20, align 8
  %123 = load i64, i64* %120, align 8
  %124 = icmp slt i64 %122, %123
  br i1 %124, label %for.index.body, label %for.index.done

for.index.body:                                   ; preds = %for.index.loop
  %125 = load i64, i64* %20, align 8
  %126 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %119, i32 0, i32 0
  %127 = load %..string*, %..string** %126, align 8
  %128 = getelementptr %..string, %..string* %127, i64 %125
  %129 = load %..string, %..string* %128, align 8
  store %..string %129, %..string* %21, align 8
  %130 = getelementptr inbounds %src.element_box_mouse_selection.Mouse_Character_Selection-3, %src.element_box_mouse_selection.Mouse_Character_Selection-3* %16, i32 0, i32 5
  %131 = load float, float* %14, align 4
  %132 = load float, float* %130, align 4
  %133 = fadd float %132, %131
  store float %133, float* %130, align 4
  %134 = getelementptr inbounds %src.element_box_mouse_selection.Mouse_Character_Selection-3, %src.element_box_mouse_selection.Mouse_Character_Selection-3* %16, i32 0, i32 3
  store float 0.000000e+00, float* %134, align 4
  %135 = getelementptr inbounds %src.element_box_mouse_selection.Mouse_Character_Selection-3, %src.element_box_mouse_selection.Mouse_Character_Selection-3* %16, i32 0, i32 2
  store float 0.000000e+00, float* %135, align 4
  %136 = getelementptr inbounds %src.element_box_mouse_selection.Mouse_Character_Selection-3, %src.element_box_mouse_selection.Mouse_Character_Selection-3* %16, i32 0, i32 0
  %137 = load float, float* %136, align 4
  %138 = fcmp olt float %137, 0.000000e+00
  %139 = zext i1 %138 to i8
  %140 = trunc i8 %139 to i1
  br i1 %140, label %cmp.and2, label %if.done4

cmp.and2:                                         ; preds = %for.index.body
  %141 = getelementptr inbounds %src.element_box_mouse_selection.Mouse_Character_Selection-3, %src.element_box_mouse_selection.Mouse_Character_Selection-3* %16, i32 0, i32 1
  %142 = load float, float* %141, align 4
  %143 = getelementptr inbounds %src.element_box_mouse_selection.Mouse_Character_Selection-3, %src.element_box_mouse_selection.Mouse_Character_Selection-3* %16, i32 0, i32 4
  %144 = load float, float* %143, align 4
  %145 = fcmp olt float %142, %144
  %146 = zext i1 %145 to i8
  %147 = trunc i8 %146 to i1
  br i1 %147, label %if.then3, label %if.done4

if.then3:                                         ; preds = %cmp.and2
  %148 = load %src.Box*, %src.Box** %5, align 8
  %149 = getelementptr inbounds %src.Box, %src.Box* %148, i32 0, i32 2
  %150 = getelementptr inbounds %src.element_box_mouse_selection.Mouse_Character_Selection-3, %src.element_box_mouse_selection.Mouse_Character_Selection-3* %16, i32 0, i32 6
  %151 = load i64, i64* %150, align 8
  store i64 %151, i64* %149, align 8
  br label %for.index.done

unreachable:                                      ; No predecessors!
  br label %if.done4

if.done4:                                         ; preds = %unreachable, %cmp.and2, %for.index.body
  %152 = load %cutf8.Decode_State*, %cutf8.Decode_State** %17, align 8
  store %cutf8.Decode_State zeroinitializer, %cutf8.Decode_State* %152, align 8
  store i32 0, i32* %22, align 4
  store i64 0, i64* %23, align 8
  br label %for.tuple.loop

for.tuple.loop:                                   ; preds = %if.done7, %if.done4
  %153 = load %cutf8.Decode_State*, %cutf8.Decode_State** %17, align 8
  %154 = load %..string, %..string* %21, align 8
  %155 = bitcast %..string* %21 to { i64, i64 }*
  %156 = load { i64, i64 }, { i64, i64 }* %155, align 8
  %157 = bitcast { i32, i64, i8 }* %24 to i8*
  call void @llvm.memset.p0i8.i64(i8* %157, i8 0, i64 24, i1 false)
  %158 = bitcast %runtime.Context* %52 to i8*
  call void @cutf8.ds_iter({ i32, i64, i8 }* sret %24, %cutf8.Decode_State* %153, { i64, i64 } %156, i8* %158)
  %159 = load { i32, i64, i8 }, { i32, i64, i8 }* %24, align 8
  %160 = getelementptr inbounds { i32, i64, i8 }, { i32, i64, i8 }* %24, i32 0, i32 2
  %161 = load i8, i8* %160, align 1
  %162 = trunc i8 %161 to i1
  br i1 %162, label %for.tuple.body, label %for.tuple.done

for.tuple.body:                                   ; preds = %for.tuple.loop
  %163 = getelementptr inbounds { i32, i64, i8 }, { i32, i64, i8 }* %24, i32 0, i32 0
  %164 = load i32, i32* %163, align 4
  %165 = getelementptr inbounds { i32, i64, i8 }, { i32, i64, i8 }* %24, i32 0, i32 1
  %166 = load i64, i64* %165, align 8
  store i32 %164, i32* %25, align 4
  store i64 %166, i64* %26, align 8
  %167 = getelementptr inbounds %src.element_box_mouse_selection.Mouse_Character_Selection-3, %src.element_box_mouse_selection.Mouse_Character_Selection-3* %16, i32 0, i32 7
  %168 = load %fontstash.Font*, %fontstash.Font** %11, align 8
  %169 = load i32, i32* %25, align 4
  %170 = load float, float* %15, align 4
  %171 = bitcast %runtime.Context* %52 to i8*
  %172 = call float @fontstash.codepoint_xadvance(%fontstash.Font* %168, i32 %169, float %170, i8* %171)
  store float %172, float* %167, align 4
  %173 = getelementptr inbounds %src.element_box_mouse_selection.Mouse_Character_Selection-3, %src.element_box_mouse_selection.Mouse_Character_Selection-3* %16, i32 0, i32 3
  %174 = getelementptr inbounds %src.element_box_mouse_selection.Mouse_Character_Selection-3, %src.element_box_mouse_selection.Mouse_Character_Selection-3* %16, i32 0, i32 7
  %175 = load float, float* %174, align 4
  %176 = load float, float* %173, align 4
  %177 = fadd float %176, %175
  store float %177, float* %173, align 4
  %178 = load %src.Box*, %src.Box** %5, align 8
  %179 = load i64, i64* %26, align 8
  %180 = getelementptr inbounds %src.element_box_mouse_selection.Mouse_Character_Selection-3, %src.element_box_mouse_selection.Mouse_Character_Selection-3* %16, i32 0, i32 6
  %181 = load i64, i64* %180, align 8
  %182 = add i64 %179, %181
  %183 = load i8, i8* %7, align 1
  %184 = icmp ne i8 %183, 0
  %185 = bitcast %runtime.Context* %52 to i8*
  %186 = call i8 @src.element_box_mouse_selection.mcs_check_single-0(%src.element_box_mouse_selection.Mouse_Character_Selection-3* %16, %src.Box* %178, i64 %182, i1 %184, i8* %185)
  %187 = trunc i8 %186 to i1
  br i1 %187, label %if.then5, label %if.done7

if.then5:                                         ; preds = %for.tuple.body
  br label %for.index.done

unreachable6:                                     ; No predecessors!
  br label %if.done7

if.done7:                                         ; preds = %unreachable6, %for.tuple.body
  br label %for.tuple.loop

for.tuple.done:                                   ; preds = %for.tuple.loop
  %188 = getelementptr inbounds %src.element_box_mouse_selection.Mouse_Character_Selection-3, %src.element_box_mouse_selection.Mouse_Character_Selection-3* %16, i32 0, i32 3
  %189 = load float, float* %14, align 4
  %190 = load float, float* %188, align 4
  %191 = fadd float %190, %189
  store float %191, float* %188, align 4
  %192 = load %src.Box*, %src.Box** %5, align 8
  %193 = load %cutf8.Decode_State*, %cutf8.Decode_State** %17, align 8
  %194 = getelementptr inbounds %cutf8.Decode_State, %cutf8.Decode_State* %193, i32 0, i32 4
  %195 = load i64, i64* %194, align 8
  %196 = getelementptr inbounds %src.element_box_mouse_selection.Mouse_Character_Selection-3, %src.element_box_mouse_selection.Mouse_Character_Selection-3* %16, i32 0, i32 6
  %197 = load i64, i64* %196, align 8
  %198 = add i64 %195, %197
  %199 = load i8, i8* %7, align 1
  %200 = icmp ne i8 %199, 0
  %201 = bitcast %runtime.Context* %52 to i8*
  %202 = call i8 @src.element_box_mouse_selection.mcs_check_single-0(%src.element_box_mouse_selection.Mouse_Character_Selection-3* %16, %src.Box* %192, i64 %198, i1 %200, i8* %201)
  %203 = getelementptr inbounds %src.element_box_mouse_selection.Mouse_Character_Selection-3, %src.element_box_mouse_selection.Mouse_Character_Selection-3* %16, i32 0, i32 6
  %204 = load %cutf8.Decode_State*, %cutf8.Decode_State** %17, align 8
  %205 = getelementptr inbounds %cutf8.Decode_State, %cutf8.Decode_State* %204, i32 0, i32 4
  %206 = load i64, i64* %205, align 8
  %207 = load i64, i64* %203, align 8
  %208 = add i64 %207, %206
  store i64 %208, i64* %203, align 8
  %209 = getelementptr inbounds %src.element_box_mouse_selection.Mouse_Character_Selection-3, %src.element_box_mouse_selection.Mouse_Character_Selection-3* %16, i32 0, i32 4
  %210 = getelementptr inbounds %src.element_box_mouse_selection.Mouse_Character_Selection-3, %src.element_box_mouse_selection.Mouse_Character_Selection-3* %16, i32 0, i32 5
  %211 = load float, float* %210, align 4
  store float %211, float* %209, align 4
  br label %for.index.loop

for.index.done:                                   ; preds = %if.then5, %if.then3, %for.index.loop
  %212 = load %src.Box*, %src.Box** %5, align 8
  %213 = bitcast %runtime.Context* %52 to i8*
  call void @src.element_box_mouse_selection.mcs_check_line_last-2(%src.element_box_mouse_selection.Mouse_Character_Selection-3* %16, %src.Box* %212, i8* %213)
  br label %if.done51

if.else:                                          ; preds = %if.done
  %214 = load i64, i64* %18, align 8
  %215 = icmp eq i64 %214, 1
  %216 = zext i1 %215 to i8
  %217 = trunc i8 %216 to i1
  br i1 %217, label %if.then8, label %if.else38

if.then8:                                         ; preds = %if.else
  %218 = bitcast %..string* %27 to i8*
  call void @llvm.memset.p0i8.i64(i8* %218, i8 0, i64 16, i1 false)
  %219 = load %src.Box*, %src.Box** %5, align 8
  %220 = getelementptr inbounds %src.Box, %src.Box* %219, i32 0, i32 1
  %221 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %220, i32 0, i32 1
  store i64 -1, i64* %28, align 8
  br label %for.index.loop9

for.index.loop9:                                  ; preds = %if.done36, %if.then8
  %222 = load i64, i64* %28, align 8
  %223 = add i64 %222, 1
  store i64 %223, i64* %28, align 8
  %224 = load i64, i64* %221, align 8
  %225 = icmp slt i64 %223, %224
  br i1 %225, label %for.index.body10, label %for.index.done37

for.index.body10:                                 ; preds = %for.index.loop9
  %226 = load i64, i64* %28, align 8
  %227 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %220, i32 0, i32 0
  %228 = load %..string*, %..string** %227, align 8
  %229 = getelementptr %..string, %..string* %228, i64 %226
  %230 = load %..string, %..string* %229, align 8
  store %..string %230, %..string* %29, align 8
  %231 = getelementptr inbounds %src.element_box_mouse_selection.Mouse_Character_Selection-3, %src.element_box_mouse_selection.Mouse_Character_Selection-3* %16, i32 0, i32 2
  store float 0.000000e+00, float* %231, align 4
  %232 = getelementptr inbounds %src.element_box_mouse_selection.Mouse_Character_Selection-3, %src.element_box_mouse_selection.Mouse_Character_Selection-3* %16, i32 0, i32 3
  store float 0.000000e+00, float* %232, align 4
  %233 = getelementptr inbounds %src.element_box_mouse_selection.Mouse_Character_Selection-3, %src.element_box_mouse_selection.Mouse_Character_Selection-3* %16, i32 0, i32 5
  %234 = load float, float* %14, align 4
  %235 = load float, float* %233, align 4
  %236 = fadd float %235, %234
  store float %236, float* %233, align 4
  store i64 -1, i64* %30, align 8
  store i32 0, i32* %31, align 4
  store i64 -1, i64* %32, align 8
  store float 0.000000e+00, float* %33, align 4
  store float -1.000000e+00, float* %34, align 4
  %237 = getelementptr inbounds %src.element_box_mouse_selection.Mouse_Character_Selection-3, %src.element_box_mouse_selection.Mouse_Character_Selection-3* %16, i32 0, i32 0
  %238 = load float, float* %237, align 4
  %239 = fcmp olt float %238, 0.000000e+00
  %240 = zext i1 %239 to i8
  %241 = trunc i8 %240 to i1
  br i1 %241, label %cmp.and11, label %if.done15

cmp.and11:                                        ; preds = %for.index.body10
  %242 = getelementptr inbounds %src.element_box_mouse_selection.Mouse_Character_Selection-3, %src.element_box_mouse_selection.Mouse_Character_Selection-3* %16, i32 0, i32 1
  %243 = load float, float* %242, align 4
  %244 = getelementptr inbounds %src.element_box_mouse_selection.Mouse_Character_Selection-3, %src.element_box_mouse_selection.Mouse_Character_Selection-3* %16, i32 0, i32 4
  %245 = load float, float* %244, align 4
  %246 = fcmp olt float %243, %245
  %247 = zext i1 %246 to i8
  %248 = trunc i8 %247 to i1
  br i1 %248, label %cmp.and12, label %if.done15

cmp.and12:                                        ; preds = %cmp.and11
  %249 = load %src.Box*, %src.Box** %5, align 8
  %250 = getelementptr inbounds %src.Box, %src.Box* %249, i32 0, i32 5
  %251 = load i8, i8* %250, align 1
  %252 = trunc i8 %251 to i1
  br i1 %252, label %if.then13, label %if.done15

if.then13:                                        ; preds = %cmp.and12
  %253 = load %src.Box*, %src.Box** %5, align 8
  %254 = getelementptr inbounds %src.Box, %src.Box* %253, i32 0, i32 2
  %255 = getelementptr inbounds %src.element_box_mouse_selection.Mouse_Character_Selection-3, %src.element_box_mouse_selection.Mouse_Character_Selection-3* %16, i32 0, i32 6
  %256 = load i64, i64* %255, align 8
  store i64 %256, i64* %254, align 8
  br label %for.index.done37

unreachable14:                                    ; No predecessors!
  br label %if.done15

if.done15:                                        ; preds = %unreachable14, %cmp.and12, %cmp.and11, %for.index.body10
  %257 = load %cutf8.Decode_State*, %cutf8.Decode_State** %17, align 8
  store %cutf8.Decode_State zeroinitializer, %cutf8.Decode_State* %257, align 8
  store i32 0, i32* %35, align 4
  store i64 0, i64* %36, align 8
  br label %for.tuple.loop16

for.tuple.loop16:                                 ; preds = %if.done29, %if.done15
  %258 = load %cutf8.Decode_State*, %cutf8.Decode_State** %17, align 8
  %259 = load %..string, %..string* %29, align 8
  %260 = bitcast %..string* %29 to { i64, i64 }*
  %261 = load { i64, i64 }, { i64, i64 }* %260, align 8
  %262 = bitcast { i32, i64, i8 }* %37 to i8*
  call void @llvm.memset.p0i8.i64(i8* %262, i8 0, i64 24, i1 false)
  %263 = bitcast %runtime.Context* %52 to i8*
  call void @cutf8.ds_iter({ i32, i64, i8 }* sret %37, %cutf8.Decode_State* %258, { i64, i64 } %261, i8* %263)
  %264 = load { i32, i64, i8 }, { i32, i64, i8 }* %37, align 8
  %265 = getelementptr inbounds { i32, i64, i8 }, { i32, i64, i8 }* %37, i32 0, i32 2
  %266 = load i8, i8* %265, align 1
  %267 = trunc i8 %266 to i1
  br i1 %267, label %for.tuple.body17, label %for.tuple.done30

for.tuple.body17:                                 ; preds = %for.tuple.loop16
  %268 = getelementptr inbounds { i32, i64, i8 }, { i32, i64, i8 }* %37, i32 0, i32 0
  %269 = load i32, i32* %268, align 4
  %270 = getelementptr inbounds { i32, i64, i8 }, { i32, i64, i8 }* %37, i32 0, i32 1
  %271 = load i64, i64* %270, align 8
  store i32 %269, i32* %38, align 4
  store i64 %271, i64* %39, align 8
  %272 = load %fontstash.Font*, %fontstash.Font** %11, align 8
  %273 = load i32, i32* %38, align 4
  %274 = load float, float* %15, align 4
  %275 = bitcast %runtime.Context* %52 to i8*
  %276 = call float @fontstash.codepoint_xadvance(%fontstash.Font* %272, i32 %273, float %274, i8* %275)
  store float %276, float* %40, align 4
  %277 = load i64, i64* %30, align 8
  %278 = icmp ne i64 %277, -1
  %279 = zext i1 %278 to i8
  %280 = trunc i8 %279 to i1
  br i1 %280, label %cmp.and18, label %if.done20

cmp.and18:                                        ; preds = %for.tuple.body17
  %281 = load i32, i32* %38, align 4
  %282 = icmp eq i32 %281, 32
  %283 = zext i1 %282 to i8
  %284 = trunc i8 %283 to i1
  br i1 %284, label %if.then19, label %if.done20

if.then19:                                        ; preds = %cmp.and18
  %285 = getelementptr inbounds %src.element_box_mouse_selection.Mouse_Character_Selection-3, %src.element_box_mouse_selection.Mouse_Character_Selection-3* %16, i32 0, i32 2
  %286 = load float, float* %33, align 4
  store float %286, float* %285, align 4
  %287 = load %src.Box*, %src.Box** %5, align 8
  %288 = getelementptr inbounds %src.element_box_mouse_selection.Mouse_Character_Selection-3, %src.element_box_mouse_selection.Mouse_Character_Selection-3* %16, i32 0, i32 6
  %289 = load i64, i64* %288, align 8
  %290 = load i64, i64* %30, align 8
  %291 = add i64 %289, %290
  %292 = getelementptr inbounds %src.element_box_mouse_selection.Mouse_Character_Selection-3, %src.element_box_mouse_selection.Mouse_Character_Selection-3* %16, i32 0, i32 6
  %293 = load i64, i64* %292, align 8
  %294 = load i64, i64* %39, align 8
  %295 = add i64 %293, %294
  %296 = bitcast %runtime.Context* %52 to i8*
  %297 = call i8 @src.element_box_mouse_selection.mcs_check_word-1(%src.element_box_mouse_selection.Mouse_Character_Selection-3* %16, %src.Box* %287, i64 %291, i64 %295, i8* %296)
  store i64 -1, i64* %30, align 8
  br label %if.done20

if.done20:                                        ; preds = %if.then19, %cmp.and18, %for.tuple.body17
  %298 = load i64, i64* %30, align 8
  %299 = icmp eq i64 %298, -1
  %300 = zext i1 %299 to i8
  %301 = trunc i8 %300 to i1
  br i1 %301, label %cmp.and21, label %if.done23

cmp.and21:                                        ; preds = %if.done20
  %302 = load i32, i32* %38, align 4
  %303 = bitcast %runtime.Context* %52 to i8*
  %304 = call i8 @unicode.is_letter(i32 %302, i8* %303)
  %305 = trunc i8 %304 to i1
  br i1 %305, label %if.then22, label %if.done23

if.then22:                                        ; preds = %cmp.and21
  %306 = load i64, i64* %39, align 8
  store i64 %306, i64* %30, align 8
  %307 = getelementptr inbounds %src.element_box_mouse_selection.Mouse_Character_Selection-3, %src.element_box_mouse_selection.Mouse_Character_Selection-3* %16, i32 0, i32 3
  %308 = load float, float* %307, align 4
  store float %308, float* %33, align 4
  br label %if.done23

if.done23:                                        ; preds = %if.then22, %cmp.and21, %if.done20
  %309 = load i64, i64* %32, align 8
  %310 = icmp ne i64 %309, -1
  %311 = zext i1 %310 to i8
  %312 = trunc i8 %311 to i1
  br i1 %312, label %cmp.and24, label %if.done26

cmp.and24:                                        ; preds = %if.done23
  %313 = load i32, i32* %38, align 4
  %314 = bitcast %runtime.Context* %52 to i8*
  %315 = call i8 @unicode.is_letter(i32 %313, i8* %314)
  %316 = trunc i8 %315 to i1
  br i1 %316, label %if.then25, label %if.done26

if.then25:                                        ; preds = %cmp.and24
  %317 = getelementptr inbounds %src.element_box_mouse_selection.Mouse_Character_Selection-3, %src.element_box_mouse_selection.Mouse_Character_Selection-3* %16, i32 0, i32 2
  %318 = load float, float* %34, align 4
  store float %318, float* %317, align 4
  %319 = load %src.Box*, %src.Box** %5, align 8
  %320 = getelementptr inbounds %src.element_box_mouse_selection.Mouse_Character_Selection-3, %src.element_box_mouse_selection.Mouse_Character_Selection-3* %16, i32 0, i32 6
  %321 = load i64, i64* %320, align 8
  %322 = load i64, i64* %32, align 8
  %323 = add i64 %321, %322
  %324 = getelementptr inbounds %src.element_box_mouse_selection.Mouse_Character_Selection-3, %src.element_box_mouse_selection.Mouse_Character_Selection-3* %16, i32 0, i32 6
  %325 = load i64, i64* %324, align 8
  %326 = load i64, i64* %39, align 8
  %327 = add i64 %325, %326
  %328 = bitcast %runtime.Context* %52 to i8*
  %329 = call i8 @src.element_box_mouse_selection.mcs_check_word-1(%src.element_box_mouse_selection.Mouse_Character_Selection-3* %16, %src.Box* %319, i64 %323, i64 %327, i8* %328)
  store i64 -1, i64* %32, align 8
  br label %if.done26

if.done26:                                        ; preds = %if.then25, %cmp.and24, %if.done23
  %330 = load i64, i64* %32, align 8
  %331 = icmp eq i64 %330, -1
  %332 = zext i1 %331 to i8
  %333 = trunc i8 %332 to i1
  br i1 %333, label %cmp.and27, label %if.done29

cmp.and27:                                        ; preds = %if.done26
  %334 = load i32, i32* %38, align 4
  %335 = icmp eq i32 %334, 32
  %336 = zext i1 %335 to i8
  %337 = trunc i8 %336 to i1
  br i1 %337, label %if.then28, label %if.done29

if.then28:                                        ; preds = %cmp.and27
  %338 = load i64, i64* %39, align 8
  store i64 %338, i64* %32, align 8
  %339 = getelementptr inbounds %src.element_box_mouse_selection.Mouse_Character_Selection-3, %src.element_box_mouse_selection.Mouse_Character_Selection-3* %16, i32 0, i32 3
  %340 = load float, float* %339, align 4
  store float %340, float* %34, align 4
  br label %if.done29

if.done29:                                        ; preds = %if.then28, %cmp.and27, %if.done26
  %341 = getelementptr inbounds %src.element_box_mouse_selection.Mouse_Character_Selection-3, %src.element_box_mouse_selection.Mouse_Character_Selection-3* %16, i32 0, i32 3
  %342 = load float, float* %40, align 4
  %343 = load float, float* %341, align 4
  %344 = fadd float %343, %342
  store float %344, float* %341, align 4
  %345 = load i32, i32* %38, align 4
  store i32 %345, i32* %31, align 4
  br label %for.tuple.loop16

for.tuple.done30:                                 ; preds = %for.tuple.loop16
  %346 = load i64, i64* %32, align 8
  %347 = icmp ne i64 %346, -1
  %348 = zext i1 %347 to i8
  %349 = trunc i8 %348 to i1
  br i1 %349, label %cmp.and31, label %if.done33

cmp.and31:                                        ; preds = %for.tuple.done30
  %350 = load i32, i32* %31, align 4
  %351 = icmp eq i32 %350, 32
  %352 = zext i1 %351 to i8
  %353 = trunc i8 %352 to i1
  br i1 %353, label %if.then32, label %if.done33

if.then32:                                        ; preds = %cmp.and31
  %354 = getelementptr inbounds %src.element_box_mouse_selection.Mouse_Character_Selection-3, %src.element_box_mouse_selection.Mouse_Character_Selection-3* %16, i32 0, i32 2
  %355 = load float, float* %34, align 4
  store float %355, float* %354, align 4
  %356 = load %src.Box*, %src.Box** %5, align 8
  %357 = getelementptr inbounds %src.element_box_mouse_selection.Mouse_Character_Selection-3, %src.element_box_mouse_selection.Mouse_Character_Selection-3* %16, i32 0, i32 6
  %358 = load i64, i64* %357, align 8
  %359 = load i64, i64* %32, align 8
  %360 = add i64 %358, %359
  %361 = getelementptr inbounds %src.element_box_mouse_selection.Mouse_Character_Selection-3, %src.element_box_mouse_selection.Mouse_Character_Selection-3* %16, i32 0, i32 6
  %362 = load i64, i64* %361, align 8
  %363 = load %cutf8.Decode_State*, %cutf8.Decode_State** %17, align 8
  %364 = getelementptr inbounds %cutf8.Decode_State, %cutf8.Decode_State* %363, i32 0, i32 4
  %365 = load i64, i64* %364, align 8
  %366 = add i64 %362, %365
  %367 = bitcast %runtime.Context* %52 to i8*
  %368 = call i8 @src.element_box_mouse_selection.mcs_check_word-1(%src.element_box_mouse_selection.Mouse_Character_Selection-3* %16, %src.Box* %356, i64 %360, i64 %366, i8* %367)
  br label %if.done33

if.done33:                                        ; preds = %if.then32, %cmp.and31, %for.tuple.done30
  %369 = load i64, i64* %30, align 8
  %370 = icmp ne i64 %369, -1
  %371 = zext i1 %370 to i8
  %372 = trunc i8 %371 to i1
  br i1 %372, label %cmp.and34, label %if.done36

cmp.and34:                                        ; preds = %if.done33
  %373 = load i32, i32* %31, align 4
  %374 = bitcast %runtime.Context* %52 to i8*
  %375 = call i8 @unicode.is_letter(i32 %373, i8* %374)
  %376 = trunc i8 %375 to i1
  br i1 %376, label %if.then35, label %if.done36

if.then35:                                        ; preds = %cmp.and34
  %377 = getelementptr inbounds %src.element_box_mouse_selection.Mouse_Character_Selection-3, %src.element_box_mouse_selection.Mouse_Character_Selection-3* %16, i32 0, i32 2
  %378 = load float, float* %33, align 4
  store float %378, float* %377, align 4
  %379 = load %src.Box*, %src.Box** %5, align 8
  %380 = getelementptr inbounds %src.element_box_mouse_selection.Mouse_Character_Selection-3, %src.element_box_mouse_selection.Mouse_Character_Selection-3* %16, i32 0, i32 6
  %381 = load i64, i64* %380, align 8
  %382 = load i64, i64* %30, align 8
  %383 = add i64 %381, %382
  %384 = getelementptr inbounds %src.element_box_mouse_selection.Mouse_Character_Selection-3, %src.element_box_mouse_selection.Mouse_Character_Selection-3* %16, i32 0, i32 6
  %385 = load i64, i64* %384, align 8
  %386 = load %cutf8.Decode_State*, %cutf8.Decode_State** %17, align 8
  %387 = getelementptr inbounds %cutf8.Decode_State, %cutf8.Decode_State* %386, i32 0, i32 4
  %388 = load i64, i64* %387, align 8
  %389 = add i64 %385, %388
  %390 = bitcast %runtime.Context* %52 to i8*
  %391 = call i8 @src.element_box_mouse_selection.mcs_check_word-1(%src.element_box_mouse_selection.Mouse_Character_Selection-3* %16, %src.Box* %379, i64 %383, i64 %389, i8* %390)
  br label %if.done36

if.done36:                                        ; preds = %if.then35, %cmp.and34, %if.done33
  %392 = getelementptr inbounds %src.element_box_mouse_selection.Mouse_Character_Selection-3, %src.element_box_mouse_selection.Mouse_Character_Selection-3* %16, i32 0, i32 4
  %393 = getelementptr inbounds %src.element_box_mouse_selection.Mouse_Character_Selection-3, %src.element_box_mouse_selection.Mouse_Character_Selection-3* %16, i32 0, i32 5
  %394 = load float, float* %393, align 4
  store float %394, float* %392, align 4
  %395 = getelementptr inbounds %src.element_box_mouse_selection.Mouse_Character_Selection-3, %src.element_box_mouse_selection.Mouse_Character_Selection-3* %16, i32 0, i32 6
  %396 = load %cutf8.Decode_State*, %cutf8.Decode_State** %17, align 8
  %397 = getelementptr inbounds %cutf8.Decode_State, %cutf8.Decode_State* %396, i32 0, i32 4
  %398 = load i64, i64* %397, align 8
  %399 = load i64, i64* %395, align 8
  %400 = add i64 %399, %398
  store i64 %400, i64* %395, align 8
  br label %for.index.loop9

for.index.done37:                                 ; preds = %if.then13, %for.index.loop9
  %401 = load %src.Box*, %src.Box** %5, align 8
  %402 = bitcast %runtime.Context* %52 to i8*
  call void @src.element_box_mouse_selection.mcs_check_line_last-2(%src.element_box_mouse_selection.Mouse_Character_Selection-3* %16, %src.Box* %401, i8* %402)
  br label %if.done50

if.else38:                                        ; preds = %if.else
  %403 = bitcast %..string* %41 to i8*
  call void @llvm.memset.p0i8.i64(i8* %403, i8 0, i64 16, i1 false)
  store i64 0, i64* %42, align 8
  %404 = load %src.Box*, %src.Box** %5, align 8
  %405 = getelementptr inbounds %src.Box, %src.Box* %404, i32 0, i32 1
  %406 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %405, i32 0, i32 1
  store i64 -1, i64* %43, align 8
  br label %for.index.loop39

for.index.loop39:                                 ; preds = %if.done48, %if.else38
  %407 = load i64, i64* %43, align 8
  %408 = add i64 %407, 1
  store i64 %408, i64* %43, align 8
  %409 = load i64, i64* %406, align 8
  %410 = icmp slt i64 %408, %409
  br i1 %410, label %for.index.body40, label %for.index.done49

for.index.body40:                                 ; preds = %for.index.loop39
  %411 = load i64, i64* %43, align 8
  %412 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %405, i32 0, i32 0
  %413 = load %..string*, %..string** %412, align 8
  %414 = getelementptr %..string, %..string* %413, i64 %411
  %415 = load %..string, %..string* %414, align 8
  store %..string %415, %..string* %44, align 8
  store i64 %411, i64* %45, align 8
  %416 = getelementptr inbounds %src.element_box_mouse_selection.Mouse_Character_Selection-3, %src.element_box_mouse_selection.Mouse_Character_Selection-3* %16, i32 0, i32 5
  %417 = load float, float* %14, align 4
  %418 = load float, float* %416, align 4
  %419 = fadd float %418, %417
  store float %419, float* %416, align 4
  %420 = load %..string, %..string* %44, align 8
  %421 = bitcast %..string* %44 to { i64, i64 }*
  %422 = load { i64, i64 }, { i64, i64 }* %421, align 8
  %423 = bitcast %runtime.Context* %52 to i8*
  %424 = call i64 @cutf8.count({ i64, i64 } %422, i8* %423)
  store i64 %424, i64* %46, align 8
  %425 = getelementptr inbounds %src.element_box_mouse_selection.Mouse_Character_Selection-3, %src.element_box_mouse_selection.Mouse_Character_Selection-3* %16, i32 0, i32 4
  %426 = load float, float* %425, align 4
  %427 = getelementptr inbounds %src.element_box_mouse_selection.Mouse_Character_Selection-3, %src.element_box_mouse_selection.Mouse_Character_Selection-3* %16, i32 0, i32 1
  %428 = load float, float* %427, align 4
  %429 = fcmp olt float %426, %428
  %430 = zext i1 %429 to i8
  %431 = trunc i8 %430 to i1
  br i1 %431, label %cmp.and41, label %if.done48

cmp.and41:                                        ; preds = %for.index.body40
  %432 = getelementptr inbounds %src.element_box_mouse_selection.Mouse_Character_Selection-3, %src.element_box_mouse_selection.Mouse_Character_Selection-3* %16, i32 0, i32 1
  %433 = load float, float* %432, align 4
  %434 = getelementptr inbounds %src.element_box_mouse_selection.Mouse_Character_Selection-3, %src.element_box_mouse_selection.Mouse_Character_Selection-3* %16, i32 0, i32 5
  %435 = load float, float* %434, align 4
  %436 = fcmp olt float %433, %435
  %437 = zext i1 %436 to i8
  %438 = trunc i8 %437 to i1
  br i1 %438, label %if.then42, label %if.done48

if.then42:                                        ; preds = %cmp.and41
  %439 = load %src.Box*, %src.Box** %5, align 8
  %440 = getelementptr inbounds %src.Box, %src.Box* %439, i32 0, i32 9
  %441 = load i8, i8* %440, align 1
  %442 = trunc i8 %441 to i1
  br i1 %442, label %if.done44, label %if.then43

if.then43:                                        ; preds = %if.then42
  %443 = load %src.Box*, %src.Box** %5, align 8
  %444 = getelementptr inbounds %src.Box, %src.Box* %443, i32 0, i32 11
  %445 = getelementptr inbounds %src.element_box_mouse_selection.Mouse_Character_Selection-3, %src.element_box_mouse_selection.Mouse_Character_Selection-3* %16, i32 0, i32 6
  %446 = load i64, i64* %445, align 8
  store i64 %446, i64* %444, align 8
  %447 = load %src.Box*, %src.Box** %5, align 8
  %448 = getelementptr inbounds %src.Box, %src.Box* %447, i32 0, i32 12
  %449 = getelementptr inbounds %src.element_box_mouse_selection.Mouse_Character_Selection-3, %src.element_box_mouse_selection.Mouse_Character_Selection-3* %16, i32 0, i32 6
  %450 = load i64, i64* %449, align 8
  %451 = load i64, i64* %46, align 8
  %452 = add i64 %450, %451
  store i64 %452, i64* %448, align 8
  %453 = load %src.Box*, %src.Box** %5, align 8
  %454 = getelementptr inbounds %src.Box, %src.Box* %453, i32 0, i32 13
  %455 = getelementptr inbounds %src.element_box_mouse_selection.Mouse_Character_Selection-3, %src.element_box_mouse_selection.Mouse_Character_Selection-3* %16, i32 0, i32 5
  %456 = load float, float* %455, align 4
  store float %456, float* %454, align 4
  %457 = load %src.Box*, %src.Box** %5, align 8
  %458 = getelementptr inbounds %src.Box, %src.Box* %457, i32 0, i32 9
  store i8 1, i8* %458, align 1
  br label %if.done44

if.done44:                                        ; preds = %if.then43, %if.then42
  %459 = getelementptr inbounds %src.element_box_mouse_selection.Mouse_Character_Selection-3, %src.element_box_mouse_selection.Mouse_Character_Selection-3* %16, i32 0, i32 6
  %460 = load i64, i64* %459, align 8
  store i64 %460, i64* %47, align 8
  %461 = getelementptr inbounds %src.element_box_mouse_selection.Mouse_Character_Selection-3, %src.element_box_mouse_selection.Mouse_Character_Selection-3* %16, i32 0, i32 6
  %462 = load i64, i64* %461, align 8
  %463 = load i64, i64* %46, align 8
  %464 = add i64 %462, %463
  store i64 %464, i64* %48, align 8
  %465 = load i64, i64* %47, align 8
  %466 = load %src.Box*, %src.Box** %5, align 8
  %467 = getelementptr inbounds %src.Box, %src.Box* %466, i32 0, i32 11
  %468 = load i64, i64* %467, align 8
  %469 = icmp slt i64 %465, %468
  %470 = select i1 %469, i64 %465, i64 %468
  store i64 %470, i64* %49, align 8
  %471 = load i64, i64* %48, align 8
  %472 = load %src.Box*, %src.Box** %5, align 8
  %473 = getelementptr inbounds %src.Box, %src.Box* %472, i32 0, i32 12
  %474 = load i64, i64* %473, align 8
  %475 = icmp sgt i64 %471, %474
  %476 = select i1 %475, i64 %471, i64 %474
  store i64 %476, i64* %50, align 8
  %477 = getelementptr inbounds %src.element_box_mouse_selection.Mouse_Character_Selection-3, %src.element_box_mouse_selection.Mouse_Character_Selection-3* %16, i32 0, i32 1
  %478 = load float, float* %477, align 4
  %479 = load %src.Box*, %src.Box** %5, align 8
  %480 = getelementptr inbounds %src.Box, %src.Box* %479, i32 0, i32 13
  %481 = load float, float* %480, align 4
  %482 = fcmp ogt float %478, %481
  %483 = zext i1 %482 to i8
  %484 = trunc i8 %483 to i1
  br i1 %484, label %if.then45, label %if.done46

if.then45:                                        ; preds = %if.done44
  %485 = load i64, i64* %50, align 8
  %486 = load i64, i64* %49, align 8
  store i64 %485, i64* %49, align 8
  store i64 %486, i64* %50, align 8
  br label %if.done46

if.done46:                                        ; preds = %if.then45, %if.done44
  %487 = load %src.Box*, %src.Box** %5, align 8
  %488 = getelementptr inbounds %src.Box, %src.Box* %487, i32 0, i32 2
  %489 = load i64, i64* %49, align 8
  store i64 %489, i64* %488, align 8
  %490 = load %src.Box*, %src.Box** %5, align 8
  %491 = getelementptr inbounds %src.Box, %src.Box* %490, i32 0, i32 3
  %492 = load i64, i64* %50, align 8
  store i64 %492, i64* %491, align 8
  br label %for.index.done49

unreachable47:                                    ; No predecessors!
  br label %if.done48

if.done48:                                        ; preds = %unreachable47, %cmp.and41, %for.index.body40
  %493 = getelementptr inbounds %src.element_box_mouse_selection.Mouse_Character_Selection-3, %src.element_box_mouse_selection.Mouse_Character_Selection-3* %16, i32 0, i32 6
  %494 = load i64, i64* %46, align 8
  %495 = load i64, i64* %493, align 8
  %496 = add i64 %495, %494
  store i64 %496, i64* %493, align 8
  %497 = getelementptr inbounds %src.element_box_mouse_selection.Mouse_Character_Selection-3, %src.element_box_mouse_selection.Mouse_Character_Selection-3* %16, i32 0, i32 4
  %498 = getelementptr inbounds %src.element_box_mouse_selection.Mouse_Character_Selection-3, %src.element_box_mouse_selection.Mouse_Character_Selection-3* %16, i32 0, i32 5
  %499 = load float, float* %498, align 4
  store float %499, float* %497, align 4
  br label %for.index.loop39

for.index.done49:                                 ; preds = %if.done46, %for.index.loop39
  br label %if.done50

if.done50:                                        ; preds = %for.index.done49, %for.index.done37
  br label %if.done51

if.done51:                                        ; preds = %if.done50, %for.index.done
  %500 = load i8, i8* %8, align 1
  store i8 %500, i8* %8, align 1
  ret i8 %500
}

define internal void @src.cam_init(%src.Pan_Camera* %0, float %1, float %2, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %3 = alloca %src.Pan_Camera*, align 8
  %4 = alloca float, align 4
  %5 = alloca float, align 4
  br label %entry

entry:                                            ; preds = %decls
  store %src.Pan_Camera* %0, %src.Pan_Camera** %3, align 8
  store float %1, float* %4, align 4
  store float %2, float* %5, align 4
  %6 = bitcast i8* %__.context_ptr to %runtime.Context*
  %7 = load %src.Pan_Camera*, %src.Pan_Camera** %3, align 8
  %8 = getelementptr inbounds %src.Pan_Camera, %src.Pan_Camera* %7, i32 0, i32 2
  %9 = load float, float* %4, align 4
  store float %9, float* %8, align 4
  %10 = load %src.Pan_Camera*, %src.Pan_Camera** %3, align 8
  %11 = getelementptr inbounds %src.Pan_Camera, %src.Pan_Camera* %10, i32 0, i32 4
  %12 = load float, float* %4, align 4
  store float %12, float* %11, align 4
  %13 = load %src.Pan_Camera*, %src.Pan_Camera** %3, align 8
  %14 = getelementptr inbounds %src.Pan_Camera, %src.Pan_Camera* %13, i32 0, i32 3
  %15 = load float, float* %5, align 4
  store float %15, float* %14, align 4
  %16 = load %src.Pan_Camera*, %src.Pan_Camera** %3, align 8
  %17 = getelementptr inbounds %src.Pan_Camera, %src.Pan_Camera* %16, i32 0, i32 5
  %18 = load float, float* %5, align 4
  store float %18, float* %17, align 4
  ret void
}

define internal %src.Pan_Camera* @src.mode_panel_cam(i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %0 = alloca { i64, i64 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  %1 = bitcast i8* %__.context_ptr to %runtime.Context*
  %2 = load %src.Mode_Panel*, %src.Mode_Panel** @src.mode_panel, align 8
  %3 = getelementptr inbounds %src.Mode_Panel, %src.Mode_Panel* %2, i32 0, i32 6
  %4 = load %src.Mode_Panel*, %src.Mode_Panel** @src.mode_panel, align 8
  %5 = getelementptr inbounds %src.Mode_Panel, %src.Mode_Panel* %4, i32 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr [2 x %src.Pan_Camera], [2 x %src.Pan_Camera]* %3, i64 0, i64 %6
  %8 = bitcast { i64, i64 }* %0 to %..string*
  store %..string { i8* getelementptr inbounds ([54 x i8], [54 x i8]* @"csbs$30e", i64 0, i64 0), i64 53 }, %..string* %8, align 8
  %9 = load { i64, i64 }, { i64, i64 }* %0, align 8
  call void @runtime.bounds_check_error({ i64, i64 } %9, i32 35, i32 36, i64 %6, i64 2)
  ret %src.Pan_Camera* %7
}

define internal i8 @src.cam_animate(%src.Pan_Camera* %0, i1 zeroext %1, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %2 = alloca %src.Pan_Camera*, align 8
  %3 = alloca i8, align 1
  %4 = alloca %src.Pan_Camera_Animation*, align 8
  %5 = alloca float*, align 8
  %6 = alloca float*, align 8
  %7 = alloca float, align 4
  %8 = alloca i8, align 1
  br label %entry

entry:                                            ; preds = %decls
  store %src.Pan_Camera* %0, %src.Pan_Camera** %2, align 8
  %9 = zext i1 %1 to i8
  store i8 %9, i8* %3, align 1
  %10 = bitcast i8* %__.context_ptr to %runtime.Context*
  %11 = load i8, i8* %3, align 1
  %12 = trunc i8 %11 to i1
  br i1 %12, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %13 = load %src.Pan_Camera*, %src.Pan_Camera** %2, align 8
  %14 = getelementptr inbounds %src.Pan_Camera, %src.Pan_Camera* %13, i32 0, i32 9
  br label %if.done

if.else:                                          ; preds = %entry
  %15 = load %src.Pan_Camera*, %src.Pan_Camera** %2, align 8
  %16 = getelementptr inbounds %src.Pan_Camera, %src.Pan_Camera* %15, i32 0, i32 8
  br label %if.done

if.done:                                          ; preds = %if.else, %if.then
  %17 = phi %src.Pan_Camera_Animation* [ %14, %if.then ], [ %16, %if.else ]
  store %src.Pan_Camera_Animation* %17, %src.Pan_Camera_Animation** %4, align 8
  %18 = load i8, i8* %3, align 1
  %19 = trunc i8 %18 to i1
  br i1 %19, label %if.then1, label %if.else2

if.then1:                                         ; preds = %if.done
  %20 = load %src.Pan_Camera*, %src.Pan_Camera** %2, align 8
  %21 = getelementptr inbounds %src.Pan_Camera, %src.Pan_Camera* %20, i32 0, i32 2
  br label %if.done3

if.else2:                                         ; preds = %if.done
  %22 = load %src.Pan_Camera*, %src.Pan_Camera** %2, align 8
  %23 = getelementptr inbounds %src.Pan_Camera, %src.Pan_Camera* %22, i32 0, i32 3
  br label %if.done3

if.done3:                                         ; preds = %if.else2, %if.then1
  %24 = phi float* [ %21, %if.then1 ], [ %23, %if.else2 ]
  store float* %24, float** %5, align 8
  %25 = load i8, i8* %3, align 1
  %26 = trunc i8 %25 to i1
  br i1 %26, label %if.then4, label %if.else5

if.then4:                                         ; preds = %if.done3
  br label %if.done6

if.else5:                                         ; preds = %if.done3
  br label %if.done6

if.done6:                                         ; preds = %if.else5, %if.then4
  %27 = phi float* [ @src.caret_lerp_speed_x, %if.then4 ], [ @src.caret_lerp_speed_y, %if.else5 ]
  store float* %27, float** %6, align 8
  %28 = load %src.Pan_Camera*, %src.Pan_Camera** %2, align 8
  %29 = getelementptr inbounds %src.Pan_Camera, %src.Pan_Camera* %28, i32 0, i32 6
  %30 = load i8, i8* %29, align 1
  %31 = trunc i8 %30 to i1
  br i1 %31, label %if.then7, label %cmp.or

cmp.or:                                           ; preds = %if.done6
  %32 = load %src.Pan_Camera_Animation*, %src.Pan_Camera_Animation** %4, align 8
  %33 = getelementptr inbounds %src.Pan_Camera_Animation, %src.Pan_Camera_Animation* %32, i32 0, i32 0
  %34 = load i8, i8* %33, align 1
  %35 = trunc i8 %34 to i1
  br i1 %35, label %if.done8, label %if.then7

if.then7:                                         ; preds = %cmp.or, %if.done6
  ret i8 0

if.done8:                                         ; preds = %cmp.or
  %36 = load %src.Pan_Camera_Animation*, %src.Pan_Camera_Animation** %4, align 8
  %37 = getelementptr inbounds %src.Pan_Camera_Animation, %src.Pan_Camera_Animation* %36, i32 0, i32 2
  %38 = load i64, i64* %37, align 8
  %39 = icmp eq i64 %38, 100
  %40 = zext i1 %39 to i8
  %41 = trunc i8 %40 to i1
  br i1 %41, label %if.then9, label %if.else10

if.then9:                                         ; preds = %if.done8
  %42 = load %src.Pan_Camera_Animation*, %src.Pan_Camera_Animation** %4, align 8
  %43 = getelementptr inbounds %src.Pan_Camera_Animation, %src.Pan_Camera_Animation* %42, i32 0, i32 3
  %44 = load float, float* %43, align 4
  br label %if.done11

if.else10:                                        ; preds = %if.done8
  %45 = load float*, float** %5, align 8
  %46 = load float, float* %45, align 4
  %47 = load %src.Pan_Camera_Animation*, %src.Pan_Camera_Animation** %4, align 8
  %48 = getelementptr inbounds %src.Pan_Camera_Animation, %src.Pan_Camera_Animation* %47, i32 0, i32 2
  %49 = load i64, i64* %48, align 8
  %50 = sitofp i64 %49 to float
  %51 = load %src.Pan_Camera_Animation*, %src.Pan_Camera_Animation** %4, align 8
  %52 = getelementptr inbounds %src.Pan_Camera_Animation, %src.Pan_Camera_Animation* %51, i32 0, i32 3
  %53 = load float, float* %52, align 4
  %54 = fmul float %50, %53
  %55 = fadd float %46, %54
  %56 = call float @math.round_f32(float %55)
  br label %if.done11

if.done11:                                        ; preds = %if.else10, %if.then9
  %57 = phi float [ %44, %if.then9 ], [ %56, %if.else10 ]
  store float %57, float* %7, align 4
  %58 = load %src.Pan_Camera_Animation*, %src.Pan_Camera_Animation** %4, align 8
  %59 = getelementptr inbounds %src.Pan_Camera_Animation, %src.Pan_Camera_Animation* %58, i32 0, i32 0
  %60 = load float*, float** %5, align 8
  %61 = load float, float* %7, align 4
  %62 = load float*, float** %6, align 8
  %63 = load float, float* %62, align 4
  %64 = fadd float 1.000000e+00, %63
  %65 = bitcast %runtime.Context* %10 to i8*
  %66 = call i8 @src.animate_to(i8* %59, float* %60, float %61, float %64, float 1.000000e+00, i8* %65)
  store i8 %66, i8* %8, align 1
  %67 = load float*, float** %6, align 8
  %68 = load i8, i8* %8, align 1
  %69 = trunc i8 %68 to i1
  br i1 %69, label %if.then12, label %if.else13

if.then12:                                        ; preds = %if.done11
  %70 = load float*, float** %6, align 8
  %71 = load float, float* %70, align 4
  %72 = fadd float %71, 5.000000e-01
  br label %if.done14

if.else13:                                        ; preds = %if.done11
  br label %if.done14

if.done14:                                        ; preds = %if.else13, %if.then12
  %73 = phi float [ %72, %if.then12 ], [ 1.000000e+00, %if.else13 ]
  store float %73, float* %67, align 4
  %74 = load i8, i8* %8, align 1
  ret i8 %74
}

define internal { float, i64 } @src.cam_bounds_check_y(%src.Pan_Camera* %0, { <2 x float>, <2 x float> } %1, float %2, float %3, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %4 = alloca %src.Pan_Camera*, align 8
  %5 = alloca %src.Rect, align 8
  %6 = alloca float, align 4
  %7 = alloca float, align 4
  %8 = alloca float, align 4
  %9 = alloca i64, align 8
  %10 = alloca { float, i64 }, align 8
  %11 = alloca { float, i64 }, align 8
  %12 = alloca { float, i64 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Pan_Camera* %0, %src.Pan_Camera** %4, align 8
  %13 = bitcast %src.Rect* %5 to { <2 x float>, <2 x float> }*
  store { <2 x float>, <2 x float> } %1, { <2 x float>, <2 x float> }* %13, align 8
  %14 = load %src.Rect, %src.Rect* %5, align 4
  store float %2, float* %6, align 4
  store float %3, float* %7, align 4
  store float 0.000000e+00, float* %8, align 4
  store i64 0, i64* %9, align 8
  %15 = bitcast i8* %__.context_ptr to %runtime.Context*
  %16 = load float, float* %6, align 4
  %17 = getelementptr inbounds %src.Rect, %src.Rect* %5, i32 0, i32 2
  %18 = load float, float* %17, align 4
  %19 = load %src.Pan_Camera*, %src.Pan_Camera** %4, align 8
  %20 = getelementptr inbounds %src.Pan_Camera, %src.Pan_Camera* %19, i32 0, i32 5
  %21 = load float, float* %20, align 4
  %22 = fadd float %18, %21
  %23 = fcmp olt float %16, %22
  %24 = zext i1 %23 to i8
  %25 = trunc i8 %24 to i1
  br i1 %25, label %if.then, label %if.done2

if.then:                                          ; preds = %entry
  %26 = getelementptr inbounds %src.Rect, %src.Rect* %5, i32 0, i32 2
  %27 = load float, float* %26, align 4
  %28 = load float, float* %6, align 4
  %29 = fsub float %27, %28
  %30 = load %src.Pan_Camera*, %src.Pan_Camera** %4, align 8
  %31 = getelementptr inbounds %src.Pan_Camera, %src.Pan_Camera* %30, i32 0, i32 5
  %32 = load float, float* %31, align 4
  %33 = fadd float %29, %32
  %34 = call float @math.round_f32(float %33)
  store float %34, float* %8, align 4
  %35 = load float, float* %8, align 4
  %36 = fcmp oeq float %35, 0.000000e+00
  %37 = zext i1 %36 to i8
  %38 = trunc i8 %37 to i1
  br i1 %38, label %if.then1, label %if.done

if.then1:                                         ; preds = %if.then
  %39 = load float, float* %8, align 4
  %40 = load i64, i64* %9, align 8
  store float %39, float* %8, align 4
  store i64 %40, i64* %9, align 8
  %41 = getelementptr inbounds { float, i64 }, { float, i64 }* %10, i32 0, i32 0
  %42 = getelementptr inbounds { float, i64 }, { float, i64 }* %10, i32 0, i32 1
  store float %39, float* %41, align 4
  store i64 %40, i64* %42, align 8
  %43 = load { float, i64 }, { float, i64 }* %10, align 8
  ret { float, i64 } %43

if.done:                                          ; preds = %if.then
  store i64 1, i64* %9, align 8
  br label %if.done2

if.done2:                                         ; preds = %if.done, %entry
  %44 = load float, float* %7, align 4
  %45 = getelementptr inbounds %src.Rect, %src.Rect* %5, i32 0, i32 3
  %46 = load float, float* %45, align 4
  %47 = load %src.Pan_Camera*, %src.Pan_Camera** %4, align 8
  %48 = getelementptr inbounds %src.Pan_Camera, %src.Pan_Camera* %47, i32 0, i32 5
  %49 = load float, float* %48, align 4
  %50 = fsub float %46, %49
  %51 = fcmp ogt float %44, %50
  %52 = zext i1 %51 to i8
  %53 = trunc i8 %52 to i1
  br i1 %53, label %if.then3, label %if.done6

if.then3:                                         ; preds = %if.done2
  %54 = load float, float* %7, align 4
  %55 = getelementptr inbounds %src.Rect, %src.Rect* %5, i32 0, i32 3
  %56 = load float, float* %55, align 4
  %57 = fsub float %54, %56
  %58 = load %src.Pan_Camera*, %src.Pan_Camera** %4, align 8
  %59 = getelementptr inbounds %src.Pan_Camera, %src.Pan_Camera* %58, i32 0, i32 5
  %60 = load float, float* %59, align 4
  %61 = fadd float %57, %60
  %62 = call float @math.round_f32(float %61)
  store float %62, float* %8, align 4
  %63 = load float, float* %8, align 4
  %64 = fcmp oeq float %63, 0.000000e+00
  %65 = zext i1 %64 to i8
  %66 = trunc i8 %65 to i1
  br i1 %66, label %if.then4, label %if.done5

if.then4:                                         ; preds = %if.then3
  %67 = load float, float* %8, align 4
  %68 = load i64, i64* %9, align 8
  store float %67, float* %8, align 4
  store i64 %68, i64* %9, align 8
  %69 = getelementptr inbounds { float, i64 }, { float, i64 }* %11, i32 0, i32 0
  %70 = getelementptr inbounds { float, i64 }, { float, i64 }* %11, i32 0, i32 1
  store float %67, float* %69, align 4
  store i64 %68, i64* %70, align 8
  %71 = load { float, i64 }, { float, i64 }* %11, align 8
  ret { float, i64 } %71

if.done5:                                         ; preds = %if.then3
  store i64 -1, i64* %9, align 8
  br label %if.done6

if.done6:                                         ; preds = %if.done5, %if.done2
  %72 = load float, float* %8, align 4
  %73 = load i64, i64* %9, align 8
  store float %72, float* %8, align 4
  store i64 %73, i64* %9, align 8
  %74 = getelementptr inbounds { float, i64 }, { float, i64 }* %12, i32 0, i32 0
  %75 = getelementptr inbounds { float, i64 }, { float, i64 }* %12, i32 0, i32 1
  store float %72, float* %74, align 4
  store i64 %73, i64* %75, align 8
  %76 = load { float, i64 }, { float, i64 }* %12, align 8
  ret { float, i64 } %76
}

define internal { float, i64 } @src.cam_bounds_check_x(%src.Pan_Camera* %0, { <2 x float>, <2 x float> } %1, float %2, float %3, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %4 = alloca %src.Pan_Camera*, align 8
  %5 = alloca %src.Rect, align 8
  %6 = alloca float, align 4
  %7 = alloca float, align 4
  %8 = alloca float, align 4
  %9 = alloca i64, align 8
  %10 = alloca { float, i64 }, align 8
  %11 = alloca { float, i64 }, align 8
  %12 = alloca { float, i64 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Pan_Camera* %0, %src.Pan_Camera** %4, align 8
  %13 = bitcast %src.Rect* %5 to { <2 x float>, <2 x float> }*
  store { <2 x float>, <2 x float> } %1, { <2 x float>, <2 x float> }* %13, align 8
  %14 = load %src.Rect, %src.Rect* %5, align 4
  store float %2, float* %6, align 4
  store float %3, float* %7, align 4
  store float 0.000000e+00, float* %8, align 4
  store i64 0, i64* %9, align 8
  %15 = bitcast i8* %__.context_ptr to %runtime.Context*
  %16 = load float, float* %6, align 4
  %17 = getelementptr inbounds %src.Rect, %src.Rect* %5, i32 0, i32 0
  %18 = load float, float* %17, align 4
  %19 = load %src.Pan_Camera*, %src.Pan_Camera** %4, align 8
  %20 = getelementptr inbounds %src.Pan_Camera, %src.Pan_Camera* %19, i32 0, i32 4
  %21 = load float, float* %20, align 4
  %22 = fadd float %18, %21
  %23 = fcmp olt float %16, %22
  %24 = zext i1 %23 to i8
  %25 = trunc i8 %24 to i1
  br i1 %25, label %if.then, label %if.done2

if.then:                                          ; preds = %entry
  %26 = getelementptr inbounds %src.Rect, %src.Rect* %5, i32 0, i32 0
  %27 = load float, float* %26, align 4
  %28 = load float, float* %6, align 4
  %29 = fsub float %27, %28
  %30 = load %src.Pan_Camera*, %src.Pan_Camera** %4, align 8
  %31 = getelementptr inbounds %src.Pan_Camera, %src.Pan_Camera* %30, i32 0, i32 4
  %32 = load float, float* %31, align 4
  %33 = fadd float %29, %32
  %34 = call float @math.round_f32(float %33)
  store float %34, float* %8, align 4
  %35 = load float, float* %8, align 4
  %36 = fcmp oeq float %35, 0.000000e+00
  %37 = zext i1 %36 to i8
  %38 = trunc i8 %37 to i1
  br i1 %38, label %if.then1, label %if.done

if.then1:                                         ; preds = %if.then
  %39 = load float, float* %8, align 4
  %40 = load i64, i64* %9, align 8
  store float %39, float* %8, align 4
  store i64 %40, i64* %9, align 8
  %41 = getelementptr inbounds { float, i64 }, { float, i64 }* %10, i32 0, i32 0
  %42 = getelementptr inbounds { float, i64 }, { float, i64 }* %10, i32 0, i32 1
  store float %39, float* %41, align 4
  store i64 %40, i64* %42, align 8
  %43 = load { float, i64 }, { float, i64 }* %10, align 8
  ret { float, i64 } %43

if.done:                                          ; preds = %if.then
  store i64 1, i64* %9, align 8
  br label %if.done2

if.done2:                                         ; preds = %if.done, %entry
  %44 = load float, float* %7, align 4
  %45 = getelementptr inbounds %src.Rect, %src.Rect* %5, i32 0, i32 1
  %46 = load float, float* %45, align 4
  %47 = load %src.Pan_Camera*, %src.Pan_Camera** %4, align 8
  %48 = getelementptr inbounds %src.Pan_Camera, %src.Pan_Camera* %47, i32 0, i32 4
  %49 = load float, float* %48, align 4
  %50 = fsub float %46, %49
  %51 = fcmp ogt float %44, %50
  %52 = zext i1 %51 to i8
  %53 = trunc i8 %52 to i1
  br i1 %53, label %if.then3, label %if.done6

if.then3:                                         ; preds = %if.done2
  %54 = load float, float* %7, align 4
  %55 = getelementptr inbounds %src.Rect, %src.Rect* %5, i32 0, i32 1
  %56 = load float, float* %55, align 4
  %57 = fsub float %54, %56
  %58 = load %src.Pan_Camera*, %src.Pan_Camera** %4, align 8
  %59 = getelementptr inbounds %src.Pan_Camera, %src.Pan_Camera* %58, i32 0, i32 4
  %60 = load float, float* %59, align 4
  %61 = fadd float %57, %60
  %62 = call float @math.round_f32(float %61)
  store float %62, float* %8, align 4
  %63 = load float, float* %8, align 4
  %64 = fcmp oeq float %63, 0.000000e+00
  %65 = zext i1 %64 to i8
  %66 = trunc i8 %65 to i1
  br i1 %66, label %if.then4, label %if.done5

if.then4:                                         ; preds = %if.then3
  %67 = load float, float* %8, align 4
  %68 = load i64, i64* %9, align 8
  store float %67, float* %8, align 4
  store i64 %68, i64* %9, align 8
  %69 = getelementptr inbounds { float, i64 }, { float, i64 }* %11, i32 0, i32 0
  %70 = getelementptr inbounds { float, i64 }, { float, i64 }* %11, i32 0, i32 1
  store float %67, float* %69, align 4
  store i64 %68, i64* %70, align 8
  %71 = load { float, i64 }, { float, i64 }* %11, align 8
  ret { float, i64 } %71

if.done5:                                         ; preds = %if.then3
  store i64 -1, i64* %9, align 8
  br label %if.done6

if.done6:                                         ; preds = %if.done5, %if.done2
  %72 = load float, float* %8, align 4
  %73 = load i64, i64* %9, align 8
  store float %72, float* %8, align 4
  store i64 %73, i64* %9, align 8
  %74 = getelementptr inbounds { float, i64 }, { float, i64 }* %12, i32 0, i32 0
  %75 = getelementptr inbounds { float, i64 }, { float, i64 }* %12, i32 0, i32 1
  store float %72, float* %74, align 4
  store i64 %73, i64* %75, align 8
  %76 = load { float, i64 }, { float, i64 }* %12, align 8
  ret { float, i64 } %76
}

define internal void @src.mode_panel_cam_bounds_check_y(i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %0 = alloca %src.Pan_Camera*, align 8
  %1 = alloca float, align 4
  %2 = alloca i64, align 8
  %3 = alloca float, align 4
  %4 = alloca float, align 4
  %5 = alloca %src.Task*, align 8
  %6 = alloca { i64, i64 }, align 8
  %7 = alloca { <2 x float>, <2 x float> }, align 8
  br label %entry

entry:                                            ; preds = %decls
  %8 = bitcast i8* %__.context_ptr to %runtime.Context*
  %9 = bitcast %runtime.Context* %8 to i8*
  %10 = call %src.Pan_Camera* @src.mode_panel_cam(i8* %9)
  store %src.Pan_Camera* %10, %src.Pan_Camera** %0, align 8
  %11 = load %src.Pan_Camera*, %src.Pan_Camera** %0, align 8
  %12 = getelementptr inbounds %src.Pan_Camera, %src.Pan_Camera* %11, i32 0, i32 6
  %13 = load i8, i8* %12, align 1
  %14 = trunc i8 %13 to i1
  br i1 %14, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  ret void

if.done:                                          ; preds = %entry
  store float 0.000000e+00, float* %1, align 4
  store i64 0, i64* %2, align 8
  %15 = load i64, i64* @src.task_head, align 8
  %16 = icmp ne i64 %15, -1
  %17 = zext i1 %16 to i8
  %18 = trunc i8 %17 to i1
  br i1 %18, label %if.then1, label %if.done2

if.then1:                                         ; preds = %if.done
  %19 = load float, float* getelementptr inbounds (%src.Rect, %src.Rect* @src.caret_rect, i64 0, i32 2), align 4
  store float %19, float* %3, align 4
  %20 = load float, float* getelementptr inbounds (%src.Rect, %src.Rect* @src.caret_rect, i64 0, i32 3), align 4
  store float %20, float* %4, align 4
  %21 = load { %src.Task**, i64, i64, %runtime.Allocator }, { %src.Task**, i64, i64, %runtime.Allocator }* @src.tasks_visible, align 8
  %22 = load %src.Task**, %src.Task*** getelementptr inbounds ({ %src.Task**, i64, i64, %runtime.Allocator }, { %src.Task**, i64, i64, %runtime.Allocator }* @src.tasks_visible, i64 0, i32 0), align 8
  %23 = load i64, i64* getelementptr inbounds ({ %src.Task**, i64, i64, %runtime.Allocator }, { %src.Task**, i64, i64, %runtime.Allocator }* @src.tasks_visible, i64 0, i32 1), align 8
  %24 = load i64, i64* @src.task_head, align 8
  %25 = bitcast { i64, i64 }* %6 to %..string*
  store %..string { i8* getelementptr inbounds ([54 x i8], [54 x i8]* @"csbs$30e", i64 0, i64 0), i64 53 }, %..string* %25, align 8
  %26 = load { i64, i64 }, { i64, i64 }* %6, align 8
  call void @runtime.bounds_check_error({ i64, i64 } %26, i32 139, i32 25, i64 %24, i64 %23)
  %27 = getelementptr %src.Task*, %src.Task** %22, i64 %24
  %28 = load %src.Task*, %src.Task** %27, align 8
  store %src.Task* %28, %src.Task** %5, align 8
  %29 = load %src.Task*, %src.Task** %5, align 8
  %30 = getelementptr inbounds %src.Task, %src.Task* %29, i32 0, i32 0
  %31 = getelementptr inbounds %src.Element, %src.Element* %30, i32 0, i32 5
  %32 = getelementptr inbounds %src.Rect, %src.Rect* %31, i32 0, i32 2
  %33 = load float, float* %32, align 4
  store float %33, float* %3, align 4
  %34 = load %src.Task*, %src.Task** %5, align 8
  %35 = getelementptr inbounds %src.Task, %src.Task* %34, i32 0, i32 0
  %36 = getelementptr inbounds %src.Element, %src.Element* %35, i32 0, i32 5
  %37 = getelementptr inbounds %src.Rect, %src.Rect* %36, i32 0, i32 3
  %38 = load float, float* %37, align 4
  store float %38, float* %4, align 4
  %39 = load %src.Pan_Camera*, %src.Pan_Camera** %0, align 8
  %40 = load %src.Mode_Panel*, %src.Mode_Panel** @src.mode_panel, align 8
  %41 = getelementptr inbounds %src.Mode_Panel, %src.Mode_Panel* %40, i32 0, i32 0
  %42 = getelementptr inbounds %src.Element, %src.Element* %41, i32 0, i32 5
  %43 = load %src.Rect, %src.Rect* %42, align 4
  %44 = load float, float* %3, align 4
  %45 = load float, float* %4, align 4
  %46 = bitcast { <2 x float>, <2 x float> }* %7 to %src.Rect*
  store %src.Rect %43, %src.Rect* %46, align 4
  %47 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %7, align 8
  %48 = bitcast %runtime.Context* %8 to i8*
  %49 = call { float, i64 } @src.cam_bounds_check_y(%src.Pan_Camera* %39, { <2 x float>, <2 x float> } %47, float %44, float %45, i8* %48)
  %50 = extractvalue { float, i64 } %49, 0
  %51 = extractvalue { float, i64 } %49, 1
  store float %50, float* %1, align 4
  store i64 %51, i64* %2, align 8
  br label %if.done2

if.done2:                                         ; preds = %if.then1, %if.done
  %52 = load i64, i64* %2, align 8
  %53 = icmp ne i64 %52, 0
  %54 = zext i1 %53 to i8
  %55 = trunc i8 %54 to i1
  br i1 %55, label %if.then3, label %if.done4

if.then3:                                         ; preds = %if.done2
  %56 = load %src.Mode_Panel*, %src.Mode_Panel** @src.mode_panel, align 8
  %57 = getelementptr inbounds %src.Mode_Panel, %src.Mode_Panel* %56, i32 0, i32 0
  %58 = bitcast %runtime.Context* %8 to i8*
  call void @src.element_animation_start(%src.Element* %57, i8* %58)
  %59 = load %src.Pan_Camera*, %src.Pan_Camera** %0, align 8
  %60 = getelementptr inbounds %src.Pan_Camera, %src.Pan_Camera* %59, i32 0, i32 8
  %61 = getelementptr inbounds %src.Pan_Camera_Animation, %src.Pan_Camera_Animation* %60, i32 0, i32 0
  store i8 1, i8* %61, align 1
  %62 = load %src.Pan_Camera*, %src.Pan_Camera** %0, align 8
  %63 = getelementptr inbounds %src.Pan_Camera, %src.Pan_Camera* %62, i32 0, i32 8
  %64 = getelementptr inbounds %src.Pan_Camera_Animation, %src.Pan_Camera_Animation* %63, i32 0, i32 2
  %65 = load i64, i64* %2, align 8
  store i64 %65, i64* %64, align 8
  %66 = load %src.Pan_Camera*, %src.Pan_Camera** %0, align 8
  %67 = getelementptr inbounds %src.Pan_Camera, %src.Pan_Camera* %66, i32 0, i32 8
  %68 = getelementptr inbounds %src.Pan_Camera_Animation, %src.Pan_Camera_Animation* %67, i32 0, i32 3
  %69 = load float, float* %1, align 4
  store float %69, float* %68, align 4
  br label %if.done4

if.done4:                                         ; preds = %if.then3, %if.done2
  ret void
}

define internal void @src.mode_panel_cam_bounds_check_x(i1 zeroext %0, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %1 = alloca i8, align 1
  %2 = alloca %src.Pan_Camera*, align 8
  %3 = alloca float, align 4
  %4 = alloca i64, align 8
  %5 = alloca float, align 4
  %6 = alloca float, align 4
  %7 = alloca { <2 x float>, <2 x float> }, align 8
  %8 = alloca i64, align 8
  %9 = alloca %src.Task*, align 8
  %10 = alloca { i64, i64 }, align 8
  %11 = alloca %src.Rect, align 4
  %12 = alloca { <2 x float>, <2 x float> }, align 8
  %13 = alloca { <2 x float>, <2 x float> }, align 8
  %14 = alloca { <2 x float>, <2 x float> }, align 8
  br label %entry

entry:                                            ; preds = %decls
  %15 = zext i1 %0 to i8
  store i8 %15, i8* %1, align 1
  %16 = bitcast i8* %__.context_ptr to %runtime.Context*
  %17 = bitcast %runtime.Context* %16 to i8*
  %18 = call %src.Pan_Camera* @src.mode_panel_cam(i8* %17)
  store %src.Pan_Camera* %18, %src.Pan_Camera** %2, align 8
  %19 = load %src.Pan_Camera*, %src.Pan_Camera** %2, align 8
  %20 = getelementptr inbounds %src.Pan_Camera, %src.Pan_Camera* %19, i32 0, i32 6
  %21 = load i8, i8* %20, align 1
  %22 = trunc i8 %21 to i1
  br i1 %22, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  ret void

if.done:                                          ; preds = %entry
  store float 0.000000e+00, float* %3, align 4
  store i64 0, i64* %4, align 8
  %23 = load float, float* getelementptr inbounds (%src.Rect, %src.Rect* @src.caret_rect, i64 0, i32 0), align 4
  store float %23, float* %5, align 4
  %24 = load float, float* getelementptr inbounds (%src.Rect, %src.Rect* @src.caret_rect, i64 0, i32 1), align 4
  store float %24, float* %6, align 4
  %25 = load %src.Mode_Panel*, %src.Mode_Panel** @src.mode_panel, align 8
  %26 = getelementptr inbounds %src.Mode_Panel, %src.Mode_Panel* %25, i32 0, i32 1
  %27 = load i64, i64* %26, align 8
  switch i64 %27, label %switch.done [
    i64 0, label %switch.case.body
    i64 1, label %switch.case.body3
  ]

switch.case.body:                                 ; preds = %if.done
  %28 = bitcast %runtime.Context* %16 to i8*
  %29 = call i8 @src.options_wrapping(i8* %28)
  %30 = trunc i8 %29 to i1
  br i1 %30, label %if.done2, label %if.then1

if.then1:                                         ; preds = %switch.case.body
  %31 = load %src.Pan_Camera*, %src.Pan_Camera** %2, align 8
  %32 = load %src.Mode_Panel*, %src.Mode_Panel** @src.mode_panel, align 8
  %33 = getelementptr inbounds %src.Mode_Panel, %src.Mode_Panel* %32, i32 0, i32 0
  %34 = getelementptr inbounds %src.Element, %src.Element* %33, i32 0, i32 5
  %35 = load %src.Rect, %src.Rect* %34, align 4
  %36 = load float, float* %5, align 4
  %37 = load float, float* %6, align 4
  %38 = bitcast { <2 x float>, <2 x float> }* %7 to %src.Rect*
  store %src.Rect %35, %src.Rect* %38, align 4
  %39 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %7, align 8
  %40 = bitcast %runtime.Context* %16 to i8*
  %41 = call { float, i64 } @src.cam_bounds_check_x(%src.Pan_Camera* %31, { <2 x float>, <2 x float> } %39, float %36, float %37, i8* %40)
  %42 = extractvalue { float, i64 } %41, 0
  %43 = extractvalue { float, i64 } %41, 1
  store float %42, float* %3, align 4
  store i64 %43, i64* %4, align 8
  br label %if.done2

if.done2:                                         ; preds = %if.then1, %switch.case.body
  br label %switch.done

switch.case.body3:                                ; preds = %if.done
  %44 = load i64, i64* @src.task_head, align 8
  store i64 %44, i64* %8, align 8
  store %src.Task* null, %src.Task** %9, align 8
  br label %for.loop

for.loop:                                         ; preds = %for.body, %switch.case.body3
  %45 = load %src.Task*, %src.Task** %9, align 8
  %46 = icmp eq %src.Task* %45, null
  %47 = zext i1 %46 to i8
  %48 = trunc i8 %47 to i1
  br i1 %48, label %for.body, label %cmp.or

cmp.or:                                           ; preds = %for.loop
  %49 = load %src.Task*, %src.Task** %9, align 8
  %50 = getelementptr inbounds %src.Task, %src.Task* %49, i32 0, i32 8
  %51 = load i64, i64* %50, align 8
  %52 = icmp ne i64 %51, 0
  %53 = zext i1 %52 to i8
  %54 = trunc i8 %53 to i1
  br i1 %54, label %cmp.and, label %for.done

cmp.and:                                          ; preds = %cmp.or
  %55 = load i64, i64* %8, align 8
  %56 = icmp sge i64 %55, 0
  %57 = zext i1 %56 to i8
  %58 = trunc i8 %57 to i1
  br i1 %58, label %for.body, label %for.done

for.body:                                         ; preds = %cmp.and, %for.loop
  %59 = load { %src.Task**, i64, i64, %runtime.Allocator }, { %src.Task**, i64, i64, %runtime.Allocator }* @src.tasks_visible, align 8
  %60 = load %src.Task**, %src.Task*** getelementptr inbounds ({ %src.Task**, i64, i64, %runtime.Allocator }, { %src.Task**, i64, i64, %runtime.Allocator }* @src.tasks_visible, i64 0, i32 0), align 8
  %61 = load i64, i64* getelementptr inbounds ({ %src.Task**, i64, i64, %runtime.Allocator }, { %src.Task**, i64, i64, %runtime.Allocator }* @src.tasks_visible, i64 0, i32 1), align 8
  %62 = load i64, i64* %8, align 8
  %63 = bitcast { i64, i64 }* %10 to %..string*
  store %..string { i8* getelementptr inbounds ([54 x i8], [54 x i8]* @"csbs$30e", i64 0, i64 0), i64 53 }, %..string* %63, align 8
  %64 = load { i64, i64 }, { i64, i64 }* %10, align 8
  call void @runtime.bounds_check_error({ i64, i64 } %64, i32 179, i32 23, i64 %62, i64 %61)
  %65 = getelementptr %src.Task*, %src.Task** %60, i64 %62
  %66 = load %src.Task*, %src.Task** %65, align 8
  store %src.Task* %66, %src.Task** %9, align 8
  %67 = load i64, i64* %8, align 8
  %68 = sub i64 %67, 1
  store i64 %68, i64* %8, align 8
  br label %for.loop

for.done:                                         ; preds = %cmp.and, %cmp.or
  %69 = load %src.Task*, %src.Task** %9, align 8
  %70 = getelementptr inbounds %src.Task, %src.Task* %69, i32 0, i32 23
  %71 = load %src.Rect, %src.Rect* %70, align 4
  store %src.Rect zeroinitializer, %src.Rect* %11, align 4
  %72 = bitcast %src.Rect* %70 to i8*
  %73 = bitcast %src.Rect* %11 to i8*
  %74 = call i8 @runtime.memory_equal(i8* %72, i8* %73, i64 16)
  %75 = icmp eq i8 %74, 0
  %76 = zext i1 %75 to i8
  %77 = trunc i8 %76 to i1
  br i1 %77, label %if.then4, label %if.done7

if.then4:                                         ; preds = %for.done
  %78 = load %src.Task*, %src.Task** %9, align 8
  %79 = getelementptr inbounds %src.Task, %src.Task* %78, i32 0, i32 23
  %80 = load %src.Rect, %src.Rect* %79, align 4
  %81 = bitcast { <2 x float>, <2 x float> }* %12 to %src.Rect*
  store %src.Rect %80, %src.Rect* %81, align 4
  %82 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %12, align 8
  %83 = bitcast %runtime.Context* %16 to i8*
  %84 = call float @src.rect_width({ <2 x float>, <2 x float> } %82, i8* %83)
  %85 = load %src.Mode_Panel*, %src.Mode_Panel** @src.mode_panel, align 8
  %86 = getelementptr inbounds %src.Mode_Panel, %src.Mode_Panel* %85, i32 0, i32 0
  %87 = getelementptr inbounds %src.Element, %src.Element* %86, i32 0, i32 5
  %88 = load %src.Rect, %src.Rect* %87, align 4
  %89 = bitcast { <2 x float>, <2 x float> }* %13 to %src.Rect*
  store %src.Rect %88, %src.Rect* %89, align 4
  %90 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %13, align 8
  %91 = bitcast %runtime.Context* %16 to i8*
  %92 = call float @src.rect_width({ <2 x float>, <2 x float> } %90, i8* %91)
  %93 = load %src.Pan_Camera*, %src.Pan_Camera** %2, align 8
  %94 = getelementptr inbounds %src.Pan_Camera, %src.Pan_Camera* %93, i32 0, i32 4
  %95 = load float, float* %94, align 4
  %96 = fmul float %95, 2.000000e+00
  %97 = fsub float %92, %96
  %98 = fcmp olt float %84, %97
  %99 = zext i1 %98 to i8
  %100 = trunc i8 %99 to i1
  br i1 %100, label %if.then5, label %if.done6

if.then5:                                         ; preds = %if.then4
  %101 = load %src.Task*, %src.Task** %9, align 8
  %102 = getelementptr inbounds %src.Task, %src.Task* %101, i32 0, i32 23
  %103 = getelementptr inbounds %src.Rect, %src.Rect* %102, i32 0, i32 0
  %104 = load float, float* %103, align 4
  store float %104, float* %5, align 4
  %105 = load %src.Task*, %src.Task** %9, align 8
  %106 = getelementptr inbounds %src.Task, %src.Task* %105, i32 0, i32 23
  %107 = getelementptr inbounds %src.Rect, %src.Rect* %106, i32 0, i32 1
  %108 = load float, float* %107, align 4
  store float %108, float* %6, align 4
  br label %if.done6

if.done6:                                         ; preds = %if.then5, %if.then4
  %109 = load %src.Pan_Camera*, %src.Pan_Camera** %2, align 8
  %110 = load %src.Mode_Panel*, %src.Mode_Panel** @src.mode_panel, align 8
  %111 = getelementptr inbounds %src.Mode_Panel, %src.Mode_Panel* %110, i32 0, i32 0
  %112 = getelementptr inbounds %src.Element, %src.Element* %111, i32 0, i32 5
  %113 = load %src.Rect, %src.Rect* %112, align 4
  %114 = load float, float* %5, align 4
  %115 = load float, float* %6, align 4
  %116 = bitcast { <2 x float>, <2 x float> }* %14 to %src.Rect*
  store %src.Rect %113, %src.Rect* %116, align 4
  %117 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %14, align 8
  %118 = bitcast %runtime.Context* %16 to i8*
  %119 = call { float, i64 } @src.cam_bounds_check_x(%src.Pan_Camera* %109, { <2 x float>, <2 x float> } %117, float %114, float %115, i8* %118)
  %120 = extractvalue { float, i64 } %119, 0
  %121 = extractvalue { float, i64 } %119, 1
  store float %120, float* %3, align 4
  store i64 %121, i64* %4, align 8
  br label %if.done7

if.done7:                                         ; preds = %if.done6, %for.done
  br label %switch.done

switch.done:                                      ; preds = %if.done7, %if.done2, %if.done
  %122 = load i8, i8* %1, align 1
  %123 = trunc i8 %122 to i1
  br i1 %123, label %if.then8, label %if.else

if.then8:                                         ; preds = %switch.done
  %124 = load i64, i64* %4, align 8
  %125 = icmp eq i64 %124, 0
  %126 = zext i1 %125 to i8
  %127 = trunc i8 %126 to i1
  br i1 %127, label %if.then9, label %if.done10

if.then9:                                         ; preds = %if.then8
  %128 = load %src.Pan_Camera*, %src.Pan_Camera** %2, align 8
  %129 = getelementptr inbounds %src.Pan_Camera, %src.Pan_Camera* %128, i32 0, i32 9
  %130 = getelementptr inbounds %src.Pan_Camera_Animation, %src.Pan_Camera_Animation* %129, i32 0, i32 0
  store i8 0, i8* %130, align 1
  br label %if.done10

if.done10:                                        ; preds = %if.then9, %if.then8
  br label %if.done13

if.else:                                          ; preds = %switch.done
  %131 = load i64, i64* %4, align 8
  %132 = icmp ne i64 %131, 0
  %133 = zext i1 %132 to i8
  %134 = trunc i8 %133 to i1
  br i1 %134, label %if.then11, label %if.done12

if.then11:                                        ; preds = %if.else
  %135 = load %src.Mode_Panel*, %src.Mode_Panel** @src.mode_panel, align 8
  %136 = getelementptr inbounds %src.Mode_Panel, %src.Mode_Panel* %135, i32 0, i32 0
  %137 = bitcast %runtime.Context* %16 to i8*
  call void @src.element_animation_start(%src.Element* %136, i8* %137)
  %138 = load %src.Pan_Camera*, %src.Pan_Camera** %2, align 8
  %139 = getelementptr inbounds %src.Pan_Camera, %src.Pan_Camera* %138, i32 0, i32 9
  %140 = getelementptr inbounds %src.Pan_Camera_Animation, %src.Pan_Camera_Animation* %139, i32 0, i32 0
  store i8 1, i8* %140, align 1
  %141 = load %src.Pan_Camera*, %src.Pan_Camera** %2, align 8
  %142 = getelementptr inbounds %src.Pan_Camera, %src.Pan_Camera* %141, i32 0, i32 9
  %143 = getelementptr inbounds %src.Pan_Camera_Animation, %src.Pan_Camera_Animation* %142, i32 0, i32 2
  %144 = load i64, i64* %4, align 8
  store i64 %144, i64* %143, align 8
  %145 = load %src.Pan_Camera*, %src.Pan_Camera** %2, align 8
  %146 = getelementptr inbounds %src.Pan_Camera, %src.Pan_Camera* %145, i32 0, i32 9
  %147 = getelementptr inbounds %src.Pan_Camera_Animation, %src.Pan_Camera_Animation* %146, i32 0, i32 3
  %148 = load float, float* %3, align 4
  store float %148, float* %147, align 4
  br label %if.done12

if.done12:                                        ; preds = %if.then11, %if.else
  br label %if.done13

if.done13:                                        ; preds = %if.done12, %if.done10
  ret void
}

define internal void @src.cam_center_by_height_state(%src.Pan_Camera* %0, { <2 x float>, <2 x float> } %1, float %2, float %3, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %4 = alloca %src.Pan_Camera*, align 8
  %5 = alloca %src.Rect, align 8
  %6 = alloca float, align 4
  %7 = alloca float, align 4
  %8 = alloca float, align 4
  %9 = alloca float, align 4
  %10 = alloca float, align 4
  br label %entry

entry:                                            ; preds = %decls
  store %src.Pan_Camera* %0, %src.Pan_Camera** %4, align 8
  %11 = bitcast %src.Rect* %5 to { <2 x float>, <2 x float> }*
  store { <2 x float>, <2 x float> } %1, { <2 x float>, <2 x float> }* %11, align 8
  %12 = load %src.Rect, %src.Rect* %5, align 4
  store float %2, float* %6, align 4
  store float %3, float* %7, align 4
  %13 = bitcast i8* %__.context_ptr to %runtime.Context*
  %14 = load %src.Pan_Camera*, %src.Pan_Camera** %4, align 8
  %15 = getelementptr inbounds %src.Pan_Camera, %src.Pan_Camera* %14, i32 0, i32 6
  %16 = load i8, i8* %15, align 1
  %17 = trunc i8 %16 to i1
  br i1 %17, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  ret void

if.done:                                          ; preds = %entry
  %18 = load %src.Rect, %src.Rect* %5, align 4
  %19 = bitcast %src.Rect* %5 to { <2 x float>, <2 x float> }*
  %20 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %19, align 8
  %21 = bitcast %runtime.Context* %13 to i8*
  %22 = call float @src.rect_height({ <2 x float>, <2 x float> } %20, i8* %21)
  store float %22, float* %8, align 4
  store float 0.000000e+00, float* %9, align 4
  %23 = load %src.Mode_Panel*, %src.Mode_Panel** @src.mode_panel, align 8
  %24 = getelementptr inbounds %src.Mode_Panel, %src.Mode_Panel* %23, i32 0, i32 1
  %25 = load i64, i64* %24, align 8
  switch i64 %25, label %switch.done [
    i64 0, label %switch.case.body
    i64 1, label %switch.case.body3
  ]

switch.case.body:                                 ; preds = %if.done
  %26 = load float, float* %7, align 4
  %27 = fcmp one float %26, -1.000000e+00
  %28 = zext i1 %27 to i8
  %29 = trunc i8 %28 to i1
  br i1 %29, label %cmp.and, label %if.else

cmp.and:                                          ; preds = %switch.case.body
  %30 = load float, float* %7, align 4
  %31 = load float, float* %8, align 4
  %32 = fcmp olt float %30, %31
  %33 = zext i1 %32 to i8
  %34 = trunc i8 %33 to i1
  br i1 %34, label %if.then1, label %if.else

if.then1:                                         ; preds = %cmp.and
  %35 = load float, float* %8, align 4
  %36 = fdiv float %35, 2.000000e+00
  %37 = load float, float* %7, align 4
  %38 = fdiv float %37, 2.000000e+00
  %39 = fsub float %36, %38
  store float %39, float* %9, align 4
  br label %if.done2

if.else:                                          ; preds = %cmp.and, %switch.case.body
  %40 = load float, float* %6, align 4
  %41 = load %src.Pan_Camera*, %src.Pan_Camera** %4, align 8
  %42 = getelementptr inbounds %src.Pan_Camera, %src.Pan_Camera* %41, i32 0, i32 3
  %43 = load float, float* %42, align 4
  %44 = fsub float %40, %43
  store float %44, float* %10, align 4
  %45 = load float, float* %8, align 4
  %46 = fdiv float %45, 2.000000e+00
  %47 = load float, float* %10, align 4
  %48 = fsub float %46, %47
  store float %48, float* %9, align 4
  br label %if.done2

if.done2:                                         ; preds = %if.else, %if.then1
  br label %switch.done

switch.case.body3:                                ; preds = %if.done
  br label %switch.done

switch.done:                                      ; preds = %switch.case.body3, %if.done2, %if.done
  %49 = load %src.Mode_Panel*, %src.Mode_Panel** @src.mode_panel, align 8
  %50 = getelementptr inbounds %src.Mode_Panel, %src.Mode_Panel* %49, i32 0, i32 0
  %51 = bitcast %runtime.Context* %13 to i8*
  call void @src.element_animation_start(%src.Element* %50, i8* %51)
  %52 = load %src.Pan_Camera*, %src.Pan_Camera** %4, align 8
  %53 = getelementptr inbounds %src.Pan_Camera, %src.Pan_Camera* %52, i32 0, i32 8
  %54 = getelementptr inbounds %src.Pan_Camera_Animation, %src.Pan_Camera_Animation* %53, i32 0, i32 0
  store i8 1, i8* %54, align 1
  %55 = load %src.Pan_Camera*, %src.Pan_Camera** %4, align 8
  %56 = getelementptr inbounds %src.Pan_Camera, %src.Pan_Camera* %55, i32 0, i32 8
  %57 = getelementptr inbounds %src.Pan_Camera_Animation, %src.Pan_Camera_Animation* %56, i32 0, i32 2
  store i64 100, i64* %57, align 8
  %58 = load %src.Pan_Camera*, %src.Pan_Camera** %4, align 8
  %59 = getelementptr inbounds %src.Pan_Camera, %src.Pan_Camera* %58, i32 0, i32 8
  %60 = getelementptr inbounds %src.Pan_Camera_Animation, %src.Pan_Camera_Animation* %59, i32 0, i32 3
  %61 = load float, float* %9, align 4
  store float %61, float* %60, align 4
  ret void
}

define internal i64 @src.color_rand_non_alpha(%rand.Rand* %0, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %1 = alloca %rand.Rand*, align 8
  %2 = alloca [4 x i8], align 8
  br label %entry

entry:                                            ; preds = %decls
  store %rand.Rand* %0, %rand.Rand** %1, align 8
  %3 = bitcast i8* %__.context_ptr to %runtime.Context*
  %4 = bitcast [4 x i8]* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* %4, i8 0, i64 4, i1 false)
  store [4 x i8] c"\00\00\00\FF", [4 x i8]* %2, align 1
  %5 = bitcast %runtime.Context* %3 to i8*
  %6 = call float @rand.float32(%rand.Rand* null, i8* %5)
  %7 = fmul float %6, 2.550000e+02
  %8 = fptoui float %7 to i8
  %9 = bitcast %runtime.Context* %3 to i8*
  %10 = call float @rand.float32(%rand.Rand* null, i8* %9)
  %11 = fmul float %10, 2.550000e+02
  %12 = fptoui float %11 to i8
  %13 = bitcast %runtime.Context* %3 to i8*
  %14 = call float @rand.float32(%rand.Rand* null, i8* %13)
  %15 = fmul float %14, 2.550000e+02
  %16 = fptoui float %15 to i8
  %17 = getelementptr [4 x i8], [4 x i8]* %2, i64 0, i64 0
  %18 = getelementptr [4 x i8], [4 x i8]* %2, i64 0, i64 1
  %19 = getelementptr [4 x i8], [4 x i8]* %2, i64 0, i64 2
  store i8 %8, i8* %17, align 1
  store i8 %12, i8* %18, align 1
  store i8 %16, i8* %19, align 1
  %20 = load [4 x i8], [4 x i8]* %2, align 1
  %21 = bitcast [4 x i8]* %2 to i64*
  %22 = load i64, i64* %21, align 8
  ret i64 %22
}

define internal i64 @src.color_alpha(i64 %0, float %1, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %2 = alloca [4 x i8], align 8
  %3 = alloca float, align 4
  %4 = alloca [4 x i8], align 8
  br label %entry

entry:                                            ; preds = %decls
  %5 = bitcast [4 x i8]* %2 to i64*
  store i64 %0, i64* %5, align 8
  %6 = load [4 x i8], [4 x i8]* %2, align 1
  store float %1, float* %3, align 4
  %7 = bitcast [4 x i8]* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* %7, i8 0, i64 4, i1 false)
  %8 = bitcast i8* %__.context_ptr to %runtime.Context*
  %9 = load [4 x i8], [4 x i8]* %2, align 1
  store [4 x i8] %9, [4 x i8]* %4, align 1
  %10 = getelementptr [4 x i8], [4 x i8]* %4, i64 0, i64 3
  %11 = load float, float* %3, align 4
  %12 = fmul float %11, 2.550000e+02
  %13 = fptoui float %12 to i8
  store i8 %13, i8* %10, align 1
  %14 = load [4 x i8], [4 x i8]* %4, align 1
  store [4 x i8] %14, [4 x i8]* %4, align 1
  %15 = bitcast [4 x i8]* %4 to i64*
  %16 = load i64, i64* %15, align 8
  ret i64 %16
}

define internal i64 @src.color_blend(i64 %0, i64 %1, float %2, i1 zeroext %3, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %4 = alloca [4 x i8], align 8
  %5 = alloca [4 x i8], align 8
  %6 = alloca float, align 4
  %7 = alloca i8, align 1
  %8 = alloca float, align 4
  %9 = alloca float, align 4
  %10 = alloca float, align 4
  %11 = alloca float, align 4
  %12 = alloca [4 x i8], align 8
  br label %entry

entry:                                            ; preds = %decls
  %13 = bitcast [4 x i8]* %4 to i64*
  store i64 %0, i64* %13, align 8
  %14 = load [4 x i8], [4 x i8]* %4, align 1
  %15 = bitcast [4 x i8]* %5 to i64*
  store i64 %1, i64* %15, align 8
  %16 = load [4 x i8], [4 x i8]* %5, align 1
  store float %2, float* %6, align 4
  %17 = zext i1 %3 to i8
  store i8 %17, i8* %7, align 1
  %18 = bitcast i8* %__.context_ptr to %runtime.Context*
  %19 = load float, float* %6, align 4
  %20 = getelementptr [4 x i8], [4 x i8]* %4, i64 0, i64 0
  %21 = load i8, i8* %20, align 1
  %22 = uitofp i8 %21 to float
  %23 = fdiv float %22, 2.550000e+02
  %24 = fmul float %19, %23
  %25 = load float, float* %6, align 4
  %26 = fsub float 1.000000e+00, %25
  %27 = getelementptr [4 x i8], [4 x i8]* %5, i64 0, i64 0
  %28 = load i8, i8* %27, align 1
  %29 = uitofp i8 %28 to float
  %30 = fdiv float %29, 2.550000e+02
  %31 = fmul float %26, %30
  %32 = fadd float %24, %31
  store float %32, float* %8, align 4
  %33 = load float, float* %6, align 4
  %34 = getelementptr [4 x i8], [4 x i8]* %4, i64 0, i64 1
  %35 = load i8, i8* %34, align 1
  %36 = uitofp i8 %35 to float
  %37 = fdiv float %36, 2.550000e+02
  %38 = fmul float %33, %37
  %39 = load float, float* %6, align 4
  %40 = fsub float 1.000000e+00, %39
  %41 = getelementptr [4 x i8], [4 x i8]* %5, i64 0, i64 1
  %42 = load i8, i8* %41, align 1
  %43 = uitofp i8 %42 to float
  %44 = fdiv float %43, 2.550000e+02
  %45 = fmul float %40, %44
  %46 = fadd float %38, %45
  store float %46, float* %9, align 4
  %47 = load float, float* %6, align 4
  %48 = getelementptr [4 x i8], [4 x i8]* %4, i64 0, i64 2
  %49 = load i8, i8* %48, align 1
  %50 = uitofp i8 %49 to float
  %51 = fdiv float %50, 2.550000e+02
  %52 = fmul float %47, %51
  %53 = load float, float* %6, align 4
  %54 = fsub float 1.000000e+00, %53
  %55 = getelementptr [4 x i8], [4 x i8]* %5, i64 0, i64 2
  %56 = load i8, i8* %55, align 1
  %57 = uitofp i8 %56 to float
  %58 = fdiv float %57, 2.550000e+02
  %59 = fmul float %54, %58
  %60 = fadd float %52, %59
  store float %60, float* %10, align 4
  %61 = load float, float* %6, align 4
  %62 = getelementptr [4 x i8], [4 x i8]* %4, i64 0, i64 3
  %63 = load i8, i8* %62, align 1
  %64 = uitofp i8 %63 to float
  %65 = fdiv float %64, 2.550000e+02
  %66 = fmul float %61, %65
  %67 = load float, float* %6, align 4
  %68 = fsub float 1.000000e+00, %67
  %69 = getelementptr [4 x i8], [4 x i8]* %5, i64 0, i64 3
  %70 = load i8, i8* %69, align 1
  %71 = uitofp i8 %70 to float
  %72 = fdiv float %71, 2.550000e+02
  %73 = fmul float %68, %72
  %74 = fadd float %66, %73
  store float %74, float* %11, align 4
  %75 = bitcast [4 x i8]* %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* %75, i8 0, i64 4, i1 false)
  store [4 x i8] zeroinitializer, [4 x i8]* %12, align 1
  %76 = load float, float* %8, align 4
  %77 = fmul float %76, 2.550000e+02
  %78 = fptoui float %77 to i8
  %79 = load float, float* %9, align 4
  %80 = fmul float %79, 2.550000e+02
  %81 = fptoui float %80 to i8
  %82 = load float, float* %10, align 4
  %83 = fmul float %82, 2.550000e+02
  %84 = fptoui float %83 to i8
  %85 = load i8, i8* %7, align 1
  %86 = trunc i8 %85 to i1
  br i1 %86, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %87 = load float, float* %11, align 4
  %88 = fmul float %87, 2.550000e+02
  %89 = fptoui float %88 to i8
  br label %if.done

if.else:                                          ; preds = %entry
  br label %if.done

if.done:                                          ; preds = %if.else, %if.then
  %90 = phi i8 [ %89, %if.then ], [ -1, %if.else ]
  %91 = getelementptr [4 x i8], [4 x i8]* %12, i64 0, i64 0
  %92 = getelementptr [4 x i8], [4 x i8]* %12, i64 0, i64 1
  %93 = getelementptr [4 x i8], [4 x i8]* %12, i64 0, i64 2
  %94 = getelementptr [4 x i8], [4 x i8]* %12, i64 0, i64 3
  store i8 %78, i8* %91, align 1
  store i8 %81, i8* %92, align 1
  store i8 %84, i8* %93, align 1
  store i8 %90, i8* %94, align 1
  %95 = load [4 x i8], [4 x i8]* %12, align 1
  %96 = bitcast [4 x i8]* %12 to i64*
  %97 = load i64, i64* %96, align 8
  ret i64 %97
}

; Function Attrs: alwaysinline
define internal i64 @src.color_from_f32(float %0, float %1, float %2, float %3, i8* noalias nocapture nonnull %__.context_ptr) #4 {
decls:
  %4 = alloca float, align 4
  %5 = alloca float, align 4
  %6 = alloca float, align 4
  %7 = alloca float, align 4
  %8 = alloca [4 x i8], align 8
  br label %entry

entry:                                            ; preds = %decls
  store float %0, float* %4, align 4
  store float %1, float* %5, align 4
  store float %2, float* %6, align 4
  store float %3, float* %7, align 4
  %9 = bitcast i8* %__.context_ptr to %runtime.Context*
  %10 = bitcast [4 x i8]* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* %10, i8 0, i64 4, i1 false)
  store [4 x i8] zeroinitializer, [4 x i8]* %8, align 1
  %11 = load float, float* %4, align 4
  %12 = fmul float %11, 2.550000e+02
  %13 = fptoui float %12 to i8
  %14 = load float, float* %5, align 4
  %15 = fmul float %14, 2.550000e+02
  %16 = fptoui float %15 to i8
  %17 = load float, float* %6, align 4
  %18 = fmul float %17, 2.550000e+02
  %19 = fptoui float %18 to i8
  %20 = load float, float* %7, align 4
  %21 = fmul float %20, 2.550000e+02
  %22 = fptoui float %21 to i8
  %23 = getelementptr [4 x i8], [4 x i8]* %8, i64 0, i64 0
  %24 = getelementptr [4 x i8], [4 x i8]* %8, i64 0, i64 1
  %25 = getelementptr [4 x i8], [4 x i8]* %8, i64 0, i64 2
  %26 = getelementptr [4 x i8], [4 x i8]* %8, i64 0, i64 3
  store i8 %13, i8* %23, align 1
  store i8 %16, i8* %24, align 1
  store i8 %19, i8* %25, align 1
  store i8 %22, i8* %26, align 1
  %27 = load [4 x i8], [4 x i8]* %8, align 1
  %28 = bitcast [4 x i8]* %8 to i64*
  %29 = load i64, i64* %28, align 8
  ret i64 %29
}

define internal i64 @src.color_to_bw(i64 %0, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %1 = alloca [4 x i8], align 8
  %2 = alloca i64, align 8
  br label %entry

entry:                                            ; preds = %decls
  %3 = bitcast [4 x i8]* %1 to i64*
  store i64 %0, i64* %3, align 8
  %4 = load [4 x i8], [4 x i8]* %1, align 1
  %5 = bitcast i8* %__.context_ptr to %runtime.Context*
  %6 = getelementptr [4 x i8], [4 x i8]* %1, i64 0, i64 0
  %7 = load i8, i8* %6, align 1
  %8 = getelementptr [4 x i8], [4 x i8]* %1, i64 0, i64 1
  %9 = load i8, i8* %8, align 1
  %10 = icmp ugt i8 %7, %9
  %11 = select i1 %10, i8 %7, i8 %9
  %12 = getelementptr [4 x i8], [4 x i8]* %1, i64 0, i64 2
  %13 = load i8, i8* %12, align 1
  %14 = icmp ugt i8 %11, %13
  %15 = select i1 %14, i8 %11, i8 %13
  %16 = icmp ult i8 %15, 125
  %17 = zext i1 %16 to i8
  %18 = trunc i8 %17 to i1
  br i1 %18, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  br label %if.done

if.else:                                          ; preds = %entry
  br label %if.done

if.done:                                          ; preds = %if.else, %if.then
  %19 = phi [4 x i8] [ c"\FF\FF\FF\FF", %if.then ], [ c"\00\00\00\FF", %if.else ]
  %20 = bitcast i64* %2 to [4 x i8]*
  store [4 x i8] %19, [4 x i8]* %20, align 1
  %21 = load i64, i64* %2, align 8
  ret i64 %21
}

define internal i64 @src.color_hsv_to_rgb(float %0, float %1, float %2, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %3 = alloca float, align 4
  %4 = alloca float, align 4
  %5 = alloca float, align 4
  %6 = alloca [4 x i8], align 1
  %7 = alloca [4 x i8], align 8
  %8 = alloca i64, align 8
  %9 = alloca float, align 4
  %10 = alloca float, align 4
  %11 = alloca float, align 4
  %12 = alloca float, align 4
  %13 = alloca [4 x i8], align 8
  %14 = alloca [4 x i8], align 8
  %15 = alloca [4 x i8], align 8
  %16 = alloca [4 x i8], align 8
  %17 = alloca [4 x i8], align 8
  %18 = alloca [4 x i8], align 8
  %19 = alloca { i64, i64 }, align 8
  %20 = alloca %runtime.Source_Code_Location, align 8
  br label %entry

entry:                                            ; preds = %decls
  store float %0, float* %3, align 4
  store float %1, float* %4, align 4
  store float %2, float* %5, align 4
  %21 = bitcast [4 x i8]* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* %21, i8 0, i64 4, i1 false)
  %22 = bitcast i8* %__.context_ptr to %runtime.Context*
  %23 = load float, float* %4, align 4
  %24 = fcmp oeq float %23, 0.000000e+00
  %25 = zext i1 %24 to i8
  %26 = trunc i8 %25 to i1
  br i1 %26, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  %27 = load float, float* %5, align 4
  %28 = load float, float* %5, align 4
  %29 = load float, float* %5, align 4
  %30 = bitcast %runtime.Context* %22 to i8*
  %31 = call i64 @src.color_from_f32(float %27, float %28, float %29, float 1.000000e+00, i8* %30)
  %32 = bitcast [4 x i8]* %7 to i64*
  store i64 %31, i64* %32, align 8
  %33 = load [4 x i8], [4 x i8]* %7, align 1
  store [4 x i8] %33, [4 x i8]* %6, align 1
  %34 = bitcast [4 x i8]* %7 to i64*
  %35 = load i64, i64* %34, align 8
  ret i64 %35

if.done:                                          ; preds = %entry
  %36 = load float, float* %3, align 4
  %37 = fmul float %36, 6.000000e+00
  %38 = fptosi float %37 to i64
  store i64 %38, i64* %8, align 8
  %39 = load float, float* %3, align 4
  %40 = fmul float %39, 6.000000e+00
  %41 = load i64, i64* %8, align 8
  %42 = sitofp i64 %41 to float
  %43 = fsub float %40, %42
  store float %43, float* %9, align 4
  %44 = load float, float* %5, align 4
  %45 = load float, float* %4, align 4
  %46 = fsub float 1.000000e+00, %45
  %47 = fmul float %44, %46
  store float %47, float* %10, align 4
  %48 = load float, float* %5, align 4
  %49 = load float, float* %4, align 4
  %50 = load float, float* %9, align 4
  %51 = fmul float %49, %50
  %52 = fsub float 1.000000e+00, %51
  %53 = fmul float %48, %52
  store float %53, float* %11, align 4
  %54 = load float, float* %5, align 4
  %55 = load float, float* %4, align 4
  %56 = load float, float* %9, align 4
  %57 = fsub float 1.000000e+00, %56
  %58 = fmul float %55, %57
  %59 = fsub float 1.000000e+00, %58
  %60 = fmul float %54, %59
  store float %60, float* %12, align 4
  %61 = load i64, i64* %8, align 8
  %62 = srem i64 %61, 6
  store i64 %62, i64* %8, align 8
  %63 = load i64, i64* %8, align 8
  switch i64 %63, label %switch.done [
    i64 0, label %switch.case.body
    i64 1, label %switch.case.body1
    i64 2, label %switch.case.body2
    i64 3, label %switch.case.body3
    i64 4, label %switch.case.body4
    i64 5, label %switch.case.body5
  ]

switch.case.body:                                 ; preds = %if.done
  %64 = load float, float* %5, align 4
  %65 = load float, float* %12, align 4
  %66 = load float, float* %10, align 4
  %67 = bitcast %runtime.Context* %22 to i8*
  %68 = call i64 @src.color_from_f32(float %64, float %65, float %66, float 1.000000e+00, i8* %67)
  %69 = bitcast [4 x i8]* %13 to i64*
  store i64 %68, i64* %69, align 8
  %70 = load [4 x i8], [4 x i8]* %13, align 1
  store [4 x i8] %70, [4 x i8]* %6, align 1
  %71 = bitcast [4 x i8]* %13 to i64*
  %72 = load i64, i64* %71, align 8
  ret i64 %72

switch.case.body1:                                ; preds = %if.done
  %73 = load float, float* %11, align 4
  %74 = load float, float* %5, align 4
  %75 = load float, float* %10, align 4
  %76 = bitcast %runtime.Context* %22 to i8*
  %77 = call i64 @src.color_from_f32(float %73, float %74, float %75, float 1.000000e+00, i8* %76)
  %78 = bitcast [4 x i8]* %14 to i64*
  store i64 %77, i64* %78, align 8
  %79 = load [4 x i8], [4 x i8]* %14, align 1
  store [4 x i8] %79, [4 x i8]* %6, align 1
  %80 = bitcast [4 x i8]* %14 to i64*
  %81 = load i64, i64* %80, align 8
  ret i64 %81

switch.case.body2:                                ; preds = %if.done
  %82 = load float, float* %10, align 4
  %83 = load float, float* %5, align 4
  %84 = load float, float* %12, align 4
  %85 = bitcast %runtime.Context* %22 to i8*
  %86 = call i64 @src.color_from_f32(float %82, float %83, float %84, float 1.000000e+00, i8* %85)
  %87 = bitcast [4 x i8]* %15 to i64*
  store i64 %86, i64* %87, align 8
  %88 = load [4 x i8], [4 x i8]* %15, align 1
  store [4 x i8] %88, [4 x i8]* %6, align 1
  %89 = bitcast [4 x i8]* %15 to i64*
  %90 = load i64, i64* %89, align 8
  ret i64 %90

switch.case.body3:                                ; preds = %if.done
  %91 = load float, float* %10, align 4
  %92 = load float, float* %11, align 4
  %93 = load float, float* %5, align 4
  %94 = bitcast %runtime.Context* %22 to i8*
  %95 = call i64 @src.color_from_f32(float %91, float %92, float %93, float 1.000000e+00, i8* %94)
  %96 = bitcast [4 x i8]* %16 to i64*
  store i64 %95, i64* %96, align 8
  %97 = load [4 x i8], [4 x i8]* %16, align 1
  store [4 x i8] %97, [4 x i8]* %6, align 1
  %98 = bitcast [4 x i8]* %16 to i64*
  %99 = load i64, i64* %98, align 8
  ret i64 %99

switch.case.body4:                                ; preds = %if.done
  %100 = load float, float* %12, align 4
  %101 = load float, float* %10, align 4
  %102 = load float, float* %5, align 4
  %103 = bitcast %runtime.Context* %22 to i8*
  %104 = call i64 @src.color_from_f32(float %100, float %101, float %102, float 1.000000e+00, i8* %103)
  %105 = bitcast [4 x i8]* %17 to i64*
  store i64 %104, i64* %105, align 8
  %106 = load [4 x i8], [4 x i8]* %17, align 1
  store [4 x i8] %106, [4 x i8]* %6, align 1
  %107 = bitcast [4 x i8]* %17 to i64*
  %108 = load i64, i64* %107, align 8
  ret i64 %108

switch.case.body5:                                ; preds = %if.done
  %109 = load float, float* %5, align 4
  %110 = load float, float* %10, align 4
  %111 = load float, float* %11, align 4
  %112 = bitcast %runtime.Context* %22 to i8*
  %113 = call i64 @src.color_from_f32(float %109, float %110, float %111, float 1.000000e+00, i8* %112)
  %114 = bitcast [4 x i8]* %18 to i64*
  store i64 %113, i64* %114, align 8
  %115 = load [4 x i8], [4 x i8]* %18, align 1
  store [4 x i8] %115, [4 x i8]* %6, align 1
  %116 = bitcast [4 x i8]* %18 to i64*
  %117 = load i64, i64* %116, align 8
  ret i64 %117

switch.done:                                      ; preds = %if.done
  %118 = bitcast { i64, i64 }* %19 to %..string*
  store %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$30f", i64 0, i64 0), i64 3 }, %..string* %118, align 8
  %119 = load { i64, i64 }, { i64, i64 }* %19, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([56 x i8], [56 x i8]* @"csbs$310", i64 0, i64 0), i64 55 }, i32 84, i32 2, %..string { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"csbs$311", i64 0, i64 0), i64 16 } }, %runtime.Source_Code_Location* %20, align 8
  %120 = bitcast %runtime.Context* %22 to i8*
  call void @runtime.unimplemented({ i64, i64 } %119, %runtime.Source_Code_Location* %20, i8* %120)
  unreachable
}

define internal void @src.key_combination_check_click(%src.Element* %0, i8* %1, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %2 = alloca %src.Element*, align 8
  %3 = alloca i8*, align 8
  %4 = alloca %..string, align 8
  %5 = alloca { i64, i64 }, align 8
  %6 = alloca { i64, i64 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Element* %0, %src.Element** %2, align 8
  store i8* %1, i8** %3, align 8
  %7 = bitcast i8* %__.context_ptr to %runtime.Context*
  %8 = load i8*, i8** %3, align 8
  %9 = bitcast i8* %8 to %..string*
  %10 = load %..string, %..string* %9, align 8
  store %..string %10, %..string* %4, align 8
  %11 = load %src.Element*, %src.Element** %2, align 8
  %12 = getelementptr inbounds %src.Element, %src.Element* %11, i32 0, i32 4
  %13 = load %src.Window*, %src.Window** %12, align 8
  %14 = getelementptr inbounds %src.Window, %src.Window* %13, i32 0, i32 4
  %15 = load %src.Element*, %src.Element** %14, align 8
  %16 = load %src.Element*, %src.Element** %2, align 8
  %17 = icmp eq %src.Element* %15, %16
  %18 = zext i1 %17 to i8
  %19 = trunc i8 %18 to i1
  br i1 %19, label %if.then, label %if.done2

if.then:                                          ; preds = %entry
  %20 = load %..string, %..string* %4, align 8
  %21 = bitcast %..string* %4 to { i64, i64 }*
  %22 = load { i64, i64 }, { i64, i64 }* %21, align 8
  %23 = bitcast { i64, i64 }* %5 to %..string*
  store %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$312", i64 0, i64 0), i64 5 }, %..string* %23, align 8
  %24 = load { i64, i64 }, { i64, i64 }* %5, align 8
  %25 = call i8 @runtime.string_eq({ i64, i64 } %22, { i64, i64 } %24)
  %26 = trunc i8 %25 to i1
  br i1 %26, label %if.then1, label %cmp.or

cmp.or:                                           ; preds = %if.then
  %27 = load %..string, %..string* %4, align 8
  %28 = bitcast %..string* %4 to { i64, i64 }*
  %29 = load { i64, i64 }, { i64, i64 }* %28, align 8
  %30 = bitcast { i64, i64 }* %6 to %..string*
  store %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$313", i64 0, i64 0), i64 6 }, %..string* %30, align 8
  %31 = load { i64, i64 }, { i64, i64 }* %6, align 8
  %32 = call i8 @runtime.string_eq({ i64, i64 } %29, { i64, i64 } %31)
  %33 = trunc i8 %32 to i1
  br i1 %33, label %if.then1, label %if.done

if.then1:                                         ; preds = %cmp.or, %if.then
  %34 = load %src.Element*, %src.Element** %2, align 8
  %35 = bitcast %runtime.Context* %7 to i8*
  %36 = call i64 @src.element_message(%src.Element* %34, i64 22, i64 0, i8* null, i8* %35)
  br label %if.done

if.done:                                          ; preds = %if.then1, %cmp.or
  br label %if.done2

if.done2:                                         ; preds = %if.done, %entry
  ret void
}

define internal void @src.element_hide(%src.Element* %0, i1 zeroext %1, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %2 = alloca %src.Element*, align 8
  %3 = alloca i8, align 1
  br label %entry

entry:                                            ; preds = %decls
  store %src.Element* %0, %src.Element** %2, align 8
  %4 = zext i1 %1 to i8
  store i8 %4, i8* %3, align 1
  %5 = bitcast i8* %__.context_ptr to %runtime.Context*
  %6 = load i8, i8* %3, align 1
  %7 = trunc i8 %6 to i1
  br i1 %7, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %8 = load %src.Element*, %src.Element** %2, align 8
  %9 = getelementptr inbounds %src.Element, %src.Element* %8, i32 0, i32 0
  %10 = bitcast %runtime.Context* %5 to i8*
  call void @runtime.incl_elem-48009(i32* %9, i64 1, i8* %10)
  br label %if.done

if.else:                                          ; preds = %entry
  %11 = load %src.Element*, %src.Element** %2, align 8
  %12 = getelementptr inbounds %src.Element, %src.Element* %11, i32 0, i32 0
  %13 = bitcast %runtime.Context* %5 to i8*
  call void @runtime.excl_elem-48031(i32* %12, i64 1, i8* %13)
  br label %if.done

if.done:                                          ; preds = %if.else, %if.then
  ret void
}

define internal void @src.element_animation_start(%src.Element* %0, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %1 = alloca %src.Element*, align 8
  %2 = alloca %src.Element*, align 8
  %3 = alloca i64, align 8
  %4 = alloca %src.Element*, align 8
  %5 = alloca %runtime.Source_Code_Location, align 8
  %6 = alloca { i64, i64 }, align 8
  %7 = alloca %runtime.Source_Code_Location, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Element* %0, %src.Element** %1, align 8
  %8 = bitcast i8* %__.context_ptr to %runtime.Context*
  store %src.Element* null, %src.Element** %2, align 8
  store i64 -1, i64* %3, align 8
  br label %for.index.loop

for.index.loop:                                   ; preds = %if.done, %entry
  %9 = load i64, i64* %3, align 8
  %10 = add i64 %9, 1
  store i64 %10, i64* %3, align 8
  %11 = load i64, i64* getelementptr inbounds (%src.Global_State, %src.Global_State* @src.gs, i64 0, i32 8, i32 1), align 8
  %12 = icmp slt i64 %10, %11
  br i1 %12, label %for.index.body, label %for.index.done

for.index.body:                                   ; preds = %for.index.loop
  %13 = load i64, i64* %3, align 8
  %14 = load %src.Element**, %src.Element*** getelementptr inbounds (%src.Global_State, %src.Global_State* @src.gs, i64 0, i32 8, i32 0), align 8
  %15 = getelementptr %src.Element*, %src.Element** %14, i64 %13
  %16 = load %src.Element*, %src.Element** %15, align 8
  store %src.Element* %16, %src.Element** %4, align 8
  %17 = load %src.Element*, %src.Element** %4, align 8
  %18 = load %src.Element*, %src.Element** %1, align 8
  %19 = icmp eq %src.Element* %17, %18
  %20 = zext i1 %19 to i8
  %21 = trunc i8 %20 to i1
  br i1 %21, label %if.then, label %if.done

if.then:                                          ; preds = %for.index.body
  ret void

if.done:                                          ; preds = %for.index.body
  br label %for.index.loop

for.index.done:                                   ; preds = %for.index.loop
  %22 = load %src.Element*, %src.Element** %1, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([58 x i8], [58 x i8]* @"csbs$1a2", i64 0, i64 0), i64 57 }, i32 180, i32 2, %..string { i8* getelementptr inbounds ([24 x i8], [24 x i8]* @"csbs$314", i64 0, i64 0), i64 23 } }, %runtime.Source_Code_Location* %5, align 8
  %23 = bitcast %runtime.Context* %8 to i8*
  call void @runtime.append_elem-48056({ %src.Element**, i64, i64, %runtime.Allocator }* getelementptr inbounds (%src.Global_State, %src.Global_State* @src.gs, i64 0, i32 8), %src.Element* %22, %runtime.Source_Code_Location* %5, i8* %23)
  %24 = load %src.Element*, %src.Element** %1, align 8
  %25 = getelementptr inbounds %src.Element, %src.Element* %24, i32 0, i32 0
  %26 = load i32, i32* %25, align 4
  %27 = and i32 %26, 4
  %28 = icmp eq i32 %27, 0
  %29 = zext i1 %28 to i8
  %30 = icmp ne i8 %29, 0
  %31 = bitcast { i64, i64 }* %6 to %..string*
  store %..string zeroinitializer, %..string* %31, align 8
  %32 = load { i64, i64 }, { i64, i64 }* %6, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([58 x i8], [58 x i8]* @"csbs$1a2", i64 0, i64 0), i64 57 }, i32 181, i32 2, %..string { i8* getelementptr inbounds ([24 x i8], [24 x i8]* @"csbs$314", i64 0, i64 0), i64 23 } }, %runtime.Source_Code_Location* %7, align 8
  %33 = bitcast %runtime.Context* %8 to i8*
  call void @runtime.assert(i1 %30, { i64, i64 } %32, %runtime.Source_Code_Location* %7, i8* %33)
  ret void
}

define internal i8 @src.element_animation_stop(%src.Element* %0, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %1 = alloca %src.Element*, align 8
  %2 = alloca i64, align 8
  %3 = alloca { i64, i64 }, align 8
  %4 = alloca %runtime.Source_Code_Location, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Element* %0, %src.Element** %1, align 8
  %5 = bitcast i8* %__.context_ptr to %runtime.Context*
  br label %for.init

for.init:                                         ; preds = %entry
  %6 = load { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* getelementptr inbounds (%src.Global_State, %src.Global_State* @src.gs, i64 0, i32 8), align 8
  %7 = load i64, i64* getelementptr inbounds (%src.Global_State, %src.Global_State* @src.gs, i64 0, i32 8, i32 1), align 8
  %8 = sub i64 %7, 1
  store i64 %8, i64* %2, align 8
  br label %for.loop

for.loop:                                         ; preds = %for.post, %for.init
  %9 = load i64, i64* %2, align 8
  %10 = icmp sge i64 %9, 0
  %11 = zext i1 %10 to i8
  %12 = trunc i8 %11 to i1
  br i1 %12, label %for.body, label %for.done

for.body:                                         ; preds = %for.loop
  %13 = load { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* getelementptr inbounds (%src.Global_State, %src.Global_State* @src.gs, i64 0, i32 8), align 8
  %14 = load %src.Element**, %src.Element*** getelementptr inbounds (%src.Global_State, %src.Global_State* @src.gs, i64 0, i32 8, i32 0), align 8
  %15 = load i64, i64* getelementptr inbounds (%src.Global_State, %src.Global_State* @src.gs, i64 0, i32 8, i32 1), align 8
  %16 = load i64, i64* %2, align 8
  %17 = bitcast { i64, i64 }* %3 to %..string*
  store %..string { i8* getelementptr inbounds ([58 x i8], [58 x i8]* @"csbs$1a2", i64 0, i64 0), i64 57 }, %..string* %17, align 8
  %18 = load { i64, i64 }, { i64, i64 }* %3, align 8
  call void @runtime.bounds_check_error({ i64, i64 } %18, i32 187, i32 19, i64 %16, i64 %15)
  %19 = getelementptr %src.Element*, %src.Element** %14, i64 %16
  %20 = load %src.Element*, %src.Element** %19, align 8
  %21 = load %src.Element*, %src.Element** %1, align 8
  %22 = icmp eq %src.Element* %20, %21
  %23 = zext i1 %22 to i8
  %24 = trunc i8 %23 to i1
  br i1 %24, label %if.then, label %if.done

if.then:                                          ; preds = %for.body
  %25 = load i64, i64* %2, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([58 x i8], [58 x i8]* @"csbs$1a2", i64 0, i64 0), i64 57 }, i32 188, i32 4, %..string { i8* getelementptr inbounds ([23 x i8], [23 x i8]* @"csbs$315", i64 0, i64 0), i64 22 } }, %runtime.Source_Code_Location* %4, align 8
  %26 = bitcast %runtime.Context* %5 to i8*
  call void @runtime.unordered_remove-48085({ %src.Element**, i64, i64, %runtime.Allocator }* getelementptr inbounds (%src.Global_State, %src.Global_State* @src.gs, i64 0, i32 8), i64 %25, %runtime.Source_Code_Location* %4, i8* %26)
  ret i8 1

if.done:                                          ; preds = %for.body
  br label %for.post

for.post:                                         ; preds = %if.done
  %27 = load i64, i64* %2, align 8
  %28 = sub i64 %27, 1
  store i64 %28, i64* %2, align 8
  br label %for.loop

for.done:                                         ; preds = %for.loop
  ret i8 0
}

define internal i8 @src.animate_to(i8* %0, float* %1, float %2, float %3, float %4, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %5 = alloca i8*, align 8
  %6 = alloca float*, align 8
  %7 = alloca float, align 4
  %8 = alloca float, align 4
  %9 = alloca float, align 4
  %10 = alloca i8, align 1
  %11 = alloca float, align 4
  %12 = alloca float, align 4
  br label %entry

entry:                                            ; preds = %decls
  store i8* %0, i8** %5, align 8
  store float* %1, float** %6, align 8
  store float %2, float* %7, align 4
  store float %3, float* %8, align 4
  store float %4, float* %9, align 4
  store i8 0, i8* %10, align 1
  %13 = bitcast i8* %__.context_ptr to %runtime.Context*
  %14 = load i8*, i8** %5, align 8
  %15 = load i8, i8* %14, align 1
  %16 = trunc i8 %15 to i1
  br i1 %16, label %if.done, label %if.then

if.then:                                          ; preds = %entry
  %17 = load i8, i8* %10, align 1
  store i8 %17, i8* %10, align 1
  ret i8 %17

if.done:                                          ; preds = %entry
  %18 = bitcast %runtime.Context* %13 to i8*
  %19 = call i8 @src.options_use_animations(i8* %18)
  %20 = trunc i8 %19 to i1
  br i1 %20, label %if.done2, label %if.then1

if.then1:                                         ; preds = %if.done
  %21 = load float*, float** %6, align 8
  %22 = load float, float* %7, align 4
  store float %22, float* %21, align 4
  %23 = load i8, i8* %10, align 1
  store i8 %23, i8* %10, align 1
  ret i8 %23

if.done2:                                         ; preds = %if.done
  %24 = load float*, float** %6, align 8
  %25 = load float, float* %24, align 4
  %26 = fcmp oeq float %25, -1.000000e+00
  %27 = zext i1 %26 to i8
  %28 = trunc i8 %27 to i1
  br i1 %28, label %if.then3, label %if.else

if.then3:                                         ; preds = %if.done2
  %29 = load float*, float** %6, align 8
  %30 = load float, float* %7, align 4
  store float %30, float* %29, align 4
  br label %if.done7

if.else:                                          ; preds = %if.done2
  %31 = load float, float* %8, align 4
  %32 = fmul float 1.000000e+01, %31
  store float %32, float* %11, align 4
  %33 = load float*, float** %6, align 8
  %34 = load float, float* %33, align 4
  %35 = load float, float* %7, align 4
  %36 = load float, float* %11, align 4
  %37 = fneg float %36
  %38 = load float, float* getelementptr inbounds (%src.Global_State, %src.Global_State* @src.gs, i64 0, i32 6), align 4
  %39 = fmul float %37, %38
  %40 = call float @llvm.exp.f32(float %39)
  %41 = fsub float 1.000000e+00, %40
  %42 = call float @math.lerp-48100(float %34, float %35, float %41)
  store float %42, float* %12, align 4
  %43 = load float, float* %12, align 4
  %44 = load float, float* %7, align 4
  %45 = fsub float %43, %44
  %46 = fcmp olt float %45, 0.000000e+00
  %47 = fneg float %45
  %48 = select i1 %46, float %47, float %45
  %49 = load float, float* %9, align 4
  %50 = fcmp olt float %48, %49
  %51 = zext i1 %50 to i8
  %52 = trunc i8 %51 to i1
  br i1 %52, label %if.then4, label %if.else5

if.then4:                                         ; preds = %if.else
  %53 = load float*, float** %6, align 8
  %54 = load float, float* %7, align 4
  store float %54, float* %53, align 4
  br label %if.done6

if.else5:                                         ; preds = %if.else
  %55 = load float*, float** %6, align 8
  %56 = load float, float* %12, align 4
  store float %56, float* %55, align 4
  store i8 1, i8* %10, align 1
  br label %if.done6

if.done6:                                         ; preds = %if.else5, %if.then4
  br label %if.done7

if.done7:                                         ; preds = %if.done6, %if.then3
  %57 = load i8, i8* %10, align 1
  %58 = trunc i8 %57 to i1
  br i1 %58, label %if.done9, label %if.then8

if.then8:                                         ; preds = %if.done7
  %59 = load i8*, i8** %5, align 8
  store i8 0, i8* %59, align 1
  br label %if.done9

if.done9:                                         ; preds = %if.then8, %if.done7
  %60 = load i8, i8* %10, align 1
  store i8 %60, i8* %10, align 1
  ret i8 %60
}

define internal i64 @src.element_message(%src.Element* %0, i64 %1, i64 %2, i8* %3, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %4 = alloca %src.Element*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i64, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Element* %0, %src.Element** %4, align 8
  store i64 %1, i64* %5, align 8
  store i64 %2, i64* %6, align 8
  store i8* %3, i8** %7, align 8
  %9 = bitcast i8* %__.context_ptr to %runtime.Context*
  %10 = load %src.Element*, %src.Element** %4, align 8
  %11 = icmp eq %src.Element* %10, null
  %12 = zext i1 %11 to i8
  %13 = trunc i8 %12 to i1
  br i1 %13, label %if.then, label %cmp.or

cmp.or:                                           ; preds = %entry
  %14 = load i64, i64* %5, align 8
  %15 = icmp ne i64 %14, 5
  %16 = zext i1 %15 to i8
  %17 = trunc i8 %16 to i1
  br i1 %17, label %cmp.and, label %if.done

cmp.and:                                          ; preds = %cmp.or
  %18 = load %src.Element*, %src.Element** %4, align 8
  %19 = getelementptr inbounds %src.Element, %src.Element* %18, i32 0, i32 0
  %20 = load i32, i32* %19, align 4
  %21 = and i32 %20, 4
  %22 = icmp ne i32 %21, 0
  %23 = zext i1 %22 to i8
  %24 = trunc i8 %23 to i1
  br i1 %24, label %if.then, label %if.done

if.then:                                          ; preds = %cmp.and, %entry
  ret i64 0

if.done:                                          ; preds = %cmp.and, %cmp.or
  %25 = load i64, i64* %5, align 8
  %26 = icmp sge i64 %25, 11
  %27 = zext i1 %26 to i8
  %28 = trunc i8 %27 to i1
  br i1 %28, label %cmp.and1, label %if.done4

cmp.and1:                                         ; preds = %if.done
  %29 = load i64, i64* %5, align 8
  %30 = icmp sle i64 %29, 23
  %31 = zext i1 %30 to i8
  %32 = trunc i8 %31 to i1
  br i1 %32, label %cmp.and2, label %if.done4

cmp.and2:                                         ; preds = %cmp.and1
  %33 = load %src.Element*, %src.Element** %4, align 8
  %34 = getelementptr inbounds %src.Element, %src.Element* %33, i32 0, i32 0
  %35 = load i32, i32* %34, align 4
  %36 = and i32 %35, 16
  %37 = icmp ne i32 %36, 0
  %38 = zext i1 %37 to i8
  %39 = trunc i8 %38 to i1
  br i1 %39, label %if.then3, label %if.done4

if.then3:                                         ; preds = %cmp.and2
  ret i64 0

if.done4:                                         ; preds = %cmp.and2, %cmp.and1, %if.done
  %40 = load %src.Element*, %src.Element** %4, align 8
  %41 = getelementptr inbounds %src.Element, %src.Element* %40, i32 0, i32 8
  %42 = load i8*, i8** %41, align 8
  %43 = icmp ne i8* %42, null
  %44 = zext i1 %43 to i8
  %45 = trunc i8 %44 to i1
  br i1 %45, label %if.then5, label %if.done8

if.then5:                                         ; preds = %if.done4
  br label %if.init

if.init:                                          ; preds = %if.then5
  %46 = load %src.Element*, %src.Element** %4, align 8
  %47 = getelementptr inbounds %src.Element, %src.Element* %46, i32 0, i32 8
  %48 = load i8*, i8** %47, align 8
  %49 = load %src.Element*, %src.Element** %4, align 8
  %50 = load i64, i64* %5, align 8
  %51 = load i64, i64* %6, align 8
  %52 = load i8*, i8** %7, align 8
  %53 = bitcast %runtime.Context* %9 to i8*
  %54 = bitcast i8* %48 to i64 (%src.Element*, i64, i64, i8*, i8*)*
  %55 = call i64 %54(%src.Element* %49, i64 %50, i64 %51, i8* %52, i8* %53)
  store i64 %55, i64* %8, align 8
  %56 = load i64, i64* %8, align 8
  %57 = icmp ne i64 %56, 0
  %58 = zext i1 %57 to i8
  %59 = trunc i8 %58 to i1
  br i1 %59, label %if.then6, label %if.done7

if.then6:                                         ; preds = %if.init
  %60 = load i64, i64* %8, align 8
  ret i64 %60

if.done7:                                         ; preds = %if.init
  br label %if.done8

if.done8:                                         ; preds = %if.done7, %if.done4
  %61 = load %src.Element*, %src.Element** %4, align 8
  %62 = getelementptr inbounds %src.Element, %src.Element* %61, i32 0, i32 7
  %63 = load i8*, i8** %62, align 8
  %64 = icmp ne i8* %63, null
  %65 = zext i1 %64 to i8
  %66 = trunc i8 %65 to i1
  br i1 %66, label %if.then9, label %if.done10

if.then9:                                         ; preds = %if.done8
  %67 = load %src.Element*, %src.Element** %4, align 8
  %68 = getelementptr inbounds %src.Element, %src.Element* %67, i32 0, i32 7
  %69 = load i8*, i8** %68, align 8
  %70 = load %src.Element*, %src.Element** %4, align 8
  %71 = load i64, i64* %5, align 8
  %72 = load i64, i64* %6, align 8
  %73 = load i8*, i8** %7, align 8
  %74 = bitcast %runtime.Context* %9 to i8*
  %75 = bitcast i8* %69 to i64 (%src.Element*, i64, i64, i8*, i8*)*
  %76 = call i64 %75(%src.Element* %70, i64 %71, i64 %72, i8* %73, i8* %74)
  ret i64 %76

if.done10:                                        ; preds = %if.done8
  ret i64 0
}

define internal void @src.element_move(%src.Element* %0, { <2 x float>, <2 x float> } %1, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %2 = alloca %src.Element*, align 8
  %3 = alloca %src.Rect, align 8
  %4 = alloca { <2 x float>, <2 x float> }, align 8
  %5 = alloca %src.Rect, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Element* %0, %src.Element** %2, align 8
  %6 = bitcast %src.Rect* %3 to { <2 x float>, <2 x float> }*
  store { <2 x float>, <2 x float> } %1, { <2 x float>, <2 x float> }* %6, align 8
  %7 = load %src.Rect, %src.Rect* %3, align 4
  %8 = bitcast i8* %__.context_ptr to %runtime.Context*
  %9 = load %src.Element*, %src.Element** %2, align 8
  %10 = getelementptr inbounds %src.Element, %src.Element* %9, i32 0, i32 6
  %11 = load %src.Element*, %src.Element** %2, align 8
  %12 = getelementptr inbounds %src.Element, %src.Element* %11, i32 0, i32 2
  %13 = load %src.Element*, %src.Element** %12, align 8
  %14 = getelementptr inbounds %src.Element, %src.Element* %13, i32 0, i32 6
  %15 = load %src.Rect, %src.Rect* %14, align 4
  %16 = load %src.Rect, %src.Rect* %3, align 4
  %17 = bitcast { <2 x float>, <2 x float> }* %4 to %src.Rect*
  store %src.Rect %15, %src.Rect* %17, align 4
  %18 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %4, align 8
  %19 = bitcast %src.Rect* %3 to { <2 x float>, <2 x float> }*
  %20 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %19, align 8
  %21 = bitcast %runtime.Context* %8 to i8*
  %22 = call { <2 x float>, <2 x float> } @src.rect_intersection({ <2 x float>, <2 x float> } %18, { <2 x float>, <2 x float> } %20, i8* %21)
  %23 = bitcast %src.Rect* %5 to { <2 x float>, <2 x float> }*
  store { <2 x float>, <2 x float> } %22, { <2 x float>, <2 x float> }* %23, align 8
  %24 = load %src.Rect, %src.Rect* %5, align 4
  store %src.Rect %24, %src.Rect* %10, align 4
  %25 = load %src.Element*, %src.Element** %2, align 8
  %26 = getelementptr inbounds %src.Element, %src.Element* %25, i32 0, i32 5
  %27 = load %src.Rect, %src.Rect* %3, align 4
  store %src.Rect %27, %src.Rect* %26, align 4
  %28 = load %src.Element*, %src.Element** %2, align 8
  %29 = bitcast %runtime.Context* %8 to i8*
  %30 = call i64 @src.element_message(%src.Element* %28, i64 3, i64 0, i8* null, i8* %29)
  ret void
}

; Function Attrs: alwaysinline
define internal void @src.element_repaint(%src.Element* %0, i8* noalias nocapture nonnull %__.context_ptr) #4 {
decls:
  %1 = alloca %src.Element*, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Element* %0, %src.Element** %1, align 8
  %2 = bitcast i8* %__.context_ptr to %runtime.Context*
  %3 = load %src.Element*, %src.Element** %1, align 8
  %4 = getelementptr inbounds %src.Element, %src.Element* %3, i32 0, i32 4
  %5 = load %src.Window*, %src.Window** %4, align 8
  %6 = getelementptr inbounds %src.Window, %src.Window* %5, i32 0, i32 22
  store i8 1, i8* %6, align 1
  ret void
}

define internal i64 @src.element_find_by_point_custom(%src.Element* %0, %src.Find_By_Point* %1, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %2 = alloca %src.Element*, align 8
  %3 = alloca %src.Find_By_Point*, align 8
  %4 = alloca i64, align 8
  %5 = alloca %src.Element*, align 8
  %6 = alloca { i64, i64 }, align 8
  %7 = alloca { <2 x float>, <2 x float> }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Element* %0, %src.Element** %2, align 8
  store %src.Find_By_Point* %1, %src.Find_By_Point** %3, align 8
  %8 = bitcast i8* %__.context_ptr to %runtime.Context*
  br label %for.init

for.init:                                         ; preds = %entry
  %9 = load %src.Element*, %src.Element** %2, align 8
  %10 = getelementptr inbounds %src.Element, %src.Element* %9, i32 0, i32 3
  %11 = load { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %10, align 8
  %12 = getelementptr inbounds { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %10, i32 0, i32 1
  %13 = load i64, i64* %12, align 8
  %14 = sub i64 %13, 1
  store i64 %14, i64* %4, align 8
  br label %for.loop

for.loop:                                         ; preds = %for.post, %for.init
  %15 = load i64, i64* %4, align 8
  %16 = icmp sge i64 %15, 0
  %17 = zext i1 %16 to i8
  %18 = trunc i8 %17 to i1
  br i1 %18, label %for.body, label %for.done

for.body:                                         ; preds = %for.loop
  %19 = load %src.Element*, %src.Element** %2, align 8
  %20 = getelementptr inbounds %src.Element, %src.Element* %19, i32 0, i32 3
  %21 = load { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %20, align 8
  %22 = getelementptr inbounds { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %20, i32 0, i32 0
  %23 = load %src.Element**, %src.Element*** %22, align 8
  %24 = getelementptr inbounds { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %20, i32 0, i32 1
  %25 = load i64, i64* %24, align 8
  %26 = load i64, i64* %4, align 8
  %27 = bitcast { i64, i64 }* %6 to %..string*
  store %..string { i8* getelementptr inbounds ([58 x i8], [58 x i8]* @"csbs$1a2", i64 0, i64 0), i64 57 }, %..string* %27, align 8
  %28 = load { i64, i64 }, { i64, i64 }* %6, align 8
  call void @runtime.bounds_check_error({ i64, i64 } %28, i32 310, i32 29, i64 %26, i64 %25)
  %29 = getelementptr %src.Element*, %src.Element** %23, i64 %26
  %30 = load %src.Element*, %src.Element** %29, align 8
  store %src.Element* %30, %src.Element** %5, align 8
  %31 = load %src.Element*, %src.Element** %5, align 8
  %32 = getelementptr inbounds %src.Element, %src.Element* %31, i32 0, i32 0
  %33 = load i32, i32* %32, align 4
  %34 = and i32 %33, 2
  %35 = icmp eq i32 %34, 0
  %36 = zext i1 %35 to i8
  %37 = trunc i8 %36 to i1
  br i1 %37, label %cmp.and, label %if.done

cmp.and:                                          ; preds = %for.body
  %38 = load %src.Element*, %src.Element** %5, align 8
  %39 = getelementptr inbounds %src.Element, %src.Element* %38, i32 0, i32 5
  %40 = load %src.Rect, %src.Rect* %39, align 4
  %41 = load %src.Find_By_Point*, %src.Find_By_Point** %3, align 8
  %42 = getelementptr inbounds %src.Find_By_Point, %src.Find_By_Point* %41, i32 0, i32 0
  %43 = load float, float* %42, align 4
  %44 = load %src.Find_By_Point*, %src.Find_By_Point** %3, align 8
  %45 = getelementptr inbounds %src.Find_By_Point, %src.Find_By_Point* %44, i32 0, i32 1
  %46 = load float, float* %45, align 4
  %47 = bitcast { <2 x float>, <2 x float> }* %7 to %src.Rect*
  store %src.Rect %40, %src.Rect* %47, align 4
  %48 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %7, align 8
  %49 = bitcast %runtime.Context* %8 to i8*
  %50 = call i8 @src.rect_contains({ <2 x float>, <2 x float> } %48, float %43, float %46, i8* %49)
  %51 = trunc i8 %50 to i1
  br i1 %51, label %if.then, label %if.done

if.then:                                          ; preds = %cmp.and
  %52 = load %src.Find_By_Point*, %src.Find_By_Point** %3, align 8
  %53 = getelementptr inbounds %src.Find_By_Point, %src.Find_By_Point* %52, i32 0, i32 2
  %54 = load %src.Element*, %src.Element** %5, align 8
  store %src.Element* %54, %src.Element** %53, align 8
  ret i64 1

if.done:                                          ; preds = %cmp.and, %for.body
  br label %for.post

for.post:                                         ; preds = %if.done
  %55 = load i64, i64* %4, align 8
  %56 = sub i64 %55, 1
  store i64 %56, i64* %4, align 8
  br label %for.loop

for.done:                                         ; preds = %for.loop
  ret i64 0
}

define internal %src.Element* @src.element_find_by_point(%src.Element* %0, float %1, float %2, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %3 = alloca %src.Element*, align 8
  %4 = alloca float, align 4
  %5 = alloca float, align 4
  %6 = alloca %src.Find_By_Point, align 8
  %7 = alloca %src.Find_By_Point, align 8
  %8 = alloca i64, align 8
  %9 = alloca %src.Element*, align 8
  %10 = alloca { i64, i64 }, align 8
  %11 = alloca { <2 x float>, <2 x float> }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Element* %0, %src.Element** %3, align 8
  store float %1, float* %4, align 4
  store float %2, float* %5, align 4
  %12 = bitcast i8* %__.context_ptr to %runtime.Context*
  %13 = bitcast %src.Find_By_Point* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* %13, i8 0, i64 16, i1 false)
  store %src.Find_By_Point zeroinitializer, %src.Find_By_Point* %7, align 8
  %14 = load float, float* %4, align 4
  %15 = getelementptr inbounds %src.Find_By_Point, %src.Find_By_Point* %7, i32 0, i32 0
  store float %14, float* %15, align 4
  %16 = load float, float* %5, align 4
  %17 = getelementptr inbounds %src.Find_By_Point, %src.Find_By_Point* %7, i32 0, i32 1
  store float %16, float* %17, align 4
  %18 = getelementptr inbounds %src.Find_By_Point, %src.Find_By_Point* %7, i32 0, i32 2
  store %src.Element* null, %src.Element** %18, align 8
  %19 = load %src.Find_By_Point, %src.Find_By_Point* %7, align 8
  store %src.Find_By_Point %19, %src.Find_By_Point* %6, align 8
  %20 = load %src.Element*, %src.Element** %3, align 8
  %21 = bitcast %src.Find_By_Point* %6 to i8*
  %22 = bitcast %runtime.Context* %12 to i8*
  %23 = call i64 @src.element_message(%src.Element* %20, i64 29, i64 0, i8* %21, i8* %22)
  %24 = icmp eq i64 %23, 1
  %25 = zext i1 %24 to i8
  %26 = trunc i8 %25 to i1
  br i1 %26, label %if.then, label %if.done2

if.then:                                          ; preds = %entry
  %27 = getelementptr inbounds %src.Find_By_Point, %src.Find_By_Point* %6, i32 0, i32 2
  %28 = load %src.Element*, %src.Element** %27, align 8
  %29 = icmp ne %src.Element* %28, null
  %30 = zext i1 %29 to i8
  %31 = trunc i8 %30 to i1
  br i1 %31, label %if.then1, label %if.else

if.then1:                                         ; preds = %if.then
  %32 = getelementptr inbounds %src.Find_By_Point, %src.Find_By_Point* %6, i32 0, i32 2
  %33 = load %src.Element*, %src.Element** %32, align 8
  br label %if.done

if.else:                                          ; preds = %if.then
  %34 = load %src.Element*, %src.Element** %3, align 8
  br label %if.done

if.done:                                          ; preds = %if.else, %if.then1
  %35 = phi %src.Element* [ %33, %if.then1 ], [ %34, %if.else ]
  ret %src.Element* %35

if.done2:                                         ; preds = %entry
  br label %for.init

for.init:                                         ; preds = %if.done2
  %36 = load %src.Element*, %src.Element** %3, align 8
  %37 = getelementptr inbounds %src.Element, %src.Element* %36, i32 0, i32 3
  %38 = load { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %37, align 8
  %39 = getelementptr inbounds { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %37, i32 0, i32 1
  %40 = load i64, i64* %39, align 8
  %41 = sub i64 %40, 1
  store i64 %41, i64* %8, align 8
  br label %for.loop

for.loop:                                         ; preds = %for.post, %for.init
  %42 = load i64, i64* %8, align 8
  %43 = icmp sge i64 %42, 0
  %44 = zext i1 %43 to i8
  %45 = trunc i8 %44 to i1
  br i1 %45, label %for.body, label %for.done

for.body:                                         ; preds = %for.loop
  %46 = load %src.Element*, %src.Element** %3, align 8
  %47 = getelementptr inbounds %src.Element, %src.Element* %46, i32 0, i32 3
  %48 = load { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %47, align 8
  %49 = getelementptr inbounds { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %47, i32 0, i32 0
  %50 = load %src.Element**, %src.Element*** %49, align 8
  %51 = getelementptr inbounds { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %47, i32 0, i32 1
  %52 = load i64, i64* %51, align 8
  %53 = load i64, i64* %8, align 8
  %54 = bitcast { i64, i64 }* %10 to %..string*
  store %..string { i8* getelementptr inbounds ([58 x i8], [58 x i8]* @"csbs$1a2", i64 0, i64 0), i64 57 }, %..string* %54, align 8
  %55 = load { i64, i64 }, { i64, i64 }* %10, align 8
  call void @runtime.bounds_check_error({ i64, i64 } %55, i32 336, i32 29, i64 %53, i64 %52)
  %56 = getelementptr %src.Element*, %src.Element** %50, i64 %53
  %57 = load %src.Element*, %src.Element** %56, align 8
  store %src.Element* %57, %src.Element** %9, align 8
  %58 = load %src.Element*, %src.Element** %9, align 8
  %59 = getelementptr inbounds %src.Element, %src.Element* %58, i32 0, i32 0
  %60 = load i32, i32* %59, align 4
  %61 = and i32 %60, 2
  %62 = icmp eq i32 %61, 0
  %63 = zext i1 %62 to i8
  %64 = trunc i8 %63 to i1
  br i1 %64, label %cmp.and, label %if.done4

cmp.and:                                          ; preds = %for.body
  %65 = load %src.Element*, %src.Element** %9, align 8
  %66 = getelementptr inbounds %src.Element, %src.Element* %65, i32 0, i32 6
  %67 = load %src.Rect, %src.Rect* %66, align 4
  %68 = getelementptr inbounds %src.Find_By_Point, %src.Find_By_Point* %6, i32 0, i32 0
  %69 = load float, float* %68, align 4
  %70 = getelementptr inbounds %src.Find_By_Point, %src.Find_By_Point* %6, i32 0, i32 1
  %71 = load float, float* %70, align 4
  %72 = bitcast { <2 x float>, <2 x float> }* %11 to %src.Rect*
  store %src.Rect %67, %src.Rect* %72, align 4
  %73 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %11, align 8
  %74 = bitcast %runtime.Context* %12 to i8*
  %75 = call i8 @src.rect_contains({ <2 x float>, <2 x float> } %73, float %69, float %71, i8* %74)
  %76 = trunc i8 %75 to i1
  br i1 %76, label %if.then3, label %if.done4

if.then3:                                         ; preds = %cmp.and
  %77 = load %src.Element*, %src.Element** %9, align 8
  %78 = load float, float* %4, align 4
  %79 = load float, float* %5, align 4
  %80 = bitcast %runtime.Context* %12 to i8*
  %81 = call %src.Element* @src.element_find_by_point(%src.Element* %77, float %78, float %79, i8* %80)
  ret %src.Element* %81

if.done4:                                         ; preds = %cmp.and, %for.body
  br label %for.post

for.post:                                         ; preds = %if.done4
  %82 = load i64, i64* %8, align 8
  %83 = sub i64 %82, 1
  store i64 %83, i64* %8, align 8
  br label %for.loop

for.done:                                         ; preds = %for.loop
  %84 = load %src.Element*, %src.Element** %3, align 8
  ret %src.Element* %84
}

define internal void @src.element_destroy(%src.Element* %0, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %1 = alloca %src.Element*, align 8
  %2 = alloca %src.Element*, align 8
  %3 = alloca %src.Element*, align 8
  %4 = alloca i64, align 8
  %5 = alloca %src.Element*, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Element* %0, %src.Element** %1, align 8
  %6 = bitcast i8* %__.context_ptr to %runtime.Context*
  %7 = load %src.Element*, %src.Element** %1, align 8
  %8 = getelementptr inbounds %src.Element, %src.Element* %7, i32 0, i32 0
  %9 = load i32, i32* %8, align 4
  %10 = and i32 %9, 4
  %11 = icmp ne i32 %10, 0
  %12 = zext i1 %11 to i8
  %13 = trunc i8 %12 to i1
  br i1 %13, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  ret void

if.done:                                          ; preds = %entry
  %14 = load %src.Element*, %src.Element** %1, align 8
  %15 = bitcast %runtime.Context* %6 to i8*
  %16 = call i64 @src.element_message(%src.Element* %14, i64 5, i64 0, i8* null, i8* %15)
  %17 = load %src.Element*, %src.Element** %1, align 8
  %18 = getelementptr inbounds %src.Element, %src.Element* %17, i32 0, i32 0
  %19 = bitcast %runtime.Context* %6 to i8*
  call void @runtime.incl_bit_set-48133(i32* %18, i32 6, i8* %19)
  %20 = load %src.Element*, %src.Element** %1, align 8
  %21 = getelementptr inbounds %src.Element, %src.Element* %20, i32 0, i32 2
  %22 = load %src.Element*, %src.Element** %21, align 8
  store %src.Element* %22, %src.Element** %2, align 8
  br label %for.loop

for.loop:                                         ; preds = %if.done2, %if.done
  %23 = load %src.Element*, %src.Element** %2, align 8
  %24 = icmp ne %src.Element* %23, null
  %25 = zext i1 %24 to i8
  %26 = trunc i8 %25 to i1
  br i1 %26, label %for.body, label %for.done

for.body:                                         ; preds = %for.loop
  %27 = load %src.Element*, %src.Element** %2, align 8
  %28 = getelementptr inbounds %src.Element, %src.Element* %27, i32 0, i32 0
  %29 = load i32, i32* %28, align 4
  %30 = and i32 %29, 8
  %31 = icmp ne i32 %30, 0
  %32 = zext i1 %31 to i8
  %33 = trunc i8 %32 to i1
  br i1 %33, label %if.then1, label %if.done2

if.then1:                                         ; preds = %for.body
  br label %for.done

unreachable:                                      ; No predecessors!
  br label %if.done2

if.done2:                                         ; preds = %unreachable, %for.body
  %34 = load %src.Element*, %src.Element** %2, align 8
  %35 = getelementptr inbounds %src.Element, %src.Element* %34, i32 0, i32 0
  %36 = bitcast %runtime.Context* %6 to i8*
  call void @runtime.incl_elem-48009(i32* %35, i64 3, i8* %36)
  %37 = load %src.Element*, %src.Element** %2, align 8
  %38 = getelementptr inbounds %src.Element, %src.Element* %37, i32 0, i32 2
  %39 = load %src.Element*, %src.Element** %38, align 8
  store %src.Element* %39, %src.Element** %2, align 8
  br label %for.loop

for.done:                                         ; preds = %if.then1, %for.loop
  store %src.Element* null, %src.Element** %3, align 8
  %40 = load %src.Element*, %src.Element** %1, align 8
  %41 = getelementptr inbounds %src.Element, %src.Element* %40, i32 0, i32 3
  %42 = getelementptr inbounds { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %41, i32 0, i32 1
  store i64 -1, i64* %4, align 8
  br label %for.index.loop

for.index.loop:                                   ; preds = %if.done4, %for.done
  %43 = load i64, i64* %4, align 8
  %44 = add i64 %43, 1
  store i64 %44, i64* %4, align 8
  %45 = load i64, i64* %42, align 8
  %46 = icmp slt i64 %44, %45
  br i1 %46, label %for.index.body, label %for.index.done

for.index.body:                                   ; preds = %for.index.loop
  %47 = load i64, i64* %4, align 8
  %48 = getelementptr inbounds { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %41, i32 0, i32 0
  %49 = load %src.Element**, %src.Element*** %48, align 8
  %50 = getelementptr %src.Element*, %src.Element** %49, i64 %47
  %51 = load %src.Element*, %src.Element** %50, align 8
  store %src.Element* %51, %src.Element** %5, align 8
  %52 = load %src.Element*, %src.Element** %5, align 8
  %53 = getelementptr inbounds %src.Element, %src.Element* %52, i32 0, i32 0
  %54 = load i32, i32* %53, align 4
  %55 = and i32 %54, 32
  %56 = icmp eq i32 %55, 0
  %57 = zext i1 %56 to i8
  %58 = trunc i8 %57 to i1
  br i1 %58, label %if.then3, label %if.done4

if.then3:                                         ; preds = %for.index.body
  %59 = load %src.Element*, %src.Element** %5, align 8
  %60 = bitcast %runtime.Context* %6 to i8*
  call void @src.element_destroy(%src.Element* %59, i8* %60)
  br label %if.done4

if.done4:                                         ; preds = %if.then3, %for.index.body
  br label %for.index.loop

for.index.done:                                   ; preds = %for.index.loop
  %61 = load %src.Element*, %src.Element** %1, align 8
  %62 = getelementptr inbounds %src.Element, %src.Element* %61, i32 0, i32 2
  %63 = load %src.Element*, %src.Element** %62, align 8
  %64 = icmp ne %src.Element* %63, null
  %65 = zext i1 %64 to i8
  %66 = trunc i8 %65 to i1
  br i1 %66, label %if.then5, label %if.done6

if.then5:                                         ; preds = %for.index.done
  %67 = load %src.Element*, %src.Element** %1, align 8
  %68 = getelementptr inbounds %src.Element, %src.Element* %67, i32 0, i32 2
  %69 = load %src.Element*, %src.Element** %68, align 8
  %70 = bitcast %runtime.Context* %6 to i8*
  call void @src.element_repaint(%src.Element* %69, i8* %70)
  br label %if.done6

if.done6:                                         ; preds = %if.then5, %for.index.done
  ret void
}

define internal i8 @src.element_deallocate(%src.Element* %0, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %1 = alloca %src.Element*, align 8
  %2 = alloca i64, align 8
  %3 = alloca %src.Element*, align 8
  %4 = alloca { i64, i64 }, align 8
  %5 = alloca %runtime.Source_Code_Location, align 8
  %6 = alloca %runtime.Source_Code_Location, align 8
  %7 = alloca %runtime.Source_Code_Location, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Element* %0, %src.Element** %1, align 8
  %8 = bitcast i8* %__.context_ptr to %runtime.Context*
  %9 = load %src.Element*, %src.Element** %1, align 8
  %10 = getelementptr inbounds %src.Element, %src.Element* %9, i32 0, i32 0
  %11 = load i32, i32* %10, align 4
  %12 = and i32 %11, 8
  %13 = icmp ne i32 %12, 0
  %14 = zext i1 %13 to i8
  %15 = trunc i8 %14 to i1
  br i1 %15, label %if.then, label %if.done2

if.then:                                          ; preds = %entry
  %16 = load %src.Element*, %src.Element** %1, align 8
  %17 = getelementptr inbounds %src.Element, %src.Element* %16, i32 0, i32 0
  %18 = bitcast %runtime.Context* %8 to i8*
  call void @runtime.excl_elem-48031(i32* %17, i64 3, i8* %18)
  br label %for.init

for.init:                                         ; preds = %if.then
  store i64 0, i64* %2, align 8
  br label %for.loop

for.loop:                                         ; preds = %for.post, %for.init
  %19 = load i64, i64* %2, align 8
  %20 = load %src.Element*, %src.Element** %1, align 8
  %21 = getelementptr inbounds %src.Element, %src.Element* %20, i32 0, i32 3
  %22 = load { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %21, align 8
  %23 = getelementptr inbounds { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %21, i32 0, i32 1
  %24 = load i64, i64* %23, align 8
  %25 = icmp slt i64 %19, %24
  %26 = zext i1 %25 to i8
  %27 = trunc i8 %26 to i1
  br i1 %27, label %for.body, label %for.done

for.body:                                         ; preds = %for.loop
  %28 = load %src.Element*, %src.Element** %1, align 8
  %29 = getelementptr inbounds %src.Element, %src.Element* %28, i32 0, i32 3
  %30 = load { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %29, align 8
  %31 = getelementptr inbounds { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %29, i32 0, i32 0
  %32 = load %src.Element**, %src.Element*** %31, align 8
  %33 = getelementptr inbounds { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %29, i32 0, i32 1
  %34 = load i64, i64* %33, align 8
  %35 = load i64, i64* %2, align 8
  %36 = bitcast { i64, i64 }* %4 to %..string*
  store %..string { i8* getelementptr inbounds ([58 x i8], [58 x i8]* @"csbs$1a2", i64 0, i64 0), i64 57 }, %..string* %36, align 8
  %37 = load { i64, i64 }, { i64, i64 }* %4, align 8
  call void @runtime.bounds_check_error({ i64, i64 } %37, i32 416, i32 30, i64 %35, i64 %34)
  %38 = getelementptr %src.Element*, %src.Element** %32, i64 %35
  %39 = load %src.Element*, %src.Element** %38, align 8
  store %src.Element* %39, %src.Element** %3, align 8
  %40 = load %src.Element*, %src.Element** %3, align 8
  %41 = bitcast %runtime.Context* %8 to i8*
  %42 = call i8 @src.element_deallocate(%src.Element* %40, i8* %41)
  %43 = trunc i8 %42 to i1
  br i1 %43, label %if.then1, label %if.done

if.then1:                                         ; preds = %for.body
  %44 = load %src.Element*, %src.Element** %1, align 8
  %45 = getelementptr inbounds %src.Element, %src.Element* %44, i32 0, i32 3
  %46 = load i64, i64* %2, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([58 x i8], [58 x i8]* @"csbs$1a2", i64 0, i64 0), i64 57 }, i32 419, i32 5, %..string { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @"csbs$316", i64 0, i64 0), i64 18 } }, %runtime.Source_Code_Location* %5, align 8
  %47 = bitcast %runtime.Context* %8 to i8*
  call void @runtime.ordered_remove-48188({ %src.Element**, i64, i64, %runtime.Allocator }* %45, i64 %46, %runtime.Source_Code_Location* %5, i8* %47)
  %48 = load %src.Element*, %src.Element** %1, align 8
  %49 = load i64, i64* %2, align 8
  %50 = bitcast %runtime.Context* %8 to i8*
  %51 = call i64 @src.element_message(%src.Element* %48, i64 6, i64 %49, i8* null, i8* %50)
  %52 = load i64, i64* %2, align 8
  %53 = sub i64 %52, 1
  store i64 %53, i64* %2, align 8
  br label %if.done

if.done:                                          ; preds = %if.then1, %for.body
  br label %for.post

for.post:                                         ; preds = %if.done
  %54 = load i64, i64* %2, align 8
  %55 = add i64 %54, 1
  store i64 %55, i64* %2, align 8
  br label %for.loop

for.done:                                         ; preds = %for.loop
  br label %if.done2

if.done2:                                         ; preds = %for.done, %entry
  %56 = load %src.Element*, %src.Element** %1, align 8
  %57 = getelementptr inbounds %src.Element, %src.Element* %56, i32 0, i32 0
  %58 = load i32, i32* %57, align 4
  %59 = and i32 %58, 4
  %60 = icmp ne i32 %59, 0
  %61 = zext i1 %60 to i8
  %62 = trunc i8 %61 to i1
  br i1 %62, label %if.then3, label %if.else

if.then3:                                         ; preds = %if.done2
  %63 = load %src.Element*, %src.Element** %1, align 8
  %64 = bitcast %runtime.Context* %8 to i8*
  %65 = call i64 @src.element_message(%src.Element* %63, i64 4, i64 0, i8* null, i8* %64)
  %66 = load %src.Element*, %src.Element** %1, align 8
  %67 = getelementptr inbounds %src.Element, %src.Element* %66, i32 0, i32 4
  %68 = load %src.Window*, %src.Window** %67, align 8
  %69 = getelementptr inbounds %src.Window, %src.Window* %68, i32 0, i32 2
  %70 = load %src.Element*, %src.Element** %69, align 8
  %71 = load %src.Element*, %src.Element** %1, align 8
  %72 = icmp eq %src.Element* %70, %71
  %73 = zext i1 %72 to i8
  %74 = trunc i8 %73 to i1
  br i1 %74, label %if.then4, label %if.done5

if.then4:                                         ; preds = %if.then3
  %75 = load %src.Element*, %src.Element** %1, align 8
  %76 = getelementptr inbounds %src.Element, %src.Element* %75, i32 0, i32 4
  %77 = load %src.Window*, %src.Window** %76, align 8
  %78 = bitcast %runtime.Context* %8 to i8*
  call void @src.window_set_pressed(%src.Window* %77, %src.Element* null, i64 0, i8* %78)
  br label %if.done5

if.done5:                                         ; preds = %if.then4, %if.then3
  %79 = load %src.Element*, %src.Element** %1, align 8
  %80 = getelementptr inbounds %src.Element, %src.Element* %79, i32 0, i32 4
  %81 = load %src.Window*, %src.Window** %80, align 8
  %82 = getelementptr inbounds %src.Window, %src.Window* %81, i32 0, i32 1
  %83 = load %src.Element*, %src.Element** %82, align 8
  %84 = load %src.Element*, %src.Element** %1, align 8
  %85 = icmp eq %src.Element* %83, %84
  %86 = zext i1 %85 to i8
  %87 = trunc i8 %86 to i1
  br i1 %87, label %if.then6, label %if.done7

if.then6:                                         ; preds = %if.done5
  %88 = load %src.Element*, %src.Element** %1, align 8
  %89 = getelementptr inbounds %src.Element, %src.Element* %88, i32 0, i32 4
  %90 = load %src.Window*, %src.Window** %89, align 8
  %91 = getelementptr inbounds %src.Window, %src.Window* %90, i32 0, i32 1
  %92 = load %src.Element*, %src.Element** %1, align 8
  %93 = getelementptr inbounds %src.Element, %src.Element* %92, i32 0, i32 4
  %94 = load %src.Window*, %src.Window** %93, align 8
  %95 = getelementptr inbounds %src.Window, %src.Window* %94, i32 0, i32 0
  store %src.Element* %95, %src.Element** %91, align 8
  br label %if.done7

if.done7:                                         ; preds = %if.then6, %if.done5
  %96 = load %src.Element*, %src.Element** %1, align 8
  %97 = getelementptr inbounds %src.Element, %src.Element* %96, i32 0, i32 4
  %98 = load %src.Window*, %src.Window** %97, align 8
  %99 = getelementptr inbounds %src.Window, %src.Window* %98, i32 0, i32 4
  %100 = load %src.Element*, %src.Element** %99, align 8
  %101 = load %src.Element*, %src.Element** %1, align 8
  %102 = icmp eq %src.Element* %100, %101
  %103 = zext i1 %102 to i8
  %104 = trunc i8 %103 to i1
  br i1 %104, label %if.then8, label %if.done9

if.then8:                                         ; preds = %if.done7
  %105 = load %src.Element*, %src.Element** %1, align 8
  %106 = getelementptr inbounds %src.Element, %src.Element* %105, i32 0, i32 4
  %107 = load %src.Window*, %src.Window** %106, align 8
  %108 = getelementptr inbounds %src.Window, %src.Window* %107, i32 0, i32 4
  store %src.Element* null, %src.Element** %108, align 8
  br label %if.done9

if.done9:                                         ; preds = %if.then8, %if.done7
  %109 = load %src.Element*, %src.Element** %1, align 8
  %110 = bitcast %runtime.Context* %8 to i8*
  %111 = call i8 @src.element_animation_stop(%src.Element* %109, i8* %110)
  %112 = load %src.Element*, %src.Element** %1, align 8
  %113 = getelementptr inbounds %src.Element, %src.Element* %112, i32 0, i32 3
  %114 = load { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %113, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([58 x i8], [58 x i8]* @"csbs$1a2", i64 0, i64 0), i64 57 }, i32 448, i32 3, %..string { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @"csbs$316", i64 0, i64 0), i64 18 } }, %runtime.Source_Code_Location* %6, align 8
  %115 = bitcast %runtime.Context* %8 to i8*
  %116 = call i8 @runtime.delete_dynamic_array-48199({ %src.Element**, i64, i64, %runtime.Allocator }* %113, %runtime.Source_Code_Location* %6, i8* %115)
  %117 = load %src.Element*, %src.Element** %1, align 8
  %118 = getelementptr inbounds %runtime.Context, %runtime.Context* %8, i32 0, i32 0
  %119 = load %runtime.Allocator, %runtime.Allocator* %118, align 8
  %120 = bitcast %src.Element* %117 to i8*
  %121 = bitcast %runtime.Allocator* %118 to { i64, i64 }*
  %122 = load { i64, i64 }, { i64, i64 }* %121, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([58 x i8], [58 x i8]* @"csbs$1a2", i64 0, i64 0), i64 57 }, i32 450, i32 3, %..string { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @"csbs$316", i64 0, i64 0), i64 18 } }, %runtime.Source_Code_Location* %7, align 8
  %123 = bitcast %runtime.Context* %8 to i8*
  %124 = call i8 @runtime.mem_free(i8* %120, { i64, i64 } %122, %runtime.Source_Code_Location* %7, i8* %123)
  ret i8 1

if.else:                                          ; preds = %if.done2
  ret i8 0

if.done10:                                        ; No predecessors!
  unreachable
}

define internal void @src.element_reset_focus(%src.Window* %0, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %1 = alloca %src.Window*, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Window* %0, %src.Window** %1, align 8
  %2 = bitcast i8* %__.context_ptr to %runtime.Context*
  %3 = load %src.Window*, %src.Window** %1, align 8
  %4 = getelementptr inbounds %src.Window, %src.Window* %3, i32 0, i32 4
  %5 = load %src.Element*, %src.Element** %4, align 8
  %6 = load %src.Window*, %src.Window** %1, align 8
  %7 = getelementptr inbounds %src.Window, %src.Window* %6, i32 0, i32 0
  %8 = icmp ne %src.Element* %5, %7
  %9 = zext i1 %8 to i8
  %10 = trunc i8 %9 to i1
  br i1 %10, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  %11 = load %src.Window*, %src.Window** %1, align 8
  %12 = getelementptr inbounds %src.Window, %src.Window* %11, i32 0, i32 0
  %13 = bitcast %runtime.Context* %2 to i8*
  %14 = call i8 @src.element_focus(%src.Element* %12, i8* %13)
  %15 = load %src.Window*, %src.Window** %1, align 8
  %16 = getelementptr inbounds %src.Window, %src.Window* %15, i32 0, i32 0
  %17 = bitcast %runtime.Context* %2 to i8*
  call void @src.element_repaint(%src.Element* %16, i8* %17)
  br label %if.done

if.done:                                          ; preds = %if.then, %entry
  ret void
}

define internal i8 @src.element_focus(%src.Element* %0, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %1 = alloca %src.Element*, align 8
  %2 = alloca %src.Element*, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Element* %0, %src.Element** %1, align 8
  %3 = bitcast i8* %__.context_ptr to %runtime.Context*
  %4 = load %src.Element*, %src.Element** %1, align 8
  %5 = getelementptr inbounds %src.Element, %src.Element* %4, i32 0, i32 4
  %6 = load %src.Window*, %src.Window** %5, align 8
  %7 = getelementptr inbounds %src.Window, %src.Window* %6, i32 0, i32 4
  %8 = load %src.Element*, %src.Element** %7, align 8
  store %src.Element* %8, %src.Element** %2, align 8
  %9 = load %src.Element*, %src.Element** %2, align 8
  %10 = load %src.Element*, %src.Element** %1, align 8
  %11 = icmp eq %src.Element* %9, %10
  %12 = zext i1 %11 to i8
  %13 = trunc i8 %12 to i1
  br i1 %13, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  ret i8 0

if.done:                                          ; preds = %entry
  %14 = load %src.Element*, %src.Element** %1, align 8
  %15 = getelementptr inbounds %src.Element, %src.Element* %14, i32 0, i32 4
  %16 = load %src.Window*, %src.Window** %15, align 8
  %17 = getelementptr inbounds %src.Window, %src.Window* %16, i32 0, i32 4
  %18 = load %src.Element*, %src.Element** %1, align 8
  store %src.Element* %18, %src.Element** %17, align 8
  %19 = load %src.Element*, %src.Element** %2, align 8
  %20 = icmp ne %src.Element* %19, null
  %21 = zext i1 %20 to i8
  %22 = trunc i8 %21 to i1
  br i1 %22, label %if.then1, label %if.done2

if.then1:                                         ; preds = %if.done
  %23 = load %src.Element*, %src.Element** %2, align 8
  %24 = bitcast %runtime.Context* %3 to i8*
  %25 = call i64 @src.element_message(%src.Element* %23, i64 1, i64 5, i8* null, i8* %24)
  br label %if.done2

if.done2:                                         ; preds = %if.then1, %if.done
  %26 = load %src.Element*, %src.Element** %1, align 8
  %27 = icmp ne %src.Element* %26, null
  %28 = zext i1 %27 to i8
  %29 = trunc i8 %28 to i1
  br i1 %29, label %if.then3, label %if.done4

if.then3:                                         ; preds = %if.done2
  %30 = load %src.Element*, %src.Element** %1, align 8
  %31 = bitcast %runtime.Context* %3 to i8*
  %32 = call i64 @src.element_message(%src.Element* %30, i64 1, i64 5, i8* null, i8* %31)
  br label %if.done4

if.done4:                                         ; preds = %if.then3, %if.done2
  ret i8 1
}

define internal i8 @src.window_focused_shown(%src.Window* %0, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %1 = alloca %src.Window*, align 8
  %2 = alloca %src.Element*, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Window* %0, %src.Window** %1, align 8
  %3 = bitcast i8* %__.context_ptr to %runtime.Context*
  %4 = load %src.Window*, %src.Window** %1, align 8
  %5 = getelementptr inbounds %src.Window, %src.Window* %4, i32 0, i32 4
  %6 = load %src.Element*, %src.Element** %5, align 8
  %7 = icmp eq %src.Element* %6, null
  %8 = zext i1 %7 to i8
  %9 = trunc i8 %8 to i1
  br i1 %9, label %if.then, label %cmp.or

cmp.or:                                           ; preds = %entry
  %10 = load %src.Window*, %src.Window** %1, align 8
  %11 = getelementptr inbounds %src.Window, %src.Window* %10, i32 0, i32 4
  %12 = load %src.Element*, %src.Element** %11, align 8
  %13 = load %src.Window*, %src.Window** %1, align 8
  %14 = getelementptr inbounds %src.Window, %src.Window* %13, i32 0, i32 0
  %15 = icmp eq %src.Element* %12, %14
  %16 = zext i1 %15 to i8
  %17 = trunc i8 %16 to i1
  br i1 %17, label %if.then, label %if.done

if.then:                                          ; preds = %cmp.or, %entry
  ret i8 0

if.done:                                          ; preds = %cmp.or
  %18 = load %src.Window*, %src.Window** %1, align 8
  %19 = getelementptr inbounds %src.Window, %src.Window* %18, i32 0, i32 4
  %20 = load %src.Element*, %src.Element** %19, align 8
  store %src.Element* %20, %src.Element** %2, align 8
  br label %for.loop

for.loop:                                         ; preds = %if.done2, %if.done
  %21 = load %src.Element*, %src.Element** %2, align 8
  %22 = icmp ne %src.Element* %21, null
  %23 = zext i1 %22 to i8
  %24 = trunc i8 %23 to i1
  br i1 %24, label %for.body, label %for.done

for.body:                                         ; preds = %for.loop
  %25 = load %src.Element*, %src.Element** %2, align 8
  %26 = getelementptr inbounds %src.Element, %src.Element* %25, i32 0, i32 0
  %27 = load i32, i32* %26, align 4
  %28 = and i32 %27, 2
  %29 = icmp ne i32 %28, 0
  %30 = zext i1 %29 to i8
  %31 = trunc i8 %30 to i1
  br i1 %31, label %if.then1, label %if.done2

if.then1:                                         ; preds = %for.body
  ret i8 0

if.done2:                                         ; preds = %for.body
  %32 = load %src.Element*, %src.Element** %2, align 8
  %33 = getelementptr inbounds %src.Element, %src.Element* %32, i32 0, i32 2
  %34 = load %src.Element*, %src.Element** %33, align 8
  store %src.Element* %34, %src.Element** %2, align 8
  br label %for.loop

for.done:                                         ; preds = %for.loop
  ret i8 1
}

define internal i64 @src.button_message(%src.Element* %0, i64 %1, i64 %2, i8* %3, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %4 = alloca %src.Element*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i8*, align 8
  %8 = alloca %src.Button*, align 8
  %9 = alloca i8, align 1
  %10 = alloca i8, align 1
  %11 = alloca %src.Render_Target*, align 8
  %12 = alloca [4 x i8], align 8
  %13 = alloca i64, align 8
  %14 = alloca %src.Rect, align 8
  %15 = alloca { <2 x float>, <2 x float> }, align 8
  %16 = alloca %..string, align 8
  %17 = alloca %..string, align 8
  %18 = alloca { <2 x float>, <2 x float> }, align 8
  %19 = alloca %runtime.Source_Code_Location, align 8
  %20 = alloca %..string, align 8
  %21 = alloca %..string, align 8
  %22 = alloca float, align 4
  br label %entry

entry:                                            ; preds = %decls
  store %src.Element* %0, %src.Element** %4, align 8
  store i64 %1, i64* %5, align 8
  store i64 %2, i64* %6, align 8
  store i8* %3, i8** %7, align 8
  %23 = bitcast i8* %__.context_ptr to %runtime.Context*
  %24 = load %src.Element*, %src.Element** %4, align 8
  %25 = bitcast %src.Element* %24 to %src.Button*
  store %src.Button* %25, %src.Button** %8, align 8
  %26 = load i64, i64* %5, align 8
  switch i64 %26, label %switch.done [
    i64 2, label %switch.case.body
    i64 1, label %switch.case.body8
    i64 4, label %switch.case.body9
    i64 22, label %switch.case.body10
    i64 24, label %switch.case.body13
    i64 9, label %switch.case.body14
    i64 10, label %switch.case.body15
    i64 27, label %switch.case.body16
  ]

switch.case.body:                                 ; preds = %entry
  %27 = load %src.Element*, %src.Element** %4, align 8
  %28 = getelementptr inbounds %src.Element, %src.Element* %27, i32 0, i32 4
  %29 = load %src.Window*, %src.Window** %28, align 8
  %30 = getelementptr inbounds %src.Window, %src.Window* %29, i32 0, i32 2
  %31 = load %src.Element*, %src.Element** %30, align 8
  %32 = load %src.Element*, %src.Element** %4, align 8
  %33 = icmp eq %src.Element* %31, %32
  %34 = zext i1 %33 to i8
  store i8 %34, i8* %9, align 1
  %35 = load %src.Element*, %src.Element** %4, align 8
  %36 = getelementptr inbounds %src.Element, %src.Element* %35, i32 0, i32 4
  %37 = load %src.Window*, %src.Window** %36, align 8
  %38 = getelementptr inbounds %src.Window, %src.Window* %37, i32 0, i32 1
  %39 = load %src.Element*, %src.Element** %38, align 8
  %40 = load %src.Element*, %src.Element** %4, align 8
  %41 = icmp eq %src.Element* %39, %40
  %42 = zext i1 %41 to i8
  store i8 %42, i8* %10, align 1
  %43 = load %src.Element*, %src.Element** %4, align 8
  %44 = getelementptr inbounds %src.Element, %src.Element* %43, i32 0, i32 4
  %45 = load %src.Window*, %src.Window** %44, align 8
  %46 = getelementptr inbounds %src.Window, %src.Window* %45, i32 0, i32 24
  %47 = load %src.Render_Target*, %src.Render_Target** %46, align 8
  store %src.Render_Target* %47, %src.Render_Target** %11, align 8
  %48 = load i8, i8* %10, align 1
  %49 = trunc i8 %48 to i1
  br i1 %49, label %if.then, label %cmp.or

cmp.or:                                           ; preds = %switch.case.body
  %50 = load i8, i8* %9, align 1
  %51 = trunc i8 %50 to i1
  br i1 %51, label %if.then, label %if.else

if.then:                                          ; preds = %cmp.or, %switch.case.body
  %52 = load [4 x i8], [4 x i8]* getelementptr inbounds (%src.Theme, %src.Theme* @src.theme, i64 0, i32 2), align 1
  br label %if.done

if.else:                                          ; preds = %cmp.or
  %53 = load [4 x i8], [4 x i8]* getelementptr inbounds (%src.Theme, %src.Theme* @src.theme, i64 0, i32 5), align 1
  br label %if.done

if.done:                                          ; preds = %if.else, %if.then
  %54 = phi [4 x i8] [ %52, %if.then ], [ %53, %if.else ]
  store [4 x i8] %54, [4 x i8]* %12, align 1
  br label %if.init

if.init:                                          ; preds = %if.done
  %55 = load %src.Element*, %src.Element** %4, align 8
  %56 = bitcast [4 x i8]* %12 to i8*
  %57 = bitcast %runtime.Context* %23 to i8*
  %58 = call i64 @src.element_message(%src.Element* %55, i64 34, i64 0, i8* %56, i8* %57)
  store i64 %58, i64* %13, align 8
  %59 = load i64, i64* %13, align 8
  %60 = icmp ne i64 %59, 0
  %61 = zext i1 %60 to i8
  %62 = trunc i8 %61 to i1
  br i1 %62, label %if.then1, label %if.done4

if.then1:                                         ; preds = %if.init
  %63 = load i64, i64* %13, align 8
  %64 = icmp eq i64 %63, 1
  %65 = zext i1 %64 to i8
  %66 = trunc i8 %65 to i1
  br i1 %66, label %if.then2, label %if.done3

if.then2:                                         ; preds = %if.then1
  %67 = load %src.Element*, %src.Element** %4, align 8
  %68 = getelementptr inbounds %src.Element, %src.Element* %67, i32 0, i32 5
  %69 = load %src.Rect, %src.Rect* %68, align 4
  store %src.Rect %69, %src.Rect* %14, align 4
  %70 = getelementptr inbounds %src.Rect, %src.Rect* %14, i32 0, i32 1
  %71 = getelementptr inbounds %src.Rect, %src.Rect* %14, i32 0, i32 0
  %72 = load float, float* %71, align 4
  %73 = fadd float %72, 4.000000e+00
  store float %73, float* %70, align 4
  %74 = load %src.Render_Target*, %src.Render_Target** %11, align 8
  %75 = load %src.Rect, %src.Rect* %14, align 4
  %76 = load [4 x i8], [4 x i8]* %12, align 1
  %77 = bitcast %src.Rect* %14 to { <2 x float>, <2 x float> }*
  %78 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %77, align 8
  %79 = bitcast [4 x i8]* %12 to i64*
  %80 = load i64, i64* %79, align 8
  %81 = bitcast %runtime.Context* %23 to i8*
  call void @src.render_rect(%src.Render_Target* %74, { <2 x float>, <2 x float> } %78, i64 %80, float 0.000000e+00, i8* %81)
  br label %if.done3

if.done3:                                         ; preds = %if.then2, %if.then1
  br label %if.done4

if.done4:                                         ; preds = %if.done3, %if.init
  %82 = load i8, i8* %10, align 1
  %83 = trunc i8 %82 to i1
  br i1 %83, label %if.then6, label %cmp.or5

cmp.or5:                                          ; preds = %if.done4
  %84 = load i8, i8* %9, align 1
  %85 = trunc i8 %84 to i1
  br i1 %85, label %if.then6, label %if.done7

if.then6:                                         ; preds = %cmp.or5, %if.done4
  %86 = load %src.Render_Target*, %src.Render_Target** %11, align 8
  %87 = load %src.Element*, %src.Element** %4, align 8
  %88 = getelementptr inbounds %src.Element, %src.Element* %87, i32 0, i32 5
  %89 = load %src.Rect, %src.Rect* %88, align 4
  %90 = load [4 x i8], [4 x i8]* %12, align 1
  %91 = load float, float* @src.ROUNDNESS, align 4
  %92 = load float, float* @src.LINE_WIDTH, align 4
  %93 = bitcast { <2 x float>, <2 x float> }* %15 to %src.Rect*
  store %src.Rect %89, %src.Rect* %93, align 4
  %94 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %15, align 8
  %95 = bitcast [4 x i8]* %12 to i64*
  %96 = load i64, i64* %95, align 8
  %97 = bitcast %runtime.Context* %23 to i8*
  call void @src.render_rect_outline(%src.Render_Target* %86, { <2 x float>, <2 x float> } %94, i64 %96, float %91, float %92, i8* %97)
  br label %if.done7

if.done7:                                         ; preds = %if.then6, %cmp.or5
  %98 = load %src.Button*, %src.Button** %8, align 8
  %99 = getelementptr inbounds %src.Button, %src.Button* %98, i32 0, i32 1
  %100 = load %strings.Builder, %strings.Builder* %99, align 8
  %101 = bitcast %runtime.Context* %23 to i8*
  %102 = call { i64, i64 } @strings.to_string(%strings.Builder* %99, i8* %101)
  %103 = bitcast %..string* %17 to { i64, i64 }*
  store { i64, i64 } %102, { i64, i64 }* %103, align 8
  %104 = load %..string, %..string* %17, align 8
  store %..string %104, %..string* %16, align 8
  %105 = load %src.Element*, %src.Element** %4, align 8
  %106 = load %..string, %..string* %16, align 8
  %107 = load %src.Element*, %src.Element** %4, align 8
  %108 = getelementptr inbounds %src.Element, %src.Element* %107, i32 0, i32 5
  %109 = load %src.Rect, %src.Rect* %108, align 4
  %110 = load [4 x i8], [4 x i8]* %12, align 1
  %111 = bitcast %..string* %16 to { i64, i64 }*
  %112 = load { i64, i64 }, { i64, i64 }* %111, align 8
  %113 = bitcast { <2 x float>, <2 x float> }* %18 to %src.Rect*
  store %src.Rect %109, %src.Rect* %113, align 4
  %114 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %18, align 8
  %115 = bitcast [4 x i8]* %12 to i64*
  %116 = load i64, i64* %115, align 8
  %117 = bitcast %runtime.Context* %23 to i8*
  call void @src.erender_string_aligned(%src.Element* %105, { i64, i64 } %112, { <2 x float>, <2 x float> } %114, i64 %116, i64 1, i64 1, i8* %117)
  br label %switch.done

switch.case.body8:                                ; preds = %entry
  %118 = load %src.Element*, %src.Element** %4, align 8
  %119 = bitcast %runtime.Context* %23 to i8*
  call void @src.element_repaint(%src.Element* %118, i8* %119)
  br label %switch.done

switch.case.body9:                                ; preds = %entry
  %120 = load %src.Button*, %src.Button** %8, align 8
  %121 = getelementptr inbounds %src.Button, %src.Button* %120, i32 0, i32 1
  %122 = getelementptr inbounds %strings.Builder, %strings.Builder* %121, i32 0, i32 0
  %123 = load { i8*, i64, i64, %runtime.Allocator }, { i8*, i64, i64, %runtime.Allocator }* %122, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([58 x i8], [58 x i8]* @"csbs$1a2", i64 0, i64 0), i64 57 }, i32 550, i32 4, %..string { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"csbs$317", i64 0, i64 0), i64 14 } }, %runtime.Source_Code_Location* %19, align 8
  %124 = bitcast %runtime.Context* %23 to i8*
  %125 = call i8 @runtime.delete_dynamic_array-47636({ i8*, i64, i64, %runtime.Allocator }* %122, %runtime.Source_Code_Location* %19, i8* %124)
  br label %switch.done

switch.case.body10:                               ; preds = %entry
  %126 = load %src.Button*, %src.Button** %8, align 8
  %127 = getelementptr inbounds %src.Button, %src.Button* %126, i32 0, i32 2
  %128 = load i8*, i8** %127, align 8
  %129 = icmp ne i8* %128, null
  %130 = zext i1 %129 to i8
  %131 = trunc i8 %130 to i1
  br i1 %131, label %if.then11, label %if.done12

if.then11:                                        ; preds = %switch.case.body10
  %132 = load %src.Button*, %src.Button** %8, align 8
  %133 = getelementptr inbounds %src.Button, %src.Button* %132, i32 0, i32 2
  %134 = load i8*, i8** %133, align 8
  %135 = load %src.Button*, %src.Button** %8, align 8
  %136 = getelementptr inbounds %src.Button, %src.Button* %135, i32 0, i32 0
  %137 = getelementptr inbounds %src.Element, %src.Element* %136, i32 0, i32 12
  %138 = load i8*, i8** %137, align 8
  %139 = bitcast %runtime.Context* %23 to i8*
  %140 = bitcast i8* %134 to void (i8*, i8*)*
  call void %140(i8* %138, i8* %139)
  br label %if.done12

if.done12:                                        ; preds = %if.then11, %switch.case.body10
  br label %switch.done

switch.case.body13:                               ; preds = %entry
  ret i64 2

switch.case.body14:                               ; preds = %entry
  %141 = load %src.Button*, %src.Button** %8, align 8
  %142 = getelementptr inbounds %src.Button, %src.Button* %141, i32 0, i32 1
  %143 = load %strings.Builder, %strings.Builder* %142, align 8
  %144 = bitcast %runtime.Context* %23 to i8*
  %145 = call { i64, i64 } @strings.to_string(%strings.Builder* %142, i8* %144)
  %146 = bitcast %..string* %21 to { i64, i64 }*
  store { i64, i64 } %145, { i64, i64 }* %146, align 8
  %147 = load %..string, %..string* %21, align 8
  store %..string %147, %..string* %20, align 8
  %148 = load float, float* @src.SCALE, align 4
  %149 = fmul float 5.000000e+01, %148
  %150 = load %src.Element*, %src.Element** %4, align 8
  %151 = load %..string, %..string* %20, align 8
  %152 = bitcast %..string* %20 to { i64, i64 }*
  %153 = load { i64, i64 }, { i64, i64 }* %152, align 8
  %154 = bitcast %runtime.Context* %23 to i8*
  %155 = call float @src.estring_width(%src.Element* %150, { i64, i64 } %153, i8* %154)
  %156 = load float, float* @src.SCALE, align 4
  %157 = fmul float 1.000000e+01, %156
  %158 = fadd float %155, %157
  %159 = fcmp ogt float %149, %158
  %160 = select i1 %159, float %149, float %158
  store float %160, float* %22, align 4
  %161 = load float, float* %22, align 4
  %162 = fptosi float %161 to i64
  ret i64 %162

switch.case.body15:                               ; preds = %entry
  %163 = load %src.Element*, %src.Element** %4, align 8
  %164 = bitcast %runtime.Context* %23 to i8*
  %165 = call float @src.efont_size(%src.Element* %163, i8* %164)
  %166 = load float, float* @src.SCALE, align 4
  %167 = fmul float 1.000000e+01, %166
  %168 = fadd float %165, %167
  %169 = fptosi float %168 to i64
  ret i64 %169

switch.case.body16:                               ; preds = %entry
  %170 = load %src.Element*, %src.Element** %4, align 8
  %171 = load i8*, i8** %7, align 8
  %172 = bitcast %runtime.Context* %23 to i8*
  call void @src.key_combination_check_click(%src.Element* %170, i8* %171, i8* %172)
  br label %switch.done

switch.done:                                      ; preds = %switch.case.body16, %if.done12, %switch.case.body9, %switch.case.body8, %if.done7, %entry
  ret i64 0
}

define internal %src.Button* @src.button_init(%src.Element* %0, i32 %1, { i64, i64 } %2, i8* %3, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %4 = alloca %src.Element*, align 8
  %5 = alloca i32, align 4
  %6 = alloca %..string, align 8
  %7 = alloca i8*, align 8
  %8 = alloca %src.Button*, align 8
  %9 = alloca %strings.Builder, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Element* %0, %src.Element** %4, align 8
  store i32 %1, i32* %5, align 4
  %10 = bitcast %..string* %6 to { i64, i64 }*
  store { i64, i64 } %2, { i64, i64 }* %10, align 8
  %11 = load %..string, %..string* %6, align 8
  store i8* %3, i8** %7, align 8
  store %src.Button* null, %src.Button** %8, align 8
  %12 = bitcast i8* %__.context_ptr to %runtime.Context*
  %13 = load %src.Element*, %src.Element** %4, align 8
  %14 = load i32, i32* %5, align 4
  %15 = or i32 %14, 1024
  %16 = getelementptr inbounds %runtime.Context, %runtime.Context* %12, i32 0, i32 0
  %17 = load %runtime.Allocator, %runtime.Allocator* %16, align 8
  %18 = bitcast %runtime.Allocator* %16 to { i64, i64 }*
  %19 = load { i64, i64 }, { i64, i64 }* %18, align 8
  %20 = bitcast %runtime.Context* %12 to i8*
  %21 = call %src.Button* @src.element_init-48276(%src.Element* %13, i32 %15, i8* bitcast (i64 (%src.Element*, i64, i64, i8*, i8*)* @src.button_message to i8*), i64 -1, { i64, i64 } %19, i8* %20)
  store %src.Button* %21, %src.Button** %8, align 8
  %22 = load %src.Button*, %src.Button** %8, align 8
  %23 = getelementptr inbounds %src.Button, %src.Button* %22, i32 0, i32 1
  %24 = getelementptr inbounds %runtime.Context, %runtime.Context* %12, i32 0, i32 0
  %25 = load %runtime.Allocator, %runtime.Allocator* %24, align 8
  %26 = bitcast %runtime.Allocator* %24 to { i64, i64 }*
  %27 = load { i64, i64 }, { i64, i64 }* %26, align 8
  %28 = bitcast %strings.Builder* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* %28, i8 0, i64 40, i1 false)
  %29 = bitcast %runtime.Context* %12 to i8*
  call void @strings.builder_make_len_cap(%strings.Builder* sret %9, i64 0, i64 32, { i64, i64 } %27, i8* %29)
  %30 = load %strings.Builder, %strings.Builder* %9, align 8
  store %strings.Builder %30, %strings.Builder* %23, align 8
  %31 = load %src.Button*, %src.Button** %8, align 8
  %32 = getelementptr inbounds %src.Button, %src.Button* %31, i32 0, i32 0
  %33 = getelementptr inbounds %src.Element, %src.Element* %32, i32 0, i32 12
  %34 = load %src.Button*, %src.Button** %8, align 8
  %35 = bitcast %src.Button* %34 to i8*
  store i8* %35, i8** %33, align 8
  %36 = load %src.Button*, %src.Button** %8, align 8
  %37 = getelementptr inbounds %src.Button, %src.Button* %36, i32 0, i32 1
  %38 = load %..string, %..string* %6, align 8
  %39 = bitcast %..string* %6 to { i64, i64 }*
  %40 = load { i64, i64 }, { i64, i64 }* %39, align 8
  %41 = bitcast %runtime.Context* %12 to i8*
  %42 = call i64 @strings.write_string(%strings.Builder* %37, { i64, i64 } %40, i8* %41)
  %43 = load %src.Button*, %src.Button** %8, align 8
  %44 = getelementptr inbounds %src.Button, %src.Button* %43, i32 0, i32 0
  %45 = getelementptr inbounds %src.Element, %src.Element* %44, i32 0, i32 8
  %46 = load i8*, i8** %7, align 8
  store i8* %46, i8** %45, align 8
  %47 = load %src.Button*, %src.Button** %8, align 8
  store %src.Button* %47, %src.Button** %8, align 8
  ret %src.Button* %47
}

define internal i64 @src.color_button_message(%src.Element* %0, i64 %1, i64 %2, i8* %3, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %4 = alloca %src.Element*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i8*, align 8
  %8 = alloca %src.Color_Button*, align 8
  %9 = alloca i8, align 1
  %10 = alloca i8, align 1
  %11 = alloca %src.Render_Target*, align 8
  %12 = alloca [4 x i8], align 8
  %13 = alloca { <2 x float>, <2 x float> }, align 8
  %14 = alloca i64, align 8
  %15 = alloca { <2 x float>, <2 x float> }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Element* %0, %src.Element** %4, align 8
  store i64 %1, i64* %5, align 8
  store i64 %2, i64* %6, align 8
  store i8* %3, i8** %7, align 8
  %16 = bitcast i8* %__.context_ptr to %runtime.Context*
  %17 = load %src.Element*, %src.Element** %4, align 8
  %18 = bitcast %src.Element* %17 to %src.Color_Button*
  store %src.Color_Button* %18, %src.Color_Button** %8, align 8
  %19 = load i64, i64* %5, align 8
  switch i64 %19, label %switch.done [
    i64 2, label %switch.case.body
    i64 1, label %switch.case.body4
    i64 22, label %switch.case.body5
    i64 24, label %switch.case.body8
    i64 9, label %switch.case.body9
    i64 10, label %switch.case.body10
    i64 27, label %switch.case.body11
  ]

switch.case.body:                                 ; preds = %entry
  %20 = load %src.Element*, %src.Element** %4, align 8
  %21 = getelementptr inbounds %src.Element, %src.Element* %20, i32 0, i32 4
  %22 = load %src.Window*, %src.Window** %21, align 8
  %23 = getelementptr inbounds %src.Window, %src.Window* %22, i32 0, i32 2
  %24 = load %src.Element*, %src.Element** %23, align 8
  %25 = load %src.Element*, %src.Element** %4, align 8
  %26 = icmp eq %src.Element* %24, %25
  %27 = zext i1 %26 to i8
  store i8 %27, i8* %9, align 1
  %28 = load %src.Element*, %src.Element** %4, align 8
  %29 = getelementptr inbounds %src.Element, %src.Element* %28, i32 0, i32 4
  %30 = load %src.Window*, %src.Window** %29, align 8
  %31 = getelementptr inbounds %src.Window, %src.Window* %30, i32 0, i32 1
  %32 = load %src.Element*, %src.Element** %31, align 8
  %33 = load %src.Element*, %src.Element** %4, align 8
  %34 = icmp eq %src.Element* %32, %33
  %35 = zext i1 %34 to i8
  store i8 %35, i8* %10, align 1
  %36 = load %src.Element*, %src.Element** %4, align 8
  %37 = getelementptr inbounds %src.Element, %src.Element* %36, i32 0, i32 4
  %38 = load %src.Window*, %src.Window** %37, align 8
  %39 = getelementptr inbounds %src.Window, %src.Window* %38, i32 0, i32 24
  %40 = load %src.Render_Target*, %src.Render_Target** %39, align 8
  store %src.Render_Target* %40, %src.Render_Target** %11, align 8
  %41 = load i8, i8* %10, align 1
  %42 = trunc i8 %41 to i1
  br i1 %42, label %if.then, label %cmp.or

cmp.or:                                           ; preds = %switch.case.body
  %43 = load i8, i8* %9, align 1
  %44 = trunc i8 %43 to i1
  br i1 %44, label %if.then, label %if.else

if.then:                                          ; preds = %cmp.or, %switch.case.body
  %45 = load [4 x i8], [4 x i8]* getelementptr inbounds (%src.Theme, %src.Theme* @src.theme, i64 0, i32 2), align 1
  br label %if.done

if.else:                                          ; preds = %cmp.or
  %46 = load [4 x i8], [4 x i8]* getelementptr inbounds (%src.Theme, %src.Theme* @src.theme, i64 0, i32 5), align 1
  br label %if.done

if.done:                                          ; preds = %if.else, %if.then
  %47 = phi [4 x i8] [ %45, %if.then ], [ %46, %if.else ]
  store [4 x i8] %47, [4 x i8]* %12, align 1
  %48 = load %src.Render_Target*, %src.Render_Target** %11, align 8
  %49 = load %src.Element*, %src.Element** %4, align 8
  %50 = getelementptr inbounds %src.Element, %src.Element* %49, i32 0, i32 5
  %51 = load %src.Rect, %src.Rect* %50, align 4
  %52 = load %src.Color_Button*, %src.Color_Button** %8, align 8
  %53 = getelementptr inbounds %src.Color_Button, %src.Color_Button* %52, i32 0, i32 2
  %54 = load [4 x i8]*, [4 x i8]** %53, align 8
  %55 = load [4 x i8], [4 x i8]* %54, align 1
  %56 = bitcast { <2 x float>, <2 x float> }* %13 to %src.Rect*
  store %src.Rect %51, %src.Rect* %56, align 4
  %57 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %13, align 8
  %58 = bitcast i64* %14 to [4 x i8]*
  store [4 x i8] %55, [4 x i8]* %58, align 1
  %59 = load i64, i64* %14, align 8
  %60 = bitcast %runtime.Context* %16 to i8*
  call void @src.render_rect(%src.Render_Target* %48, { <2 x float>, <2 x float> } %57, i64 %59, float 0.000000e+00, i8* %60)
  %61 = load i8, i8* %10, align 1
  %62 = trunc i8 %61 to i1
  br i1 %62, label %if.then2, label %cmp.or1

cmp.or1:                                          ; preds = %if.done
  %63 = load i8, i8* %9, align 1
  %64 = trunc i8 %63 to i1
  br i1 %64, label %if.then2, label %if.done3

if.then2:                                         ; preds = %cmp.or1, %if.done
  %65 = load %src.Render_Target*, %src.Render_Target** %11, align 8
  %66 = load %src.Element*, %src.Element** %4, align 8
  %67 = getelementptr inbounds %src.Element, %src.Element* %66, i32 0, i32 5
  %68 = load %src.Rect, %src.Rect* %67, align 4
  %69 = load [4 x i8], [4 x i8]* %12, align 1
  %70 = load float, float* @src.ROUNDNESS, align 4
  %71 = load float, float* @src.LINE_WIDTH, align 4
  %72 = bitcast { <2 x float>, <2 x float> }* %15 to %src.Rect*
  store %src.Rect %68, %src.Rect* %72, align 4
  %73 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %15, align 8
  %74 = bitcast [4 x i8]* %12 to i64*
  %75 = load i64, i64* %74, align 8
  %76 = bitcast %runtime.Context* %16 to i8*
  call void @src.render_rect_outline(%src.Render_Target* %65, { <2 x float>, <2 x float> } %73, i64 %75, float %70, float %71, i8* %76)
  br label %if.done3

if.done3:                                         ; preds = %if.then2, %cmp.or1
  br label %switch.done

switch.case.body4:                                ; preds = %entry
  br label %switch.done

switch.case.body5:                                ; preds = %entry
  %77 = load %src.Color_Button*, %src.Color_Button** %8, align 8
  %78 = getelementptr inbounds %src.Color_Button, %src.Color_Button* %77, i32 0, i32 1
  %79 = load i8*, i8** %78, align 8
  %80 = icmp ne i8* %79, null
  %81 = zext i1 %80 to i8
  %82 = trunc i8 %81 to i1
  br i1 %82, label %if.then6, label %if.done7

if.then6:                                         ; preds = %switch.case.body5
  %83 = load %src.Color_Button*, %src.Color_Button** %8, align 8
  %84 = getelementptr inbounds %src.Color_Button, %src.Color_Button* %83, i32 0, i32 1
  %85 = load i8*, i8** %84, align 8
  %86 = load %src.Color_Button*, %src.Color_Button** %8, align 8
  %87 = getelementptr inbounds %src.Color_Button, %src.Color_Button* %86, i32 0, i32 0
  %88 = getelementptr inbounds %src.Element, %src.Element* %87, i32 0, i32 12
  %89 = load i8*, i8** %88, align 8
  %90 = bitcast %runtime.Context* %16 to i8*
  %91 = bitcast i8* %85 to void (i8*, i8*)*
  call void %91(i8* %89, i8* %90)
  br label %if.done7

if.done7:                                         ; preds = %if.then6, %switch.case.body5
  br label %switch.done

switch.case.body8:                                ; preds = %entry
  ret i64 2

switch.case.body9:                                ; preds = %entry
  %92 = load float, float* @src.SCALE, align 4
  %93 = fmul float 2.000000e+01, %92
  %94 = fptosi float %93 to i64
  ret i64 %94

switch.case.body10:                               ; preds = %entry
  %95 = load float, float* @src.SCALE, align 4
  %96 = fmul float 2.000000e+01, %95
  %97 = fptosi float %96 to i64
  ret i64 %97

switch.case.body11:                               ; preds = %entry
  %98 = load %src.Element*, %src.Element** %4, align 8
  %99 = load i8*, i8** %7, align 8
  %100 = bitcast %runtime.Context* %16 to i8*
  call void @src.key_combination_check_click(%src.Element* %98, i8* %99, i8* %100)
  br label %switch.done

switch.done:                                      ; preds = %switch.case.body11, %if.done7, %switch.case.body4, %if.done3, %entry
  ret i64 0
}

define internal %src.Color_Button* @src.color_button_init(%src.Element* %0, i32 %1, [4 x i8]* %2, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %3 = alloca %src.Element*, align 8
  %4 = alloca i32, align 4
  %5 = alloca [4 x i8]*, align 8
  %6 = alloca %src.Color_Button*, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Element* %0, %src.Element** %3, align 8
  store i32 %1, i32* %4, align 4
  store [4 x i8]* %2, [4 x i8]** %5, align 8
  store %src.Color_Button* null, %src.Color_Button** %6, align 8
  %7 = bitcast i8* %__.context_ptr to %runtime.Context*
  %8 = load %src.Element*, %src.Element** %3, align 8
  %9 = load i32, i32* %4, align 4
  %10 = getelementptr inbounds %runtime.Context, %runtime.Context* %7, i32 0, i32 0
  %11 = load %runtime.Allocator, %runtime.Allocator* %10, align 8
  %12 = bitcast %runtime.Allocator* %10 to { i64, i64 }*
  %13 = load { i64, i64 }, { i64, i64 }* %12, align 8
  %14 = bitcast %runtime.Context* %7 to i8*
  %15 = call %src.Color_Button* @src.element_init-48296(%src.Element* %8, i32 %9, i8* bitcast (i64 (%src.Element*, i64, i64, i8*, i8*)* @src.color_button_message to i8*), i64 -1, { i64, i64 } %13, i8* %14)
  store %src.Color_Button* %15, %src.Color_Button** %6, align 8
  %16 = load %src.Color_Button*, %src.Color_Button** %6, align 8
  %17 = getelementptr inbounds %src.Color_Button, %src.Color_Button* %16, i32 0, i32 2
  %18 = load [4 x i8]*, [4 x i8]** %5, align 8
  store [4 x i8]* %18, [4 x i8]** %17, align 8
  %19 = load %src.Color_Button*, %src.Color_Button** %6, align 8
  %20 = getelementptr inbounds %src.Color_Button, %src.Color_Button* %19, i32 0, i32 0
  %21 = getelementptr inbounds %src.Element, %src.Element* %20, i32 0, i32 12
  %22 = load %src.Color_Button*, %src.Color_Button** %6, align 8
  %23 = bitcast %src.Color_Button* %22 to i8*
  store i8* %23, i8** %21, align 8
  %24 = load %src.Color_Button*, %src.Color_Button** %6, align 8
  store %src.Color_Button* %24, %src.Color_Button** %6, align 8
  ret %src.Color_Button* %24
}

define internal i64 @src.icon_button_message(%src.Element* %0, i64 %1, i64 %2, i8* %3, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %4 = alloca %src.Element*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i8*, align 8
  %8 = alloca %src.Icon_Button*, align 8
  %9 = alloca i8, align 1
  %10 = alloca i8, align 1
  %11 = alloca %src.Render_Target*, align 8
  %12 = alloca [4 x i8], align 8
  %13 = alloca %src.Rect, align 8
  %14 = alloca { <2 x float>, <2 x float> }, align 8
  %15 = alloca float, align 4
  %16 = alloca { <2 x float>, <2 x float> }, align 8
  %17 = alloca %src.Rect, align 8
  %18 = alloca float, align 4
  %19 = alloca float, align 4
  br label %entry

entry:                                            ; preds = %decls
  store %src.Element* %0, %src.Element** %4, align 8
  store i64 %1, i64* %5, align 8
  store i64 %2, i64* %6, align 8
  store i8* %3, i8** %7, align 8
  %20 = bitcast i8* %__.context_ptr to %runtime.Context*
  %21 = load %src.Element*, %src.Element** %4, align 8
  %22 = bitcast %src.Element* %21 to %src.Icon_Button*
  store %src.Icon_Button* %22, %src.Icon_Button** %8, align 8
  %23 = load i64, i64* %5, align 8
  switch i64 %23, label %switch.done [
    i64 2, label %switch.case.body
    i64 1, label %switch.case.body6
    i64 22, label %switch.case.body7
    i64 24, label %switch.case.body10
    i64 9, label %switch.case.body11
    i64 10, label %switch.case.body12
    i64 27, label %switch.case.body13
  ]

switch.case.body:                                 ; preds = %entry
  %24 = load %src.Element*, %src.Element** %4, align 8
  %25 = getelementptr inbounds %src.Element, %src.Element* %24, i32 0, i32 4
  %26 = load %src.Window*, %src.Window** %25, align 8
  %27 = getelementptr inbounds %src.Window, %src.Window* %26, i32 0, i32 2
  %28 = load %src.Element*, %src.Element** %27, align 8
  %29 = load %src.Element*, %src.Element** %4, align 8
  %30 = icmp eq %src.Element* %28, %29
  %31 = zext i1 %30 to i8
  store i8 %31, i8* %9, align 1
  %32 = load %src.Element*, %src.Element** %4, align 8
  %33 = getelementptr inbounds %src.Element, %src.Element* %32, i32 0, i32 4
  %34 = load %src.Window*, %src.Window** %33, align 8
  %35 = getelementptr inbounds %src.Window, %src.Window* %34, i32 0, i32 1
  %36 = load %src.Element*, %src.Element** %35, align 8
  %37 = load %src.Element*, %src.Element** %4, align 8
  %38 = icmp eq %src.Element* %36, %37
  %39 = zext i1 %38 to i8
  store i8 %39, i8* %10, align 1
  %40 = load %src.Element*, %src.Element** %4, align 8
  %41 = getelementptr inbounds %src.Element, %src.Element* %40, i32 0, i32 4
  %42 = load %src.Window*, %src.Window** %41, align 8
  %43 = getelementptr inbounds %src.Window, %src.Window* %42, i32 0, i32 24
  %44 = load %src.Render_Target*, %src.Render_Target** %43, align 8
  store %src.Render_Target* %44, %src.Render_Target** %11, align 8
  %45 = load i8, i8* %10, align 1
  %46 = trunc i8 %45 to i1
  br i1 %46, label %if.then, label %cmp.or

cmp.or:                                           ; preds = %switch.case.body
  %47 = load i8, i8* %9, align 1
  %48 = trunc i8 %47 to i1
  br i1 %48, label %if.then, label %if.else

if.then:                                          ; preds = %cmp.or, %switch.case.body
  %49 = load [4 x i8], [4 x i8]* getelementptr inbounds (%src.Theme, %src.Theme* @src.theme, i64 0, i32 2), align 1
  br label %if.done

if.else:                                          ; preds = %cmp.or
  %50 = load [4 x i8], [4 x i8]* getelementptr inbounds (%src.Theme, %src.Theme* @src.theme, i64 0, i32 5), align 1
  br label %if.done

if.done:                                          ; preds = %if.else, %if.then
  %51 = phi [4 x i8] [ %49, %if.then ], [ %50, %if.else ]
  store [4 x i8] %51, [4 x i8]* %12, align 1
  %52 = load %src.Element*, %src.Element** %4, align 8
  %53 = bitcast [4 x i8]* %12 to i8*
  %54 = bitcast %runtime.Context* %20 to i8*
  %55 = call i64 @src.element_message(%src.Element* %52, i64 34, i64 0, i8* %53, i8* %54)
  %56 = icmp eq i64 %55, 1
  %57 = zext i1 %56 to i8
  %58 = trunc i8 %57 to i1
  br i1 %58, label %if.then1, label %if.done2

if.then1:                                         ; preds = %if.done
  %59 = load %src.Element*, %src.Element** %4, align 8
  %60 = getelementptr inbounds %src.Element, %src.Element* %59, i32 0, i32 5
  %61 = load %src.Rect, %src.Rect* %60, align 4
  store %src.Rect %61, %src.Rect* %13, align 4
  %62 = getelementptr inbounds %src.Rect, %src.Rect* %13, i32 0, i32 1
  %63 = getelementptr inbounds %src.Rect, %src.Rect* %13, i32 0, i32 0
  %64 = load float, float* %63, align 4
  %65 = fadd float %64, 4.000000e+00
  store float %65, float* %62, align 4
  %66 = load %src.Render_Target*, %src.Render_Target** %11, align 8
  %67 = load %src.Rect, %src.Rect* %13, align 4
  %68 = load [4 x i8], [4 x i8]* %12, align 1
  %69 = bitcast %src.Rect* %13 to { <2 x float>, <2 x float> }*
  %70 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %69, align 8
  %71 = bitcast [4 x i8]* %12 to i64*
  %72 = load i64, i64* %71, align 8
  %73 = bitcast %runtime.Context* %20 to i8*
  call void @src.render_rect(%src.Render_Target* %66, { <2 x float>, <2 x float> } %70, i64 %72, float 0.000000e+00, i8* %73)
  br label %if.done2

if.done2:                                         ; preds = %if.then1, %if.done
  %74 = load i8, i8* %10, align 1
  %75 = trunc i8 %74 to i1
  br i1 %75, label %if.then4, label %cmp.or3

cmp.or3:                                          ; preds = %if.done2
  %76 = load i8, i8* %9, align 1
  %77 = trunc i8 %76 to i1
  br i1 %77, label %if.then4, label %if.done5

if.then4:                                         ; preds = %cmp.or3, %if.done2
  %78 = load %src.Render_Target*, %src.Render_Target** %11, align 8
  %79 = load %src.Element*, %src.Element** %4, align 8
  %80 = getelementptr inbounds %src.Element, %src.Element* %79, i32 0, i32 5
  %81 = load %src.Rect, %src.Rect* %80, align 4
  %82 = load [4 x i8], [4 x i8]* %12, align 1
  %83 = load float, float* @src.ROUNDNESS, align 4
  %84 = load float, float* @src.LINE_WIDTH, align 4
  %85 = bitcast { <2 x float>, <2 x float> }* %14 to %src.Rect*
  store %src.Rect %81, %src.Rect* %85, align 4
  %86 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %14, align 8
  %87 = bitcast [4 x i8]* %12 to i64*
  %88 = load i64, i64* %87, align 8
  %89 = bitcast %runtime.Context* %20 to i8*
  call void @src.render_rect_outline(%src.Render_Target* %78, { <2 x float>, <2 x float> } %86, i64 %88, float %83, float %84, i8* %89)
  br label %if.done5

if.done5:                                         ; preds = %if.then4, %cmp.or3
  %90 = load float, float* @src.SCALE, align 4
  %91 = fmul float 1.800000e+01, %90
  store float %91, float* %15, align 4
  %92 = load %src.Render_Target*, %src.Render_Target** %11, align 8
  %93 = load %fontstash.Font*, %fontstash.Font** @src.font_icon, align 8
  %94 = load %src.Icon_Button*, %src.Icon_Button** %8, align 8
  %95 = getelementptr inbounds %src.Icon_Button, %src.Icon_Button* %94, i32 0, i32 1
  %96 = load i64, i64* %95, align 8
  %97 = load %src.Element*, %src.Element** %4, align 8
  %98 = getelementptr inbounds %src.Element, %src.Element* %97, i32 0, i32 5
  %99 = load %src.Rect, %src.Rect* %98, align 4
  %100 = load [4 x i8], [4 x i8]* %12, align 1
  %101 = load float, float* %15, align 4
  %102 = bitcast { <2 x float>, <2 x float> }* %16 to %src.Rect*
  store %src.Rect %99, %src.Rect* %102, align 4
  %103 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %16, align 8
  %104 = bitcast [4 x i8]* %12 to i64*
  %105 = load i64, i64* %104, align 8
  %106 = bitcast %runtime.Context* %20 to i8*
  %107 = call { <2 x float>, <2 x float> } @src.render_icon_aligned(%src.Render_Target* %92, %fontstash.Font* %93, i64 %96, { <2 x float>, <2 x float> } %103, i64 %105, i64 1, i64 1, float %101, i8* %106)
  %108 = bitcast %src.Rect* %17 to { <2 x float>, <2 x float> }*
  store { <2 x float>, <2 x float> } %107, { <2 x float>, <2 x float> }* %108, align 8
  %109 = load %src.Rect, %src.Rect* %17, align 4
  br label %switch.done

switch.case.body6:                                ; preds = %entry
  %110 = load %src.Element*, %src.Element** %4, align 8
  %111 = bitcast %runtime.Context* %20 to i8*
  call void @src.element_repaint(%src.Element* %110, i8* %111)
  br label %switch.done

switch.case.body7:                                ; preds = %entry
  %112 = load %src.Icon_Button*, %src.Icon_Button** %8, align 8
  %113 = getelementptr inbounds %src.Icon_Button, %src.Icon_Button* %112, i32 0, i32 2
  %114 = load i8*, i8** %113, align 8
  %115 = icmp ne i8* %114, null
  %116 = zext i1 %115 to i8
  %117 = trunc i8 %116 to i1
  br i1 %117, label %if.then8, label %if.done9

if.then8:                                         ; preds = %switch.case.body7
  %118 = load %src.Icon_Button*, %src.Icon_Button** %8, align 8
  %119 = getelementptr inbounds %src.Icon_Button, %src.Icon_Button* %118, i32 0, i32 2
  %120 = load i8*, i8** %119, align 8
  %121 = load %src.Icon_Button*, %src.Icon_Button** %8, align 8
  %122 = getelementptr inbounds %src.Icon_Button, %src.Icon_Button* %121, i32 0, i32 0
  %123 = getelementptr inbounds %src.Element, %src.Element* %122, i32 0, i32 12
  %124 = load i8*, i8** %123, align 8
  %125 = bitcast %runtime.Context* %20 to i8*
  %126 = bitcast i8* %120 to void (i8*, i8*)*
  call void %126(i8* %124, i8* %125)
  br label %if.done9

if.done9:                                         ; preds = %if.then8, %switch.case.body7
  br label %switch.done

switch.case.body10:                               ; preds = %entry
  ret i64 2

switch.case.body11:                               ; preds = %entry
  %127 = load float, float* @src.SCALE, align 4
  %128 = fmul float 1.800000e+01, %127
  store float %128, float* %18, align 4
  %129 = load %fontstash.Font*, %fontstash.Font** @src.font_icon, align 8
  %130 = load float, float* %18, align 4
  %131 = load %src.Icon_Button*, %src.Icon_Button** %8, align 8
  %132 = getelementptr inbounds %src.Icon_Button, %src.Icon_Button* %131, i32 0, i32 1
  %133 = load i64, i64* %132, align 8
  %134 = bitcast %runtime.Context* %20 to i8*
  %135 = call float @fontstash.icon_width(%fontstash.Font* %129, float %130, i64 %133, i8* %134)
  store float %135, float* %19, align 4
  %136 = load float, float* %19, align 4
  %137 = load float, float* @src.SCALE, align 4
  %138 = fmul float 1.000000e+01, %137
  %139 = fadd float %136, %138
  %140 = fptosi float %139 to i64
  ret i64 %140

switch.case.body12:                               ; preds = %entry
  %141 = load %src.Element*, %src.Element** %4, align 8
  %142 = bitcast %runtime.Context* %20 to i8*
  %143 = call float @src.efont_size(%src.Element* %141, i8* %142)
  %144 = load float, float* @src.SCALE, align 4
  %145 = fmul float 1.000000e+01, %144
  %146 = fadd float %143, %145
  %147 = fptosi float %146 to i64
  ret i64 %147

switch.case.body13:                               ; preds = %entry
  %148 = load %src.Element*, %src.Element** %4, align 8
  %149 = load i8*, i8** %7, align 8
  %150 = bitcast %runtime.Context* %20 to i8*
  call void @src.key_combination_check_click(%src.Element* %148, i8* %149, i8* %150)
  br label %switch.done

switch.done:                                      ; preds = %switch.case.body13, %if.done9, %switch.case.body6, %if.done5, %entry
  ret i64 0
}

define internal %src.Icon_Button* @src.icon_button_init(%src.Element* %0, i32 %1, i64 %2, i8* %3, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %4 = alloca %src.Element*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i64, align 8
  %7 = alloca i8*, align 8
  %8 = alloca %src.Icon_Button*, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Element* %0, %src.Element** %4, align 8
  store i32 %1, i32* %5, align 4
  store i64 %2, i64* %6, align 8
  store i8* %3, i8** %7, align 8
  store %src.Icon_Button* null, %src.Icon_Button** %8, align 8
  %9 = bitcast i8* %__.context_ptr to %runtime.Context*
  %10 = load %src.Element*, %src.Element** %4, align 8
  %11 = load i32, i32* %5, align 4
  %12 = or i32 %11, 1024
  %13 = getelementptr inbounds %runtime.Context, %runtime.Context* %9, i32 0, i32 0
  %14 = load %runtime.Allocator, %runtime.Allocator* %13, align 8
  %15 = bitcast %runtime.Allocator* %13 to { i64, i64 }*
  %16 = load { i64, i64 }, { i64, i64 }* %15, align 8
  %17 = bitcast %runtime.Context* %9 to i8*
  %18 = call %src.Icon_Button* @src.element_init-48320(%src.Element* %10, i32 %12, i8* bitcast (i64 (%src.Element*, i64, i64, i8*, i8*)* @src.icon_button_message to i8*), i64 -1, { i64, i64 } %16, i8* %17)
  store %src.Icon_Button* %18, %src.Icon_Button** %8, align 8
  %19 = load %src.Icon_Button*, %src.Icon_Button** %8, align 8
  %20 = getelementptr inbounds %src.Icon_Button, %src.Icon_Button* %19, i32 0, i32 1
  %21 = load i64, i64* %6, align 8
  store i64 %21, i64* %20, align 8
  %22 = load %src.Icon_Button*, %src.Icon_Button** %8, align 8
  %23 = getelementptr inbounds %src.Icon_Button, %src.Icon_Button* %22, i32 0, i32 0
  %24 = getelementptr inbounds %src.Element, %src.Element* %23, i32 0, i32 12
  %25 = load %src.Icon_Button*, %src.Icon_Button** %8, align 8
  %26 = bitcast %src.Icon_Button* %25 to i8*
  store i8* %26, i8** %24, align 8
  %27 = load %src.Icon_Button*, %src.Icon_Button** %8, align 8
  %28 = getelementptr inbounds %src.Icon_Button, %src.Icon_Button* %27, i32 0, i32 0
  %29 = getelementptr inbounds %src.Element, %src.Element* %28, i32 0, i32 8
  %30 = load i8*, i8** %7, align 8
  store i8* %30, i8** %29, align 8
  %31 = load %src.Icon_Button*, %src.Icon_Button** %8, align 8
  store %src.Icon_Button* %31, %src.Icon_Button** %8, align 8
  ret %src.Icon_Button* %31
}

define internal i64 @src.label_message(%src.Element* %0, i64 %1, i64 %2, i8* %3, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %4 = alloca %src.Element*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i8*, align 8
  %8 = alloca %src.Label*, align 8
  %9 = alloca %src.Render_Target*, align 8
  %10 = alloca %..string, align 8
  %11 = alloca %..string, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca [4 x i8], align 8
  %15 = alloca { <2 x float>, <2 x float> }, align 8
  %16 = alloca %runtime.Source_Code_Location, align 8
  %17 = alloca %..string, align 8
  %18 = alloca %..string, align 8
  %19 = alloca %src.Find_By_Point*, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Element* %0, %src.Element** %4, align 8
  store i64 %1, i64* %5, align 8
  store i64 %2, i64* %6, align 8
  store i8* %3, i8** %7, align 8
  %20 = bitcast i8* %__.context_ptr to %runtime.Context*
  %21 = load %src.Element*, %src.Element** %4, align 8
  %22 = bitcast %src.Element* %21 to %src.Label*
  store %src.Label* %22, %src.Label** %8, align 8
  %23 = load i64, i64* %5, align 8
  switch i64 %23, label %switch.done [
    i64 2, label %switch.case.body
    i64 4, label %switch.case.body1
    i64 9, label %switch.case.body2
    i64 10, label %switch.case.body5
    i64 29, label %switch.case.body6
  ]

switch.case.body:                                 ; preds = %entry
  %24 = load %src.Element*, %src.Element** %4, align 8
  %25 = getelementptr inbounds %src.Element, %src.Element* %24, i32 0, i32 4
  %26 = load %src.Window*, %src.Window** %25, align 8
  %27 = getelementptr inbounds %src.Window, %src.Window* %26, i32 0, i32 24
  %28 = load %src.Render_Target*, %src.Render_Target** %27, align 8
  store %src.Render_Target* %28, %src.Render_Target** %9, align 8
  %29 = load %src.Label*, %src.Label** %8, align 8
  %30 = getelementptr inbounds %src.Label, %src.Label* %29, i32 0, i32 1
  %31 = load %strings.Builder, %strings.Builder* %30, align 8
  %32 = bitcast %runtime.Context* %20 to i8*
  %33 = call { i64, i64 } @strings.to_string(%strings.Builder* %30, i8* %32)
  %34 = bitcast %..string* %11 to { i64, i64 }*
  store { i64, i64 } %33, { i64, i64 }* %34, align 8
  %35 = load %..string, %..string* %11, align 8
  store %..string %35, %..string* %10, align 8
  store i64 0, i64* %12, align 8
  store i64 0, i64* %13, align 8
  %36 = load %src.Element*, %src.Element** %4, align 8
  %37 = getelementptr inbounds %src.Element, %src.Element* %36, i32 0, i32 0
  %38 = load i32, i32* %37, align 4
  %39 = and i32 %38, 2048
  %40 = icmp ne i32 %39, 0
  %41 = zext i1 %40 to i8
  %42 = trunc i8 %41 to i1
  br i1 %42, label %if.then, label %if.done

if.then:                                          ; preds = %switch.case.body
  store i64 1, i64* %12, align 8
  store i64 1, i64* %13, align 8
  br label %if.done

if.done:                                          ; preds = %if.then, %switch.case.body
  %43 = load [4 x i8], [4 x i8]* getelementptr inbounds (%src.Theme, %src.Theme* @src.theme, i64 0, i32 2), align 1
  store [4 x i8] %43, [4 x i8]* %14, align 1
  %44 = load %src.Element*, %src.Element** %4, align 8
  %45 = load %..string, %..string* %10, align 8
  %46 = load %src.Element*, %src.Element** %4, align 8
  %47 = getelementptr inbounds %src.Element, %src.Element* %46, i32 0, i32 5
  %48 = load %src.Rect, %src.Rect* %47, align 4
  %49 = load [4 x i8], [4 x i8]* %14, align 1
  %50 = load i64, i64* %12, align 8
  %51 = load i64, i64* %13, align 8
  %52 = bitcast %..string* %10 to { i64, i64 }*
  %53 = load { i64, i64 }, { i64, i64 }* %52, align 8
  %54 = bitcast { <2 x float>, <2 x float> }* %15 to %src.Rect*
  store %src.Rect %48, %src.Rect* %54, align 4
  %55 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %15, align 8
  %56 = bitcast [4 x i8]* %14 to i64*
  %57 = load i64, i64* %56, align 8
  %58 = bitcast %runtime.Context* %20 to i8*
  call void @src.erender_string_aligned(%src.Element* %44, { i64, i64 } %53, { <2 x float>, <2 x float> } %55, i64 %57, i64 %50, i64 %51, i8* %58)
  br label %switch.done

switch.case.body1:                                ; preds = %entry
  %59 = load %src.Label*, %src.Label** %8, align 8
  %60 = getelementptr inbounds %src.Label, %src.Label* %59, i32 0, i32 1
  %61 = getelementptr inbounds %strings.Builder, %strings.Builder* %60, i32 0, i32 0
  %62 = load { i8*, i64, i64, %runtime.Allocator }, { i8*, i64, i64, %runtime.Allocator }* %61, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([58 x i8], [58 x i8]* @"csbs$1a2", i64 0, i64 0), i64 57 }, i32 769, i32 4, %..string { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @"csbs$318", i64 0, i64 0), i64 13 } }, %runtime.Source_Code_Location* %16, align 8
  %63 = bitcast %runtime.Context* %20 to i8*
  %64 = call i8 @runtime.delete_dynamic_array-47636({ i8*, i64, i64, %runtime.Allocator }* %61, %runtime.Source_Code_Location* %16, i8* %63)
  br label %switch.done

switch.case.body2:                                ; preds = %entry
  %65 = load %src.Label*, %src.Label** %8, align 8
  %66 = getelementptr inbounds %src.Label, %src.Label* %65, i32 0, i32 2
  %67 = load float, float* %66, align 4
  %68 = fcmp one float %67, -1.000000e+00
  %69 = zext i1 %68 to i8
  %70 = trunc i8 %69 to i1
  br i1 %70, label %if.then3, label %if.else

if.then3:                                         ; preds = %switch.case.body2
  %71 = load %src.Label*, %src.Label** %8, align 8
  %72 = getelementptr inbounds %src.Label, %src.Label* %71, i32 0, i32 2
  %73 = load float, float* %72, align 4
  %74 = load float, float* @src.SCALE, align 4
  %75 = fmul float %73, %74
  %76 = fptosi float %75 to i64
  ret i64 %76

if.else:                                          ; preds = %switch.case.body2
  %77 = load %src.Label*, %src.Label** %8, align 8
  %78 = getelementptr inbounds %src.Label, %src.Label* %77, i32 0, i32 1
  %79 = load %strings.Builder, %strings.Builder* %78, align 8
  %80 = bitcast %runtime.Context* %20 to i8*
  %81 = call { i64, i64 } @strings.to_string(%strings.Builder* %78, i8* %80)
  %82 = bitcast %..string* %18 to { i64, i64 }*
  store { i64, i64 } %81, { i64, i64 }* %82, align 8
  %83 = load %..string, %..string* %18, align 8
  store %..string %83, %..string* %17, align 8
  %84 = load %src.Element*, %src.Element** %4, align 8
  %85 = load %..string, %..string* %17, align 8
  %86 = bitcast %..string* %17 to { i64, i64 }*
  %87 = load { i64, i64 }, { i64, i64 }* %86, align 8
  %88 = bitcast %runtime.Context* %20 to i8*
  %89 = call float @src.estring_width(%src.Element* %84, { i64, i64 } %87, i8* %88)
  %90 = fptosi float %89 to i64
  ret i64 %90

if.done4:                                         ; No predecessors!
  br label %switch.done

switch.case.body5:                                ; preds = %entry
  %91 = load %src.Element*, %src.Element** %4, align 8
  %92 = bitcast %runtime.Context* %20 to i8*
  %93 = call float @src.efont_size(%src.Element* %91, i8* %92)
  %94 = fptosi float %93 to i64
  ret i64 %94

switch.case.body6:                                ; preds = %entry
  %95 = load i8*, i8** %7, align 8
  %96 = bitcast i8* %95 to %src.Find_By_Point*
  store %src.Find_By_Point* %96, %src.Find_By_Point** %19, align 8
  %97 = load %src.Find_By_Point*, %src.Find_By_Point** %19, align 8
  %98 = getelementptr inbounds %src.Find_By_Point, %src.Find_By_Point* %97, i32 0, i32 2
  %99 = load %src.Element*, %src.Element** %4, align 8
  %100 = getelementptr inbounds %src.Element, %src.Element* %99, i32 0, i32 2
  %101 = load %src.Element*, %src.Element** %100, align 8
  store %src.Element* %101, %src.Element** %98, align 8
  ret i64 1

switch.done:                                      ; preds = %if.done4, %switch.case.body1, %if.done, %entry
  ret i64 0
}

define internal %src.Label* @src.label_init(%src.Element* %0, i32 %1, { i64, i64 } %2, float %3, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %4 = alloca %src.Element*, align 8
  %5 = alloca i32, align 4
  %6 = alloca %..string, align 8
  %7 = alloca float, align 4
  %8 = alloca %src.Label*, align 8
  %9 = alloca %strings.Builder, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Element* %0, %src.Element** %4, align 8
  store i32 %1, i32* %5, align 4
  %10 = bitcast %..string* %6 to { i64, i64 }*
  store { i64, i64 } %2, { i64, i64 }* %10, align 8
  %11 = load %..string, %..string* %6, align 8
  store float %3, float* %7, align 4
  store %src.Label* null, %src.Label** %8, align 8
  %12 = bitcast i8* %__.context_ptr to %runtime.Context*
  %13 = load %src.Element*, %src.Element** %4, align 8
  %14 = load i32, i32* %5, align 4
  %15 = getelementptr inbounds %runtime.Context, %runtime.Context* %12, i32 0, i32 0
  %16 = load %runtime.Allocator, %runtime.Allocator* %15, align 8
  %17 = bitcast %runtime.Allocator* %15 to { i64, i64 }*
  %18 = load { i64, i64 }, { i64, i64 }* %17, align 8
  %19 = bitcast %runtime.Context* %12 to i8*
  %20 = call %src.Label* @src.element_init-48373(%src.Element* %13, i32 %14, i8* bitcast (i64 (%src.Element*, i64, i64, i8*, i8*)* @src.label_message to i8*), i64 -1, { i64, i64 } %18, i8* %19)
  store %src.Label* %20, %src.Label** %8, align 8
  %21 = load %src.Label*, %src.Label** %8, align 8
  %22 = getelementptr inbounds %src.Label, %src.Label* %21, i32 0, i32 1
  %23 = getelementptr inbounds %runtime.Context, %runtime.Context* %12, i32 0, i32 0
  %24 = load %runtime.Allocator, %runtime.Allocator* %23, align 8
  %25 = bitcast %runtime.Allocator* %23 to { i64, i64 }*
  %26 = load { i64, i64 }, { i64, i64 }* %25, align 8
  %27 = bitcast %strings.Builder* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* %27, i8 0, i64 40, i1 false)
  %28 = bitcast %runtime.Context* %12 to i8*
  call void @strings.builder_make_len_cap(%strings.Builder* sret %9, i64 0, i64 32, { i64, i64 } %26, i8* %28)
  %29 = load %strings.Builder, %strings.Builder* %9, align 8
  store %strings.Builder %29, %strings.Builder* %22, align 8
  %30 = load %src.Label*, %src.Label** %8, align 8
  %31 = getelementptr inbounds %src.Label, %src.Label* %30, i32 0, i32 2
  %32 = load float, float* %7, align 4
  store float %32, float* %31, align 4
  %33 = load %src.Label*, %src.Label** %8, align 8
  %34 = getelementptr inbounds %src.Label, %src.Label* %33, i32 0, i32 1
  %35 = load %..string, %..string* %6, align 8
  %36 = bitcast %..string* %6 to { i64, i64 }*
  %37 = load { i64, i64 }, { i64, i64 }* %36, align 8
  %38 = bitcast %runtime.Context* %12 to i8*
  %39 = call i64 @strings.write_string(%strings.Builder* %34, { i64, i64 } %37, i8* %38)
  %40 = load %src.Label*, %src.Label** %8, align 8
  store %src.Label* %40, %src.Label** %8, align 8
  ret %src.Label* %40
}

define internal void @src.slider_default_formatting(%strings.Builder* %0, float %1, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %2 = alloca %strings.Builder*, align 8
  %3 = alloca float, align 4
  %4 = alloca %..any, align 8
  %5 = alloca { %..any*, i64 }, align 8
  %6 = alloca [1 x %..any], align 8
  %7 = alloca { i64, i64 }, align 8
  %8 = alloca %..string, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %strings.Builder* %0, %strings.Builder** %2, align 8
  store float %1, float* %3, align 4
  %9 = bitcast i8* %__.context_ptr to %runtime.Context*
  %10 = load %strings.Builder*, %strings.Builder** %2, align 8
  %11 = bitcast %runtime.Context* %9 to i8*
  call void @strings.builder_reset(%strings.Builder* %10, i8* %11)
  %12 = load %strings.Builder*, %strings.Builder** %2, align 8
  %13 = load float, float* %3, align 4
  %14 = bitcast %..any* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* %14, i8 0, i64 16, i1 false)
  %15 = bitcast float* %3 to i8*
  %16 = getelementptr inbounds %..any, %..any* %4, i32 0, i32 0
  %17 = getelementptr inbounds %..any, %..any* %4, i32 0, i32 1
  store i8* %15, i8** %16, align 8
  store i64 216172782113783923, i64* %17, align 8
  %18 = load %..any, %..any* %4, align 8
  %19 = bitcast { %..any*, i64 }* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* %19, i8 0, i64 16, i1 false)
  %20 = bitcast [1 x %..any]* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* %20, i8 0, i64 16, i1 false)
  %21 = getelementptr [1 x %..any], [1 x %..any]* %6, i64 0, i64 0
  store %..any %18, %..any* %21, align 8
  %22 = getelementptr [1 x %..any], [1 x %..any]* %6, i64 0, i64 0
  %23 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %5, i32 0, i32 0
  store %..any* %22, %..any** %23, align 8
  %24 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %5, i32 0, i32 1
  store i64 1, i64* %24, align 8
  %25 = load { %..any*, i64 }, { %..any*, i64 }* %5, align 8
  %26 = bitcast { i64, i64 }* %7 to %..string*
  store %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$319", i64 0, i64 0), i64 4 }, %..string* %26, align 8
  %27 = load { i64, i64 }, { i64, i64 }* %7, align 8
  %28 = bitcast { %..any*, i64 }* %5 to { i64, i64 }*
  %29 = load { i64, i64 }, { i64, i64 }* %28, align 8
  %30 = bitcast %runtime.Context* %9 to i8*
  %31 = call { i64, i64 } @fmt.sbprintf(%strings.Builder* %12, { i64, i64 } %27, { i64, i64 } %29, i8* %30)
  %32 = bitcast %..string* %8 to { i64, i64 }*
  store { i64, i64 } %31, { i64, i64 }* %32, align 8
  %33 = load %..string, %..string* %8, align 8
  ret void
}

define internal i64 @src.slider_message(%src.Element* %0, i64 %1, i64 %2, i8* %3, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %4 = alloca %src.Element*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i8*, align 8
  %8 = alloca %src.Slider*, align 8
  %9 = alloca i8, align 1
  %10 = alloca i8, align 1
  %11 = alloca %src.Render_Target*, align 8
  %12 = alloca [4 x i8], align 8
  %13 = alloca { <2 x float>, <2 x float> }, align 8
  %14 = alloca %src.Rect, align 8
  %15 = alloca %..string, align 8
  %16 = alloca %..string, align 8
  %17 = alloca { <2 x float>, <2 x float> }, align 8
  %18 = alloca %runtime.Source_Code_Location, align 8
  %19 = alloca float, align 4
  %20 = alloca float, align 4
  %21 = alloca { <2 x float>, <2 x float> }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Element* %0, %src.Element** %4, align 8
  store i64 %1, i64* %5, align 8
  store i64 %2, i64* %6, align 8
  store i8* %3, i8** %7, align 8
  %22 = bitcast i8* %__.context_ptr to %runtime.Context*
  %23 = load %src.Element*, %src.Element** %4, align 8
  %24 = bitcast %src.Element* %23 to %src.Slider*
  store %src.Slider* %24, %src.Slider** %8, align 8
  %25 = load i64, i64* %5, align 8
  switch i64 %25, label %switch.done [
    i64 2, label %switch.case.body
    i64 24, label %switch.case.body1
    i64 1, label %switch.case.body2
    i64 9, label %switch.case.body3
    i64 10, label %switch.case.body4
    i64 4, label %switch.case.body5
  ]

switch.case.body:                                 ; preds = %entry
  %26 = load %src.Element*, %src.Element** %4, align 8
  %27 = getelementptr inbounds %src.Element, %src.Element* %26, i32 0, i32 4
  %28 = load %src.Window*, %src.Window** %27, align 8
  %29 = getelementptr inbounds %src.Window, %src.Window* %28, i32 0, i32 2
  %30 = load %src.Element*, %src.Element** %29, align 8
  %31 = load %src.Element*, %src.Element** %4, align 8
  %32 = icmp eq %src.Element* %30, %31
  %33 = zext i1 %32 to i8
  store i8 %33, i8* %9, align 1
  %34 = load %src.Element*, %src.Element** %4, align 8
  %35 = getelementptr inbounds %src.Element, %src.Element* %34, i32 0, i32 4
  %36 = load %src.Window*, %src.Window** %35, align 8
  %37 = getelementptr inbounds %src.Window, %src.Window* %36, i32 0, i32 1
  %38 = load %src.Element*, %src.Element** %37, align 8
  %39 = load %src.Element*, %src.Element** %4, align 8
  %40 = icmp eq %src.Element* %38, %39
  %41 = zext i1 %40 to i8
  store i8 %41, i8* %10, align 1
  %42 = load %src.Element*, %src.Element** %4, align 8
  %43 = getelementptr inbounds %src.Element, %src.Element* %42, i32 0, i32 4
  %44 = load %src.Window*, %src.Window** %43, align 8
  %45 = getelementptr inbounds %src.Window, %src.Window* %44, i32 0, i32 24
  %46 = load %src.Render_Target*, %src.Render_Target** %45, align 8
  store %src.Render_Target* %46, %src.Render_Target** %11, align 8
  %47 = load i8, i8* %10, align 1
  %48 = trunc i8 %47 to i1
  br i1 %48, label %if.then, label %cmp.or

cmp.or:                                           ; preds = %switch.case.body
  %49 = load i8, i8* %9, align 1
  %50 = trunc i8 %49 to i1
  br i1 %50, label %if.then, label %if.else

if.then:                                          ; preds = %cmp.or, %switch.case.body
  %51 = load [4 x i8], [4 x i8]* getelementptr inbounds (%src.Theme, %src.Theme* @src.theme, i64 0, i32 2), align 1
  br label %if.done

if.else:                                          ; preds = %cmp.or
  %52 = load [4 x i8], [4 x i8]* getelementptr inbounds (%src.Theme, %src.Theme* @src.theme, i64 0, i32 5), align 1
  br label %if.done

if.done:                                          ; preds = %if.else, %if.then
  %53 = phi [4 x i8] [ %51, %if.then ], [ %52, %if.else ]
  store [4 x i8] %53, [4 x i8]* %12, align 1
  %54 = load %src.Render_Target*, %src.Render_Target** %11, align 8
  %55 = load %src.Element*, %src.Element** %4, align 8
  %56 = getelementptr inbounds %src.Element, %src.Element* %55, i32 0, i32 5
  %57 = load %src.Rect, %src.Rect* %56, align 4
  %58 = load [4 x i8], [4 x i8]* %12, align 1
  %59 = load float, float* @src.ROUNDNESS, align 4
  %60 = load float, float* @src.LINE_WIDTH, align 4
  %61 = bitcast { <2 x float>, <2 x float> }* %13 to %src.Rect*
  store %src.Rect %57, %src.Rect* %61, align 4
  %62 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %13, align 8
  %63 = bitcast [4 x i8]* %12 to i64*
  %64 = load i64, i64* %63, align 8
  %65 = bitcast %runtime.Context* %22 to i8*
  call void @src.render_rect_outline(%src.Render_Target* %54, { <2 x float>, <2 x float> } %62, i64 %64, float %59, float %60, i8* %65)
  %66 = load %src.Element*, %src.Element** %4, align 8
  %67 = getelementptr inbounds %src.Element, %src.Element* %66, i32 0, i32 5
  %68 = load %src.Rect, %src.Rect* %67, align 4
  store %src.Rect %68, %src.Rect* %14, align 4
  %69 = getelementptr inbounds %src.Rect, %src.Rect* %14, i32 0, i32 2
  %70 = getelementptr inbounds %src.Rect, %src.Rect* %14, i32 0, i32 3
  %71 = load float, float* %70, align 4
  %72 = load float, float* @src.SCALE, align 4
  %73 = fmul float 5.000000e+00, %72
  %74 = call float @math.round_f32(float %73)
  %75 = fsub float %71, %74
  store float %75, float* %69, align 4
  %76 = getelementptr inbounds %src.Rect, %src.Rect* %14, i32 0, i32 3
  %77 = getelementptr inbounds %src.Rect, %src.Rect* %14, i32 0, i32 2
  %78 = load float, float* %77, align 4
  %79 = load float, float* @src.SCALE, align 4
  %80 = fmul float 3.000000e+00, %79
  %81 = call float @math.round_f32(float %80)
  %82 = fadd float %78, %81
  store float %82, float* %76, align 4
  %83 = getelementptr inbounds %src.Rect, %src.Rect* %14, i32 0, i32 1
  %84 = getelementptr inbounds %src.Rect, %src.Rect* %14, i32 0, i32 0
  %85 = load float, float* %84, align 4
  %86 = load %src.Slider*, %src.Slider** %8, align 8
  %87 = getelementptr inbounds %src.Slider, %src.Slider* %86, i32 0, i32 1
  %88 = load float, float* %87, align 4
  %89 = load %src.Rect, %src.Rect* %14, align 4
  %90 = bitcast %src.Rect* %14 to { <2 x float>, <2 x float> }*
  %91 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %90, align 8
  %92 = bitcast %runtime.Context* %22 to i8*
  %93 = call float @src.rect_width({ <2 x float>, <2 x float> } %91, i8* %92)
  %94 = fmul float %88, %93
  %95 = fadd float %85, %94
  store float %95, float* %83, align 4
  %96 = load %src.Render_Target*, %src.Render_Target** %11, align 8
  %97 = load %src.Rect, %src.Rect* %14, align 4
  %98 = load [4 x i8], [4 x i8]* %12, align 1
  %99 = bitcast %src.Rect* %14 to { <2 x float>, <2 x float> }*
  %100 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %99, align 8
  %101 = bitcast [4 x i8]* %12 to i64*
  %102 = load i64, i64* %101, align 8
  %103 = bitcast %runtime.Context* %22 to i8*
  call void @src.render_rect(%src.Render_Target* %96, { <2 x float>, <2 x float> } %100, i64 %102, float 0.000000e+00, i8* %103)
  %104 = load %src.Slider*, %src.Slider** %8, align 8
  %105 = getelementptr inbounds %src.Slider, %src.Slider* %104, i32 0, i32 3
  %106 = bitcast %runtime.Context* %22 to i8*
  call void @strings.builder_reset(%strings.Builder* %105, i8* %106)
  %107 = load %src.Slider*, %src.Slider** %8, align 8
  %108 = getelementptr inbounds %src.Slider, %src.Slider* %107, i32 0, i32 4
  %109 = load i8*, i8** %108, align 8
  %110 = load %src.Slider*, %src.Slider** %8, align 8
  %111 = getelementptr inbounds %src.Slider, %src.Slider* %110, i32 0, i32 3
  %112 = load %src.Slider*, %src.Slider** %8, align 8
  %113 = getelementptr inbounds %src.Slider, %src.Slider* %112, i32 0, i32 1
  %114 = load float, float* %113, align 4
  %115 = bitcast %runtime.Context* %22 to i8*
  %116 = bitcast i8* %109 to void (%strings.Builder*, float, i8*)*
  call void %116(%strings.Builder* %111, float %114, i8* %115)
  %117 = load %src.Slider*, %src.Slider** %8, align 8
  %118 = getelementptr inbounds %src.Slider, %src.Slider* %117, i32 0, i32 3
  %119 = load %strings.Builder, %strings.Builder* %118, align 8
  %120 = bitcast %runtime.Context* %22 to i8*
  %121 = call { i64, i64 } @strings.to_string(%strings.Builder* %118, i8* %120)
  %122 = bitcast %..string* %16 to { i64, i64 }*
  store { i64, i64 } %121, { i64, i64 }* %122, align 8
  %123 = load %..string, %..string* %16, align 8
  store %..string %123, %..string* %15, align 8
  %124 = load %src.Element*, %src.Element** %4, align 8
  %125 = load %..string, %..string* %15, align 8
  %126 = load %src.Element*, %src.Element** %4, align 8
  %127 = getelementptr inbounds %src.Element, %src.Element* %126, i32 0, i32 5
  %128 = load %src.Rect, %src.Rect* %127, align 4
  %129 = load [4 x i8], [4 x i8]* %12, align 1
  %130 = bitcast %..string* %15 to { i64, i64 }*
  %131 = load { i64, i64 }, { i64, i64 }* %130, align 8
  %132 = bitcast { <2 x float>, <2 x float> }* %17 to %src.Rect*
  store %src.Rect %128, %src.Rect* %132, align 4
  %133 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %17, align 8
  %134 = bitcast [4 x i8]* %12 to i64*
  %135 = load i64, i64* %134, align 8
  %136 = bitcast %runtime.Context* %22 to i8*
  call void @src.erender_string_aligned(%src.Element* %124, { i64, i64 } %131, { <2 x float>, <2 x float> } %133, i64 %135, i64 1, i64 1, i8* %136)
  br label %switch.done

switch.case.body1:                                ; preds = %entry
  ret i64 4

switch.case.body2:                                ; preds = %entry
  %137 = load %src.Element*, %src.Element** %4, align 8
  %138 = bitcast %runtime.Context* %22 to i8*
  call void @src.element_repaint(%src.Element* %137, i8* %138)
  br label %switch.done

switch.case.body3:                                ; preds = %entry
  %139 = load float, float* @src.SCALE, align 4
  %140 = fmul float %139, 1.000000e+02
  %141 = fptosi float %140 to i64
  ret i64 %141

switch.case.body4:                                ; preds = %entry
  %142 = load %src.Element*, %src.Element** %4, align 8
  %143 = bitcast %runtime.Context* %22 to i8*
  %144 = call float @src.efont_size(%src.Element* %142, i8* %143)
  %145 = load float, float* @src.SCALE, align 4
  %146 = fmul float 1.000000e+01, %145
  %147 = fadd float %144, %146
  %148 = fptosi float %147 to i64
  ret i64 %148

switch.case.body5:                                ; preds = %entry
  %149 = load %src.Slider*, %src.Slider** %8, align 8
  %150 = getelementptr inbounds %src.Slider, %src.Slider* %149, i32 0, i32 3
  %151 = getelementptr inbounds %strings.Builder, %strings.Builder* %150, i32 0, i32 0
  %152 = load { i8*, i64, i64, %runtime.Allocator }, { i8*, i64, i64, %runtime.Allocator }* %151, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([58 x i8], [58 x i8]* @"csbs$1a2", i64 0, i64 0), i64 57 }, i32 872, i32 4, %..string { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"csbs$31a", i64 0, i64 0), i64 14 } }, %runtime.Source_Code_Location* %18, align 8
  %153 = bitcast %runtime.Context* %22 to i8*
  %154 = call i8 @runtime.delete_dynamic_array-47636({ i8*, i64, i64, %runtime.Allocator }* %151, %runtime.Source_Code_Location* %18, i8* %153)
  br label %switch.done

switch.done:                                      ; preds = %switch.case.body5, %switch.case.body2, %if.done, %entry
  %155 = load i64, i64* %5, align 8
  %156 = icmp eq i64 %155, 16
  %157 = zext i1 %156 to i8
  %158 = trunc i8 %157 to i1
  br i1 %158, label %if.then7, label %cmp.or6

cmp.or6:                                          ; preds = %switch.done
  %159 = load i64, i64* %5, align 8
  %160 = icmp eq i64 %159, 15
  %161 = zext i1 %160 to i8
  %162 = trunc i8 %161 to i1
  br i1 %162, label %cmp.and, label %if.done14

cmp.and:                                          ; preds = %cmp.or6
  %163 = load %src.Element*, %src.Element** %4, align 8
  %164 = getelementptr inbounds %src.Element, %src.Element* %163, i32 0, i32 4
  %165 = load %src.Window*, %src.Window** %164, align 8
  %166 = getelementptr inbounds %src.Window, %src.Window* %165, i32 0, i32 17
  %167 = load i64, i64* %166, align 8
  %168 = icmp eq i64 %167, 1
  %169 = zext i1 %168 to i8
  %170 = trunc i8 %169 to i1
  br i1 %170, label %if.then7, label %if.done14

if.then7:                                         ; preds = %cmp.and, %switch.done
  %171 = load %src.Slider*, %src.Slider** %8, align 8
  %172 = getelementptr inbounds %src.Slider, %src.Slider* %171, i32 0, i32 1
  %173 = load float, float* %172, align 4
  store float %173, float* %19, align 4
  %174 = load %src.Element*, %src.Element** %4, align 8
  %175 = getelementptr inbounds %src.Element, %src.Element* %174, i32 0, i32 4
  %176 = load %src.Window*, %src.Window** %175, align 8
  %177 = getelementptr inbounds %src.Window, %src.Window* %176, i32 0, i32 12
  %178 = load float, float* %177, align 4
  %179 = load %src.Element*, %src.Element** %4, align 8
  %180 = getelementptr inbounds %src.Element, %src.Element* %179, i32 0, i32 5
  %181 = getelementptr inbounds %src.Rect, %src.Rect* %180, i32 0, i32 0
  %182 = load float, float* %181, align 4
  %183 = fsub float %178, %182
  %184 = load %src.Element*, %src.Element** %4, align 8
  %185 = getelementptr inbounds %src.Element, %src.Element* %184, i32 0, i32 5
  %186 = load %src.Rect, %src.Rect* %185, align 4
  %187 = bitcast { <2 x float>, <2 x float> }* %21 to %src.Rect*
  store %src.Rect %186, %src.Rect* %187, align 4
  %188 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %21, align 8
  %189 = bitcast %runtime.Context* %22 to i8*
  %190 = call float @src.rect_width({ <2 x float>, <2 x float> } %188, i8* %189)
  %191 = fdiv float %183, %190
  store float %191, float* %20, align 4
  %192 = load %src.Element*, %src.Element** %4, align 8
  %193 = getelementptr inbounds %src.Element, %src.Element* %192, i32 0, i32 4
  %194 = load %src.Window*, %src.Window** %193, align 8
  %195 = getelementptr inbounds %src.Window, %src.Window* %194, i32 0, i32 34
  %196 = load i8, i8* %195, align 1
  %197 = trunc i8 %196 to i1
  br i1 %197, label %if.then10, label %cmp.or8

cmp.or8:                                          ; preds = %if.then7
  %198 = load %src.Element*, %src.Element** %4, align 8
  %199 = getelementptr inbounds %src.Element, %src.Element* %198, i32 0, i32 4
  %200 = load %src.Window*, %src.Window** %199, align 8
  %201 = getelementptr inbounds %src.Window, %src.Window* %200, i32 0, i32 33
  %202 = load i8, i8* %201, align 1
  %203 = trunc i8 %202 to i1
  br i1 %203, label %if.then10, label %cmp.or9

cmp.or9:                                          ; preds = %cmp.or8
  %204 = load %src.Element*, %src.Element** %4, align 8
  %205 = getelementptr inbounds %src.Element, %src.Element* %204, i32 0, i32 4
  %206 = load %src.Window*, %src.Window** %205, align 8
  %207 = getelementptr inbounds %src.Window, %src.Window* %206, i32 0, i32 35
  %208 = load i8, i8* %207, align 1
  %209 = trunc i8 %208 to i1
  br i1 %209, label %if.then10, label %if.done11

if.then10:                                        ; preds = %cmp.or9, %cmp.or8, %if.then7
  %210 = load float, float* %20, align 4
  %211 = fmul float %210, 1.000000e+01
  %212 = call float @math.round_f32(float %211)
  %213 = fdiv float %212, 1.000000e+01
  store float %213, float* %20, align 4
  br label %if.done11

if.done11:                                        ; preds = %if.then10, %cmp.or9
  %214 = load %src.Slider*, %src.Slider** %8, align 8
  %215 = getelementptr inbounds %src.Slider, %src.Slider* %214, i32 0, i32 1
  %216 = load float, float* %20, align 4
  %217 = fcmp ogt float %216, 0.000000e+00
  %218 = select i1 %217, float %216, float 0.000000e+00
  %219 = fcmp olt float %218, 1.000000e+00
  %220 = select i1 %219, float %218, float 1.000000e+00
  store float %220, float* %215, align 4
  %221 = load float, float* %19, align 4
  %222 = load %src.Slider*, %src.Slider** %8, align 8
  %223 = getelementptr inbounds %src.Slider, %src.Slider* %222, i32 0, i32 1
  %224 = load float, float* %223, align 4
  %225 = fcmp one float %221, %224
  %226 = zext i1 %225 to i8
  %227 = trunc i8 %226 to i1
  br i1 %227, label %if.then12, label %if.done13

if.then12:                                        ; preds = %if.done11
  %228 = load %src.Element*, %src.Element** %4, align 8
  %229 = bitcast %runtime.Context* %22 to i8*
  %230 = call i64 @src.element_message(%src.Element* %228, i64 30, i64 0, i8* null, i8* %229)
  %231 = load %src.Element*, %src.Element** %4, align 8
  %232 = bitcast %runtime.Context* %22 to i8*
  call void @src.element_repaint(%src.Element* %231, i8* %232)
  br label %if.done13

if.done13:                                        ; preds = %if.then12, %if.done11
  br label %if.done14

if.done14:                                        ; preds = %if.done13, %cmp.and, %cmp.or6
  ret i64 0
}

define internal %src.Slider* @src.slider_init(%src.Element* %0, i32 %1, float %2, i8* %3, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %4 = alloca %src.Element*, align 8
  %5 = alloca i32, align 4
  %6 = alloca float, align 4
  %7 = alloca i8*, align 8
  %8 = alloca %src.Slider*, align 8
  %9 = alloca %strings.Builder, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Element* %0, %src.Element** %4, align 8
  store i32 %1, i32* %5, align 4
  store float %2, float* %6, align 4
  store i8* %3, i8** %7, align 8
  store %src.Slider* null, %src.Slider** %8, align 8
  %10 = bitcast i8* %__.context_ptr to %runtime.Context*
  %11 = load %src.Element*, %src.Element** %4, align 8
  %12 = load i32, i32* %5, align 4
  %13 = getelementptr inbounds %runtime.Context, %runtime.Context* %10, i32 0, i32 0
  %14 = load %runtime.Allocator, %runtime.Allocator* %13, align 8
  %15 = bitcast %runtime.Allocator* %13 to { i64, i64 }*
  %16 = load { i64, i64 }, { i64, i64 }* %15, align 8
  %17 = bitcast %runtime.Context* %10 to i8*
  %18 = call %src.Slider* @src.element_init-48427(%src.Element* %11, i32 %12, i8* bitcast (i64 (%src.Element*, i64, i64, i8*, i8*)* @src.slider_message to i8*), i64 -1, { i64, i64 } %16, i8* %17)
  store %src.Slider* %18, %src.Slider** %8, align 8
  %19 = load %src.Slider*, %src.Slider** %8, align 8
  %20 = getelementptr inbounds %src.Slider, %src.Slider* %19, i32 0, i32 3
  %21 = getelementptr inbounds %runtime.Context, %runtime.Context* %10, i32 0, i32 0
  %22 = load %runtime.Allocator, %runtime.Allocator* %21, align 8
  %23 = bitcast %runtime.Allocator* %21 to { i64, i64 }*
  %24 = load { i64, i64 }, { i64, i64 }* %23, align 8
  %25 = bitcast %strings.Builder* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* %25, i8 0, i64 40, i1 false)
  %26 = bitcast %runtime.Context* %10 to i8*
  call void @strings.builder_make_len_cap(%strings.Builder* sret %9, i64 0, i64 32, { i64, i64 } %24, i8* %26)
  %27 = load %strings.Builder, %strings.Builder* %9, align 8
  store %strings.Builder %27, %strings.Builder* %20, align 8
  %28 = load %src.Slider*, %src.Slider** %8, align 8
  %29 = getelementptr inbounds %src.Slider, %src.Slider* %28, i32 0, i32 1
  %30 = load float, float* %6, align 4
  %31 = fcmp ogt float %30, 0.000000e+00
  %32 = select i1 %31, float %30, float 0.000000e+00
  %33 = fcmp olt float %32, 1.000000e+00
  %34 = select i1 %33, float %32, float 1.000000e+00
  store float %34, float* %29, align 4
  %35 = load %src.Slider*, %src.Slider** %8, align 8
  %36 = getelementptr inbounds %src.Slider, %src.Slider* %35, i32 0, i32 4
  %37 = load i8*, i8** %7, align 8
  store i8* %37, i8** %36, align 8
  %38 = load %src.Slider*, %src.Slider** %8, align 8
  store %src.Slider* %38, %src.Slider** %8, align 8
  ret %src.Slider* %38
}

define internal void @src.slider_set(%src.Slider* %0, float %1, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %2 = alloca %src.Slider*, align 8
  %3 = alloca float, align 4
  br label %entry

entry:                                            ; preds = %decls
  store %src.Slider* %0, %src.Slider** %2, align 8
  store float %1, float* %3, align 4
  %4 = bitcast i8* %__.context_ptr to %runtime.Context*
  %5 = load %src.Slider*, %src.Slider** %2, align 8
  %6 = getelementptr inbounds %src.Slider, %src.Slider* %5, i32 0, i32 1
  %7 = load float, float* %3, align 4
  store float %7, float* %6, align 4
  %8 = load %src.Slider*, %src.Slider** %2, align 8
  %9 = getelementptr inbounds %src.Slider, %src.Slider* %8, i32 0, i32 0
  %10 = bitcast %runtime.Context* %4 to i8*
  %11 = call i64 @src.element_message(%src.Element* %9, i64 30, i64 0, i8* null, i8* %10)
  ret void
}

define internal i64 @src.checkbox_message(%src.Element* %0, i64 %1, i64 %2, i8* %3, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %4 = alloca %src.Element*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i8*, align 8
  %8 = alloca %src.Checkbox*, align 8
  %9 = alloca %..string, align 8
  %10 = alloca %..string, align 8
  %11 = alloca float, align 4
  %12 = alloca float, align 4
  %13 = alloca float, align 4
  %14 = alloca float, align 4
  %15 = alloca i8, align 1
  %16 = alloca i8, align 1
  %17 = alloca %src.Render_Target*, align 8
  %18 = alloca [4 x i8], align 8
  %19 = alloca { <2 x float>, <2 x float> }, align 8
  %20 = alloca %src.Rect, align 8
  %21 = alloca %src.Rect, align 8
  %22 = alloca [4 x i8], align 8
  %23 = alloca i64, align 8
  %24 = alloca i64, align 8
  %25 = alloca [4 x i8], align 8
  %26 = alloca float, align 4
  %27 = alloca %src.Rect, align 8
  %28 = alloca %src.Rect, align 8
  %29 = alloca %src.Rect, align 8
  %30 = alloca %..string, align 8
  %31 = alloca i8, align 1
  br label %entry

entry:                                            ; preds = %decls
  store %src.Element* %0, %src.Element** %4, align 8
  store i64 %1, i64* %5, align 8
  store i64 %2, i64* %6, align 8
  store i8* %3, i8** %7, align 8
  %32 = bitcast i8* %__.context_ptr to %runtime.Context*
  %33 = load %src.Element*, %src.Element** %4, align 8
  %34 = bitcast %src.Element* %33 to %src.Checkbox*
  store %src.Checkbox* %34, %src.Checkbox** %8, align 8
  %35 = load i64, i64* %5, align 8
  switch i64 %35, label %switch.done [
    i64 9, label %switch.case.body
    i64 10, label %switch.case.body1
    i64 24, label %switch.case.body2
    i64 2, label %switch.case.body3
    i64 22, label %switch.case.body4
    i64 7, label %switch.case.body7
    i64 27, label %switch.case.body11
  ]

switch.case.body:                                 ; preds = %entry
  %36 = load %src.Checkbox*, %src.Checkbox** %8, align 8
  %37 = getelementptr inbounds %src.Checkbox, %src.Checkbox* %36, i32 0, i32 1
  %38 = load %strings.Builder, %strings.Builder* %37, align 8
  %39 = bitcast %runtime.Context* %32 to i8*
  %40 = call { i64, i64 } @strings.to_string(%strings.Builder* %37, i8* %39)
  %41 = bitcast %..string* %10 to { i64, i64 }*
  store { i64, i64 } %40, { i64, i64 }* %41, align 8
  %42 = load %..string, %..string* %10, align 8
  store %..string %42, %..string* %9, align 8
  %43 = load %src.Element*, %src.Element** %4, align 8
  %44 = load %..string, %..string* %9, align 8
  %45 = bitcast %..string* %9 to { i64, i64 }*
  %46 = load { i64, i64 }, { i64, i64 }* %45, align 8
  %47 = bitcast %runtime.Context* %32 to i8*
  %48 = call float @src.estring_width(%src.Element* %43, { i64, i64 } %46, i8* %47)
  store float %48, float* %11, align 4
  %49 = load float, float* @src.SCALE, align 4
  %50 = fmul float 5.000000e+00, %49
  store float %50, float* %12, align 4
  %51 = load float, float* @src.SCALE, align 4
  %52 = fmul float 5.000000e+00, %51
  store float %52, float* %13, align 4
  %53 = load %src.Checkbox*, %src.Checkbox** %8, align 8
  %54 = bitcast %runtime.Context* %32 to i8*
  %55 = call float @src.checkbox_message.box_width-1(%src.Checkbox* %53, i8* %54)
  store float %55, float* %14, align 4
  %56 = load float, float* %11, align 4
  %57 = load float, float* %12, align 4
  %58 = fmul float %57, 2.000000e+00
  %59 = fadd float %56, %58
  %60 = load float, float* %14, align 4
  %61 = fadd float %59, %60
  %62 = load float, float* %13, align 4
  %63 = fadd float %61, %62
  %64 = fptosi float %63 to i64
  ret i64 %64

switch.case.body1:                                ; preds = %entry
  %65 = load %src.Element*, %src.Element** %4, align 8
  %66 = bitcast %runtime.Context* %32 to i8*
  %67 = call float @src.efont_size(%src.Element* %65, i8* %66)
  %68 = load float, float* @src.SCALE, align 4
  %69 = fmul float 1.000000e+01, %68
  %70 = fadd float %67, %69
  %71 = fptosi float %70 to i64
  ret i64 %71

switch.case.body2:                                ; preds = %entry
  ret i64 2

switch.case.body3:                                ; preds = %entry
  %72 = load %src.Element*, %src.Element** %4, align 8
  %73 = getelementptr inbounds %src.Element, %src.Element* %72, i32 0, i32 4
  %74 = load %src.Window*, %src.Window** %73, align 8
  %75 = getelementptr inbounds %src.Window, %src.Window* %74, i32 0, i32 2
  %76 = load %src.Element*, %src.Element** %75, align 8
  %77 = load %src.Element*, %src.Element** %4, align 8
  %78 = icmp eq %src.Element* %76, %77
  %79 = zext i1 %78 to i8
  store i8 %79, i8* %15, align 1
  %80 = load %src.Element*, %src.Element** %4, align 8
  %81 = getelementptr inbounds %src.Element, %src.Element* %80, i32 0, i32 4
  %82 = load %src.Window*, %src.Window** %81, align 8
  %83 = getelementptr inbounds %src.Window, %src.Window* %82, i32 0, i32 1
  %84 = load %src.Element*, %src.Element** %83, align 8
  %85 = load %src.Element*, %src.Element** %4, align 8
  %86 = icmp eq %src.Element* %84, %85
  %87 = zext i1 %86 to i8
  store i8 %87, i8* %16, align 1
  %88 = load %src.Element*, %src.Element** %4, align 8
  %89 = getelementptr inbounds %src.Element, %src.Element* %88, i32 0, i32 4
  %90 = load %src.Window*, %src.Window** %89, align 8
  %91 = getelementptr inbounds %src.Window, %src.Window* %90, i32 0, i32 24
  %92 = load %src.Render_Target*, %src.Render_Target** %91, align 8
  store %src.Render_Target* %92, %src.Render_Target** %17, align 8
  %93 = load i8, i8* %16, align 1
  %94 = trunc i8 %93 to i1
  br i1 %94, label %if.then, label %cmp.or

cmp.or:                                           ; preds = %switch.case.body3
  %95 = load i8, i8* %15, align 1
  %96 = trunc i8 %95 to i1
  br i1 %96, label %if.then, label %if.else

if.then:                                          ; preds = %cmp.or, %switch.case.body3
  %97 = load [4 x i8], [4 x i8]* getelementptr inbounds (%src.Theme, %src.Theme* @src.theme, i64 0, i32 2), align 1
  br label %if.done

if.else:                                          ; preds = %cmp.or
  %98 = load [4 x i8], [4 x i8]* getelementptr inbounds (%src.Theme, %src.Theme* @src.theme, i64 0, i32 5), align 1
  br label %if.done

if.done:                                          ; preds = %if.else, %if.then
  %99 = phi [4 x i8] [ %97, %if.then ], [ %98, %if.else ]
  store [4 x i8] %99, [4 x i8]* %18, align 1
  %100 = load %src.Render_Target*, %src.Render_Target** %17, align 8
  %101 = load %src.Element*, %src.Element** %4, align 8
  %102 = getelementptr inbounds %src.Element, %src.Element* %101, i32 0, i32 5
  %103 = load %src.Rect, %src.Rect* %102, align 4
  %104 = load [4 x i8], [4 x i8]* %18, align 1
  %105 = load float, float* @src.ROUNDNESS, align 4
  %106 = load float, float* @src.LINE_WIDTH, align 4
  %107 = bitcast { <2 x float>, <2 x float> }* %19 to %src.Rect*
  store %src.Rect %103, %src.Rect* %107, align 4
  %108 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %19, align 8
  %109 = bitcast [4 x i8]* %18 to i64*
  %110 = load i64, i64* %109, align 8
  %111 = bitcast %runtime.Context* %32 to i8*
  call void @src.render_rect_outline(%src.Render_Target* %100, { <2 x float>, <2 x float> } %108, i64 %110, float %105, float %106, i8* %111)
  %112 = load %src.Checkbox*, %src.Checkbox** %8, align 8
  %113 = bitcast %runtime.Context* %32 to i8*
  %114 = call { <2 x float>, <2 x float> } @src.checkbox_message.box_icon_rect-0(%src.Checkbox* %112, i8* %113)
  %115 = bitcast %src.Rect* %21 to { <2 x float>, <2 x float> }*
  store { <2 x float>, <2 x float> } %114, { <2 x float>, <2 x float> }* %115, align 8
  %116 = load %src.Rect, %src.Rect* %21, align 4
  store %src.Rect %116, %src.Rect* %20, align 4
  %117 = load [4 x i8], [4 x i8]* getelementptr inbounds (%src.Theme, %src.Theme* @src.theme, i64 0, i32 3), align 1
  %118 = load [4 x i8], [4 x i8]* getelementptr inbounds (%src.Theme, %src.Theme* @src.theme, i64 0, i32 4), align 1
  %119 = load %src.Checkbox*, %src.Checkbox** %8, align 8
  %120 = getelementptr inbounds %src.Checkbox, %src.Checkbox* %119, i32 0, i32 5
  %121 = load float, float* %120, align 4
  %122 = bitcast i64* %23 to [4 x i8]*
  store [4 x i8] %117, [4 x i8]* %122, align 1
  %123 = load i64, i64* %23, align 8
  %124 = bitcast i64* %24 to [4 x i8]*
  store [4 x i8] %118, [4 x i8]* %124, align 1
  %125 = load i64, i64* %24, align 8
  %126 = bitcast %runtime.Context* %32 to i8*
  %127 = call i64 @src.color_blend(i64 %123, i64 %125, float %121, i1 true, i8* %126)
  %128 = bitcast [4 x i8]* %25 to i64*
  store i64 %127, i64* %128, align 8
  %129 = load [4 x i8], [4 x i8]* %25, align 1
  store [4 x i8] %129, [4 x i8]* %22, align 1
  %130 = load %src.Render_Target*, %src.Render_Target** %17, align 8
  %131 = load %src.Rect, %src.Rect* %20, align 4
  %132 = load [4 x i8], [4 x i8]* %22, align 1
  %133 = load float, float* @src.ROUNDNESS, align 4
  %134 = bitcast %src.Rect* %20 to { <2 x float>, <2 x float> }*
  %135 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %134, align 8
  %136 = bitcast [4 x i8]* %22 to i64*
  %137 = load i64, i64* %136, align 8
  %138 = bitcast %runtime.Context* %32 to i8*
  call void @src.render_rect(%src.Render_Target* %130, { <2 x float>, <2 x float> } %135, i64 %137, float %133, i8* %138)
  %139 = load %src.Rect, %src.Rect* %20, align 4
  %140 = bitcast %src.Rect* %20 to { <2 x float>, <2 x float> }*
  %141 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %140, align 8
  %142 = bitcast %runtime.Context* %32 to i8*
  %143 = call float @src.rect_width_halfed({ <2 x float>, <2 x float> } %141, i8* %142)
  %144 = call float @math.round_f32(float %143)
  store float %144, float* %26, align 4
  %145 = load %src.Rect, %src.Rect* %20, align 4
  store %src.Rect %145, %src.Rect* %27, align 4
  %146 = getelementptr inbounds %src.Rect, %src.Rect* %27, i32 0, i32 0
  %147 = getelementptr inbounds %src.Rect, %src.Rect* %20, i32 0, i32 0
  %148 = load float, float* %147, align 4
  %149 = load %src.Checkbox*, %src.Checkbox** %8, align 8
  %150 = getelementptr inbounds %src.Checkbox, %src.Checkbox* %149, i32 0, i32 5
  %151 = load float, float* %150, align 4
  %152 = load float, float* %26, align 4
  %153 = fmul float %151, %152
  %154 = fadd float %148, %153
  store float %154, float* %146, align 4
  %155 = getelementptr inbounds %src.Rect, %src.Rect* %27, i32 0, i32 1
  %156 = getelementptr inbounds %src.Rect, %src.Rect* %27, i32 0, i32 0
  %157 = load float, float* %156, align 4
  %158 = load float, float* %26, align 4
  %159 = load float, float* @src.SCALE, align 4
  %160 = fmul float 1.000000e+00, %159
  %161 = fsub float %158, %160
  %162 = fadd float %157, %161
  store float %162, float* %155, align 4
  %163 = load %src.Rect, %src.Rect* %27, align 4
  %164 = load float, float* @src.SCALE, align 4
  %165 = fmul float 2.000000e+00, %164
  %166 = bitcast %src.Rect* %27 to { <2 x float>, <2 x float> }*
  %167 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %166, align 8
  %168 = bitcast %runtime.Context* %32 to i8*
  %169 = call { <2 x float>, <2 x float> } @src.rect_margin({ <2 x float>, <2 x float> } %167, float %165, i8* %168)
  %170 = bitcast %src.Rect* %28 to { <2 x float>, <2 x float> }*
  store { <2 x float>, <2 x float> } %169, { <2 x float>, <2 x float> }* %170, align 8
  %171 = load %src.Rect, %src.Rect* %28, align 4
  store %src.Rect %171, %src.Rect* %27, align 4
  %172 = load %src.Render_Target*, %src.Render_Target** %17, align 8
  %173 = load %src.Rect, %src.Rect* %27, align 4
  %174 = load [4 x i8], [4 x i8]* %18, align 1
  %175 = load float, float* @src.ROUNDNESS, align 4
  %176 = bitcast %src.Rect* %27 to { <2 x float>, <2 x float> }*
  %177 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %176, align 8
  %178 = bitcast [4 x i8]* %18 to i64*
  %179 = load i64, i64* %178, align 8
  %180 = bitcast %runtime.Context* %32 to i8*
  call void @src.render_rect(%src.Render_Target* %172, { <2 x float>, <2 x float> } %177, i64 %179, float %175, i8* %180)
  %181 = load %src.Element*, %src.Element** %4, align 8
  %182 = getelementptr inbounds %src.Element, %src.Element* %181, i32 0, i32 5
  %183 = load %src.Rect, %src.Rect* %182, align 4
  store %src.Rect %183, %src.Rect* %29, align 4
  %184 = getelementptr inbounds %src.Rect, %src.Rect* %29, i32 0, i32 0
  %185 = getelementptr inbounds %src.Rect, %src.Rect* %20, i32 0, i32 1
  %186 = load float, float* %185, align 4
  %187 = load float, float* @src.SCALE, align 4
  %188 = fmul float 5.000000e+00, %187
  %189 = fadd float %186, %188
  store float %189, float* %184, align 4
  %190 = load %src.Element*, %src.Element** %4, align 8
  %191 = load %src.Checkbox*, %src.Checkbox** %8, align 8
  %192 = getelementptr inbounds %src.Checkbox, %src.Checkbox* %191, i32 0, i32 1
  %193 = load %strings.Builder, %strings.Builder* %192, align 8
  %194 = bitcast %runtime.Context* %32 to i8*
  %195 = call { i64, i64 } @strings.to_string(%strings.Builder* %192, i8* %194)
  %196 = bitcast %..string* %30 to { i64, i64 }*
  store { i64, i64 } %195, { i64, i64 }* %196, align 8
  %197 = load %..string, %..string* %30, align 8
  %198 = load %src.Rect, %src.Rect* %29, align 4
  %199 = load [4 x i8], [4 x i8]* %18, align 1
  %200 = bitcast %..string* %30 to { i64, i64 }*
  %201 = load { i64, i64 }, { i64, i64 }* %200, align 8
  %202 = bitcast %src.Rect* %29 to { <2 x float>, <2 x float> }*
  %203 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %202, align 8
  %204 = bitcast [4 x i8]* %18 to i64*
  %205 = load i64, i64* %204, align 8
  %206 = bitcast %runtime.Context* %32 to i8*
  call void @src.erender_string_aligned(%src.Element* %190, { i64, i64 } %201, { <2 x float>, <2 x float> } %203, i64 %205, i64 0, i64 1, i8* %206)
  br label %switch.done

switch.case.body4:                                ; preds = %entry
  %207 = load %src.Checkbox*, %src.Checkbox** %8, align 8
  %208 = getelementptr inbounds %src.Checkbox, %src.Checkbox* %207, i32 0, i32 2
  %209 = load %src.Checkbox*, %src.Checkbox** %8, align 8
  %210 = getelementptr inbounds %src.Checkbox, %src.Checkbox* %209, i32 0, i32 2
  %211 = load i8, i8* %210, align 1
  %212 = icmp eq i8 %211, 0
  %213 = zext i1 %212 to i8
  store i8 %213, i8* %208, align 1
  %214 = load %src.Element*, %src.Element** %4, align 8
  %215 = bitcast %runtime.Context* %32 to i8*
  call void @src.element_repaint(%src.Element* %214, i8* %215)
  %216 = load %src.Element*, %src.Element** %4, align 8
  %217 = bitcast %runtime.Context* %32 to i8*
  call void @src.element_animation_start(%src.Element* %216, i8* %217)
  %218 = load %src.Checkbox*, %src.Checkbox** %8, align 8
  %219 = getelementptr inbounds %src.Checkbox, %src.Checkbox* %218, i32 0, i32 3
  store i8 1, i8* %219, align 1
  %220 = load %src.Checkbox*, %src.Checkbox** %8, align 8
  %221 = getelementptr inbounds %src.Checkbox, %src.Checkbox* %220, i32 0, i32 6
  %222 = load i8*, i8** %221, align 8
  %223 = icmp ne i8* %222, null
  %224 = zext i1 %223 to i8
  %225 = trunc i8 %224 to i1
  br i1 %225, label %if.then5, label %if.done6

if.then5:                                         ; preds = %switch.case.body4
  %226 = load %src.Checkbox*, %src.Checkbox** %8, align 8
  %227 = getelementptr inbounds %src.Checkbox, %src.Checkbox* %226, i32 0, i32 6
  %228 = load i8*, i8** %227, align 8
  %229 = load %src.Checkbox*, %src.Checkbox** %8, align 8
  %230 = getelementptr inbounds %src.Checkbox, %src.Checkbox* %229, i32 0, i32 0
  %231 = getelementptr inbounds %src.Element, %src.Element* %230, i32 0, i32 12
  %232 = load i8*, i8** %231, align 8
  %233 = bitcast %runtime.Context* %32 to i8*
  %234 = bitcast i8* %228 to void (i8*, i8*)*
  call void %234(i8* %232, i8* %233)
  br label %if.done6

if.done6:                                         ; preds = %if.then5, %switch.case.body4
  br label %switch.done

switch.case.body7:                                ; preds = %entry
  %235 = load %src.Checkbox*, %src.Checkbox** %8, align 8
  %236 = getelementptr inbounds %src.Checkbox, %src.Checkbox* %235, i32 0, i32 3
  %237 = load %src.Checkbox*, %src.Checkbox** %8, align 8
  %238 = getelementptr inbounds %src.Checkbox, %src.Checkbox* %237, i32 0, i32 5
  %239 = load %src.Checkbox*, %src.Checkbox** %8, align 8
  %240 = getelementptr inbounds %src.Checkbox, %src.Checkbox* %239, i32 0, i32 2
  %241 = load i8, i8* %240, align 1
  %242 = trunc i8 %241 to i1
  br i1 %242, label %if.then8, label %if.else9

if.then8:                                         ; preds = %switch.case.body7
  br label %if.done10

if.else9:                                         ; preds = %switch.case.body7
  br label %if.done10

if.done10:                                        ; preds = %if.else9, %if.then8
  %243 = phi float [ 1.000000e+00, %if.then8 ], [ 0.000000e+00, %if.else9 ]
  %244 = bitcast %runtime.Context* %32 to i8*
  %245 = call i8 @src.animate_to(i8* %236, float* %238, float %243, float 1.000000e+00, float 0x3F847AE140000000, i8* %244)
  store i8 %245, i8* %31, align 1
  %246 = load i8, i8* %31, align 1
  %247 = icmp ne i8 %246, 0
  %248 = zext i1 %247 to i64
  ret i64 %248

switch.case.body11:                               ; preds = %entry
  %249 = load %src.Element*, %src.Element** %4, align 8
  %250 = load i8*, i8** %7, align 8
  %251 = bitcast %runtime.Context* %32 to i8*
  call void @src.key_combination_check_click(%src.Element* %249, i8* %250, i8* %251)
  br label %switch.done

switch.done:                                      ; preds = %switch.case.body11, %if.done6, %if.done, %entry
  ret i64 0
}

define internal %src.Checkbox* @src.checkbox_init(%src.Element* %0, i32 %1, { i64, i64 } %2, i1 zeroext %3, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %4 = alloca %src.Element*, align 8
  %5 = alloca i32, align 4
  %6 = alloca %..string, align 8
  %7 = alloca i8, align 1
  %8 = alloca %src.Checkbox*, align 8
  %9 = alloca %strings.Builder, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Element* %0, %src.Element** %4, align 8
  store i32 %1, i32* %5, align 4
  %10 = bitcast %..string* %6 to { i64, i64 }*
  store { i64, i64 } %2, { i64, i64 }* %10, align 8
  %11 = load %..string, %..string* %6, align 8
  %12 = zext i1 %3 to i8
  store i8 %12, i8* %7, align 1
  store %src.Checkbox* null, %src.Checkbox** %8, align 8
  %13 = bitcast i8* %__.context_ptr to %runtime.Context*
  %14 = load %src.Element*, %src.Element** %4, align 8
  %15 = load i32, i32* %5, align 4
  %16 = or i32 %15, 1024
  %17 = getelementptr inbounds %runtime.Context, %runtime.Context* %13, i32 0, i32 0
  %18 = load %runtime.Allocator, %runtime.Allocator* %17, align 8
  %19 = bitcast %runtime.Allocator* %17 to { i64, i64 }*
  %20 = load { i64, i64 }, { i64, i64 }* %19, align 8
  %21 = bitcast %runtime.Context* %13 to i8*
  %22 = call %src.Checkbox* @src.element_init-48466(%src.Element* %14, i32 %16, i8* bitcast (i64 (%src.Element*, i64, i64, i8*, i8*)* @src.checkbox_message to i8*), i64 -1, { i64, i64 } %20, i8* %21)
  store %src.Checkbox* %22, %src.Checkbox** %8, align 8
  %23 = load %src.Checkbox*, %src.Checkbox** %8, align 8
  %24 = load i8, i8* %7, align 1
  %25 = icmp ne i8 %24, 0
  %26 = bitcast %runtime.Context* %13 to i8*
  call void @src.checkbox_set(%src.Checkbox* %23, i1 %25, i8* %26)
  %27 = load %src.Checkbox*, %src.Checkbox** %8, align 8
  %28 = getelementptr inbounds %src.Checkbox, %src.Checkbox* %27, i32 0, i32 1
  %29 = getelementptr inbounds %runtime.Context, %runtime.Context* %13, i32 0, i32 0
  %30 = load %runtime.Allocator, %runtime.Allocator* %29, align 8
  %31 = bitcast %runtime.Allocator* %29 to { i64, i64 }*
  %32 = load { i64, i64 }, { i64, i64 }* %31, align 8
  %33 = bitcast %strings.Builder* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* %33, i8 0, i64 40, i1 false)
  %34 = bitcast %runtime.Context* %13 to i8*
  call void @strings.builder_make_len_cap(%strings.Builder* sret %9, i64 0, i64 32, { i64, i64 } %32, i8* %34)
  %35 = load %strings.Builder, %strings.Builder* %9, align 8
  store %strings.Builder %35, %strings.Builder* %28, align 8
  %36 = load %src.Checkbox*, %src.Checkbox** %8, align 8
  %37 = getelementptr inbounds %src.Checkbox, %src.Checkbox* %36, i32 0, i32 1
  %38 = load %..string, %..string* %6, align 8
  %39 = bitcast %..string* %6 to { i64, i64 }*
  %40 = load { i64, i64 }, { i64, i64 }* %39, align 8
  %41 = bitcast %runtime.Context* %13 to i8*
  %42 = call i64 @strings.write_string(%strings.Builder* %37, { i64, i64 } %40, i8* %41)
  %43 = load %src.Checkbox*, %src.Checkbox** %8, align 8
  store %src.Checkbox* %43, %src.Checkbox** %8, align 8
  ret %src.Checkbox* %43
}

define internal void @src.checkbox_set(%src.Checkbox* %0, i1 zeroext %1, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %2 = alloca %src.Checkbox*, align 8
  %3 = alloca i8, align 1
  br label %entry

entry:                                            ; preds = %decls
  store %src.Checkbox* %0, %src.Checkbox** %2, align 8
  %4 = zext i1 %1 to i8
  store i8 %4, i8* %3, align 1
  %5 = bitcast i8* %__.context_ptr to %runtime.Context*
  %6 = load %src.Checkbox*, %src.Checkbox** %2, align 8
  %7 = getelementptr inbounds %src.Checkbox, %src.Checkbox* %6, i32 0, i32 2
  %8 = load i8, i8* %3, align 1
  store i8 %8, i8* %7, align 1
  %9 = load %src.Checkbox*, %src.Checkbox** %2, align 8
  %10 = getelementptr inbounds %src.Checkbox, %src.Checkbox* %9, i32 0, i32 5
  %11 = load i8, i8* %3, align 1
  %12 = trunc i8 %11 to i1
  br i1 %12, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  br label %if.done

if.else:                                          ; preds = %entry
  br label %if.done

if.done:                                          ; preds = %if.else, %if.then
  %13 = phi float [ 1.000000e+00, %if.then ], [ 0.000000e+00, %if.else ]
  store float %13, float* %10, align 4
  ret void
}

define internal i64 @src.spacer_message(%src.Element* %0, i64 %1, i64 %2, i8* %3, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %4 = alloca %src.Element*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i8*, align 8
  %8 = alloca %src.Spacer*, align 8
  %9 = alloca %src.Render_Target*, align 8
  %10 = alloca %src.Rect, align 8
  %11 = alloca i64, align 8
  %12 = alloca { <2 x float>, <2 x float> }, align 8
  %13 = alloca i64, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Element* %0, %src.Element** %4, align 8
  store i64 %1, i64* %5, align 8
  store i64 %2, i64* %6, align 8
  store i8* %3, i8** %7, align 8
  %14 = bitcast i8* %__.context_ptr to %runtime.Context*
  %15 = load %src.Element*, %src.Element** %4, align 8
  %16 = bitcast %src.Element* %15 to %src.Spacer*
  store %src.Spacer* %16, %src.Spacer** %8, align 8
  %17 = load i64, i64* %5, align 8
  switch i64 %17, label %switch.done7 [
    i64 2, label %switch.case.body
    i64 9, label %switch.case.body5
    i64 10, label %switch.case.body6
  ]

switch.case.body:                                 ; preds = %entry
  %18 = load %src.Element*, %src.Element** %4, align 8
  %19 = getelementptr inbounds %src.Element, %src.Element* %18, i32 0, i32 4
  %20 = load %src.Window*, %src.Window** %19, align 8
  %21 = getelementptr inbounds %src.Window, %src.Window* %20, i32 0, i32 24
  %22 = load %src.Render_Target*, %src.Render_Target** %21, align 8
  store %src.Render_Target* %22, %src.Render_Target** %9, align 8
  %23 = load %src.Spacer*, %src.Spacer** %8, align 8
  %24 = getelementptr inbounds %src.Spacer, %src.Spacer* %23, i32 0, i32 5
  %25 = load i64, i64* %24, align 8
  switch i64 %25, label %switch.done [
    i64 0, label %switch.case.body1
    i64 1, label %switch.case.body2
    i64 2, label %switch.case.body3
    i64 3, label %switch.case.body4
  ]

switch.case.body1:                                ; preds = %switch.case.body
  br label %switch.done

switch.case.body2:                                ; preds = %switch.case.body
  %26 = load %src.Element*, %src.Element** %4, align 8
  %27 = getelementptr inbounds %src.Element, %src.Element* %26, i32 0, i32 5
  %28 = load %src.Rect, %src.Rect* %27, align 4
  store %src.Rect %28, %src.Rect* %10, align 4
  %29 = load %src.Spacer*, %src.Spacer** %8, align 8
  %30 = getelementptr inbounds %src.Spacer, %src.Spacer* %29, i32 0, i32 3
  %31 = load i8, i8* %30, align 1
  %32 = trunc i8 %31 to i1
  br i1 %32, label %if.then, label %if.else

if.then:                                          ; preds = %switch.case.body2
  %33 = getelementptr inbounds %src.Rect, %src.Rect* %10, i32 0, i32 0
  %34 = load %src.Rect, %src.Rect* %10, align 4
  %35 = bitcast %src.Rect* %10 to { <2 x float>, <2 x float> }*
  %36 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %35, align 8
  %37 = bitcast %runtime.Context* %14 to i8*
  %38 = call float @src.rect_width_halfed({ <2 x float>, <2 x float> } %36, i8* %37)
  %39 = call float @math.round_f32(float %38)
  %40 = load float, float* %33, align 4
  %41 = fadd float %40, %39
  store float %41, float* %33, align 4
  %42 = getelementptr inbounds %src.Rect, %src.Rect* %10, i32 0, i32 1
  %43 = getelementptr inbounds %src.Rect, %src.Rect* %10, i32 0, i32 0
  %44 = load float, float* %43, align 4
  %45 = load float, float* @src.LINE_WIDTH, align 4
  %46 = fadd float %44, %45
  store float %46, float* %42, align 4
  br label %if.done

if.else:                                          ; preds = %switch.case.body2
  %47 = getelementptr inbounds %src.Rect, %src.Rect* %10, i32 0, i32 2
  %48 = load %src.Rect, %src.Rect* %10, align 4
  %49 = bitcast %src.Rect* %10 to { <2 x float>, <2 x float> }*
  %50 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %49, align 8
  %51 = bitcast %runtime.Context* %14 to i8*
  %52 = call float @src.rect_height_halfed({ <2 x float>, <2 x float> } %50, i8* %51)
  %53 = call float @math.round_f32(float %52)
  %54 = load float, float* %47, align 4
  %55 = fadd float %54, %53
  store float %55, float* %47, align 4
  %56 = getelementptr inbounds %src.Rect, %src.Rect* %10, i32 0, i32 3
  %57 = getelementptr inbounds %src.Rect, %src.Rect* %10, i32 0, i32 2
  %58 = load float, float* %57, align 4
  %59 = load float, float* @src.LINE_WIDTH, align 4
  %60 = fadd float %58, %59
  store float %60, float* %56, align 4
  br label %if.done

if.done:                                          ; preds = %if.else, %if.then
  %61 = load %src.Render_Target*, %src.Render_Target** %9, align 8
  %62 = load %src.Rect, %src.Rect* %10, align 4
  %63 = load [4 x i8], [4 x i8]* getelementptr inbounds (%src.Theme, %src.Theme* @src.theme, i64 0, i32 2), align 1
  %64 = load float, float* @src.ROUNDNESS, align 4
  %65 = bitcast %src.Rect* %10 to { <2 x float>, <2 x float> }*
  %66 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %65, align 8
  %67 = bitcast i64* %11 to [4 x i8]*
  store [4 x i8] %63, [4 x i8]* %67, align 1
  %68 = load i64, i64* %11, align 8
  %69 = bitcast %runtime.Context* %14 to i8*
  call void @src.render_rect(%src.Render_Target* %61, { <2 x float>, <2 x float> } %66, i64 %68, float %64, i8* %69)
  br label %switch.done

switch.case.body3:                                ; preds = %switch.case.body
  %70 = load %src.Render_Target*, %src.Render_Target** %9, align 8
  %71 = load %src.Element*, %src.Element** %4, align 8
  %72 = getelementptr inbounds %src.Element, %src.Element* %71, i32 0, i32 5
  %73 = load %src.Rect, %src.Rect* %72, align 4
  %74 = load [4 x i8], [4 x i8]* getelementptr inbounds (%src.Theme, %src.Theme* @src.theme, i64 0, i32 2), align 1
  %75 = load float, float* @src.ROUNDNESS, align 4
  %76 = bitcast { <2 x float>, <2 x float> }* %12 to %src.Rect*
  store %src.Rect %73, %src.Rect* %76, align 4
  %77 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %12, align 8
  %78 = bitcast i64* %13 to [4 x i8]*
  store [4 x i8] %74, [4 x i8]* %78, align 1
  %79 = load i64, i64* %13, align 8
  %80 = bitcast %runtime.Context* %14 to i8*
  call void @src.render_rect(%src.Render_Target* %70, { <2 x float>, <2 x float> } %77, i64 %79, float %75, i8* %80)
  br label %switch.done

switch.case.body4:                                ; preds = %switch.case.body
  br label %switch.done

switch.done:                                      ; preds = %switch.case.body4, %switch.case.body3, %if.done, %switch.case.body1, %switch.case.body
  br label %switch.done7

switch.case.body5:                                ; preds = %entry
  %81 = load %src.Spacer*, %src.Spacer** %8, align 8
  %82 = getelementptr inbounds %src.Spacer, %src.Spacer* %81, i32 0, i32 1
  %83 = load float, float* %82, align 4
  %84 = load float, float* @src.SCALE, align 4
  %85 = fmul float %83, %84
  %86 = fptosi float %85 to i64
  ret i64 %86

switch.case.body6:                                ; preds = %entry
  %87 = load %src.Spacer*, %src.Spacer** %8, align 8
  %88 = getelementptr inbounds %src.Spacer, %src.Spacer* %87, i32 0, i32 2
  %89 = load float, float* %88, align 4
  %90 = load float, float* @src.SCALE, align 4
  %91 = fmul float %89, %90
  %92 = fptosi float %91 to i64
  ret i64 %92

switch.done7:                                     ; preds = %switch.done, %entry
  ret i64 0
}

define internal %src.Spacer* @src.spacer_init(%src.Element* %0, i32 %1, float %2, float %3, i64 %4, i1 zeroext %5, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %6 = alloca %src.Element*, align 8
  %7 = alloca i32, align 4
  %8 = alloca float, align 4
  %9 = alloca float, align 4
  %10 = alloca i64, align 8
  %11 = alloca i8, align 1
  %12 = alloca %src.Spacer*, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Element* %0, %src.Element** %6, align 8
  store i32 %1, i32* %7, align 4
  store float %2, float* %8, align 4
  store float %3, float* %9, align 4
  store i64 %4, i64* %10, align 8
  %13 = zext i1 %5 to i8
  store i8 %13, i8* %11, align 1
  store %src.Spacer* null, %src.Spacer** %12, align 8
  %14 = bitcast i8* %__.context_ptr to %runtime.Context*
  %15 = load %src.Element*, %src.Element** %6, align 8
  %16 = load i32, i32* %7, align 4
  %17 = getelementptr inbounds %runtime.Context, %runtime.Context* %14, i32 0, i32 0
  %18 = load %runtime.Allocator, %runtime.Allocator* %17, align 8
  %19 = bitcast %runtime.Allocator* %17 to { i64, i64 }*
  %20 = load { i64, i64 }, { i64, i64 }* %19, align 8
  %21 = bitcast %runtime.Context* %14 to i8*
  %22 = call %src.Spacer* @src.element_init-48484(%src.Element* %15, i32 %16, i8* bitcast (i64 (%src.Element*, i64, i64, i8*, i8*)* @src.spacer_message to i8*), i64 -1, { i64, i64 } %20, i8* %21)
  store %src.Spacer* %22, %src.Spacer** %12, align 8
  %23 = load %src.Spacer*, %src.Spacer** %12, align 8
  %24 = getelementptr inbounds %src.Spacer, %src.Spacer* %23, i32 0, i32 1
  %25 = load float, float* %8, align 4
  store float %25, float* %24, align 4
  %26 = load %src.Spacer*, %src.Spacer** %12, align 8
  %27 = getelementptr inbounds %src.Spacer, %src.Spacer* %26, i32 0, i32 2
  %28 = load float, float* %9, align 4
  store float %28, float* %27, align 4
  %29 = load %src.Spacer*, %src.Spacer** %12, align 8
  %30 = getelementptr inbounds %src.Spacer, %src.Spacer* %29, i32 0, i32 3
  %31 = load i8, i8* %11, align 1
  store i8 %31, i8* %30, align 1
  %32 = load %src.Spacer*, %src.Spacer** %12, align 8
  %33 = getelementptr inbounds %src.Spacer, %src.Spacer* %32, i32 0, i32 5
  %34 = load i64, i64* %10, align 8
  store i64 %34, i64* %33, align 8
  %35 = load %src.Spacer*, %src.Spacer** %12, align 8
  store %src.Spacer* %35, %src.Spacer** %12, align 8
  ret %src.Spacer* %35
}

define internal { i64, i64 } @src.panel_calculate_per_fill(%src.Panel* %0, i64 %1, i64 %2, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %3 = alloca %src.Panel*, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i8, align 1
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca %src.Element*, align 8
  %12 = alloca i64, align 8
  %13 = alloca %src.Element*, align 8
  %14 = alloca { i64, i64 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Panel* %0, %src.Panel** %3, align 8
  store i64 %1, i64* %4, align 8
  store i64 %2, i64* %5, align 8
  store i64 0, i64* %6, align 8
  store i64 0, i64* %7, align 8
  %15 = bitcast i8* %__.context_ptr to %runtime.Context*
  %16 = load %src.Panel*, %src.Panel** %3, align 8
  %17 = getelementptr inbounds %src.Panel, %src.Panel* %16, i32 0, i32 0
  %18 = getelementptr inbounds %src.Element, %src.Element* %17, i32 0, i32 0
  %19 = load i32, i32* %18, align 4
  %20 = and i32 %19, 8192
  %21 = icmp ne i32 %20, 0
  %22 = zext i1 %21 to i8
  store i8 %22, i8* %8, align 1
  %23 = load i8, i8* %8, align 1
  %24 = trunc i8 %23 to i1
  br i1 %24, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %25 = load i64, i64* %4, align 8
  br label %if.done

if.else:                                          ; preds = %entry
  %26 = load i64, i64* %5, align 8
  br label %if.done

if.done:                                          ; preds = %if.else, %if.then
  %27 = phi i64 [ %25, %if.then ], [ %26, %if.else ]
  store i64 %27, i64* %9, align 8
  store i64 0, i64* %10, align 8
  store %src.Element* null, %src.Element** %11, align 8
  %28 = load %src.Panel*, %src.Panel** %3, align 8
  %29 = getelementptr inbounds %src.Panel, %src.Panel* %28, i32 0, i32 0
  %30 = getelementptr inbounds %src.Element, %src.Element* %29, i32 0, i32 3
  %31 = getelementptr inbounds { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %30, i32 0, i32 1
  store i64 -1, i64* %12, align 8
  br label %for.index.loop

for.index.loop:                                   ; preds = %if.done15, %if.then1, %if.done
  %32 = load i64, i64* %12, align 8
  %33 = add i64 %32, 1
  store i64 %33, i64* %12, align 8
  %34 = load i64, i64* %31, align 8
  %35 = icmp slt i64 %33, %34
  br i1 %35, label %for.index.body, label %for.index.done

for.index.body:                                   ; preds = %for.index.loop
  %36 = load i64, i64* %12, align 8
  %37 = getelementptr inbounds { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %30, i32 0, i32 0
  %38 = load %src.Element**, %src.Element*** %37, align 8
  %39 = getelementptr %src.Element*, %src.Element** %38, i64 %36
  %40 = load %src.Element*, %src.Element** %39, align 8
  store %src.Element* %40, %src.Element** %13, align 8
  %41 = load %src.Element*, %src.Element** %13, align 8
  %42 = getelementptr inbounds %src.Element, %src.Element* %41, i32 0, i32 0
  %43 = load i32, i32* %42, align 4
  %44 = and i32 %43, 2
  %45 = icmp ne i32 %44, 0
  %46 = zext i1 %45 to i8
  %47 = trunc i8 %46 to i1
  br i1 %47, label %if.then1, label %cmp.or

cmp.or:                                           ; preds = %for.index.body
  %48 = load %src.Element*, %src.Element** %13, align 8
  %49 = getelementptr inbounds %src.Element, %src.Element* %48, i32 0, i32 0
  %50 = load i32, i32* %49, align 4
  %51 = and i32 %50, 32
  %52 = icmp ne i32 %51, 0
  %53 = zext i1 %52 to i8
  %54 = trunc i8 %53 to i1
  br i1 %54, label %if.then1, label %if.done2

if.then1:                                         ; preds = %cmp.or, %for.index.body
  br label %for.index.loop

unreachable:                                      ; No predecessors!
  br label %if.done2

if.done2:                                         ; preds = %unreachable, %cmp.or
  %55 = load i64, i64* %7, align 8
  %56 = add i64 %55, 1
  store i64 %56, i64* %7, align 8
  %57 = load i8, i8* %8, align 1
  %58 = trunc i8 %57 to i1
  br i1 %58, label %if.then3, label %if.else9

if.then3:                                         ; preds = %if.done2
  %59 = load %src.Element*, %src.Element** %13, align 8
  %60 = getelementptr inbounds %src.Element, %src.Element* %59, i32 0, i32 0
  %61 = load i32, i32* %60, align 4
  %62 = and i32 %61, 128
  %63 = icmp ne i32 %62, 0
  %64 = zext i1 %63 to i8
  %65 = trunc i8 %64 to i1
  br i1 %65, label %if.then4, label %if.else5

if.then4:                                         ; preds = %if.then3
  %66 = load i64, i64* %10, align 8
  %67 = add i64 %66, 1
  store i64 %67, i64* %10, align 8
  br label %if.done8

if.else5:                                         ; preds = %if.then3
  %68 = load i64, i64* %9, align 8
  %69 = icmp sgt i64 %68, 0
  %70 = zext i1 %69 to i8
  %71 = trunc i8 %70 to i1
  br i1 %71, label %if.then6, label %if.done7

if.then6:                                         ; preds = %if.else5
  %72 = load %src.Element*, %src.Element** %13, align 8
  %73 = load i64, i64* %5, align 8
  %74 = bitcast %runtime.Context* %15 to i8*
  %75 = call i64 @src.element_message(%src.Element* %72, i64 9, i64 %73, i8* null, i8* %74)
  %76 = load i64, i64* %9, align 8
  %77 = sub i64 %76, %75
  store i64 %77, i64* %9, align 8
  br label %if.done7

if.done7:                                         ; preds = %if.then6, %if.else5
  br label %if.done8

if.done8:                                         ; preds = %if.done7, %if.then4
  br label %if.done15

if.else9:                                         ; preds = %if.done2
  %78 = load %src.Element*, %src.Element** %13, align 8
  %79 = getelementptr inbounds %src.Element, %src.Element* %78, i32 0, i32 0
  %80 = load i32, i32* %79, align 4
  %81 = and i32 %80, 64
  %82 = icmp ne i32 %81, 0
  %83 = zext i1 %82 to i8
  %84 = trunc i8 %83 to i1
  br i1 %84, label %if.then10, label %if.else11

if.then10:                                        ; preds = %if.else9
  %85 = load i64, i64* %10, align 8
  %86 = add i64 %85, 1
  store i64 %86, i64* %10, align 8
  br label %if.done14

if.else11:                                        ; preds = %if.else9
  %87 = load i64, i64* %9, align 8
  %88 = icmp sgt i64 %87, 0
  %89 = zext i1 %88 to i8
  %90 = trunc i8 %89 to i1
  br i1 %90, label %if.then12, label %if.done13

if.then12:                                        ; preds = %if.else11
  %91 = load %src.Element*, %src.Element** %13, align 8
  %92 = load i64, i64* %4, align 8
  %93 = bitcast %runtime.Context* %15 to i8*
  %94 = call i64 @src.element_message(%src.Element* %91, i64 10, i64 %92, i8* null, i8* %93)
  %95 = load i64, i64* %9, align 8
  %96 = sub i64 %95, %94
  store i64 %96, i64* %9, align 8
  br label %if.done13

if.done13:                                        ; preds = %if.then12, %if.else11
  br label %if.done14

if.done14:                                        ; preds = %if.done13, %if.then10
  br label %if.done15

if.done15:                                        ; preds = %if.done14, %if.done8
  br label %for.index.loop

for.index.done:                                   ; preds = %for.index.loop
  %97 = load i64, i64* %7, align 8
  %98 = icmp ne i64 %97, 0
  %99 = zext i1 %98 to i8
  %100 = trunc i8 %99 to i1
  br i1 %100, label %if.then16, label %if.done17

if.then16:                                        ; preds = %for.index.done
  %101 = load i64, i64* %7, align 8
  %102 = sub i64 %101, 1
  %103 = load %src.Panel*, %src.Panel** %3, align 8
  %104 = getelementptr inbounds %src.Panel, %src.Panel* %103, i32 0, i32 3
  %105 = load float, float* %104, align 4
  %106 = load float, float* @src.SCALE, align 4
  %107 = fmul float %105, %106
  %108 = fptosi float %107 to i64
  %109 = mul i64 %102, %108
  %110 = load i64, i64* %9, align 8
  %111 = sub i64 %110, %109
  store i64 %111, i64* %9, align 8
  br label %if.done17

if.done17:                                        ; preds = %if.then16, %for.index.done
  %112 = load i64, i64* %9, align 8
  %113 = icmp sgt i64 %112, 0
  %114 = zext i1 %113 to i8
  %115 = trunc i8 %114 to i1
  br i1 %115, label %cmp.and, label %if.done19

cmp.and:                                          ; preds = %if.done17
  %116 = load i64, i64* %10, align 8
  %117 = icmp ne i64 %116, 0
  %118 = zext i1 %117 to i8
  %119 = trunc i8 %118 to i1
  br i1 %119, label %if.then18, label %if.done19

if.then18:                                        ; preds = %cmp.and
  %120 = load i64, i64* %9, align 8
  %121 = load i64, i64* %10, align 8
  %122 = sdiv i64 %120, %121
  store i64 %122, i64* %6, align 8
  br label %if.done19

if.done19:                                        ; preds = %if.then18, %cmp.and, %if.done17
  %123 = load i64, i64* %6, align 8
  %124 = load i64, i64* %7, align 8
  store i64 %123, i64* %6, align 8
  store i64 %124, i64* %7, align 8
  %125 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %14, i32 0, i32 0
  %126 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %14, i32 0, i32 1
  store i64 %123, i64* %125, align 8
  store i64 %124, i64* %126, align 8
  %127 = load { i64, i64 }, { i64, i64 }* %14, align 8
  ret { i64, i64 } %127
}

define internal i64 @src.panel_measure(%src.Panel* %0, i64 %1, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %2 = alloca %src.Panel*, align 8
  %3 = alloca i64, align 8
  %4 = alloca i8, align 1
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca %src.Element*, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca %src.Element*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Panel* %0, %src.Panel** %2, align 8
  store i64 %1, i64* %3, align 8
  %14 = bitcast i8* %__.context_ptr to %runtime.Context*
  %15 = load %src.Panel*, %src.Panel** %2, align 8
  %16 = getelementptr inbounds %src.Panel, %src.Panel* %15, i32 0, i32 0
  %17 = getelementptr inbounds %src.Element, %src.Element* %16, i32 0, i32 0
  %18 = load i32, i32* %17, align 4
  %19 = and i32 %18, 8192
  %20 = icmp ne i32 %19, 0
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %4, align 1
  %22 = load %src.Panel*, %src.Panel** %2, align 8
  %23 = load i8, i8* %4, align 1
  %24 = trunc i8 %23 to i1
  br i1 %24, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %25 = load i64, i64* %3, align 8
  br label %if.done

if.else:                                          ; preds = %entry
  br label %if.done

if.done:                                          ; preds = %if.else, %if.then
  %26 = phi i64 [ %25, %if.then ], [ 0, %if.else ]
  %27 = load i8, i8* %4, align 1
  %28 = trunc i8 %27 to i1
  br i1 %28, label %if.then1, label %if.else2

if.then1:                                         ; preds = %if.done
  br label %if.done3

if.else2:                                         ; preds = %if.done
  %29 = load i64, i64* %3, align 8
  br label %if.done3

if.done3:                                         ; preds = %if.else2, %if.then1
  %30 = phi i64 [ 0, %if.then1 ], [ %29, %if.else2 ]
  %31 = bitcast %runtime.Context* %14 to i8*
  %32 = call { i64, i64 } @src.panel_calculate_per_fill(%src.Panel* %22, i64 %26, i64 %30, i8* %31)
  %33 = extractvalue { i64, i64 } %32, 0
  %34 = extractvalue { i64, i64 } %32, 1
  store i64 %33, i64* %5, align 8
  store i64 0, i64* %6, align 8
  store %src.Element* null, %src.Element** %7, align 8
  store i64 0, i64* %8, align 8
  %35 = load %src.Panel*, %src.Panel** %2, align 8
  %36 = getelementptr inbounds %src.Panel, %src.Panel* %35, i32 0, i32 0
  %37 = getelementptr inbounds %src.Element, %src.Element* %36, i32 0, i32 3
  %38 = getelementptr inbounds { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %37, i32 0, i32 1
  store i64 -1, i64* %9, align 8
  br label %for.index.loop

for.index.loop:                                   ; preds = %if.done16, %if.then4, %if.done3
  %39 = load i64, i64* %9, align 8
  %40 = add i64 %39, 1
  store i64 %40, i64* %9, align 8
  %41 = load i64, i64* %38, align 8
  %42 = icmp slt i64 %40, %41
  br i1 %42, label %for.index.body, label %for.index.done

for.index.body:                                   ; preds = %for.index.loop
  %43 = load i64, i64* %9, align 8
  %44 = getelementptr inbounds { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %37, i32 0, i32 0
  %45 = load %src.Element**, %src.Element*** %44, align 8
  %46 = getelementptr %src.Element*, %src.Element** %45, i64 %43
  %47 = load %src.Element*, %src.Element** %46, align 8
  store %src.Element* %47, %src.Element** %10, align 8
  store i64 %43, i64* %11, align 8
  %48 = load %src.Element*, %src.Element** %10, align 8
  %49 = getelementptr inbounds %src.Element, %src.Element* %48, i32 0, i32 0
  %50 = load i32, i32* %49, align 4
  %51 = and i32 %50, 2
  %52 = icmp ne i32 %51, 0
  %53 = zext i1 %52 to i8
  %54 = trunc i8 %53 to i1
  br i1 %54, label %if.then4, label %cmp.or

cmp.or:                                           ; preds = %for.index.body
  %55 = load %src.Element*, %src.Element** %10, align 8
  %56 = getelementptr inbounds %src.Element, %src.Element* %55, i32 0, i32 0
  %57 = load i32, i32* %56, align 4
  %58 = and i32 %57, 32
  %59 = icmp ne i32 %58, 0
  %60 = zext i1 %59 to i8
  %61 = trunc i8 %60 to i1
  br i1 %61, label %if.then4, label %if.done5

if.then4:                                         ; preds = %cmp.or, %for.index.body
  br label %for.index.loop

unreachable:                                      ; No predecessors!
  br label %if.done5

if.done5:                                         ; preds = %unreachable, %cmp.or
  %62 = load i8, i8* %4, align 1
  %63 = trunc i8 %62 to i1
  br i1 %63, label %if.then6, label %if.else7

if.then6:                                         ; preds = %if.done5
  br label %if.done8

if.else7:                                         ; preds = %if.done5
  br label %if.done8

if.done8:                                         ; preds = %if.else7, %if.then6
  %64 = phi i64 [ 7, %if.then6 ], [ 6, %if.else7 ]
  %65 = load %src.Element*, %src.Element** %10, align 8
  %66 = getelementptr inbounds %src.Element, %src.Element* %65, i32 0, i32 0
  %67 = load i32, i32* %66, align 4
  %68 = trunc i64 %64 to i32
  %69 = sub i32 %68, 0
  %70 = icmp ult i32 %69, 32
  %71 = shl i32 1, %69
  %72 = select i1 %70, i32 %71, i32 0
  %73 = and i32 %67, %72
  %74 = icmp ne i32 %73, 0
  %75 = zext i1 %74 to i8
  %76 = trunc i8 %75 to i1
  br i1 %76, label %if.then9, label %if.else10

if.then9:                                         ; preds = %if.done8
  %77 = load i64, i64* %5, align 8
  br label %if.done11

if.else10:                                        ; preds = %if.done8
  br label %if.done11

if.done11:                                        ; preds = %if.else10, %if.then9
  %78 = phi i64 [ %77, %if.then9 ], [ 0, %if.else10 ]
  store i64 %78, i64* %12, align 8
  %79 = load %src.Element*, %src.Element** %10, align 8
  %80 = load i8, i8* %4, align 1
  %81 = trunc i8 %80 to i1
  br i1 %81, label %if.then12, label %if.else13

if.then12:                                        ; preds = %if.done11
  br label %if.done14

if.else13:                                        ; preds = %if.done11
  br label %if.done14

if.done14:                                        ; preds = %if.else13, %if.then12
  %82 = phi i64 [ 10, %if.then12 ], [ 9, %if.else13 ]
  %83 = load i64, i64* %12, align 8
  %84 = bitcast %runtime.Context* %14 to i8*
  %85 = call i64 @src.element_message(%src.Element* %79, i64 %82, i64 %83, i8* null, i8* %84)
  store i64 %85, i64* %13, align 8
  %86 = load i64, i64* %13, align 8
  %87 = load i64, i64* %6, align 8
  %88 = icmp sgt i64 %86, %87
  %89 = zext i1 %88 to i8
  %90 = trunc i8 %89 to i1
  br i1 %90, label %if.then15, label %if.done16

if.then15:                                        ; preds = %if.done14
  %91 = load i64, i64* %13, align 8
  store i64 %91, i64* %6, align 8
  br label %if.done16

if.done16:                                        ; preds = %if.then15, %if.done14
  br label %for.index.loop

for.index.done:                                   ; preds = %for.index.loop
  %92 = load i64, i64* %6, align 8
  %93 = load %src.Panel*, %src.Panel** %2, align 8
  %94 = getelementptr inbounds %src.Panel, %src.Panel* %93, i32 0, i32 1
  %95 = load float, float* %94, align 4
  %96 = load float, float* @src.SCALE, align 4
  %97 = fmul float %95, %96
  %98 = fmul float %97, 2.000000e+00
  %99 = fptosi float %98 to i64
  %100 = add i64 %92, %99
  ret i64 %100
}

define internal float @src.panel_layout(%src.Panel* %0, { <2 x float>, <2 x float> } %1, i1 zeroext %2, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %3 = alloca %src.Panel*, align 8
  %4 = alloca %src.Rect, align 8
  %5 = alloca i8, align 1
  %6 = alloca i8, align 1
  %7 = alloca float, align 4
  %8 = alloca float, align 4
  %9 = alloca float, align 4
  %10 = alloca float, align 4
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i8, align 1
  %14 = alloca %src.Element*, align 8
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  %17 = alloca %src.Element*, align 8
  %18 = alloca i64, align 8
  %19 = alloca float, align 4
  %20 = alloca i64, align 8
  %21 = alloca %src.Rect, align 8
  %22 = alloca %src.Rect, align 4
  %23 = alloca %src.Rect, align 8
  %24 = alloca float, align 4
  %25 = alloca i64, align 8
  %26 = alloca %src.Rect, align 8
  %27 = alloca %src.Rect, align 4
  %28 = alloca %src.Rect, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Panel* %0, %src.Panel** %3, align 8
  %29 = bitcast %src.Rect* %4 to { <2 x float>, <2 x float> }*
  store { <2 x float>, <2 x float> } %1, { <2 x float>, <2 x float> }* %29, align 8
  %30 = load %src.Rect, %src.Rect* %4, align 4
  %31 = zext i1 %2 to i8
  store i8 %31, i8* %5, align 1
  %32 = bitcast i8* %__.context_ptr to %runtime.Context*
  %33 = load %src.Panel*, %src.Panel** %3, align 8
  %34 = getelementptr inbounds %src.Panel, %src.Panel* %33, i32 0, i32 0
  %35 = getelementptr inbounds %src.Element, %src.Element* %34, i32 0, i32 0
  %36 = load i32, i32* %35, align 4
  %37 = and i32 %36, 8192
  %38 = icmp ne i32 %37, 0
  %39 = zext i1 %38 to i8
  store i8 %39, i8* %6, align 1
  %40 = load %src.Panel*, %src.Panel** %3, align 8
  %41 = getelementptr inbounds %src.Panel, %src.Panel* %40, i32 0, i32 1
  %42 = load float, float* %41, align 4
  %43 = load float, float* @src.SCALE, align 4
  %44 = fmul float %42, %43
  %45 = call float @math.round_f32(float %44)
  store float %45, float* %7, align 4
  %46 = load float, float* %7, align 4
  store float %46, float* %8, align 4
  %47 = load %src.Panel*, %src.Panel** %3, align 8
  %48 = getelementptr inbounds %src.Panel, %src.Panel* %47, i32 0, i32 11
  %49 = load %src.Scrollbar*, %src.Scrollbar** %48, align 8
  %50 = icmp ne %src.Scrollbar* %49, null
  %51 = zext i1 %50 to i8
  %52 = trunc i8 %51 to i1
  br i1 %52, label %cmp.and, label %if.done

cmp.and:                                          ; preds = %entry
  %53 = load i8, i8* %5, align 1
  %54 = trunc i8 %53 to i1
  br i1 %54, label %if.done, label %if.then

if.then:                                          ; preds = %cmp.and
  %55 = load %src.Panel*, %src.Panel** %3, align 8
  %56 = getelementptr inbounds %src.Panel, %src.Panel* %55, i32 0, i32 11
  %57 = load %src.Scrollbar*, %src.Scrollbar** %56, align 8
  %58 = getelementptr inbounds %src.Scrollbar, %src.Scrollbar* %57, i32 0, i32 4
  %59 = load float, float* %58, align 4
  %60 = load float, float* %8, align 4
  %61 = fsub float %60, %59
  store float %61, float* %8, align 4
  br label %if.done

if.done:                                          ; preds = %if.then, %cmp.and, %entry
  %62 = load %src.Rect, %src.Rect* %4, align 4
  %63 = bitcast %src.Rect* %4 to { <2 x float>, <2 x float> }*
  %64 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %63, align 8
  %65 = bitcast %runtime.Context* %32 to i8*
  %66 = call float @src.rect_width({ <2 x float>, <2 x float> } %64, i8* %65)
  %67 = load float, float* %7, align 4
  %68 = fmul float %67, 2.000000e+00
  %69 = fsub float %66, %68
  store float %69, float* %9, align 4
  %70 = load %src.Rect, %src.Rect* %4, align 4
  %71 = bitcast %src.Rect* %4 to { <2 x float>, <2 x float> }*
  %72 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %71, align 8
  %73 = bitcast %runtime.Context* %32 to i8*
  %74 = call float @src.rect_height({ <2 x float>, <2 x float> } %72, i8* %73)
  %75 = load float, float* %7, align 4
  %76 = fmul float %75, 2.000000e+00
  %77 = fsub float %74, %76
  store float %77, float* %10, align 4
  %78 = load %src.Panel*, %src.Panel** %3, align 8
  %79 = load float, float* %9, align 4
  %80 = fptosi float %79 to i64
  %81 = load float, float* %10, align 4
  %82 = fptosi float %81 to i64
  %83 = bitcast %runtime.Context* %32 to i8*
  %84 = call { i64, i64 } @src.panel_calculate_per_fill(%src.Panel* %78, i64 %80, i64 %82, i8* %83)
  %85 = extractvalue { i64, i64 } %84, 0
  %86 = extractvalue { i64, i64 } %84, 1
  store i64 %85, i64* %11, align 8
  store i64 %86, i64* %12, align 8
  %87 = load %src.Panel*, %src.Panel** %3, align 8
  %88 = getelementptr inbounds %src.Panel, %src.Panel* %87, i32 0, i32 0
  %89 = getelementptr inbounds %src.Element, %src.Element* %88, i32 0, i32 0
  %90 = load i32, i32* %89, align 4
  %91 = and i32 %90, 256
  %92 = icmp ne i32 %91, 0
  %93 = zext i1 %92 to i8
  store i8 %93, i8* %13, align 1
  store %src.Element* null, %src.Element** %14, align 8
  store i64 0, i64* %15, align 8
  %94 = load %src.Panel*, %src.Panel** %3, align 8
  %95 = getelementptr inbounds %src.Panel, %src.Panel* %94, i32 0, i32 0
  %96 = getelementptr inbounds %src.Element, %src.Element* %95, i32 0, i32 3
  %97 = getelementptr inbounds { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %96, i32 0, i32 1
  store i64 -1, i64* %16, align 8
  br label %for.index.loop

for.index.loop:                                   ; preds = %if.done28, %if.then1, %if.done
  %98 = load i64, i64* %16, align 8
  %99 = add i64 %98, 1
  store i64 %99, i64* %16, align 8
  %100 = load i64, i64* %97, align 8
  %101 = icmp slt i64 %99, %100
  br i1 %101, label %for.index.body, label %for.index.done

for.index.body:                                   ; preds = %for.index.loop
  %102 = load i64, i64* %16, align 8
  %103 = getelementptr inbounds { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %96, i32 0, i32 0
  %104 = load %src.Element**, %src.Element*** %103, align 8
  %105 = getelementptr %src.Element*, %src.Element** %104, i64 %102
  %106 = load %src.Element*, %src.Element** %105, align 8
  store %src.Element* %106, %src.Element** %17, align 8
  store i64 %102, i64* %18, align 8
  %107 = load %src.Element*, %src.Element** %17, align 8
  %108 = getelementptr inbounds %src.Element, %src.Element* %107, i32 0, i32 0
  %109 = load i32, i32* %108, align 4
  %110 = and i32 %109, 2
  %111 = icmp ne i32 %110, 0
  %112 = zext i1 %111 to i8
  %113 = trunc i8 %112 to i1
  br i1 %113, label %if.then1, label %cmp.or

cmp.or:                                           ; preds = %for.index.body
  %114 = load %src.Element*, %src.Element** %17, align 8
  %115 = getelementptr inbounds %src.Element, %src.Element* %114, i32 0, i32 0
  %116 = load i32, i32* %115, align 4
  %117 = and i32 %116, 32
  %118 = icmp ne i32 %117, 0
  %119 = zext i1 %118 to i8
  %120 = trunc i8 %119 to i1
  br i1 %120, label %if.then1, label %if.done2

if.then1:                                         ; preds = %cmp.or, %for.index.body
  br label %for.index.loop

unreachable:                                      ; No predecessors!
  br label %if.done2

if.done2:                                         ; preds = %unreachable, %cmp.or
  %121 = load i8, i8* %6, align 1
  %122 = trunc i8 %121 to i1
  br i1 %122, label %if.then3, label %if.else15

if.then3:                                         ; preds = %if.done2
  %123 = load %src.Element*, %src.Element** %17, align 8
  %124 = getelementptr inbounds %src.Element, %src.Element* %123, i32 0, i32 0
  %125 = load i32, i32* %124, align 4
  %126 = and i32 %125, 64
  %127 = icmp ne i32 %126, 0
  %128 = zext i1 %127 to i8
  %129 = trunc i8 %128 to i1
  br i1 %129, label %if.then5, label %cmp.or4

cmp.or4:                                          ; preds = %if.then3
  %130 = load i8, i8* %13, align 1
  %131 = trunc i8 %130 to i1
  br i1 %131, label %if.then5, label %if.else

if.then5:                                         ; preds = %cmp.or4, %if.then3
  %132 = load float, float* %10, align 4
  br label %if.done9

if.else:                                          ; preds = %cmp.or4
  %133 = load %src.Element*, %src.Element** %17, align 8
  %134 = load %src.Element*, %src.Element** %17, align 8
  %135 = getelementptr inbounds %src.Element, %src.Element* %134, i32 0, i32 0
  %136 = load i32, i32* %135, align 4
  %137 = and i32 %136, 128
  %138 = icmp ne i32 %137, 0
  %139 = zext i1 %138 to i8
  %140 = trunc i8 %139 to i1
  br i1 %140, label %if.then6, label %if.else7

if.then6:                                         ; preds = %if.else
  %141 = load i64, i64* %11, align 8
  br label %if.done8

if.else7:                                         ; preds = %if.else
  br label %if.done8

if.done8:                                         ; preds = %if.else7, %if.then6
  %142 = phi i64 [ %141, %if.then6 ], [ 0, %if.else7 ]
  %143 = bitcast %runtime.Context* %32 to i8*
  %144 = call i64 @src.element_message(%src.Element* %133, i64 10, i64 %142, i8* null, i8* %143)
  %145 = sitofp i64 %144 to float
  br label %if.done9

if.done9:                                         ; preds = %if.done8, %if.then5
  %146 = phi float [ %132, %if.then5 ], [ %145, %if.done8 ]
  store float %146, float* %19, align 4
  %147 = load %src.Element*, %src.Element** %17, align 8
  %148 = getelementptr inbounds %src.Element, %src.Element* %147, i32 0, i32 0
  %149 = load i32, i32* %148, align 4
  %150 = and i32 %149, 128
  %151 = icmp ne i32 %150, 0
  %152 = zext i1 %151 to i8
  %153 = trunc i8 %152 to i1
  br i1 %153, label %if.then10, label %if.else11

if.then10:                                        ; preds = %if.done9
  %154 = load i64, i64* %11, align 8
  br label %if.done12

if.else11:                                        ; preds = %if.done9
  %155 = load %src.Element*, %src.Element** %17, align 8
  %156 = load float, float* %19, align 4
  %157 = fptosi float %156 to i64
  %158 = bitcast %runtime.Context* %32 to i8*
  %159 = call i64 @src.element_message(%src.Element* %155, i64 9, i64 %157, i8* null, i8* %158)
  br label %if.done12

if.done12:                                        ; preds = %if.else11, %if.then10
  %160 = phi i64 [ %154, %if.then10 ], [ %159, %if.else11 ]
  store i64 %160, i64* %20, align 8
  %161 = bitcast %src.Rect* %22 to i8*
  call void @llvm.memset.p0i8.i64(i8* %161, i8 0, i64 16, i1 false)
  store %src.Rect zeroinitializer, %src.Rect* %22, align 4
  %162 = load float, float* %8, align 4
  %163 = getelementptr inbounds %src.Rect, %src.Rect* %22, i32 0, i32 0
  store float %162, float* %163, align 4
  %164 = load float, float* %8, align 4
  %165 = load i64, i64* %20, align 8
  %166 = sitofp i64 %165 to float
  %167 = fadd float %164, %166
  %168 = getelementptr inbounds %src.Rect, %src.Rect* %22, i32 0, i32 1
  store float %167, float* %168, align 4
  %169 = load float, float* %7, align 4
  %170 = load float, float* %10, align 4
  %171 = load float, float* %19, align 4
  %172 = fsub float %170, %171
  %173 = fdiv float %172, 2.000000e+00
  %174 = fadd float %169, %173
  %175 = getelementptr inbounds %src.Rect, %src.Rect* %22, i32 0, i32 2
  store float %174, float* %175, align 4
  %176 = load float, float* %7, align 4
  %177 = load float, float* %10, align 4
  %178 = load float, float* %19, align 4
  %179 = fadd float %177, %178
  %180 = fdiv float %179, 2.000000e+00
  %181 = fadd float %176, %180
  %182 = getelementptr inbounds %src.Rect, %src.Rect* %22, i32 0, i32 3
  store float %181, float* %182, align 4
  %183 = load %src.Rect, %src.Rect* %22, align 4
  store %src.Rect %183, %src.Rect* %21, align 4
  %184 = load i8, i8* %5, align 1
  %185 = trunc i8 %184 to i1
  br i1 %185, label %if.done14, label %if.then13

if.then13:                                        ; preds = %if.done12
  %186 = load %src.Element*, %src.Element** %17, align 8
  %187 = load %src.Rect, %src.Rect* %21, align 4
  %188 = load %src.Rect, %src.Rect* %4, align 4
  %189 = bitcast %src.Rect* %21 to { <2 x float>, <2 x float> }*
  %190 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %189, align 8
  %191 = bitcast %src.Rect* %4 to { <2 x float>, <2 x float> }*
  %192 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %191, align 8
  %193 = bitcast %runtime.Context* %32 to i8*
  %194 = call { <2 x float>, <2 x float> } @src.rect_translate({ <2 x float>, <2 x float> } %190, { <2 x float>, <2 x float> } %192, i8* %193)
  %195 = bitcast %src.Rect* %23 to { <2 x float>, <2 x float> }*
  store { <2 x float>, <2 x float> } %194, { <2 x float>, <2 x float> }* %195, align 8
  %196 = load %src.Rect, %src.Rect* %23, align 4
  %197 = bitcast %src.Rect* %23 to { <2 x float>, <2 x float> }*
  %198 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %197, align 8
  %199 = bitcast %runtime.Context* %32 to i8*
  call void @src.element_move(%src.Element* %186, { <2 x float>, <2 x float> } %198, i8* %199)
  br label %if.done14

if.done14:                                        ; preds = %if.then13, %if.done12
  %200 = load i64, i64* %20, align 8
  %201 = sitofp i64 %200 to float
  %202 = load %src.Panel*, %src.Panel** %3, align 8
  %203 = getelementptr inbounds %src.Panel, %src.Panel* %202, i32 0, i32 3
  %204 = load float, float* %203, align 4
  %205 = load float, float* @src.SCALE, align 4
  %206 = fmul float %204, %205
  %207 = fadd float %201, %206
  %208 = load float, float* %8, align 4
  %209 = fadd float %208, %207
  store float %209, float* %8, align 4
  br label %if.done28

if.else15:                                        ; preds = %if.done2
  %210 = load %src.Element*, %src.Element** %17, align 8
  %211 = getelementptr inbounds %src.Element, %src.Element* %210, i32 0, i32 0
  %212 = load i32, i32* %211, align 4
  %213 = and i32 %212, 128
  %214 = icmp ne i32 %213, 0
  %215 = zext i1 %214 to i8
  %216 = trunc i8 %215 to i1
  br i1 %216, label %if.then17, label %cmp.or16

cmp.or16:                                         ; preds = %if.else15
  %217 = load i8, i8* %13, align 1
  %218 = trunc i8 %217 to i1
  br i1 %218, label %if.then17, label %if.else18

if.then17:                                        ; preds = %cmp.or16, %if.else15
  %219 = load float, float* %9, align 4
  br label %if.done22

if.else18:                                        ; preds = %cmp.or16
  %220 = load %src.Element*, %src.Element** %17, align 8
  %221 = load %src.Element*, %src.Element** %17, align 8
  %222 = getelementptr inbounds %src.Element, %src.Element* %221, i32 0, i32 0
  %223 = load i32, i32* %222, align 4
  %224 = and i32 %223, 64
  %225 = icmp ne i32 %224, 0
  %226 = zext i1 %225 to i8
  %227 = trunc i8 %226 to i1
  br i1 %227, label %if.then19, label %if.else20

if.then19:                                        ; preds = %if.else18
  %228 = load i64, i64* %11, align 8
  br label %if.done21

if.else20:                                        ; preds = %if.else18
  br label %if.done21

if.done21:                                        ; preds = %if.else20, %if.then19
  %229 = phi i64 [ %228, %if.then19 ], [ 0, %if.else20 ]
  %230 = bitcast %runtime.Context* %32 to i8*
  %231 = call i64 @src.element_message(%src.Element* %220, i64 9, i64 %229, i8* null, i8* %230)
  %232 = sitofp i64 %231 to float
  br label %if.done22

if.done22:                                        ; preds = %if.done21, %if.then17
  %233 = phi float [ %219, %if.then17 ], [ %232, %if.done21 ]
  store float %233, float* %24, align 4
  %234 = load %src.Element*, %src.Element** %17, align 8
  %235 = getelementptr inbounds %src.Element, %src.Element* %234, i32 0, i32 0
  %236 = load i32, i32* %235, align 4
  %237 = and i32 %236, 64
  %238 = icmp ne i32 %237, 0
  %239 = zext i1 %238 to i8
  %240 = trunc i8 %239 to i1
  br i1 %240, label %if.then23, label %if.else24

if.then23:                                        ; preds = %if.done22
  %241 = load i64, i64* %11, align 8
  br label %if.done25

if.else24:                                        ; preds = %if.done22
  %242 = load %src.Element*, %src.Element** %17, align 8
  %243 = load float, float* %24, align 4
  %244 = fptosi float %243 to i64
  %245 = bitcast %runtime.Context* %32 to i8*
  %246 = call i64 @src.element_message(%src.Element* %242, i64 10, i64 %244, i8* null, i8* %245)
  br label %if.done25

if.done25:                                        ; preds = %if.else24, %if.then23
  %247 = phi i64 [ %241, %if.then23 ], [ %246, %if.else24 ]
  store i64 %247, i64* %25, align 8
  %248 = bitcast %src.Rect* %27 to i8*
  call void @llvm.memset.p0i8.i64(i8* %248, i8 0, i64 16, i1 false)
  store %src.Rect zeroinitializer, %src.Rect* %27, align 4
  %249 = load float, float* %7, align 4
  %250 = load float, float* %9, align 4
  %251 = load float, float* %24, align 4
  %252 = fsub float %250, %251
  %253 = fdiv float %252, 2.000000e+00
  %254 = fadd float %249, %253
  %255 = getelementptr inbounds %src.Rect, %src.Rect* %27, i32 0, i32 0
  store float %254, float* %255, align 4
  %256 = load float, float* %7, align 4
  %257 = load float, float* %9, align 4
  %258 = load float, float* %24, align 4
  %259 = fadd float %257, %258
  %260 = fdiv float %259, 2.000000e+00
  %261 = fadd float %256, %260
  %262 = getelementptr inbounds %src.Rect, %src.Rect* %27, i32 0, i32 1
  store float %261, float* %262, align 4
  %263 = load float, float* %8, align 4
  %264 = getelementptr inbounds %src.Rect, %src.Rect* %27, i32 0, i32 2
  store float %263, float* %264, align 4
  %265 = load float, float* %8, align 4
  %266 = load i64, i64* %25, align 8
  %267 = sitofp i64 %266 to float
  %268 = fadd float %265, %267
  %269 = getelementptr inbounds %src.Rect, %src.Rect* %27, i32 0, i32 3
  store float %268, float* %269, align 4
  %270 = load %src.Rect, %src.Rect* %27, align 4
  store %src.Rect %270, %src.Rect* %26, align 4
  %271 = load i8, i8* %5, align 1
  %272 = trunc i8 %271 to i1
  br i1 %272, label %if.done27, label %if.then26

if.then26:                                        ; preds = %if.done25
  %273 = load %src.Element*, %src.Element** %17, align 8
  %274 = load %src.Rect, %src.Rect* %26, align 4
  %275 = load %src.Rect, %src.Rect* %4, align 4
  %276 = bitcast %src.Rect* %26 to { <2 x float>, <2 x float> }*
  %277 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %276, align 8
  %278 = bitcast %src.Rect* %4 to { <2 x float>, <2 x float> }*
  %279 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %278, align 8
  %280 = bitcast %runtime.Context* %32 to i8*
  %281 = call { <2 x float>, <2 x float> } @src.rect_translate({ <2 x float>, <2 x float> } %277, { <2 x float>, <2 x float> } %279, i8* %280)
  %282 = bitcast %src.Rect* %28 to { <2 x float>, <2 x float> }*
  store { <2 x float>, <2 x float> } %281, { <2 x float>, <2 x float> }* %282, align 8
  %283 = load %src.Rect, %src.Rect* %28, align 4
  %284 = bitcast %src.Rect* %28 to { <2 x float>, <2 x float> }*
  %285 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %284, align 8
  %286 = bitcast %runtime.Context* %32 to i8*
  call void @src.element_move(%src.Element* %273, { <2 x float>, <2 x float> } %285, i8* %286)
  br label %if.done27

if.done27:                                        ; preds = %if.then26, %if.done25
  %287 = load i64, i64* %25, align 8
  %288 = sitofp i64 %287 to float
  %289 = load %src.Panel*, %src.Panel** %3, align 8
  %290 = getelementptr inbounds %src.Panel, %src.Panel* %289, i32 0, i32 3
  %291 = load float, float* %290, align 4
  %292 = load float, float* @src.SCALE, align 4
  %293 = fmul float %291, %292
  %294 = fadd float %288, %293
  %295 = load float, float* %8, align 4
  %296 = fadd float %295, %294
  store float %296, float* %8, align 4
  br label %if.done28

if.done28:                                        ; preds = %if.done27, %if.done14
  br label %for.index.loop

for.index.done:                                   ; preds = %for.index.loop
  %297 = load float, float* %8, align 4
  %298 = load i64, i64* %12, align 8
  %299 = icmp ne i64 %298, 0
  %300 = zext i1 %299 to i8
  %301 = trunc i8 %300 to i1
  br i1 %301, label %if.then29, label %if.else30

if.then29:                                        ; preds = %for.index.done
  %302 = load %src.Panel*, %src.Panel** %3, align 8
  %303 = getelementptr inbounds %src.Panel, %src.Panel* %302, i32 0, i32 3
  %304 = load float, float* %303, align 4
  br label %if.done31

if.else30:                                        ; preds = %for.index.done
  br label %if.done31

if.done31:                                        ; preds = %if.else30, %if.then29
  %305 = phi float [ %304, %if.then29 ], [ 0.000000e+00, %if.else30 ]
  %306 = load float, float* @src.SCALE, align 4
  %307 = fmul float %305, %306
  %308 = fsub float %297, %307
  %309 = load float, float* %7, align 4
  %310 = fadd float %308, %309
  ret float %310
}

define internal void @src.panel_render_default(%src.Render_Target* %0, %src.Panel* %1, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %2 = alloca %src.Render_Target*, align 8
  %3 = alloca %src.Panel*, align 8
  %4 = alloca i8, align 1
  %5 = alloca [4 x i8], align 8
  %6 = alloca [4 x i8], align 1
  %7 = alloca i8, align 1
  %8 = alloca %src.Rect, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Render_Target* %0, %src.Render_Target** %2, align 8
  store %src.Panel* %1, %src.Panel** %3, align 8
  %9 = bitcast i8* %__.context_ptr to %runtime.Context*
  %10 = load %src.Panel*, %src.Panel** %3, align 8
  %11 = getelementptr inbounds %src.Panel, %src.Panel* %10, i32 0, i32 0
  %12 = getelementptr inbounds %src.Element, %src.Element* %11, i32 0, i32 0
  %13 = load i32, i32* %12, align 4
  %14 = and i32 %13, 16384
  %15 = icmp ne i32 %14, 0
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %4, align 1
  %17 = bitcast [4 x i8]* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* %17, i8 0, i64 4, i1 false)
  %18 = load %src.Panel*, %src.Panel** %3, align 8
  %19 = getelementptr inbounds %src.Panel, %src.Panel* %18, i32 0, i32 0
  %20 = bitcast [4 x i8]* %5 to i8*
  %21 = bitcast %runtime.Context* %9 to i8*
  %22 = call i64 @src.element_message(%src.Element* %19, i64 35, i64 0, i8* %20, i8* %21)
  %23 = load [4 x i8], [4 x i8]* %5, align 1
  store [4 x i8] zeroinitializer, [4 x i8]* %6, align 1
  store i8 1, i8* %7, align 1
  %24 = getelementptr [4 x i8], [4 x i8]* %5, i64 0, i64 0
  %25 = load i8, i8* %24, align 1
  %26 = getelementptr [4 x i8], [4 x i8]* %6, i64 0, i64 0
  %27 = load i8, i8* %26, align 1
  %28 = icmp eq i8 %25, %27
  %29 = load i8, i8* %7, align 1
  %30 = zext i1 %28 to i8
  %31 = and i8 %29, %30
  store i8 %31, i8* %7, align 1
  %32 = getelementptr [4 x i8], [4 x i8]* %5, i64 0, i64 1
  %33 = load i8, i8* %32, align 1
  %34 = getelementptr [4 x i8], [4 x i8]* %6, i64 0, i64 1
  %35 = load i8, i8* %34, align 1
  %36 = icmp eq i8 %33, %35
  %37 = load i8, i8* %7, align 1
  %38 = zext i1 %36 to i8
  %39 = and i8 %37, %38
  store i8 %39, i8* %7, align 1
  %40 = getelementptr [4 x i8], [4 x i8]* %5, i64 0, i64 2
  %41 = load i8, i8* %40, align 1
  %42 = getelementptr [4 x i8], [4 x i8]* %6, i64 0, i64 2
  %43 = load i8, i8* %42, align 1
  %44 = icmp eq i8 %41, %43
  %45 = load i8, i8* %7, align 1
  %46 = zext i1 %44 to i8
  %47 = and i8 %45, %46
  store i8 %47, i8* %7, align 1
  %48 = getelementptr [4 x i8], [4 x i8]* %5, i64 0, i64 3
  %49 = load i8, i8* %48, align 1
  %50 = getelementptr [4 x i8], [4 x i8]* %6, i64 0, i64 3
  %51 = load i8, i8* %50, align 1
  %52 = icmp eq i8 %49, %51
  %53 = load i8, i8* %7, align 1
  %54 = zext i1 %52 to i8
  %55 = and i8 %53, %54
  store i8 %55, i8* %7, align 1
  %56 = load i8, i8* %7, align 1
  %57 = trunc i8 %56 to i1
  br i1 %57, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  ret void

if.done:                                          ; preds = %entry
  %58 = load %src.Panel*, %src.Panel** %3, align 8
  %59 = getelementptr inbounds %src.Panel, %src.Panel* %58, i32 0, i32 0
  %60 = getelementptr inbounds %src.Element, %src.Element* %59, i32 0, i32 5
  %61 = load %src.Rect, %src.Rect* %60, align 4
  store %src.Rect %61, %src.Rect* %8, align 4
  %62 = load i8, i8* %4, align 1
  %63 = trunc i8 %62 to i1
  br i1 %63, label %if.then1, label %if.done2

if.then1:                                         ; preds = %if.done
  %64 = getelementptr inbounds %src.Rect, %src.Rect* %8, i32 0, i32 0
  %65 = load %src.Panel*, %src.Panel** %3, align 8
  %66 = getelementptr inbounds %src.Panel, %src.Panel* %65, i32 0, i32 6
  %67 = load float, float* %66, align 4
  %68 = load float, float* %64, align 4
  %69 = fsub float %68, %67
  store float %69, float* %64, align 4
  %70 = getelementptr inbounds %src.Rect, %src.Rect* %8, i32 0, i32 2
  %71 = load %src.Panel*, %src.Panel** %3, align 8
  %72 = getelementptr inbounds %src.Panel, %src.Panel* %71, i32 0, i32 7
  %73 = load float, float* %72, align 4
  %74 = load float, float* %70, align 4
  %75 = fsub float %74, %73
  store float %75, float* %70, align 4
  br label %if.done2

if.done2:                                         ; preds = %if.then1, %if.done
  %76 = load %src.Panel*, %src.Panel** %3, align 8
  %77 = getelementptr inbounds %src.Panel, %src.Panel* %76, i32 0, i32 8
  %78 = load i8, i8* %77, align 1
  %79 = trunc i8 %78 to i1
  br i1 %79, label %if.then3, label %if.else6

if.then3:                                         ; preds = %if.done2
  %80 = load %src.Render_Target*, %src.Render_Target** %2, align 8
  %81 = load %src.Rect, %src.Rect* %8, align 4
  %82 = load [4 x i8], [4 x i8]* %5, align 1
  %83 = load %src.Panel*, %src.Panel** %3, align 8
  %84 = getelementptr inbounds %src.Panel, %src.Panel* %83, i32 0, i32 9
  %85 = load i8, i8* %84, align 1
  %86 = trunc i8 %85 to i1
  br i1 %86, label %if.then4, label %if.else

if.then4:                                         ; preds = %if.then3
  %87 = load float, float* @src.ROUNDNESS, align 4
  br label %if.done5

if.else:                                          ; preds = %if.then3
  br label %if.done5

if.done5:                                         ; preds = %if.else, %if.then4
  %88 = phi float [ %87, %if.then4 ], [ 0.000000e+00, %if.else ]
  %89 = bitcast %src.Rect* %8 to { <2 x float>, <2 x float> }*
  %90 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %89, align 8
  %91 = bitcast [4 x i8]* %5 to i64*
  %92 = load i64, i64* %91, align 8
  %93 = bitcast %runtime.Context* %9 to i8*
  call void @src.render_drop_shadow(%src.Render_Target* %80, { <2 x float>, <2 x float> } %90, i64 %92, float %88, i8* %93)
  br label %if.done10

if.else6:                                         ; preds = %if.done2
  %94 = load %src.Render_Target*, %src.Render_Target** %2, align 8
  %95 = load %src.Rect, %src.Rect* %8, align 4
  %96 = load [4 x i8], [4 x i8]* %5, align 1
  %97 = load %src.Panel*, %src.Panel** %3, align 8
  %98 = getelementptr inbounds %src.Panel, %src.Panel* %97, i32 0, i32 9
  %99 = load i8, i8* %98, align 1
  %100 = trunc i8 %99 to i1
  br i1 %100, label %if.then7, label %if.else8

if.then7:                                         ; preds = %if.else6
  %101 = load float, float* @src.ROUNDNESS, align 4
  br label %if.done9

if.else8:                                         ; preds = %if.else6
  br label %if.done9

if.done9:                                         ; preds = %if.else8, %if.then7
  %102 = phi float [ %101, %if.then7 ], [ 0.000000e+00, %if.else8 ]
  %103 = bitcast %src.Rect* %8 to { <2 x float>, <2 x float> }*
  %104 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %103, align 8
  %105 = bitcast [4 x i8]* %5 to i64*
  %106 = load i64, i64* %105, align 8
  %107 = bitcast %runtime.Context* %9 to i8*
  call void @src.render_rect(%src.Render_Target* %94, { <2 x float>, <2 x float> } %104, i64 %106, float %102, i8* %107)
  br label %if.done10

if.done10:                                        ; preds = %if.done9, %if.done5
  ret void
}

define internal i64 @src.panel_message(%src.Element* %0, i64 %1, i64 %2, i8* %3, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %4 = alloca %src.Element*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i8*, align 8
  %8 = alloca %src.Panel*, align 8
  %9 = alloca i8, align 1
  %10 = alloca %src.Rect*, align 8
  %11 = alloca %src.Rect, align 4
  %12 = alloca { <2 x float>, <2 x float> }, align 8
  %13 = alloca %src.Rect, align 8
  %14 = alloca float, align 4
  %15 = alloca %src.Rect, align 8
  %16 = alloca %src.Rect, align 8
  %17 = alloca { <2 x float>, <2 x float> }, align 8
  %18 = alloca %src.Element*, align 8
  %19 = alloca i64, align 8
  %20 = alloca %src.Element*, align 8
  %21 = alloca [2 x float], align 4
  %22 = alloca float, align 4
  %23 = alloca float, align 4
  %24 = alloca i8, align 1
  %25 = alloca %src.Rect, align 8
  %26 = alloca float, align 4
  %27 = alloca %src.Rect, align 8
  %28 = alloca [4 x i8]*, align 8
  %29 = alloca { i64, i64 }, align 8
  %30 = alloca [4 x i8], align 1
  %31 = alloca i8, align 1
  %32 = alloca %src.Render_Target*, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Element* %0, %src.Element** %4, align 8
  store i64 %1, i64* %5, align 8
  store i64 %2, i64* %6, align 8
  store i8* %3, i8** %7, align 8
  %33 = bitcast i8* %__.context_ptr to %runtime.Context*
  %34 = load %src.Element*, %src.Element** %4, align 8
  %35 = bitcast %src.Element* %34 to %src.Panel*
  store %src.Panel* %35, %src.Panel** %8, align 8
  %36 = load %src.Element*, %src.Element** %4, align 8
  %37 = getelementptr inbounds %src.Element, %src.Element* %36, i32 0, i32 0
  %38 = load i32, i32* %37, align 4
  %39 = and i32 %38, 16384
  %40 = icmp ne i32 %39, 0
  %41 = zext i1 %40 to i8
  store i8 %41, i8* %9, align 1
  %42 = load i64, i64* %5, align 8
  switch i64 %42, label %switch.done [
    i64 8, label %switch.case.body
    i64 3, label %switch.case.body1
    i64 1, label %switch.case.body6
    i64 15, label %switch.case.body7
    i64 16, label %switch.case.body10
    i64 18, label %switch.case.body11
    i64 14, label %switch.case.body14
    i64 13, label %switch.case.body19
    i64 9, label %switch.case.body22
    i64 10, label %switch.case.body26
    i64 35, label %switch.case.body34
    i64 2, label %switch.case.body39
  ]

switch.case.body:                                 ; preds = %entry
  %43 = load %src.Panel*, %src.Panel** %8, align 8
  %44 = getelementptr inbounds %src.Panel, %src.Panel* %43, i32 0, i32 8
  %45 = load i8, i8* %44, align 1
  %46 = trunc i8 %45 to i1
  br i1 %46, label %if.then, label %if.done

if.then:                                          ; preds = %switch.case.body
  %47 = load i8*, i8** %7, align 8
  %48 = bitcast i8* %47 to %src.Rect*
  store %src.Rect* %48, %src.Rect** %10, align 8
  %49 = load %src.Rect*, %src.Rect** %10, align 8
  %50 = load %src.Rect, %src.Rect* %49, align 4
  store %src.Rect %50, %src.Rect* %11, align 4
  %51 = load %src.Rect*, %src.Rect** %10, align 8
  %52 = load %src.Element*, %src.Element** %4, align 8
  %53 = getelementptr inbounds %src.Element, %src.Element* %52, i32 0, i32 6
  %54 = load %src.Rect, %src.Rect* %53, align 4
  %55 = bitcast { <2 x float>, <2 x float> }* %12 to %src.Rect*
  store %src.Rect %54, %src.Rect* %55, align 4
  %56 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %12, align 8
  %57 = bitcast %runtime.Context* %33 to i8*
  %58 = call { <2 x float>, <2 x float> } @src.rect_margin({ <2 x float>, <2 x float> } %56, float -2.000000e+01, i8* %57)
  %59 = bitcast %src.Rect* %13 to { <2 x float>, <2 x float> }*
  store { <2 x float>, <2 x float> } %58, { <2 x float>, <2 x float> }* %59, align 8
  %60 = load %src.Rect, %src.Rect* %13, align 4
  store %src.Rect %60, %src.Rect* %51, align 4
  br label %if.done

if.done:                                          ; preds = %if.then, %switch.case.body
  br label %switch.done

switch.case.body1:                                ; preds = %entry
  %61 = load %src.Panel*, %src.Panel** %8, align 8
  %62 = getelementptr inbounds %src.Panel, %src.Panel* %61, i32 0, i32 11
  %63 = load %src.Scrollbar*, %src.Scrollbar** %62, align 8
  %64 = icmp ne %src.Scrollbar* %63, null
  %65 = zext i1 %64 to i8
  %66 = trunc i8 %65 to i1
  br i1 %66, label %if.then2, label %if.else

if.then2:                                         ; preds = %switch.case.body1
  %67 = load float, float* @src.SCALE, align 4
  %68 = fmul float 1.500000e+01, %67
  br label %if.done3

if.else:                                          ; preds = %switch.case.body1
  br label %if.done3

if.done3:                                         ; preds = %if.else, %if.then2
  %69 = phi float [ %68, %if.then2 ], [ 0.000000e+00, %if.else ]
  store float %69, float* %14, align 4
  %70 = load %src.Element*, %src.Element** %4, align 8
  %71 = getelementptr inbounds %src.Element, %src.Element* %70, i32 0, i32 5
  %72 = load %src.Rect, %src.Rect* %71, align 4
  store %src.Rect %72, %src.Rect* %15, align 4
  %73 = getelementptr inbounds %src.Rect, %src.Rect* %15, i32 0, i32 1
  %74 = load float, float* %14, align 4
  %75 = load float, float* %73, align 4
  %76 = fsub float %75, %74
  store float %76, float* %73, align 4
  %77 = load %src.Panel*, %src.Panel** %8, align 8
  %78 = getelementptr inbounds %src.Panel, %src.Panel* %77, i32 0, i32 11
  %79 = load %src.Scrollbar*, %src.Scrollbar** %78, align 8
  %80 = icmp ne %src.Scrollbar* %79, null
  %81 = zext i1 %80 to i8
  %82 = trunc i8 %81 to i1
  br i1 %82, label %if.then4, label %if.done5

if.then4:                                         ; preds = %if.done3
  %83 = load %src.Element*, %src.Element** %4, align 8
  %84 = getelementptr inbounds %src.Element, %src.Element* %83, i32 0, i32 5
  %85 = load %src.Rect, %src.Rect* %84, align 4
  store %src.Rect %85, %src.Rect* %16, align 4
  %86 = getelementptr inbounds %src.Rect, %src.Rect* %16, i32 0, i32 0
  %87 = getelementptr inbounds %src.Rect, %src.Rect* %16, i32 0, i32 1
  %88 = load float, float* %87, align 4
  %89 = load float, float* %14, align 4
  %90 = fsub float %88, %89
  store float %90, float* %86, align 4
  %91 = load %src.Panel*, %src.Panel** %8, align 8
  %92 = getelementptr inbounds %src.Panel, %src.Panel* %91, i32 0, i32 11
  %93 = load %src.Scrollbar*, %src.Scrollbar** %92, align 8
  %94 = getelementptr inbounds %src.Scrollbar, %src.Scrollbar* %93, i32 0, i32 1
  %95 = load %src.Panel*, %src.Panel** %8, align 8
  %96 = load %src.Rect, %src.Rect* %15, align 4
  %97 = bitcast %src.Rect* %15 to { <2 x float>, <2 x float> }*
  %98 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %97, align 8
  %99 = bitcast %runtime.Context* %33 to i8*
  %100 = call float @src.panel_layout(%src.Panel* %95, { <2 x float>, <2 x float> } %98, i1 true, i8* %99)
  store float %100, float* %94, align 4
  %101 = load %src.Panel*, %src.Panel** %8, align 8
  %102 = getelementptr inbounds %src.Panel, %src.Panel* %101, i32 0, i32 11
  %103 = load %src.Scrollbar*, %src.Scrollbar** %102, align 8
  %104 = getelementptr inbounds %src.Scrollbar, %src.Scrollbar* %103, i32 0, i32 2
  %105 = load %src.Element*, %src.Element** %4, align 8
  %106 = getelementptr inbounds %src.Element, %src.Element* %105, i32 0, i32 5
  %107 = load %src.Rect, %src.Rect* %106, align 4
  %108 = bitcast { <2 x float>, <2 x float> }* %17 to %src.Rect*
  store %src.Rect %107, %src.Rect* %108, align 4
  %109 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %17, align 8
  %110 = bitcast %runtime.Context* %33 to i8*
  %111 = call float @src.rect_height({ <2 x float>, <2 x float> } %109, i8* %110)
  store float %111, float* %104, align 4
  %112 = load %src.Panel*, %src.Panel** %8, align 8
  %113 = getelementptr inbounds %src.Panel, %src.Panel* %112, i32 0, i32 11
  %114 = load %src.Scrollbar*, %src.Scrollbar** %113, align 8
  %115 = load %src.Rect, %src.Rect* %16, align 4
  %116 = getelementptr inbounds %src.Scrollbar, %src.Scrollbar* %114, i32 0, i32 0
  %117 = bitcast %src.Rect* %16 to { <2 x float>, <2 x float> }*
  %118 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %117, align 8
  %119 = bitcast %runtime.Context* %33 to i8*
  call void @src.element_move(%src.Element* %116, { <2 x float>, <2 x float> } %118, i8* %119)
  br label %if.done5

if.done5:                                         ; preds = %if.then4, %if.done3
  %120 = load %src.Panel*, %src.Panel** %8, align 8
  %121 = load %src.Rect, %src.Rect* %15, align 4
  %122 = bitcast %src.Rect* %15 to { <2 x float>, <2 x float> }*
  %123 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %122, align 8
  %124 = bitcast %runtime.Context* %33 to i8*
  %125 = call float @src.panel_layout(%src.Panel* %120, { <2 x float>, <2 x float> } %123, i1 false, i8* %124)
  br label %switch.done

switch.case.body6:                                ; preds = %entry
  store %src.Element* null, %src.Element** %18, align 8
  %126 = load %src.Element*, %src.Element** %4, align 8
  %127 = getelementptr inbounds %src.Element, %src.Element* %126, i32 0, i32 3
  %128 = getelementptr inbounds { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %127, i32 0, i32 1
  store i64 -1, i64* %19, align 8
  br label %for.index.loop

for.index.loop:                                   ; preds = %for.index.body, %switch.case.body6
  %129 = load i64, i64* %19, align 8
  %130 = add i64 %129, 1
  store i64 %130, i64* %19, align 8
  %131 = load i64, i64* %128, align 8
  %132 = icmp slt i64 %130, %131
  br i1 %132, label %for.index.body, label %for.index.done

for.index.body:                                   ; preds = %for.index.loop
  %133 = load i64, i64* %19, align 8
  %134 = getelementptr inbounds { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %127, i32 0, i32 0
  %135 = load %src.Element**, %src.Element*** %134, align 8
  %136 = getelementptr %src.Element*, %src.Element** %135, i64 %133
  %137 = load %src.Element*, %src.Element** %136, align 8
  store %src.Element* %137, %src.Element** %20, align 8
  %138 = load %src.Element*, %src.Element** %20, align 8
  %139 = load i64, i64* %6, align 8
  %140 = load i8*, i8** %7, align 8
  %141 = bitcast %runtime.Context* %33 to i8*
  %142 = call i64 @src.element_message(%src.Element* %138, i64 1, i64 %139, i8* %140, i8* %141)
  br label %for.index.loop

for.index.done:                                   ; preds = %for.index.loop
  br label %switch.done

switch.case.body7:                                ; preds = %entry
  %143 = load i8*, i8** %7, align 8
  %144 = bitcast i8* %143 to [2 x float]*
  %145 = load [2 x float], [2 x float]* %144, align 4
  store [2 x float] %145, [2 x float]* %21, align 4
  %146 = load i8, i8* %9, align 1
  %147 = trunc i8 %146 to i1
  br i1 %147, label %cmp.and, label %if.done9

cmp.and:                                          ; preds = %switch.case.body7
  %148 = load %src.Element*, %src.Element** %4, align 8
  %149 = getelementptr inbounds %src.Element, %src.Element* %148, i32 0, i32 4
  %150 = load %src.Window*, %src.Window** %149, align 8
  %151 = getelementptr inbounds %src.Window, %src.Window* %150, i32 0, i32 17
  %152 = load i64, i64* %151, align 8
  %153 = icmp eq i64 %152, 2
  %154 = zext i1 %153 to i8
  %155 = trunc i8 %154 to i1
  br i1 %155, label %if.then8, label %if.done9

if.then8:                                         ; preds = %cmp.and
  %156 = load %src.Element*, %src.Element** %4, align 8
  %157 = getelementptr inbounds %src.Element, %src.Element* %156, i32 0, i32 4
  %158 = load %src.Window*, %src.Window** %157, align 8
  %159 = getelementptr inbounds %src.Window, %src.Window* %158, i32 0, i32 12
  %160 = load float, float* %159, align 4
  %161 = getelementptr [2 x float], [2 x float]* %21, i64 0, i64 0
  %162 = load float, float* %161, align 4
  %163 = fsub float %160, %162
  store float %163, float* %22, align 4
  %164 = load %src.Element*, %src.Element** %4, align 8
  %165 = getelementptr inbounds %src.Element, %src.Element* %164, i32 0, i32 4
  %166 = load %src.Window*, %src.Window** %165, align 8
  %167 = getelementptr inbounds %src.Window, %src.Window* %166, i32 0, i32 13
  %168 = load float, float* %167, align 4
  %169 = getelementptr [2 x float], [2 x float]* %21, i64 0, i64 1
  %170 = load float, float* %169, align 4
  %171 = fsub float %168, %170
  store float %171, float* %23, align 4
  %172 = load %src.Panel*, %src.Panel** %8, align 8
  %173 = getelementptr inbounds %src.Panel, %src.Panel* %172, i32 0, i32 6
  %174 = load %src.Panel*, %src.Panel** %8, align 8
  %175 = getelementptr inbounds %src.Panel, %src.Panel* %174, i32 0, i32 4
  %176 = load float, float* %175, align 4
  %177 = load float, float* %22, align 4
  %178 = fadd float %176, %177
  store float %178, float* %173, align 4
  %179 = load %src.Panel*, %src.Panel** %8, align 8
  %180 = getelementptr inbounds %src.Panel, %src.Panel* %179, i32 0, i32 7
  %181 = load %src.Panel*, %src.Panel** %8, align 8
  %182 = getelementptr inbounds %src.Panel, %src.Panel* %181, i32 0, i32 5
  %183 = load float, float* %182, align 4
  %184 = load float, float* %23, align 4
  %185 = fadd float %183, %184
  store float %185, float* %180, align 4
  %186 = load %src.Element*, %src.Element** %4, align 8
  %187 = getelementptr inbounds %src.Element, %src.Element* %186, i32 0, i32 4
  %188 = load %src.Window*, %src.Window** %187, align 8
  %189 = bitcast %runtime.Context* %33 to i8*
  call void @src.window_set_cursor(%src.Window* %188, i64 5, i8* %189)
  %190 = load %src.Element*, %src.Element** %4, align 8
  %191 = bitcast %runtime.Context* %33 to i8*
  call void @src.element_repaint(%src.Element* %190, i8* %191)
  br label %if.done9

if.done9:                                         ; preds = %if.then8, %cmp.and, %switch.case.body7
  br label %switch.done

switch.case.body10:                               ; preds = %entry
  %192 = load %src.Element*, %src.Element** %4, align 8
  %193 = getelementptr inbounds %src.Element, %src.Element* %192, i32 0, i32 4
  %194 = load %src.Window*, %src.Window** %193, align 8
  %195 = bitcast %runtime.Context* %33 to i8*
  call void @src.element_reset_focus(%src.Window* %194, i8* %195)
  br label %switch.done

switch.case.body11:                               ; preds = %entry
  %196 = load i8, i8* %9, align 1
  %197 = trunc i8 %196 to i1
  br i1 %197, label %if.then12, label %if.done13

if.then12:                                        ; preds = %switch.case.body11
  %198 = load %src.Panel*, %src.Panel** %8, align 8
  %199 = getelementptr inbounds %src.Panel, %src.Panel* %198, i32 0, i32 4
  %200 = load %src.Panel*, %src.Panel** %8, align 8
  %201 = getelementptr inbounds %src.Panel, %src.Panel* %200, i32 0, i32 6
  %202 = load float, float* %201, align 4
  store float %202, float* %199, align 4
  %203 = load %src.Panel*, %src.Panel** %8, align 8
  %204 = getelementptr inbounds %src.Panel, %src.Panel* %203, i32 0, i32 5
  %205 = load %src.Panel*, %src.Panel** %8, align 8
  %206 = getelementptr inbounds %src.Panel, %src.Panel* %205, i32 0, i32 7
  %207 = load float, float* %206, align 4
  store float %207, float* %204, align 4
  br label %if.done13

if.done13:                                        ; preds = %if.then12, %switch.case.body11
  br label %switch.done

switch.case.body14:                               ; preds = %entry
  store i8 0, i8* %24, align 1
  %208 = load i8, i8* %9, align 1
  %209 = trunc i8 %208 to i1
  br i1 %209, label %if.then15, label %if.done16

if.then15:                                        ; preds = %switch.case.body14
  %210 = load %src.Panel*, %src.Panel** %8, align 8
  %211 = getelementptr inbounds %src.Panel, %src.Panel* %210, i32 0, i32 7
  %212 = load i64, i64* %6, align 8
  %213 = sitofp i64 %212 to float
  %214 = fmul float %213, 2.000000e+01
  %215 = load float, float* %211, align 4
  %216 = fadd float %215, %214
  store float %216, float* %211, align 4
  %217 = load %src.Element*, %src.Element** %4, align 8
  %218 = bitcast %runtime.Context* %33 to i8*
  call void @src.element_repaint(%src.Element* %217, i8* %218)
  store i8 1, i8* %24, align 1
  br label %if.done16

if.done16:                                        ; preds = %if.then15, %switch.case.body14
  %219 = load %src.Panel*, %src.Panel** %8, align 8
  %220 = getelementptr inbounds %src.Panel, %src.Panel* %219, i32 0, i32 11
  %221 = load %src.Scrollbar*, %src.Scrollbar** %220, align 8
  %222 = icmp ne %src.Scrollbar* %221, null
  %223 = zext i1 %222 to i8
  %224 = trunc i8 %223 to i1
  br i1 %224, label %if.then17, label %if.done18

if.then17:                                        ; preds = %if.done16
  %225 = load %src.Panel*, %src.Panel** %8, align 8
  %226 = getelementptr inbounds %src.Panel, %src.Panel* %225, i32 0, i32 11
  %227 = load %src.Scrollbar*, %src.Scrollbar** %226, align 8
  %228 = load i64, i64* %5, align 8
  %229 = load i64, i64* %6, align 8
  %230 = load i8*, i8** %7, align 8
  %231 = getelementptr inbounds %src.Scrollbar, %src.Scrollbar* %227, i32 0, i32 0
  %232 = bitcast %runtime.Context* %33 to i8*
  %233 = call i64 @src.element_message(%src.Element* %231, i64 %228, i64 %229, i8* %230, i8* %232)
  store i8 1, i8* %24, align 1
  br label %if.done18

if.done18:                                        ; preds = %if.then17, %if.done16
  %234 = load i8, i8* %24, align 1
  %235 = icmp ne i8 %234, 0
  %236 = zext i1 %235 to i64
  ret i64 %236

switch.case.body19:                               ; preds = %entry
  %237 = load i8, i8* %9, align 1
  %238 = trunc i8 %237 to i1
  br i1 %238, label %if.then20, label %if.done21

if.then20:                                        ; preds = %switch.case.body19
  %239 = load %src.Panel*, %src.Panel** %8, align 8
  %240 = getelementptr inbounds %src.Panel, %src.Panel* %239, i32 0, i32 6
  %241 = load i64, i64* %6, align 8
  %242 = sitofp i64 %241 to float
  %243 = fmul float %242, 2.000000e+01
  %244 = load float, float* %240, align 4
  %245 = fadd float %244, %243
  store float %245, float* %240, align 4
  %246 = load %src.Element*, %src.Element** %4, align 8
  %247 = bitcast %runtime.Context* %33 to i8*
  call void @src.element_repaint(%src.Element* %246, i8* %247)
  br label %if.done21

if.done21:                                        ; preds = %if.then20, %switch.case.body19
  br label %switch.done

switch.case.body22:                               ; preds = %entry
  %248 = load %src.Element*, %src.Element** %4, align 8
  %249 = getelementptr inbounds %src.Element, %src.Element* %248, i32 0, i32 0
  %250 = load i32, i32* %249, align 4
  %251 = and i32 %250, 8192
  %252 = icmp ne i32 %251, 0
  %253 = zext i1 %252 to i8
  %254 = trunc i8 %253 to i1
  br i1 %254, label %if.then23, label %if.else24

if.then23:                                        ; preds = %switch.case.body22
  %255 = load %src.Panel*, %src.Panel** %8, align 8
  %256 = bitcast %src.Rect* %25 to i8*
  call void @llvm.memset.p0i8.i64(i8* %256, i8 0, i64 16, i1 false)
  store %src.Rect zeroinitializer, %src.Rect* %25, align 4
  %257 = load i64, i64* %6, align 8
  %258 = sitofp i64 %257 to float
  %259 = getelementptr inbounds %src.Rect, %src.Rect* %25, i32 0, i32 3
  store float %258, float* %259, align 4
  %260 = load %src.Rect, %src.Rect* %25, align 4
  %261 = bitcast %src.Rect* %25 to { <2 x float>, <2 x float> }*
  %262 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %261, align 8
  %263 = bitcast %runtime.Context* %33 to i8*
  %264 = call float @src.panel_layout(%src.Panel* %255, { <2 x float>, <2 x float> } %262, i1 true, i8* %263)
  %265 = fptosi float %264 to i64
  ret i64 %265

if.else24:                                        ; preds = %switch.case.body22
  %266 = load %src.Panel*, %src.Panel** %8, align 8
  %267 = load i64, i64* %6, align 8
  %268 = bitcast %runtime.Context* %33 to i8*
  %269 = call i64 @src.panel_measure(%src.Panel* %266, i64 %267, i8* %268)
  ret i64 %269

if.done25:                                        ; No predecessors!
  br label %switch.done

switch.case.body26:                               ; preds = %entry
  %270 = load %src.Element*, %src.Element** %4, align 8
  %271 = getelementptr inbounds %src.Element, %src.Element* %270, i32 0, i32 0
  %272 = load i32, i32* %271, align 4
  %273 = and i32 %272, 8192
  %274 = icmp ne i32 %273, 0
  %275 = zext i1 %274 to i8
  %276 = trunc i8 %275 to i1
  br i1 %276, label %if.then27, label %if.else28

if.then27:                                        ; preds = %switch.case.body26
  %277 = load %src.Panel*, %src.Panel** %8, align 8
  %278 = load i64, i64* %6, align 8
  %279 = bitcast %runtime.Context* %33 to i8*
  %280 = call i64 @src.panel_measure(%src.Panel* %277, i64 %278, i8* %279)
  ret i64 %280

if.else28:                                        ; preds = %switch.case.body26
  %281 = load i64, i64* %6, align 8
  %282 = icmp ne i64 %281, 0
  %283 = zext i1 %282 to i8
  %284 = trunc i8 %283 to i1
  br i1 %284, label %cmp.and29, label %if.else31

cmp.and29:                                        ; preds = %if.else28
  %285 = load %src.Panel*, %src.Panel** %8, align 8
  %286 = getelementptr inbounds %src.Panel, %src.Panel* %285, i32 0, i32 11
  %287 = load %src.Scrollbar*, %src.Scrollbar** %286, align 8
  %288 = icmp ne %src.Scrollbar* %287, null
  %289 = zext i1 %288 to i8
  %290 = trunc i8 %289 to i1
  br i1 %290, label %if.then30, label %if.else31

if.then30:                                        ; preds = %cmp.and29
  %291 = load i64, i64* %6, align 8
  %292 = sitofp i64 %291 to float
  %293 = load float, float* @src.SCALE, align 4
  %294 = fmul float 1.500000e+01, %293
  %295 = fsub float %292, %294
  br label %if.done32

if.else31:                                        ; preds = %cmp.and29, %if.else28
  %296 = load i64, i64* %6, align 8
  %297 = sitofp i64 %296 to float
  br label %if.done32

if.done32:                                        ; preds = %if.else31, %if.then30
  %298 = phi float [ %295, %if.then30 ], [ %297, %if.else31 ]
  store float %298, float* %26, align 4
  %299 = load %src.Panel*, %src.Panel** %8, align 8
  %300 = bitcast %src.Rect* %27 to i8*
  call void @llvm.memset.p0i8.i64(i8* %300, i8 0, i64 16, i1 false)
  store %src.Rect zeroinitializer, %src.Rect* %27, align 4
  %301 = load float, float* %26, align 4
  %302 = getelementptr inbounds %src.Rect, %src.Rect* %27, i32 0, i32 1
  store float %301, float* %302, align 4
  %303 = load %src.Rect, %src.Rect* %27, align 4
  %304 = bitcast %src.Rect* %27 to { <2 x float>, <2 x float> }*
  %305 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %304, align 8
  %306 = bitcast %runtime.Context* %33 to i8*
  %307 = call float @src.panel_layout(%src.Panel* %299, { <2 x float>, <2 x float> } %305, i1 true, i8* %306)
  %308 = fptosi float %307 to i64
  ret i64 %308

if.done33:                                        ; No predecessors!
  br label %switch.done

switch.case.body34:                               ; preds = %entry
  %309 = load i8*, i8** %7, align 8
  %310 = bitcast i8* %309 to [4 x i8]*
  store [4 x i8]* %310, [4 x i8]** %28, align 8
  %311 = load [4 x i8]*, [4 x i8]** %28, align 8
  %312 = load %src.Panel*, %src.Panel** %8, align 8
  %313 = getelementptr inbounds %src.Panel, %src.Panel* %312, i32 0, i32 2
  %314 = load [4 x i8], [4 x i8]* %313, align 1
  store [4 x i8] %314, [4 x i8]* %311, align 1
  %315 = load %src.Panel*, %src.Panel** %8, align 8
  %316 = getelementptr inbounds %src.Panel, %src.Panel* %315, i32 0, i32 0
  %317 = getelementptr inbounds %src.Element, %src.Element* %316, i32 0, i32 0
  %318 = load i32, i32* %317, align 4
  %319 = and i32 %318, 65536
  %320 = icmp ne i32 %319, 0
  %321 = zext i1 %320 to i8
  %322 = trunc i8 %321 to i1
  br i1 %322, label %if.then35, label %if.done36

if.then35:                                        ; preds = %switch.case.body34
  %323 = load [4 x i8]*, [4 x i8]** %28, align 8
  %324 = load %src.Panel*, %src.Panel** %8, align 8
  %325 = getelementptr inbounds %src.Panel, %src.Panel* %324, i32 0, i32 12
  %326 = load i64, i64* %325, align 8
  %327 = getelementptr [3 x [4 x i8]], [3 x [4 x i8]]* getelementptr inbounds (%src.Theme, %src.Theme* @src.theme, i64 0, i32 0), i64 0, i64 %326
  %328 = bitcast { i64, i64 }* %29 to %..string*
  store %..string { i8* getelementptr inbounds ([58 x i8], [58 x i8]* @"csbs$1a2", i64 0, i64 0), i64 57 }, %..string* %328, align 8
  %329 = load { i64, i64 }, { i64, i64 }* %29, align 8
  call void @runtime.bounds_check_error({ i64, i64 } %329, i32 1414, i32 37, i64 %326, i64 3)
  %330 = load [4 x i8], [4 x i8]* %327, align 1
  store [4 x i8] %330, [4 x i8]* %323, align 1
  br label %if.done36

if.done36:                                        ; preds = %if.then35, %switch.case.body34
  %331 = load [4 x i8]*, [4 x i8]** %28, align 8
  %332 = load [4 x i8], [4 x i8]* %331, align 1
  store [4 x i8] zeroinitializer, [4 x i8]* %30, align 1
  store i8 1, i8* %31, align 1
  %333 = getelementptr [4 x i8], [4 x i8]* %331, i64 0, i64 0
  %334 = load i8, i8* %333, align 1
  %335 = getelementptr [4 x i8], [4 x i8]* %30, i64 0, i64 0
  %336 = load i8, i8* %335, align 1
  %337 = icmp eq i8 %334, %336
  %338 = load i8, i8* %31, align 1
  %339 = zext i1 %337 to i8
  %340 = and i8 %338, %339
  store i8 %340, i8* %31, align 1
  %341 = getelementptr [4 x i8], [4 x i8]* %331, i64 0, i64 1
  %342 = load i8, i8* %341, align 1
  %343 = getelementptr [4 x i8], [4 x i8]* %30, i64 0, i64 1
  %344 = load i8, i8* %343, align 1
  %345 = icmp eq i8 %342, %344
  %346 = load i8, i8* %31, align 1
  %347 = zext i1 %345 to i8
  %348 = and i8 %346, %347
  store i8 %348, i8* %31, align 1
  %349 = getelementptr [4 x i8], [4 x i8]* %331, i64 0, i64 2
  %350 = load i8, i8* %349, align 1
  %351 = getelementptr [4 x i8], [4 x i8]* %30, i64 0, i64 2
  %352 = load i8, i8* %351, align 1
  %353 = icmp eq i8 %350, %352
  %354 = load i8, i8* %31, align 1
  %355 = zext i1 %353 to i8
  %356 = and i8 %354, %355
  store i8 %356, i8* %31, align 1
  %357 = getelementptr [4 x i8], [4 x i8]* %331, i64 0, i64 3
  %358 = load i8, i8* %357, align 1
  %359 = getelementptr [4 x i8], [4 x i8]* %30, i64 0, i64 3
  %360 = load i8, i8* %359, align 1
  %361 = icmp eq i8 %358, %360
  %362 = load i8, i8* %31, align 1
  %363 = zext i1 %361 to i8
  %364 = and i8 %362, %363
  store i8 %364, i8* %31, align 1
  %365 = load i8, i8* %31, align 1
  %366 = trunc i8 %365 to i1
  br i1 %366, label %if.then37, label %if.done38

if.then37:                                        ; preds = %if.done36
  ret i64 0

if.done38:                                        ; preds = %if.done36
  br label %switch.done

switch.case.body39:                               ; preds = %entry
  %367 = load %src.Element*, %src.Element** %4, align 8
  %368 = getelementptr inbounds %src.Element, %src.Element* %367, i32 0, i32 4
  %369 = load %src.Window*, %src.Window** %368, align 8
  %370 = getelementptr inbounds %src.Window, %src.Window* %369, i32 0, i32 24
  %371 = load %src.Render_Target*, %src.Render_Target** %370, align 8
  store %src.Render_Target* %371, %src.Render_Target** %32, align 8
  %372 = load %src.Render_Target*, %src.Render_Target** %32, align 8
  %373 = load %src.Panel*, %src.Panel** %8, align 8
  %374 = bitcast %runtime.Context* %33 to i8*
  call void @src.panel_render_default(%src.Render_Target* %372, %src.Panel* %373, i8* %374)
  br label %switch.done

switch.done:                                      ; preds = %switch.case.body39, %if.done38, %if.done33, %if.done25, %if.done21, %if.done13, %switch.case.body10, %if.done9, %for.index.done, %if.done5, %if.done, %entry
  ret i64 0
}

define internal %src.Panel* @src.panel_init(%src.Element* %0, i32 %1, float %2, float %3, i64 %4, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %5 = alloca %src.Element*, align 8
  %6 = alloca i32, align 4
  %7 = alloca float, align 4
  %8 = alloca float, align 4
  %9 = alloca [4 x i8], align 8
  %10 = alloca %src.Panel*, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Element* %0, %src.Element** %5, align 8
  store i32 %1, i32* %6, align 4
  store float %2, float* %7, align 4
  store float %3, float* %8, align 4
  %11 = bitcast [4 x i8]* %9 to i64*
  store i64 %4, i64* %11, align 8
  %12 = load [4 x i8], [4 x i8]* %9, align 1
  store %src.Panel* null, %src.Panel** %10, align 8
  %13 = bitcast i8* %__.context_ptr to %runtime.Context*
  %14 = load %src.Element*, %src.Element** %5, align 8
  %15 = load i32, i32* %6, align 4
  %16 = getelementptr inbounds %runtime.Context, %runtime.Context* %13, i32 0, i32 0
  %17 = load %runtime.Allocator, %runtime.Allocator* %16, align 8
  %18 = bitcast %runtime.Allocator* %16 to { i64, i64 }*
  %19 = load { i64, i64 }, { i64, i64 }* %18, align 8
  %20 = bitcast %runtime.Context* %13 to i8*
  %21 = call %src.Panel* @src.element_init-48547(%src.Element* %14, i32 %15, i8* bitcast (i64 (%src.Element*, i64, i64, i8*, i8*)* @src.panel_message to i8*), i64 -1, { i64, i64 } %19, i8* %20)
  store %src.Panel* %21, %src.Panel** %10, align 8
  %22 = load %src.Panel*, %src.Panel** %10, align 8
  %23 = getelementptr inbounds %src.Panel, %src.Panel* %22, i32 0, i32 1
  %24 = load float, float* %7, align 4
  store float %24, float* %23, align 4
  %25 = load %src.Panel*, %src.Panel** %10, align 8
  %26 = getelementptr inbounds %src.Panel, %src.Panel* %25, i32 0, i32 2
  %27 = load [4 x i8], [4 x i8]* %9, align 1
  store [4 x i8] %27, [4 x i8]* %26, align 1
  %28 = load %src.Panel*, %src.Panel** %10, align 8
  %29 = getelementptr inbounds %src.Panel, %src.Panel* %28, i32 0, i32 3
  %30 = load float, float* %8, align 4
  store float %30, float* %29, align 4
  %31 = load i32, i32* %6, align 4
  %32 = and i32 %31, 32768
  %33 = icmp ne i32 %32, 0
  %34 = zext i1 %33 to i8
  %35 = trunc i8 %34 to i1
  br i1 %35, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  %36 = load %src.Panel*, %src.Panel** %10, align 8
  %37 = getelementptr inbounds %src.Panel, %src.Panel* %36, i32 0, i32 11
  %38 = load %src.Panel*, %src.Panel** %10, align 8
  %39 = getelementptr inbounds %src.Panel, %src.Panel* %38, i32 0, i32 0
  %40 = bitcast %runtime.Context* %13 to i8*
  %41 = call %src.Scrollbar* @src.scrollbar_init(%src.Element* %39, i32 32, i8* %40)
  store %src.Scrollbar* %41, %src.Scrollbar** %37, align 8
  br label %if.done

if.done:                                          ; preds = %if.then, %entry
  %42 = load %src.Panel*, %src.Panel** %10, align 8
  store %src.Panel* %42, %src.Panel** %10, align 8
  ret %src.Panel* %42
}

define internal i64 @src.panel_floaty_message(%src.Element* %0, i64 %1, i64 %2, i8* %3, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %4 = alloca %src.Element*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i8*, align 8
  %8 = alloca %src.Panel_Floaty*, align 8
  %9 = alloca %src.Panel*, align 8
  %10 = alloca %src.Rect, align 8
  %11 = alloca %src.Rect, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Element* %0, %src.Element** %4, align 8
  store i64 %1, i64* %5, align 8
  store i64 %2, i64* %6, align 8
  store i8* %3, i8** %7, align 8
  %12 = bitcast i8* %__.context_ptr to %runtime.Context*
  %13 = load %src.Element*, %src.Element** %4, align 8
  %14 = bitcast %src.Element* %13 to %src.Panel_Floaty*
  store %src.Panel_Floaty* %14, %src.Panel_Floaty** %8, align 8
  %15 = load %src.Panel_Floaty*, %src.Panel_Floaty** %8, align 8
  %16 = getelementptr inbounds %src.Panel_Floaty, %src.Panel_Floaty* %15, i32 0, i32 1
  %17 = load %src.Panel*, %src.Panel** %16, align 8
  store %src.Panel* %17, %src.Panel** %9, align 8
  %18 = load i64, i64* %5, align 8
  switch i64 %18, label %switch.done [
    i64 3, label %switch.case.body
  ]

switch.case.body:                                 ; preds = %entry
  %19 = load %src.Panel_Floaty*, %src.Panel_Floaty** %8, align 8
  %20 = getelementptr inbounds %src.Panel_Floaty, %src.Panel_Floaty* %19, i32 0, i32 2
  %21 = load float, float* %20, align 4
  %22 = load %src.Panel_Floaty*, %src.Panel_Floaty** %8, align 8
  %23 = getelementptr inbounds %src.Panel_Floaty, %src.Panel_Floaty* %22, i32 0, i32 3
  %24 = load float, float* %23, align 4
  %25 = load %src.Panel_Floaty*, %src.Panel_Floaty** %8, align 8
  %26 = getelementptr inbounds %src.Panel_Floaty, %src.Panel_Floaty* %25, i32 0, i32 4
  %27 = load float, float* %26, align 4
  %28 = load %src.Panel_Floaty*, %src.Panel_Floaty** %8, align 8
  %29 = getelementptr inbounds %src.Panel_Floaty, %src.Panel_Floaty* %28, i32 0, i32 5
  %30 = load float, float* %29, align 4
  %31 = bitcast %runtime.Context* %12 to i8*
  %32 = call { <2 x float>, <2 x float> } @src.rect_wh(float %21, float %24, float %27, float %30, i8* %31)
  %33 = bitcast %src.Rect* %11 to { <2 x float>, <2 x float> }*
  store { <2 x float>, <2 x float> } %32, { <2 x float>, <2 x float> }* %33, align 8
  %34 = load %src.Rect, %src.Rect* %11, align 4
  store %src.Rect %34, %src.Rect* %10, align 4
  %35 = load %src.Panel*, %src.Panel** %9, align 8
  %36 = load %src.Rect, %src.Rect* %10, align 4
  %37 = getelementptr inbounds %src.Panel, %src.Panel* %35, i32 0, i32 0
  %38 = bitcast %src.Rect* %10 to { <2 x float>, <2 x float> }*
  %39 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %38, align 8
  %40 = bitcast %runtime.Context* %12 to i8*
  call void @src.element_move(%src.Element* %37, { <2 x float>, <2 x float> } %39, i8* %40)
  br label %switch.done

switch.done:                                      ; preds = %switch.case.body, %entry
  ret i64 0
}

define internal %src.Panel_Floaty* @src.panel_floaty_init(%src.Element* %0, i32 %1, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %2 = alloca %src.Element*, align 8
  %3 = alloca i32, align 4
  %4 = alloca %src.Panel_Floaty*, align 8
  %5 = alloca %src.Panel*, align 8
  %6 = alloca i64, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Element* %0, %src.Element** %2, align 8
  store i32 %1, i32* %3, align 4
  store %src.Panel_Floaty* null, %src.Panel_Floaty** %4, align 8
  %7 = bitcast i8* %__.context_ptr to %runtime.Context*
  %8 = load %src.Element*, %src.Element** %2, align 8
  %9 = load i32, i32* %3, align 4
  %10 = getelementptr inbounds %runtime.Context, %runtime.Context* %7, i32 0, i32 0
  %11 = load %runtime.Allocator, %runtime.Allocator* %10, align 8
  %12 = bitcast %runtime.Allocator* %10 to { i64, i64 }*
  %13 = load { i64, i64 }, { i64, i64 }* %12, align 8
  %14 = bitcast %runtime.Context* %7 to i8*
  %15 = call %src.Panel_Floaty* @src.element_init-48565(%src.Element* %8, i32 %9, i8* bitcast (i64 (%src.Element*, i64, i64, i8*, i8*)* @src.panel_floaty_message to i8*), i64 -1, { i64, i64 } %13, i8* %14)
  store %src.Panel_Floaty* %15, %src.Panel_Floaty** %4, align 8
  %16 = load %src.Panel_Floaty*, %src.Panel_Floaty** %4, align 8
  %17 = getelementptr inbounds %src.Panel_Floaty, %src.Panel_Floaty* %16, i32 0, i32 0
  %18 = getelementptr inbounds %src.Element, %src.Element* %17, i32 0, i32 9
  store i64 255, i64* %18, align 8
  %19 = load %src.Panel_Floaty*, %src.Panel_Floaty** %4, align 8
  %20 = getelementptr inbounds %src.Panel_Floaty, %src.Panel_Floaty* %19, i32 0, i32 0
  %21 = bitcast i64* %6 to [4 x i8]*
  store [4 x i8] zeroinitializer, [4 x i8]* %21, align 1
  %22 = load i64, i64* %6, align 8
  %23 = bitcast %runtime.Context* %7 to i8*
  %24 = call %src.Panel* @src.panel_init(%src.Element* %20, i32 65536, float 0.000000e+00, float 0.000000e+00, i64 %22, i8* %23)
  store %src.Panel* %24, %src.Panel** %5, align 8
  %25 = load %src.Panel_Floaty*, %src.Panel_Floaty** %4, align 8
  %26 = getelementptr inbounds %src.Panel_Floaty, %src.Panel_Floaty* %25, i32 0, i32 1
  %27 = load %src.Panel*, %src.Panel** %5, align 8
  store %src.Panel* %27, %src.Panel** %26, align 8
  %28 = load %src.Panel*, %src.Panel** %5, align 8
  %29 = getelementptr inbounds %src.Panel, %src.Panel* %28, i32 0, i32 1
  %30 = load float, float* @src.SCALE, align 4
  %31 = fmul float 4.000000e+00, %30
  %32 = call float @math.round_f32(float %31)
  store float %32, float* %29, align 4
  %33 = load %src.Panel*, %src.Panel** %5, align 8
  %34 = getelementptr inbounds %src.Panel, %src.Panel* %33, i32 0, i32 9
  store i8 1, i8* %34, align 1
  %35 = load %src.Panel_Floaty*, %src.Panel_Floaty** %4, align 8
  store %src.Panel_Floaty* %35, %src.Panel_Floaty** %4, align 8
  ret %src.Panel_Floaty* %35
}

define internal i64 @src.scrollbar_message(%src.Element* %0, i64 %1, i64 %2, i8* %3, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %4 = alloca %src.Element*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i8*, align 8
  %8 = alloca %src.Scrollbar*, align 8
  %9 = alloca %src.Rect, align 8
  %10 = alloca %src.Rect, align 8
  %11 = alloca i64, align 8
  %12 = alloca { i64, i64 }, align 8
  %13 = alloca float, align 4
  %14 = alloca %src.Element*, align 8
  %15 = alloca { i64, i64 }, align 8
  %16 = alloca %src.Element*, align 8
  %17 = alloca { i64, i64 }, align 8
  %18 = alloca %src.Element*, align 8
  %19 = alloca { i64, i64 }, align 8
  %20 = alloca float, align 4
  %21 = alloca { <2 x float>, <2 x float> }, align 8
  %22 = alloca float, align 4
  %23 = alloca float, align 4
  %24 = alloca float, align 4
  %25 = alloca %src.Rect, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Element* %0, %src.Element** %4, align 8
  store i64 %1, i64* %5, align 8
  store i64 %2, i64* %6, align 8
  store i8* %3, i8** %7, align 8
  %26 = bitcast i8* %__.context_ptr to %runtime.Context*
  %27 = load %src.Element*, %src.Element** %4, align 8
  %28 = bitcast %src.Element* %27 to %src.Scrollbar*
  store %src.Scrollbar* %28, %src.Scrollbar** %8, align 8
  %29 = load i64, i64* %5, align 8
  switch i64 %29, label %switch.done [
    i64 2, label %switch.case.body
    i64 14, label %switch.case.body1
    i64 3, label %switch.case.body6
  ]

switch.case.body:                                 ; preds = %entry
  %30 = load %src.Element*, %src.Element** %4, align 8
  %31 = getelementptr inbounds %src.Element, %src.Element* %30, i32 0, i32 5
  %32 = load %src.Rect, %src.Rect* %31, align 4
  store %src.Rect %32, %src.Rect* %9, align 4
  %33 = load %src.Rect, %src.Rect* %9, align 4
  %34 = load float, float* @src.SCALE, align 4
  %35 = fmul float 2.000000e+00, %34
  %36 = bitcast %src.Rect* %9 to { <2 x float>, <2 x float> }*
  %37 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %36, align 8
  %38 = bitcast %runtime.Context* %26 to i8*
  %39 = call { <2 x float>, <2 x float> } @src.rect_margin({ <2 x float>, <2 x float> } %37, float %35, i8* %38)
  %40 = bitcast %src.Rect* %10 to { <2 x float>, <2 x float> }*
  store { <2 x float>, <2 x float> } %39, { <2 x float>, <2 x float> }* %40, align 8
  %41 = load %src.Rect, %src.Rect* %10, align 4
  store %src.Rect %41, %src.Rect* %9, align 4
  %42 = load %src.Element*, %src.Element** %4, align 8
  %43 = getelementptr inbounds %src.Element, %src.Element* %42, i32 0, i32 4
  %44 = load %src.Window*, %src.Window** %43, align 8
  %45 = getelementptr inbounds %src.Window, %src.Window* %44, i32 0, i32 24
  %46 = load %src.Render_Target*, %src.Render_Target** %45, align 8
  %47 = load %src.Rect, %src.Rect* %9, align 4
  %48 = load [4 x i8], [4 x i8]* getelementptr inbounds (%src.Theme, %src.Theme* @src.theme, i64 0, i32 0, i64 0), align 1
  %49 = load float, float* @src.ROUNDNESS, align 4
  %50 = bitcast %src.Rect* %9 to { <2 x float>, <2 x float> }*
  %51 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %50, align 8
  %52 = bitcast i64* %11 to [4 x i8]*
  store [4 x i8] %48, [4 x i8]* %52, align 1
  %53 = load i64, i64* %11, align 8
  %54 = bitcast %runtime.Context* %26 to i8*
  call void @src.render_rect(%src.Render_Target* %46, { <2 x float>, <2 x float> } %51, i64 %53, float %49, i8* %54)
  br label %switch.done

switch.case.body1:                                ; preds = %entry
  %55 = load %src.Element*, %src.Element** %4, align 8
  %56 = getelementptr inbounds %src.Element, %src.Element* %55, i32 0, i32 3
  %57 = load { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %56, align 8
  %58 = getelementptr inbounds { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %56, i32 0, i32 0
  %59 = load %src.Element**, %src.Element*** %58, align 8
  %60 = getelementptr inbounds { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %56, i32 0, i32 1
  %61 = load i64, i64* %60, align 8
  %62 = bitcast { i64, i64 }* %12 to %..string*
  store %..string { i8* getelementptr inbounds ([58 x i8], [58 x i8]* @"csbs$1a2", i64 0, i64 0), i64 57 }, %..string* %62, align 8
  %63 = load { i64, i64 }, { i64, i64 }* %12, align 8
  call void @runtime.bounds_check_error({ i64, i64 } %63, i32 1516, i32 37, i64 0, i64 %61)
  %64 = getelementptr %src.Element*, %src.Element** %59, i64 0
  %65 = load %src.Element*, %src.Element** %64, align 8
  %66 = getelementptr inbounds %src.Element, %src.Element* %65, i32 0, i32 0
  %67 = load i32, i32* %66, align 4
  %68 = and i32 %67, 2
  %69 = icmp eq i32 %68, 0
  %70 = zext i1 %69 to i8
  %71 = trunc i8 %70 to i1
  br i1 %71, label %if.then, label %if.done5

if.then:                                          ; preds = %switch.case.body1
  %72 = load %src.Scrollbar*, %src.Scrollbar** %8, align 8
  %73 = getelementptr inbounds %src.Scrollbar, %src.Scrollbar* %72, i32 0, i32 4
  %74 = load i64, i64* %6, align 8
  %75 = sitofp i64 %74 to float
  %76 = fmul float %75, 1.000000e+01
  %77 = load float, float* %73, align 4
  %78 = fsub float %77, %76
  store float %78, float* %73, align 4
  %79 = load %src.Scrollbar*, %src.Scrollbar** %8, align 8
  %80 = getelementptr inbounds %src.Scrollbar, %src.Scrollbar* %79, i32 0, i32 1
  %81 = load float, float* %80, align 4
  %82 = load %src.Scrollbar*, %src.Scrollbar** %8, align 8
  %83 = getelementptr inbounds %src.Scrollbar, %src.Scrollbar* %82, i32 0, i32 2
  %84 = load float, float* %83, align 4
  %85 = fsub float %81, %84
  store float %85, float* %13, align 4
  %86 = load %src.Scrollbar*, %src.Scrollbar** %8, align 8
  %87 = getelementptr inbounds %src.Scrollbar, %src.Scrollbar* %86, i32 0, i32 4
  %88 = load float, float* %87, align 4
  %89 = fcmp olt float %88, 0.000000e+00
  %90 = zext i1 %89 to i8
  %91 = trunc i8 %90 to i1
  br i1 %91, label %if.then2, label %if.else

if.then2:                                         ; preds = %if.then
  %92 = load %src.Scrollbar*, %src.Scrollbar** %8, align 8
  %93 = getelementptr inbounds %src.Scrollbar, %src.Scrollbar* %92, i32 0, i32 4
  store float 0.000000e+00, float* %93, align 4
  br label %if.done4

if.else:                                          ; preds = %if.then
  %94 = load %src.Scrollbar*, %src.Scrollbar** %8, align 8
  %95 = getelementptr inbounds %src.Scrollbar, %src.Scrollbar* %94, i32 0, i32 4
  %96 = load float, float* %95, align 4
  %97 = load float, float* %13, align 4
  %98 = fcmp ogt float %96, %97
  %99 = zext i1 %98 to i8
  %100 = trunc i8 %99 to i1
  br i1 %100, label %if.then3, label %if.done

if.then3:                                         ; preds = %if.else
  %101 = load %src.Scrollbar*, %src.Scrollbar** %8, align 8
  %102 = getelementptr inbounds %src.Scrollbar, %src.Scrollbar* %101, i32 0, i32 4
  %103 = load float, float* %13, align 4
  store float %103, float* %102, align 4
  br label %if.done

if.done:                                          ; preds = %if.then3, %if.else
  br label %if.done4

if.done4:                                         ; preds = %if.done, %if.then2
  %104 = load %src.Scrollbar*, %src.Scrollbar** %8, align 8
  %105 = getelementptr inbounds %src.Scrollbar, %src.Scrollbar* %104, i32 0, i32 0
  %106 = bitcast %runtime.Context* %26 to i8*
  call void @src.element_repaint(%src.Element* %105, i8* %106)
  %107 = load %src.Scrollbar*, %src.Scrollbar** %8, align 8
  %108 = getelementptr inbounds %src.Scrollbar, %src.Scrollbar* %107, i32 0, i32 0
  %109 = getelementptr inbounds %src.Element, %src.Element* %108, i32 0, i32 2
  %110 = load %src.Element*, %src.Element** %109, align 8
  %111 = bitcast %runtime.Context* %26 to i8*
  %112 = call i64 @src.element_message(%src.Element* %110, i64 25, i64 0, i8* null, i8* %111)
  ret i64 1

if.done5:                                         ; preds = %switch.case.body1
  ret i64 0

switch.case.body6:                                ; preds = %entry
  %113 = load %src.Element*, %src.Element** %4, align 8
  %114 = getelementptr inbounds %src.Element, %src.Element* %113, i32 0, i32 3
  %115 = load { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %114, align 8
  %116 = getelementptr inbounds { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %114, i32 0, i32 0
  %117 = load %src.Element**, %src.Element*** %116, align 8
  %118 = getelementptr inbounds { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %114, i32 0, i32 1
  %119 = load i64, i64* %118, align 8
  %120 = bitcast { i64, i64 }* %15 to %..string*
  store %..string { i8* getelementptr inbounds ([58 x i8], [58 x i8]* @"csbs$1a2", i64 0, i64 0), i64 57 }, %..string* %120, align 8
  %121 = load { i64, i64 }, { i64, i64 }* %15, align 8
  call void @runtime.bounds_check_error({ i64, i64 } %121, i32 1536, i32 27, i64 0, i64 %119)
  %122 = getelementptr %src.Element*, %src.Element** %117, i64 0
  %123 = load %src.Element*, %src.Element** %122, align 8
  store %src.Element* %123, %src.Element** %14, align 8
  %124 = load %src.Element*, %src.Element** %4, align 8
  %125 = getelementptr inbounds %src.Element, %src.Element* %124, i32 0, i32 3
  %126 = load { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %125, align 8
  %127 = getelementptr inbounds { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %125, i32 0, i32 0
  %128 = load %src.Element**, %src.Element*** %127, align 8
  %129 = getelementptr inbounds { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %125, i32 0, i32 1
  %130 = load i64, i64* %129, align 8
  %131 = bitcast { i64, i64 }* %17 to %..string*
  store %..string { i8* getelementptr inbounds ([58 x i8], [58 x i8]* @"csbs$1a2", i64 0, i64 0), i64 57 }, %..string* %131, align 8
  %132 = load { i64, i64 }, { i64, i64 }* %17, align 8
  call void @runtime.bounds_check_error({ i64, i64 } %132, i32 1537, i32 30, i64 1, i64 %130)
  %133 = getelementptr %src.Element*, %src.Element** %128, i64 1
  %134 = load %src.Element*, %src.Element** %133, align 8
  store %src.Element* %134, %src.Element** %16, align 8
  %135 = load %src.Element*, %src.Element** %4, align 8
  %136 = getelementptr inbounds %src.Element, %src.Element* %135, i32 0, i32 3
  %137 = load { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %136, align 8
  %138 = getelementptr inbounds { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %136, i32 0, i32 0
  %139 = load %src.Element**, %src.Element*** %138, align 8
  %140 = getelementptr inbounds { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %136, i32 0, i32 1
  %141 = load i64, i64* %140, align 8
  %142 = bitcast { i64, i64 }* %19 to %..string*
  store %..string { i8* getelementptr inbounds ([58 x i8], [58 x i8]* @"csbs$1a2", i64 0, i64 0), i64 57 }, %..string* %142, align 8
  %143 = load { i64, i64 }, { i64, i64 }* %19, align 8
  call void @runtime.bounds_check_error({ i64, i64 } %143, i32 1538, i32 29, i64 2, i64 %141)
  %144 = getelementptr %src.Element*, %src.Element** %139, i64 2
  %145 = load %src.Element*, %src.Element** %144, align 8
  store %src.Element* %145, %src.Element** %18, align 8
  %146 = load %src.Scrollbar*, %src.Scrollbar** %8, align 8
  %147 = getelementptr inbounds %src.Scrollbar, %src.Scrollbar* %146, i32 0, i32 2
  %148 = load float, float* %147, align 4
  %149 = load %src.Scrollbar*, %src.Scrollbar** %8, align 8
  %150 = getelementptr inbounds %src.Scrollbar, %src.Scrollbar* %149, i32 0, i32 1
  %151 = load float, float* %150, align 4
  %152 = fcmp oge float %148, %151
  %153 = zext i1 %152 to i8
  %154 = trunc i8 %153 to i1
  br i1 %154, label %if.then8, label %cmp.or

cmp.or:                                           ; preds = %switch.case.body6
  %155 = load %src.Scrollbar*, %src.Scrollbar** %8, align 8
  %156 = getelementptr inbounds %src.Scrollbar, %src.Scrollbar* %155, i32 0, i32 1
  %157 = load float, float* %156, align 4
  %158 = fcmp ole float %157, 0.000000e+00
  %159 = zext i1 %158 to i8
  %160 = trunc i8 %159 to i1
  br i1 %160, label %if.then8, label %cmp.or7

cmp.or7:                                          ; preds = %cmp.or
  %161 = load %src.Scrollbar*, %src.Scrollbar** %8, align 8
  %162 = getelementptr inbounds %src.Scrollbar, %src.Scrollbar* %161, i32 0, i32 2
  %163 = load float, float* %162, align 4
  %164 = fcmp oeq float %163, 0.000000e+00
  %165 = zext i1 %164 to i8
  %166 = trunc i8 %165 to i1
  br i1 %166, label %if.then8, label %if.else9

if.then8:                                         ; preds = %cmp.or7, %cmp.or, %switch.case.body6
  %167 = load %src.Element*, %src.Element** %14, align 8
  %168 = getelementptr inbounds %src.Element, %src.Element* %167, i32 0, i32 0
  %169 = bitcast %runtime.Context* %26 to i8*
  call void @runtime.incl_elem-48009(i32* %168, i64 1, i8* %169)
  %170 = load %src.Element*, %src.Element** %16, align 8
  %171 = getelementptr inbounds %src.Element, %src.Element* %170, i32 0, i32 0
  %172 = bitcast %runtime.Context* %26 to i8*
  call void @runtime.incl_elem-48009(i32* %171, i64 1, i8* %172)
  %173 = load %src.Element*, %src.Element** %18, align 8
  %174 = getelementptr inbounds %src.Element, %src.Element* %173, i32 0, i32 0
  %175 = bitcast %runtime.Context* %26 to i8*
  call void @runtime.incl_elem-48009(i32* %174, i64 1, i8* %175)
  %176 = load %src.Scrollbar*, %src.Scrollbar** %8, align 8
  %177 = getelementptr inbounds %src.Scrollbar, %src.Scrollbar* %176, i32 0, i32 4
  store float 0.000000e+00, float* %177, align 4
  br label %if.done17

if.else9:                                         ; preds = %cmp.or7
  %178 = load %src.Element*, %src.Element** %14, align 8
  %179 = getelementptr inbounds %src.Element, %src.Element* %178, i32 0, i32 0
  %180 = bitcast %runtime.Context* %26 to i8*
  call void @runtime.excl_elem-48031(i32* %179, i64 1, i8* %180)
  %181 = load %src.Element*, %src.Element** %16, align 8
  %182 = getelementptr inbounds %src.Element, %src.Element* %181, i32 0, i32 0
  %183 = bitcast %runtime.Context* %26 to i8*
  call void @runtime.excl_elem-48031(i32* %182, i64 1, i8* %183)
  %184 = load %src.Element*, %src.Element** %18, align 8
  %185 = getelementptr inbounds %src.Element, %src.Element* %184, i32 0, i32 0
  %186 = bitcast %runtime.Context* %26 to i8*
  call void @runtime.excl_elem-48031(i32* %185, i64 1, i8* %186)
  %187 = load %src.Scrollbar*, %src.Scrollbar** %8, align 8
  %188 = getelementptr inbounds %src.Scrollbar, %src.Scrollbar* %187, i32 0, i32 0
  %189 = getelementptr inbounds %src.Element, %src.Element* %188, i32 0, i32 5
  %190 = load %src.Rect, %src.Rect* %189, align 4
  %191 = bitcast { <2 x float>, <2 x float> }* %21 to %src.Rect*
  store %src.Rect %190, %src.Rect* %191, align 4
  %192 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %21, align 8
  %193 = bitcast %runtime.Context* %26 to i8*
  %194 = call float @src.rect_height({ <2 x float>, <2 x float> } %192, i8* %193)
  store float %194, float* %20, align 4
  %195 = load float, float* %20, align 4
  %196 = load %src.Scrollbar*, %src.Scrollbar** %8, align 8
  %197 = getelementptr inbounds %src.Scrollbar, %src.Scrollbar* %196, i32 0, i32 2
  %198 = load float, float* %197, align 4
  %199 = fmul float %195, %198
  %200 = load %src.Scrollbar*, %src.Scrollbar** %8, align 8
  %201 = getelementptr inbounds %src.Scrollbar, %src.Scrollbar* %200, i32 0, i32 1
  %202 = load float, float* %201, align 4
  %203 = fdiv float %199, %202
  store float %203, float* %22, align 4
  %204 = load float, float* %22, align 4
  %205 = fcmp ogt float 7.000000e+00, %204
  %206 = select i1 %205, float 7.000000e+00, float %204
  store float %206, float* %22, align 4
  %207 = load %src.Scrollbar*, %src.Scrollbar** %8, align 8
  %208 = getelementptr inbounds %src.Scrollbar, %src.Scrollbar* %207, i32 0, i32 1
  %209 = load float, float* %208, align 4
  %210 = load %src.Scrollbar*, %src.Scrollbar** %8, align 8
  %211 = getelementptr inbounds %src.Scrollbar, %src.Scrollbar* %210, i32 0, i32 2
  %212 = load float, float* %211, align 4
  %213 = fsub float %209, %212
  store float %213, float* %23, align 4
  %214 = load %src.Scrollbar*, %src.Scrollbar** %8, align 8
  %215 = getelementptr inbounds %src.Scrollbar, %src.Scrollbar* %214, i32 0, i32 4
  %216 = load float, float* %215, align 4
  %217 = fcmp olt float %216, 0.000000e+00
  %218 = zext i1 %217 to i8
  %219 = trunc i8 %218 to i1
  br i1 %219, label %if.then10, label %if.else11

if.then10:                                        ; preds = %if.else9
  %220 = load %src.Scrollbar*, %src.Scrollbar** %8, align 8
  %221 = getelementptr inbounds %src.Scrollbar, %src.Scrollbar* %220, i32 0, i32 4
  store float 0.000000e+00, float* %221, align 4
  br label %if.done14

if.else11:                                        ; preds = %if.else9
  %222 = load %src.Scrollbar*, %src.Scrollbar** %8, align 8
  %223 = getelementptr inbounds %src.Scrollbar, %src.Scrollbar* %222, i32 0, i32 4
  %224 = load float, float* %223, align 4
  %225 = load float, float* %23, align 4
  %226 = fcmp ogt float %224, %225
  %227 = zext i1 %226 to i8
  %228 = trunc i8 %227 to i1
  br i1 %228, label %if.then12, label %if.done13

if.then12:                                        ; preds = %if.else11
  %229 = load %src.Scrollbar*, %src.Scrollbar** %8, align 8
  %230 = getelementptr inbounds %src.Scrollbar, %src.Scrollbar* %229, i32 0, i32 4
  %231 = load float, float* %23, align 4
  store float %231, float* %230, align 4
  br label %if.done13

if.done13:                                        ; preds = %if.then12, %if.else11
  br label %if.done14

if.done14:                                        ; preds = %if.done13, %if.then10
  %232 = load %src.Scrollbar*, %src.Scrollbar** %8, align 8
  %233 = getelementptr inbounds %src.Scrollbar, %src.Scrollbar* %232, i32 0, i32 4
  %234 = load float, float* %233, align 4
  %235 = load float, float* %23, align 4
  %236 = fdiv float %234, %235
  %237 = load float, float* %20, align 4
  %238 = load float, float* %22, align 4
  %239 = fsub float %237, %238
  %240 = fmul float %236, %239
  store float %240, float* %24, align 4
  %241 = load %src.Scrollbar*, %src.Scrollbar** %8, align 8
  %242 = getelementptr inbounds %src.Scrollbar, %src.Scrollbar* %241, i32 0, i32 4
  %243 = load float, float* %242, align 4
  %244 = load float, float* %23, align 4
  %245 = fcmp oeq float %243, %244
  %246 = zext i1 %245 to i8
  %247 = trunc i8 %246 to i1
  br i1 %247, label %if.then15, label %if.done16

if.then15:                                        ; preds = %if.done14
  %248 = load float, float* %20, align 4
  %249 = load float, float* %22, align 4
  %250 = fsub float %248, %249
  store float %250, float* %24, align 4
  br label %if.done16

if.done16:                                        ; preds = %if.then15, %if.done14
  %251 = load %src.Element*, %src.Element** %4, align 8
  %252 = getelementptr inbounds %src.Element, %src.Element* %251, i32 0, i32 5
  %253 = load %src.Rect, %src.Rect* %252, align 4
  store %src.Rect %253, %src.Rect* %25, align 4
  %254 = getelementptr inbounds %src.Rect, %src.Rect* %25, i32 0, i32 3
  %255 = getelementptr inbounds %src.Rect, %src.Rect* %25, i32 0, i32 2
  %256 = load float, float* %255, align 4
  %257 = load float, float* %24, align 4
  %258 = fadd float %256, %257
  store float %258, float* %254, align 4
  %259 = load %src.Element*, %src.Element** %14, align 8
  %260 = load %src.Rect, %src.Rect* %25, align 4
  %261 = bitcast %src.Rect* %25 to { <2 x float>, <2 x float> }*
  %262 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %261, align 8
  %263 = bitcast %runtime.Context* %26 to i8*
  call void @src.element_move(%src.Element* %259, { <2 x float>, <2 x float> } %262, i8* %263)
  %264 = getelementptr inbounds %src.Rect, %src.Rect* %25, i32 0, i32 2
  %265 = getelementptr inbounds %src.Rect, %src.Rect* %25, i32 0, i32 3
  %266 = load float, float* %265, align 4
  store float %266, float* %264, align 4
  %267 = getelementptr inbounds %src.Rect, %src.Rect* %25, i32 0, i32 3
  %268 = getelementptr inbounds %src.Rect, %src.Rect* %25, i32 0, i32 2
  %269 = load float, float* %268, align 4
  %270 = load float, float* %22, align 4
  %271 = fadd float %269, %270
  store float %271, float* %267, align 4
  %272 = load %src.Element*, %src.Element** %16, align 8
  %273 = load %src.Rect, %src.Rect* %25, align 4
  %274 = bitcast %src.Rect* %25 to { <2 x float>, <2 x float> }*
  %275 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %274, align 8
  %276 = bitcast %runtime.Context* %26 to i8*
  call void @src.element_move(%src.Element* %272, { <2 x float>, <2 x float> } %275, i8* %276)
  %277 = getelementptr inbounds %src.Rect, %src.Rect* %25, i32 0, i32 2
  %278 = getelementptr inbounds %src.Rect, %src.Rect* %25, i32 0, i32 3
  %279 = load float, float* %278, align 4
  store float %279, float* %277, align 4
  %280 = getelementptr inbounds %src.Rect, %src.Rect* %25, i32 0, i32 3
  %281 = load %src.Element*, %src.Element** %4, align 8
  %282 = getelementptr inbounds %src.Element, %src.Element* %281, i32 0, i32 5
  %283 = getelementptr inbounds %src.Rect, %src.Rect* %282, i32 0, i32 3
  %284 = load float, float* %283, align 4
  store float %284, float* %280, align 4
  %285 = load %src.Element*, %src.Element** %18, align 8
  %286 = load %src.Rect, %src.Rect* %25, align 4
  %287 = bitcast %src.Rect* %25 to { <2 x float>, <2 x float> }*
  %288 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %287, align 8
  %289 = bitcast %runtime.Context* %26 to i8*
  call void @src.element_move(%src.Element* %285, { <2 x float>, <2 x float> } %288, i8* %289)
  br label %if.done17

if.done17:                                        ; preds = %if.done16, %if.then8
  br label %switch.done

switch.done:                                      ; preds = %if.done17, %switch.case.body, %entry
  ret i64 0
}

define internal i64 @src.scroll_up_down_message(%src.Element* %0, i64 %1, i64 %2, i8* %3, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %4 = alloca %src.Element*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i8*, align 8
  %8 = alloca %src.Scrollbar*, align 8
  %9 = alloca i8, align 1
  %10 = alloca float, align 4
  br label %entry

entry:                                            ; preds = %decls
  store %src.Element* %0, %src.Element** %4, align 8
  store i64 %1, i64* %5, align 8
  store i64 %2, i64* %6, align 8
  store i8* %3, i8** %7, align 8
  %11 = bitcast i8* %__.context_ptr to %runtime.Context*
  %12 = load %src.Element*, %src.Element** %4, align 8
  %13 = getelementptr inbounds %src.Element, %src.Element* %12, i32 0, i32 2
  %14 = load %src.Element*, %src.Element** %13, align 8
  %15 = bitcast %src.Element* %14 to %src.Scrollbar*
  store %src.Scrollbar* %15, %src.Scrollbar** %8, align 8
  %16 = load %src.Element*, %src.Element** %4, align 8
  %17 = getelementptr inbounds %src.Element, %src.Element* %16, i32 0, i32 12
  %18 = load i8*, i8** %17, align 8
  %19 = ptrtoint i8* %18 to i64
  %20 = icmp eq i64 %19, 1
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %9, align 1
  %22 = load i64, i64* %5, align 8
  switch i64 %22, label %switch.done [
    i64 16, label %switch.case.body
    i64 17, label %switch.case.body1
    i64 7, label %switch.case.body2
  ]

switch.case.body:                                 ; preds = %entry
  %23 = load %src.Element*, %src.Element** %4, align 8
  %24 = bitcast %runtime.Context* %11 to i8*
  call void @src.element_animation_start(%src.Element* %23, i8* %24)
  br label %switch.done

switch.case.body1:                                ; preds = %entry
  %25 = load %src.Element*, %src.Element** %4, align 8
  %26 = bitcast %runtime.Context* %11 to i8*
  %27 = call i8 @src.element_animation_stop(%src.Element* %25, i8* %26)
  br label %switch.done

switch.case.body2:                                ; preds = %entry
  %28 = load i8, i8* %9, align 1
  %29 = trunc i8 %28 to i1
  br i1 %29, label %if.then, label %if.else

if.then:                                          ; preds = %switch.case.body2
  br label %if.done

if.else:                                          ; preds = %switch.case.body2
  br label %if.done

if.done:                                          ; preds = %if.else, %if.then
  %30 = phi float [ 1.000000e+00, %if.then ], [ -1.000000e+00, %if.else ]
  store float %30, float* %10, align 4
  %31 = load %src.Scrollbar*, %src.Scrollbar** %8, align 8
  %32 = getelementptr inbounds %src.Scrollbar, %src.Scrollbar* %31, i32 0, i32 4
  %33 = load float, float* %10, align 4
  %34 = fmul float %33, 0x3F847AE140000000
  %35 = load %src.Scrollbar*, %src.Scrollbar** %8, align 8
  %36 = getelementptr inbounds %src.Scrollbar, %src.Scrollbar* %35, i32 0, i32 2
  %37 = load float, float* %36, align 4
  %38 = fmul float %34, %37
  %39 = load float, float* %32, align 4
  %40 = fadd float %39, %38
  store float %40, float* %32, align 4
  %41 = load %src.Scrollbar*, %src.Scrollbar** %8, align 8
  %42 = getelementptr inbounds %src.Scrollbar, %src.Scrollbar* %41, i32 0, i32 0
  %43 = bitcast %runtime.Context* %11 to i8*
  call void @src.element_repaint(%src.Element* %42, i8* %43)
  ret i64 1

switch.done:                                      ; preds = %switch.case.body1, %switch.case.body, %entry
  ret i64 0
}

define internal i64 @src.scroll_thumb_message(%src.Element* %0, i64 %1, i64 %2, i8* %3, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %4 = alloca %src.Element*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i8*, align 8
  %8 = alloca %src.Scrollbar*, align 8
  %9 = alloca %src.Render_Target*, align 8
  %10 = alloca i8, align 1
  %11 = alloca i8, align 1
  %12 = alloca %src.Rect, align 8
  %13 = alloca { <2 x float>, <2 x float> }, align 8
  %14 = alloca %src.Rect, align 8
  %15 = alloca [4 x i8], align 8
  %16 = alloca float, align 4
  %17 = alloca float, align 4
  %18 = alloca { <2 x float>, <2 x float> }, align 8
  %19 = alloca { <2 x float>, <2 x float> }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Element* %0, %src.Element** %4, align 8
  store i64 %1, i64* %5, align 8
  store i64 %2, i64* %6, align 8
  store i8* %3, i8** %7, align 8
  %20 = bitcast i8* %__.context_ptr to %runtime.Context*
  %21 = load %src.Element*, %src.Element** %4, align 8
  %22 = getelementptr inbounds %src.Element, %src.Element* %21, i32 0, i32 2
  %23 = load %src.Element*, %src.Element** %22, align 8
  %24 = bitcast %src.Element* %23 to %src.Scrollbar*
  store %src.Scrollbar* %24, %src.Scrollbar** %8, align 8
  %25 = load i64, i64* %5, align 8
  switch i64 %25, label %switch.done [
    i64 2, label %switch.case.body
    i64 1, label %switch.case.body1
    i64 15, label %switch.case.body2
    i64 17, label %switch.case.body7
  ]

switch.case.body:                                 ; preds = %entry
  %26 = load %src.Element*, %src.Element** %4, align 8
  %27 = getelementptr inbounds %src.Element, %src.Element* %26, i32 0, i32 4
  %28 = load %src.Window*, %src.Window** %27, align 8
  %29 = getelementptr inbounds %src.Window, %src.Window* %28, i32 0, i32 24
  %30 = load %src.Render_Target*, %src.Render_Target** %29, align 8
  store %src.Render_Target* %30, %src.Render_Target** %9, align 8
  %31 = load %src.Element*, %src.Element** %4, align 8
  %32 = getelementptr inbounds %src.Element, %src.Element* %31, i32 0, i32 4
  %33 = load %src.Window*, %src.Window** %32, align 8
  %34 = getelementptr inbounds %src.Window, %src.Window* %33, i32 0, i32 1
  %35 = load %src.Element*, %src.Element** %34, align 8
  %36 = load %src.Element*, %src.Element** %4, align 8
  %37 = icmp eq %src.Element* %35, %36
  %38 = zext i1 %37 to i8
  store i8 %38, i8* %10, align 1
  %39 = load %src.Element*, %src.Element** %4, align 8
  %40 = getelementptr inbounds %src.Element, %src.Element* %39, i32 0, i32 4
  %41 = load %src.Window*, %src.Window** %40, align 8
  %42 = getelementptr inbounds %src.Window, %src.Window* %41, i32 0, i32 2
  %43 = load %src.Element*, %src.Element** %42, align 8
  %44 = load %src.Element*, %src.Element** %4, align 8
  %45 = icmp eq %src.Element* %43, %44
  %46 = zext i1 %45 to i8
  store i8 %46, i8* %11, align 1
  %47 = load %src.Element*, %src.Element** %4, align 8
  %48 = getelementptr inbounds %src.Element, %src.Element* %47, i32 0, i32 5
  %49 = load %src.Rect, %src.Rect* %48, align 4
  %50 = load float, float* @src.SCALE, align 4
  %51 = fmul float 3.000000e+00, %50
  %52 = bitcast { <2 x float>, <2 x float> }* %13 to %src.Rect*
  store %src.Rect %49, %src.Rect* %52, align 4
  %53 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %13, align 8
  %54 = bitcast %runtime.Context* %20 to i8*
  %55 = call { <2 x float>, <2 x float> } @src.rect_margin({ <2 x float>, <2 x float> } %53, float %51, i8* %54)
  %56 = bitcast %src.Rect* %14 to { <2 x float>, <2 x float> }*
  store { <2 x float>, <2 x float> } %55, { <2 x float>, <2 x float> }* %56, align 8
  %57 = load %src.Rect, %src.Rect* %14, align 4
  store %src.Rect %57, %src.Rect* %12, align 4
  %58 = load [4 x i8], [4 x i8]* getelementptr inbounds (%src.Theme, %src.Theme* @src.theme, i64 0, i32 2), align 1
  store [4 x i8] %58, [4 x i8]* %15, align 1
  %59 = getelementptr [4 x i8], [4 x i8]* %15, i64 0, i64 3
  %60 = load i8, i8* %11, align 1
  %61 = trunc i8 %60 to i1
  br i1 %61, label %if.then, label %cmp.or

cmp.or:                                           ; preds = %switch.case.body
  %62 = load i8, i8* %10, align 1
  %63 = trunc i8 %62 to i1
  br i1 %63, label %if.then, label %if.else

if.then:                                          ; preds = %cmp.or, %switch.case.body
  br label %if.done

if.else:                                          ; preds = %cmp.or
  br label %if.done

if.done:                                          ; preds = %if.else, %if.then
  %64 = phi i8 [ -56, %if.then ], [ -106, %if.else ]
  store i8 %64, i8* %59, align 1
  %65 = load %src.Render_Target*, %src.Render_Target** %9, align 8
  %66 = load %src.Rect, %src.Rect* %12, align 4
  %67 = load [4 x i8], [4 x i8]* %15, align 1
  %68 = load float, float* @src.ROUNDNESS, align 4
  %69 = bitcast %src.Rect* %12 to { <2 x float>, <2 x float> }*
  %70 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %69, align 8
  %71 = bitcast [4 x i8]* %15 to i64*
  %72 = load i64, i64* %71, align 8
  %73 = bitcast %runtime.Context* %20 to i8*
  call void @src.render_rect(%src.Render_Target* %65, { <2 x float>, <2 x float> } %70, i64 %72, float %68, i8* %73)
  br label %switch.done

switch.case.body1:                                ; preds = %entry
  %74 = load %src.Element*, %src.Element** %4, align 8
  %75 = bitcast %runtime.Context* %20 to i8*
  call void @src.element_repaint(%src.Element* %74, i8* %75)
  br label %switch.done

switch.case.body2:                                ; preds = %entry
  %76 = load %src.Element*, %src.Element** %4, align 8
  %77 = getelementptr inbounds %src.Element, %src.Element* %76, i32 0, i32 4
  %78 = load %src.Window*, %src.Window** %77, align 8
  %79 = getelementptr inbounds %src.Window, %src.Window* %78, i32 0, i32 17
  %80 = load i64, i64* %79, align 8
  %81 = icmp eq i64 %80, 1
  %82 = zext i1 %81 to i8
  %83 = trunc i8 %82 to i1
  br i1 %83, label %if.then3, label %if.done6

if.then3:                                         ; preds = %switch.case.body2
  %84 = load %src.Scrollbar*, %src.Scrollbar** %8, align 8
  %85 = getelementptr inbounds %src.Scrollbar, %src.Scrollbar* %84, i32 0, i32 5
  %86 = load i8, i8* %85, align 1
  %87 = trunc i8 %86 to i1
  br i1 %87, label %if.done5, label %if.then4

if.then4:                                         ; preds = %if.then3
  %88 = load %src.Scrollbar*, %src.Scrollbar** %8, align 8
  %89 = getelementptr inbounds %src.Scrollbar, %src.Scrollbar* %88, i32 0, i32 5
  store i8 1, i8* %89, align 1
  %90 = load %src.Scrollbar*, %src.Scrollbar** %8, align 8
  %91 = getelementptr inbounds %src.Scrollbar, %src.Scrollbar* %90, i32 0, i32 3
  %92 = load %src.Element*, %src.Element** %4, align 8
  %93 = getelementptr inbounds %src.Element, %src.Element* %92, i32 0, i32 5
  %94 = getelementptr inbounds %src.Rect, %src.Rect* %93, i32 0, i32 2
  %95 = load float, float* %94, align 4
  %96 = load %src.Scrollbar*, %src.Scrollbar** %8, align 8
  %97 = getelementptr inbounds %src.Scrollbar, %src.Scrollbar* %96, i32 0, i32 0
  %98 = getelementptr inbounds %src.Element, %src.Element* %97, i32 0, i32 5
  %99 = getelementptr inbounds %src.Rect, %src.Rect* %98, i32 0, i32 2
  %100 = load float, float* %99, align 4
  %101 = fsub float %95, %100
  %102 = load %src.Element*, %src.Element** %4, align 8
  %103 = getelementptr inbounds %src.Element, %src.Element* %102, i32 0, i32 4
  %104 = load %src.Window*, %src.Window** %103, align 8
  %105 = getelementptr inbounds %src.Window, %src.Window* %104, i32 0, i32 13
  %106 = load float, float* %105, align 4
  %107 = fsub float %101, %106
  store float %107, float* %91, align 4
  br label %if.done5

if.done5:                                         ; preds = %if.then4, %if.then3
  %108 = load %src.Element*, %src.Element** %4, align 8
  %109 = getelementptr inbounds %src.Element, %src.Element* %108, i32 0, i32 4
  %110 = load %src.Window*, %src.Window** %109, align 8
  %111 = getelementptr inbounds %src.Window, %src.Window* %110, i32 0, i32 13
  %112 = load float, float* %111, align 4
  %113 = load %src.Scrollbar*, %src.Scrollbar** %8, align 8
  %114 = getelementptr inbounds %src.Scrollbar, %src.Scrollbar* %113, i32 0, i32 3
  %115 = load float, float* %114, align 4
  %116 = fadd float %112, %115
  store float %116, float* %16, align 4
  %117 = load %src.Scrollbar*, %src.Scrollbar** %8, align 8
  %118 = getelementptr inbounds %src.Scrollbar, %src.Scrollbar* %117, i32 0, i32 0
  %119 = getelementptr inbounds %src.Element, %src.Element* %118, i32 0, i32 5
  %120 = load %src.Rect, %src.Rect* %119, align 4
  %121 = bitcast { <2 x float>, <2 x float> }* %18 to %src.Rect*
  store %src.Rect %120, %src.Rect* %121, align 4
  %122 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %18, align 8
  %123 = bitcast %runtime.Context* %20 to i8*
  %124 = call float @src.rect_height({ <2 x float>, <2 x float> } %122, i8* %123)
  %125 = load %src.Element*, %src.Element** %4, align 8
  %126 = getelementptr inbounds %src.Element, %src.Element* %125, i32 0, i32 5
  %127 = load %src.Rect, %src.Rect* %126, align 4
  %128 = bitcast { <2 x float>, <2 x float> }* %19 to %src.Rect*
  store %src.Rect %127, %src.Rect* %128, align 4
  %129 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %19, align 8
  %130 = bitcast %runtime.Context* %20 to i8*
  %131 = call float @src.rect_height({ <2 x float>, <2 x float> } %129, i8* %130)
  %132 = fsub float %124, %131
  store float %132, float* %17, align 4
  %133 = load %src.Scrollbar*, %src.Scrollbar** %8, align 8
  %134 = getelementptr inbounds %src.Scrollbar, %src.Scrollbar* %133, i32 0, i32 4
  %135 = load float, float* %16, align 4
  %136 = load float, float* %17, align 4
  %137 = fdiv float %135, %136
  %138 = load %src.Scrollbar*, %src.Scrollbar** %8, align 8
  %139 = getelementptr inbounds %src.Scrollbar, %src.Scrollbar* %138, i32 0, i32 1
  %140 = load float, float* %139, align 4
  %141 = load %src.Scrollbar*, %src.Scrollbar** %8, align 8
  %142 = getelementptr inbounds %src.Scrollbar, %src.Scrollbar* %141, i32 0, i32 2
  %143 = load float, float* %142, align 4
  %144 = fsub float %140, %143
  %145 = fmul float %137, %144
  store float %145, float* %134, align 4
  %146 = load %src.Scrollbar*, %src.Scrollbar** %8, align 8
  %147 = getelementptr inbounds %src.Scrollbar, %src.Scrollbar* %146, i32 0, i32 0
  %148 = bitcast %runtime.Context* %20 to i8*
  call void @src.element_repaint(%src.Element* %147, i8* %148)
  %149 = load %src.Scrollbar*, %src.Scrollbar** %8, align 8
  %150 = getelementptr inbounds %src.Scrollbar, %src.Scrollbar* %149, i32 0, i32 0
  %151 = getelementptr inbounds %src.Element, %src.Element* %150, i32 0, i32 2
  %152 = load %src.Element*, %src.Element** %151, align 8
  %153 = bitcast %runtime.Context* %20 to i8*
  %154 = call i64 @src.element_message(%src.Element* %152, i64 25, i64 0, i8* null, i8* %153)
  br label %if.done6

if.done6:                                         ; preds = %if.done5, %switch.case.body2
  br label %switch.done

switch.case.body7:                                ; preds = %entry
  %155 = load %src.Scrollbar*, %src.Scrollbar** %8, align 8
  %156 = getelementptr inbounds %src.Scrollbar, %src.Scrollbar* %155, i32 0, i32 5
  store i8 0, i8* %156, align 1
  br label %switch.done

switch.done:                                      ; preds = %switch.case.body7, %if.done6, %switch.case.body1, %if.done, %entry
  ret i64 0
}

define internal %src.Scrollbar* @src.scrollbar_init(%src.Element* %0, i32 %1, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %2 = alloca %src.Element*, align 8
  %3 = alloca i32, align 4
  %4 = alloca %src.Scrollbar*, align 8
  %5 = alloca %src.Element*, align 8
  %6 = alloca %src.Element*, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Element* %0, %src.Element** %2, align 8
  store i32 %1, i32* %3, align 4
  store %src.Scrollbar* null, %src.Scrollbar** %4, align 8
  %7 = bitcast i8* %__.context_ptr to %runtime.Context*
  %8 = load %src.Element*, %src.Element** %2, align 8
  %9 = load i32, i32* %3, align 4
  %10 = getelementptr inbounds %runtime.Context, %runtime.Context* %7, i32 0, i32 0
  %11 = load %runtime.Allocator, %runtime.Allocator* %10, align 8
  %12 = bitcast %runtime.Allocator* %10 to { i64, i64 }*
  %13 = load { i64, i64 }, { i64, i64 }* %12, align 8
  %14 = bitcast %runtime.Context* %7 to i8*
  %15 = call %src.Scrollbar* @src.element_init-48724(%src.Element* %8, i32 %9, i8* bitcast (i64 (%src.Element*, i64, i64, i8*, i8*)* @src.scrollbar_message to i8*), i64 -1, { i64, i64 } %13, i8* %14)
  store %src.Scrollbar* %15, %src.Scrollbar** %4, align 8
  %16 = load %src.Scrollbar*, %src.Scrollbar** %4, align 8
  %17 = load i32, i32* %3, align 4
  %18 = getelementptr inbounds %runtime.Context, %runtime.Context* %7, i32 0, i32 0
  %19 = load %runtime.Allocator, %runtime.Allocator* %18, align 8
  %20 = getelementptr inbounds %src.Scrollbar, %src.Scrollbar* %16, i32 0, i32 0
  %21 = bitcast %runtime.Allocator* %18 to { i64, i64 }*
  %22 = load { i64, i64 }, { i64, i64 }* %21, align 8
  %23 = bitcast %runtime.Context* %7 to i8*
  %24 = call %src.Element* @src.element_init-48739(%src.Element* %20, i32 %17, i8* bitcast (i64 (%src.Element*, i64, i64, i8*, i8*)* @src.scroll_up_down_message to i8*), i64 -1, { i64, i64 } %22, i8* %23)
  store %src.Element* %24, %src.Element** %5, align 8
  %25 = load %src.Element*, %src.Element** %5, align 8
  %26 = getelementptr inbounds %src.Element, %src.Element* %25, i32 0, i32 12
  store i8* null, i8** %26, align 8
  %27 = load %src.Scrollbar*, %src.Scrollbar** %4, align 8
  %28 = load i32, i32* %3, align 4
  %29 = getelementptr inbounds %runtime.Context, %runtime.Context* %7, i32 0, i32 0
  %30 = load %runtime.Allocator, %runtime.Allocator* %29, align 8
  %31 = getelementptr inbounds %src.Scrollbar, %src.Scrollbar* %27, i32 0, i32 0
  %32 = bitcast %runtime.Allocator* %29 to { i64, i64 }*
  %33 = load { i64, i64 }, { i64, i64 }* %32, align 8
  %34 = bitcast %runtime.Context* %7 to i8*
  %35 = call %src.Element* @src.element_init-48739(%src.Element* %31, i32 %28, i8* bitcast (i64 (%src.Element*, i64, i64, i8*, i8*)* @src.scroll_thumb_message to i8*), i64 -1, { i64, i64 } %33, i8* %34)
  %36 = load %src.Scrollbar*, %src.Scrollbar** %4, align 8
  %37 = load i32, i32* %3, align 4
  %38 = getelementptr inbounds %runtime.Context, %runtime.Context* %7, i32 0, i32 0
  %39 = load %runtime.Allocator, %runtime.Allocator* %38, align 8
  %40 = getelementptr inbounds %src.Scrollbar, %src.Scrollbar* %36, i32 0, i32 0
  %41 = bitcast %runtime.Allocator* %38 to { i64, i64 }*
  %42 = load { i64, i64 }, { i64, i64 }* %41, align 8
  %43 = bitcast %runtime.Context* %7 to i8*
  %44 = call %src.Element* @src.element_init-48739(%src.Element* %40, i32 %37, i8* bitcast (i64 (%src.Element*, i64, i64, i8*, i8*)* @src.scroll_up_down_message to i8*), i64 -1, { i64, i64 } %42, i8* %43)
  store %src.Element* %44, %src.Element** %6, align 8
  %45 = load %src.Element*, %src.Element** %6, align 8
  %46 = getelementptr inbounds %src.Element, %src.Element* %45, i32 0, i32 12
  store i8* inttoptr (i64 1 to i8*), i8** %46, align 8
  %47 = load %src.Scrollbar*, %src.Scrollbar** %4, align 8
  store %src.Scrollbar* %47, %src.Scrollbar** %4, align 8
  ret %src.Scrollbar* %47
}

define internal i64 @src.color_picker_message(%src.Element* %0, i64 %1, i64 %2, i8* %3, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %4 = alloca %src.Element*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i8*, align 8
  %8 = alloca %src.Color_Picker*, align 8
  %9 = alloca %src.Element*, align 8
  %10 = alloca { i64, i64 }, align 8
  %11 = alloca %src.Element*, align 8
  %12 = alloca { i64, i64 }, align 8
  %13 = alloca float, align 4
  %14 = alloca %src.Rect, align 8
  %15 = alloca { <2 x float>, <2 x float> }, align 8
  %16 = alloca %src.Rect, align 8
  %17 = alloca %src.Rect, align 8
  %18 = alloca %src.Rect, align 8
  %19 = alloca %src.Render_Target*, align 8
  %20 = alloca { <2 x float>, <2 x float> }, align 8
  %21 = alloca i64, align 8
  %22 = alloca { <2 x float>, <2 x float> }, align 8
  %23 = alloca i64, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Element* %0, %src.Element** %4, align 8
  store i64 %1, i64* %5, align 8
  store i64 %2, i64* %6, align 8
  store i8* %3, i8** %7, align 8
  %24 = bitcast i8* %__.context_ptr to %runtime.Context*
  %25 = load %src.Element*, %src.Element** %4, align 8
  %26 = bitcast %src.Element* %25 to %src.Color_Picker*
  store %src.Color_Picker* %26, %src.Color_Picker** %8, align 8
  %27 = load i64, i64* %5, align 8
  switch i64 %27, label %switch.done [
    i64 9, label %switch.case.body
    i64 10, label %switch.case.body1
    i64 3, label %switch.case.body2
    i64 2, label %switch.case.body3
  ]

switch.case.body:                                 ; preds = %entry
  %28 = load float, float* @src.SCALE, align 4
  %29 = fmul float 2.500000e+02, %28
  %30 = fptosi float %29 to i64
  ret i64 %30

switch.case.body1:                                ; preds = %entry
  %31 = load float, float* @src.SCALE, align 4
  %32 = fmul float 2.000000e+02, %31
  %33 = fptosi float %32 to i64
  ret i64 %33

switch.case.body2:                                ; preds = %entry
  %34 = load %src.Element*, %src.Element** %4, align 8
  %35 = getelementptr inbounds %src.Element, %src.Element* %34, i32 0, i32 3
  %36 = load { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %35, align 8
  %37 = getelementptr inbounds { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %35, i32 0, i32 0
  %38 = load %src.Element**, %src.Element*** %37, align 8
  %39 = getelementptr inbounds { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %35, i32 0, i32 1
  %40 = load i64, i64* %39, align 8
  %41 = bitcast { i64, i64 }* %10 to %..string*
  store %..string { i8* getelementptr inbounds ([58 x i8], [58 x i8]* @"csbs$1a2", i64 0, i64 0), i64 57 }, %..string* %41, align 8
  %42 = load { i64, i64 }, { i64, i64 }* %10, align 8
  call void @runtime.bounds_check_error({ i64, i64 } %42, i32 1967, i32 27, i64 0, i64 %40)
  %43 = getelementptr %src.Element*, %src.Element** %38, i64 0
  %44 = load %src.Element*, %src.Element** %43, align 8
  store %src.Element* %44, %src.Element** %9, align 8
  %45 = load %src.Element*, %src.Element** %4, align 8
  %46 = getelementptr inbounds %src.Element, %src.Element* %45, i32 0, i32 3
  %47 = load { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %46, align 8
  %48 = getelementptr inbounds { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %46, i32 0, i32 0
  %49 = load %src.Element**, %src.Element*** %48, align 8
  %50 = getelementptr inbounds { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %46, i32 0, i32 1
  %51 = load i64, i64* %50, align 8
  %52 = bitcast { i64, i64 }* %12 to %..string*
  store %..string { i8* getelementptr inbounds ([58 x i8], [58 x i8]* @"csbs$1a2", i64 0, i64 0), i64 57 }, %..string* %52, align 8
  %53 = load { i64, i64 }, { i64, i64 }* %12, align 8
  call void @runtime.bounds_check_error({ i64, i64 } %53, i32 1968, i32 28, i64 1, i64 %51)
  %54 = getelementptr %src.Element*, %src.Element** %49, i64 1
  %55 = load %src.Element*, %src.Element** %54, align 8
  store %src.Element* %55, %src.Element** %11, align 8
  %56 = load float, float* @src.SCALE, align 4
  %57 = fmul float 1.000000e+01, %56
  %58 = call float @math.round_f32(float %57)
  store float %58, float* %13, align 4
  %59 = load %src.Element*, %src.Element** %4, align 8
  %60 = getelementptr inbounds %src.Element, %src.Element* %59, i32 0, i32 5
  %61 = load %src.Rect, %src.Rect* %60, align 4
  %62 = bitcast { <2 x float>, <2 x float> }* %15 to %src.Rect*
  store %src.Rect %61, %src.Rect* %62, align 4
  %63 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %15, align 8
  %64 = bitcast %runtime.Context* %24 to i8*
  %65 = call { <2 x float>, <2 x float> } @src.rect_margin({ <2 x float>, <2 x float> } %63, float 5.000000e+00, i8* %64)
  %66 = bitcast %src.Rect* %16 to { <2 x float>, <2 x float> }*
  store { <2 x float>, <2 x float> } %65, { <2 x float>, <2 x float> }* %66, align 8
  %67 = load %src.Rect, %src.Rect* %16, align 4
  store %src.Rect %67, %src.Rect* %14, align 4
  %68 = load float, float* @src.SCALE, align 4
  %69 = fmul float 2.000000e+02, %68
  %70 = call float @math.round_f32(float %69)
  %71 = bitcast %runtime.Context* %24 to i8*
  %72 = call { <2 x float>, <2 x float> } @src.rect_cut_left(%src.Rect* %14, float %70, i8* %71)
  %73 = bitcast %src.Rect* %18 to { <2 x float>, <2 x float> }*
  store { <2 x float>, <2 x float> } %72, { <2 x float>, <2 x float> }* %73, align 8
  %74 = load %src.Rect, %src.Rect* %18, align 4
  store %src.Rect %74, %src.Rect* %17, align 4
  %75 = getelementptr inbounds %src.Rect, %src.Rect* %14, i32 0, i32 0
  %76 = load float, float* %13, align 4
  %77 = load float, float* %75, align 4
  %78 = fadd float %77, %76
  store float %78, float* %75, align 4
  %79 = load %src.Element*, %src.Element** %9, align 8
  %80 = load %src.Rect, %src.Rect* %17, align 4
  %81 = bitcast %src.Rect* %17 to { <2 x float>, <2 x float> }*
  %82 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %81, align 8
  %83 = bitcast %runtime.Context* %24 to i8*
  call void @src.element_move(%src.Element* %79, { <2 x float>, <2 x float> } %82, i8* %83)
  %84 = load %src.Element*, %src.Element** %11, align 8
  %85 = load %src.Rect, %src.Rect* %14, align 4
  %86 = bitcast %src.Rect* %14 to { <2 x float>, <2 x float> }*
  %87 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %86, align 8
  %88 = bitcast %runtime.Context* %24 to i8*
  call void @src.element_move(%src.Element* %84, { <2 x float>, <2 x float> } %87, i8* %88)
  br label %switch.done

switch.case.body3:                                ; preds = %entry
  %89 = load %src.Element*, %src.Element** %4, align 8
  %90 = getelementptr inbounds %src.Element, %src.Element* %89, i32 0, i32 4
  %91 = load %src.Window*, %src.Window** %90, align 8
  %92 = getelementptr inbounds %src.Window, %src.Window* %91, i32 0, i32 24
  %93 = load %src.Render_Target*, %src.Render_Target** %92, align 8
  store %src.Render_Target* %93, %src.Render_Target** %19, align 8
  %94 = load %src.Render_Target*, %src.Render_Target** %19, align 8
  %95 = load %src.Element*, %src.Element** %4, align 8
  %96 = getelementptr inbounds %src.Element, %src.Element* %95, i32 0, i32 5
  %97 = load %src.Rect, %src.Rect* %96, align 4
  %98 = load [4 x i8], [4 x i8]* getelementptr inbounds (%src.Theme, %src.Theme* @src.theme, i64 0, i32 0, i64 0), align 1
  %99 = bitcast { <2 x float>, <2 x float> }* %20 to %src.Rect*
  store %src.Rect %97, %src.Rect* %99, align 4
  %100 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %20, align 8
  %101 = bitcast i64* %21 to [4 x i8]*
  store [4 x i8] %98, [4 x i8]* %101, align 1
  %102 = load i64, i64* %21, align 8
  %103 = bitcast %runtime.Context* %24 to i8*
  call void @src.render_rect(%src.Render_Target* %94, { <2 x float>, <2 x float> } %100, i64 %102, float 0.000000e+00, i8* %103)
  %104 = load %src.Render_Target*, %src.Render_Target** %19, align 8
  %105 = load %src.Element*, %src.Element** %4, align 8
  %106 = getelementptr inbounds %src.Element, %src.Element* %105, i32 0, i32 5
  %107 = load %src.Rect, %src.Rect* %106, align 4
  %108 = load [4 x i8], [4 x i8]* getelementptr inbounds (%src.Theme, %src.Theme* @src.theme, i64 0, i32 2), align 1
  %109 = load float, float* @src.LINE_WIDTH, align 4
  %110 = bitcast { <2 x float>, <2 x float> }* %22 to %src.Rect*
  store %src.Rect %107, %src.Rect* %110, align 4
  %111 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %22, align 8
  %112 = bitcast i64* %23 to [4 x i8]*
  store [4 x i8] %108, [4 x i8]* %112, align 1
  %113 = load i64, i64* %23, align 8
  %114 = bitcast %runtime.Context* %24 to i8*
  call void @src.render_rect_outline(%src.Render_Target* %104, { <2 x float>, <2 x float> } %111, i64 %113, float 0.000000e+00, float %109, i8* %114)
  br label %switch.done

switch.done:                                      ; preds = %switch.case.body3, %switch.case.body2, %entry
  ret i64 0
}

define internal i64 @src.color_picker_hue_message(%src.Element* %0, i64 %1, i64 %2, i8* %3, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %4 = alloca %src.Element*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i8*, align 8
  %8 = alloca %src.Color_Picker_HUE*, align 8
  %9 = alloca %src.Color_Picker_SV*, align 8
  %10 = alloca { i64, i64 }, align 8
  %11 = alloca %src.Render_Target*, align 8
  %12 = alloca { <2 x float>, <2 x float> }, align 8
  %13 = alloca i64, align 8
  %14 = alloca float, align 4
  %15 = alloca %src.Rect, align 8
  %16 = alloca { <2 x float>, <2 x float> }, align 8
  %17 = alloca %src.Rect, align 8
  %18 = alloca [4 x i8], align 8
  %19 = alloca [4 x i8], align 8
  %20 = alloca i64, align 8
  %21 = alloca { <2 x float>, <2 x float> }, align 8
  %22 = alloca i64, align 8
  %23 = alloca i8, align 1
  %24 = alloca float, align 4
  %25 = alloca { <2 x float>, <2 x float> }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Element* %0, %src.Element** %4, align 8
  store i64 %1, i64* %5, align 8
  store i64 %2, i64* %6, align 8
  store i8* %3, i8** %7, align 8
  %26 = bitcast i8* %__.context_ptr to %runtime.Context*
  %27 = load %src.Element*, %src.Element** %4, align 8
  %28 = bitcast %src.Element* %27 to %src.Color_Picker_HUE*
  store %src.Color_Picker_HUE* %28, %src.Color_Picker_HUE** %8, align 8
  %29 = load %src.Element*, %src.Element** %4, align 8
  %30 = getelementptr inbounds %src.Element, %src.Element* %29, i32 0, i32 2
  %31 = load %src.Element*, %src.Element** %30, align 8
  %32 = getelementptr inbounds %src.Element, %src.Element* %31, i32 0, i32 3
  %33 = load { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %32, align 8
  %34 = getelementptr inbounds { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %32, i32 0, i32 0
  %35 = load %src.Element**, %src.Element*** %34, align 8
  %36 = getelementptr inbounds { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %32, i32 0, i32 1
  %37 = load i64, i64* %36, align 8
  %38 = bitcast { i64, i64 }* %10 to %..string*
  store %..string { i8* getelementptr inbounds ([58 x i8], [58 x i8]* @"csbs$1a2", i64 0, i64 0), i64 57 }, %..string* %38, align 8
  %39 = load { i64, i64 }, { i64, i64 }* %10, align 8
  call void @runtime.bounds_check_error({ i64, i64 } %39, i32 1990, i32 55, i64 0, i64 %37)
  %40 = getelementptr %src.Element*, %src.Element** %35, i64 0
  %41 = load %src.Element*, %src.Element** %40, align 8
  %42 = bitcast %src.Element* %41 to %src.Color_Picker_SV*
  store %src.Color_Picker_SV* %42, %src.Color_Picker_SV** %9, align 8
  %43 = load i64, i64* %5, align 8
  switch i64 %43, label %switch.done6 [
    i64 2, label %switch.case.body
    i64 24, label %switch.case.body1
    i64 1, label %switch.case.body2
    i64 7, label %switch.case.body5
  ]

switch.case.body:                                 ; preds = %entry
  %44 = load %src.Element*, %src.Element** %4, align 8
  %45 = getelementptr inbounds %src.Element, %src.Element* %44, i32 0, i32 4
  %46 = load %src.Window*, %src.Window** %45, align 8
  %47 = getelementptr inbounds %src.Window, %src.Window* %46, i32 0, i32 24
  %48 = load %src.Render_Target*, %src.Render_Target** %47, align 8
  store %src.Render_Target* %48, %src.Render_Target** %11, align 8
  %49 = load %src.Render_Target*, %src.Render_Target** %11, align 8
  %50 = load %src.Element*, %src.Element** %4, align 8
  %51 = getelementptr inbounds %src.Element, %src.Element* %50, i32 0, i32 5
  %52 = load %src.Rect, %src.Rect* %51, align 4
  %53 = bitcast { <2 x float>, <2 x float> }* %12 to %src.Rect*
  store %src.Rect %52, %src.Rect* %53, align 4
  %54 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %12, align 8
  %55 = bitcast i64* %13 to [4 x i8]*
  store [4 x i8] c"\FF\FF\FF\FF", [4 x i8]* %55, align 1
  %56 = load i64, i64* %13, align 8
  %57 = bitcast %runtime.Context* %26 to i8*
  call void @src.render_texture(%src.Render_Target* %49, i64 2, { <2 x float>, <2 x float> } %54, i64 %56, i8* %57)
  %58 = load float, float* @src.SCALE, align 4
  %59 = fmul float 1.000000e+01, %58
  %60 = call float @math.round_f32(float %59)
  store float %60, float* %14, align 4
  %61 = load %src.Element*, %src.Element** %4, align 8
  %62 = getelementptr inbounds %src.Element, %src.Element* %61, i32 0, i32 5
  %63 = load %src.Rect, %src.Rect* %62, align 4
  store %src.Rect %63, %src.Rect* %15, align 4
  %64 = getelementptr inbounds %src.Rect, %src.Rect* %15, i32 0, i32 2
  %65 = load %src.Color_Picker_HUE*, %src.Color_Picker_HUE** %8, align 8
  %66 = getelementptr inbounds %src.Color_Picker_HUE, %src.Color_Picker_HUE* %65, i32 0, i32 1
  %67 = load float, float* %66, align 4
  %68 = load %src.Element*, %src.Element** %4, align 8
  %69 = getelementptr inbounds %src.Element, %src.Element* %68, i32 0, i32 5
  %70 = load %src.Rect, %src.Rect* %69, align 4
  %71 = bitcast { <2 x float>, <2 x float> }* %16 to %src.Rect*
  store %src.Rect %70, %src.Rect* %71, align 4
  %72 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %16, align 8
  %73 = bitcast %runtime.Context* %26 to i8*
  %74 = call float @src.rect_height({ <2 x float>, <2 x float> } %72, i8* %73)
  %75 = fmul float %67, %74
  %76 = load float, float* %14, align 4
  %77 = fdiv float %76, 2.000000e+00
  %78 = fsub float %75, %77
  %79 = load float, float* %64, align 4
  %80 = fadd float %79, %78
  store float %80, float* %64, align 4
  %81 = getelementptr inbounds %src.Rect, %src.Rect* %15, i32 0, i32 3
  %82 = getelementptr inbounds %src.Rect, %src.Rect* %15, i32 0, i32 2
  %83 = load float, float* %82, align 4
  %84 = load float, float* %14, align 4
  %85 = fadd float %83, %84
  store float %85, float* %81, align 4
  %86 = load %src.Rect, %src.Rect* %15, align 4
  %87 = load %src.Color_Picker_HUE*, %src.Color_Picker_HUE** %8, align 8
  %88 = getelementptr inbounds %src.Color_Picker_HUE, %src.Color_Picker_HUE* %87, i32 0, i32 4
  %89 = load float, float* %88, align 4
  %90 = fneg float %89
  %91 = fmul float %90, 5.000000e+00
  %92 = call float @math.round_f32(float %91)
  %93 = bitcast %src.Rect* %15 to { <2 x float>, <2 x float> }*
  %94 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %93, align 8
  %95 = bitcast %runtime.Context* %26 to i8*
  %96 = call { <2 x float>, <2 x float> } @src.rect_margin({ <2 x float>, <2 x float> } %94, float %92, i8* %95)
  %97 = bitcast %src.Rect* %17 to { <2 x float>, <2 x float> }*
  store { <2 x float>, <2 x float> } %96, { <2 x float>, <2 x float> }* %97, align 8
  %98 = load %src.Rect, %src.Rect* %17, align 4
  store %src.Rect %98, %src.Rect* %15, align 4
  %99 = load %src.Color_Picker_HUE*, %src.Color_Picker_HUE** %8, align 8
  %100 = getelementptr inbounds %src.Color_Picker_HUE, %src.Color_Picker_HUE* %99, i32 0, i32 1
  %101 = load float, float* %100, align 4
  %102 = bitcast %runtime.Context* %26 to i8*
  %103 = call i64 @src.color_hsv_to_rgb(float %101, float 1.000000e+00, float 1.000000e+00, i8* %102)
  %104 = bitcast [4 x i8]* %19 to i64*
  store i64 %103, i64* %104, align 8
  %105 = load [4 x i8], [4 x i8]* %19, align 1
  store [4 x i8] %105, [4 x i8]* %18, align 1
  %106 = load %src.Render_Target*, %src.Render_Target** %11, align 8
  %107 = load %src.Rect, %src.Rect* %15, align 4
  %108 = load [4 x i8], [4 x i8]* %18, align 1
  %109 = bitcast %src.Rect* %15 to { <2 x float>, <2 x float> }*
  %110 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %109, align 8
  %111 = bitcast [4 x i8]* %18 to i64*
  %112 = load i64, i64* %111, align 8
  %113 = bitcast %runtime.Context* %26 to i8*
  call void @src.render_rect(%src.Render_Target* %106, { <2 x float>, <2 x float> } %110, i64 %112, float 0.000000e+00, i8* %113)
  %114 = load %src.Render_Target*, %src.Render_Target** %11, align 8
  %115 = load %src.Rect, %src.Rect* %15, align 4
  %116 = load [4 x i8], [4 x i8]* getelementptr inbounds (%src.Theme, %src.Theme* @src.theme, i64 0, i32 2), align 1
  %117 = load float, float* @src.LINE_WIDTH, align 4
  %118 = bitcast %src.Rect* %15 to { <2 x float>, <2 x float> }*
  %119 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %118, align 8
  %120 = bitcast i64* %20 to [4 x i8]*
  store [4 x i8] %116, [4 x i8]* %120, align 1
  %121 = load i64, i64* %20, align 8
  %122 = bitcast %runtime.Context* %26 to i8*
  call void @src.render_rect_outline(%src.Render_Target* %114, { <2 x float>, <2 x float> } %119, i64 %121, float 0.000000e+00, float %117, i8* %122)
  br label %defer

defer:                                            ; preds = %switch.case.body
  %123 = load %src.Render_Target*, %src.Render_Target** %11, align 8
  %124 = load %src.Element*, %src.Element** %4, align 8
  %125 = getelementptr inbounds %src.Element, %src.Element* %124, i32 0, i32 5
  %126 = load %src.Rect, %src.Rect* %125, align 4
  %127 = load [4 x i8], [4 x i8]* getelementptr inbounds (%src.Theme, %src.Theme* @src.theme, i64 0, i32 2), align 1
  %128 = load float, float* @src.LINE_WIDTH, align 4
  %129 = bitcast { <2 x float>, <2 x float> }* %21 to %src.Rect*
  store %src.Rect %126, %src.Rect* %129, align 4
  %130 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %21, align 8
  %131 = bitcast i64* %22 to [4 x i8]*
  store [4 x i8] %127, [4 x i8]* %131, align 1
  %132 = load i64, i64* %22, align 8
  %133 = bitcast %runtime.Context* %26 to i8*
  call void @src.render_rect_outline(%src.Render_Target* %123, { <2 x float>, <2 x float> } %130, i64 %132, float 0.000000e+00, float %128, i8* %133)
  br label %switch.done6

switch.case.body1:                                ; preds = %entry
  ret i64 3

switch.case.body2:                                ; preds = %entry
  %134 = load i64, i64* %6, align 8
  switch i64 %134, label %switch.done [
    i64 3, label %switch.case.body3
    i64 4, label %switch.case.body4
  ]

switch.case.body3:                                ; preds = %switch.case.body2
  %135 = load %src.Color_Picker_HUE*, %src.Color_Picker_HUE** %8, align 8
  %136 = getelementptr inbounds %src.Color_Picker_HUE, %src.Color_Picker_HUE* %135, i32 0, i32 2
  store i8 1, i8* %136, align 1
  %137 = load %src.Color_Picker_HUE*, %src.Color_Picker_HUE** %8, align 8
  %138 = getelementptr inbounds %src.Color_Picker_HUE, %src.Color_Picker_HUE* %137, i32 0, i32 5
  store float 1.000000e+00, float* %138, align 4
  %139 = load %src.Element*, %src.Element** %4, align 8
  %140 = bitcast %runtime.Context* %26 to i8*
  call void @src.element_animation_start(%src.Element* %139, i8* %140)
  br label %switch.done

switch.case.body4:                                ; preds = %switch.case.body2
  %141 = load %src.Color_Picker_HUE*, %src.Color_Picker_HUE** %8, align 8
  %142 = getelementptr inbounds %src.Color_Picker_HUE, %src.Color_Picker_HUE* %141, i32 0, i32 2
  store i8 1, i8* %142, align 1
  %143 = load %src.Color_Picker_HUE*, %src.Color_Picker_HUE** %8, align 8
  %144 = getelementptr inbounds %src.Color_Picker_HUE, %src.Color_Picker_HUE* %143, i32 0, i32 5
  store float 0.000000e+00, float* %144, align 4
  %145 = load %src.Element*, %src.Element** %4, align 8
  %146 = bitcast %runtime.Context* %26 to i8*
  call void @src.element_animation_start(%src.Element* %145, i8* %146)
  br label %switch.done

switch.done:                                      ; preds = %switch.case.body4, %switch.case.body3, %switch.case.body2
  br label %switch.done6

switch.case.body5:                                ; preds = %entry
  store i8 0, i8* %23, align 1
  %147 = load %src.Color_Picker_HUE*, %src.Color_Picker_HUE** %8, align 8
  %148 = getelementptr inbounds %src.Color_Picker_HUE, %src.Color_Picker_HUE* %147, i32 0, i32 2
  %149 = load %src.Color_Picker_HUE*, %src.Color_Picker_HUE** %8, align 8
  %150 = getelementptr inbounds %src.Color_Picker_HUE, %src.Color_Picker_HUE* %149, i32 0, i32 4
  %151 = load %src.Color_Picker_HUE*, %src.Color_Picker_HUE** %8, align 8
  %152 = getelementptr inbounds %src.Color_Picker_HUE, %src.Color_Picker_HUE* %151, i32 0, i32 5
  %153 = load float, float* %152, align 4
  %154 = bitcast %runtime.Context* %26 to i8*
  %155 = call i8 @src.animate_to(i8* %148, float* %150, float %153, float 1.000000e+00, float 0x3F50624DE0000000, i8* %154)
  %156 = load i8, i8* %23, align 1
  %157 = or i8 %156, %155
  store i8 %157, i8* %23, align 1
  %158 = load i8, i8* %23, align 1
  %159 = icmp ne i8 %158, 0
  %160 = zext i1 %159 to i64
  ret i64 %160

switch.done6:                                     ; preds = %switch.done, %defer, %entry
  %161 = load i64, i64* %5, align 8
  %162 = icmp eq i64 %161, 16
  %163 = zext i1 %162 to i8
  %164 = trunc i8 %163 to i1
  br i1 %164, label %if.then, label %cmp.or

cmp.or:                                           ; preds = %switch.done6
  %165 = load i64, i64* %5, align 8
  %166 = icmp eq i64 %165, 15
  %167 = zext i1 %166 to i8
  %168 = trunc i8 %167 to i1
  br i1 %168, label %cmp.and, label %if.done

cmp.and:                                          ; preds = %cmp.or
  %169 = load %src.Element*, %src.Element** %4, align 8
  %170 = getelementptr inbounds %src.Element, %src.Element* %169, i32 0, i32 4
  %171 = load %src.Window*, %src.Window** %170, align 8
  %172 = getelementptr inbounds %src.Window, %src.Window* %171, i32 0, i32 17
  %173 = load i64, i64* %172, align 8
  %174 = icmp eq i64 %173, 1
  %175 = zext i1 %174 to i8
  %176 = trunc i8 %175 to i1
  br i1 %176, label %if.then, label %if.done

if.then:                                          ; preds = %cmp.and, %switch.done6
  %177 = load %src.Element*, %src.Element** %4, align 8
  %178 = getelementptr inbounds %src.Element, %src.Element* %177, i32 0, i32 4
  %179 = load %src.Window*, %src.Window** %178, align 8
  %180 = getelementptr inbounds %src.Window, %src.Window* %179, i32 0, i32 13
  %181 = load float, float* %180, align 4
  %182 = load %src.Element*, %src.Element** %4, align 8
  %183 = getelementptr inbounds %src.Element, %src.Element* %182, i32 0, i32 5
  %184 = getelementptr inbounds %src.Rect, %src.Rect* %183, i32 0, i32 2
  %185 = load float, float* %184, align 4
  %186 = fsub float %181, %185
  store float %186, float* %24, align 4
  %187 = load %src.Color_Picker_HUE*, %src.Color_Picker_HUE** %8, align 8
  %188 = getelementptr inbounds %src.Color_Picker_HUE, %src.Color_Picker_HUE* %187, i32 0, i32 1
  %189 = load float, float* %24, align 4
  %190 = load %src.Element*, %src.Element** %4, align 8
  %191 = getelementptr inbounds %src.Element, %src.Element* %190, i32 0, i32 5
  %192 = load %src.Rect, %src.Rect* %191, align 4
  %193 = bitcast { <2 x float>, <2 x float> }* %25 to %src.Rect*
  store %src.Rect %192, %src.Rect* %193, align 4
  %194 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %25, align 8
  %195 = bitcast %runtime.Context* %26 to i8*
  %196 = call float @src.rect_height({ <2 x float>, <2 x float> } %194, i8* %195)
  %197 = fdiv float %189, %196
  %198 = fcmp ogt float %197, 0.000000e+00
  %199 = select i1 %198, float %197, float 0.000000e+00
  %200 = fcmp olt float %199, 1.000000e+00
  %201 = select i1 %200, float %199, float 1.000000e+00
  store float %201, float* %188, align 4
  %202 = load %src.Color_Picker_SV*, %src.Color_Picker_SV** %9, align 8
  %203 = getelementptr inbounds %src.Color_Picker_SV, %src.Color_Picker_SV* %202, i32 0, i32 0
  %204 = bitcast %runtime.Context* %26 to i8*
  %205 = call i64 @src.element_message(%src.Element* %203, i64 30, i64 0, i8* null, i8* %204)
  %206 = load %src.Element*, %src.Element** %4, align 8
  %207 = bitcast %runtime.Context* %26 to i8*
  call void @src.element_repaint(%src.Element* %206, i8* %207)
  br label %if.done

if.done:                                          ; preds = %if.then, %cmp.and, %cmp.or
  ret i64 0
}

define internal i64 @src.color_picker_sv_message(%src.Element* %0, i64 %1, i64 %2, i8* %3, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %4 = alloca %src.Element*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i8*, align 8
  %8 = alloca %src.Color_Picker_SV*, align 8
  %9 = alloca %src.Color_Picker_HUE*, align 8
  %10 = alloca { i64, i64 }, align 8
  %11 = alloca float, align 4
  %12 = alloca %src.Render_Target*, align 8
  %13 = alloca [4 x i8], align 8
  %14 = alloca [4 x i8], align 8
  %15 = alloca { <2 x float>, <2 x float> }, align 8
  %16 = alloca %src.Rect, align 8
  %17 = alloca { <2 x float>, <2 x float> }, align 8
  %18 = alloca { <2 x float>, <2 x float> }, align 8
  %19 = alloca %src.Rect, align 8
  %20 = alloca %src.Rect, align 8
  %21 = alloca i64, align 8
  %22 = alloca [4 x i8], align 8
  %23 = alloca i64, align 8
  %24 = alloca { <2 x float>, <2 x float> }, align 8
  %25 = alloca i64, align 8
  %26 = alloca %src.Color_Picker*, align 8
  %27 = alloca [4 x i8], align 8
  %28 = alloca i8, align 1
  %29 = alloca float, align 4
  %30 = alloca float, align 4
  %31 = alloca { <2 x float>, <2 x float> }, align 8
  %32 = alloca { <2 x float>, <2 x float> }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Element* %0, %src.Element** %4, align 8
  store i64 %1, i64* %5, align 8
  store i64 %2, i64* %6, align 8
  store i8* %3, i8** %7, align 8
  %33 = bitcast i8* %__.context_ptr to %runtime.Context*
  %34 = load %src.Element*, %src.Element** %4, align 8
  %35 = bitcast %src.Element* %34 to %src.Color_Picker_SV*
  store %src.Color_Picker_SV* %35, %src.Color_Picker_SV** %8, align 8
  %36 = load %src.Element*, %src.Element** %4, align 8
  %37 = getelementptr inbounds %src.Element, %src.Element* %36, i32 0, i32 2
  %38 = load %src.Element*, %src.Element** %37, align 8
  %39 = getelementptr inbounds %src.Element, %src.Element* %38, i32 0, i32 3
  %40 = load { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %39, align 8
  %41 = getelementptr inbounds { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %39, i32 0, i32 0
  %42 = load %src.Element**, %src.Element*** %41, align 8
  %43 = getelementptr inbounds { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %39, i32 0, i32 1
  %44 = load i64, i64* %43, align 8
  %45 = bitcast { i64, i64 }* %10 to %..string*
  store %..string { i8* getelementptr inbounds ([58 x i8], [58 x i8]* @"csbs$1a2", i64 0, i64 0), i64 57 }, %..string* %45, align 8
  %46 = load { i64, i64 }, { i64, i64 }* %10, align 8
  call void @runtime.bounds_check_error({ i64, i64 } %46, i32 2056, i32 57, i64 1, i64 %44)
  %47 = getelementptr %src.Element*, %src.Element** %42, i64 1
  %48 = load %src.Element*, %src.Element** %47, align 8
  %49 = bitcast %src.Element* %48 to %src.Color_Picker_HUE*
  store %src.Color_Picker_HUE* %49, %src.Color_Picker_HUE** %9, align 8
  %50 = load float, float* @src.SCALE, align 4
  %51 = fmul float 1.000000e+01, %50
  %52 = call float @math.round_f32(float %51)
  store float %52, float* %11, align 4
  %53 = load i64, i64* %5, align 8
  switch i64 %53, label %switch.done7 [
    i64 2, label %switch.case.body
    i64 24, label %switch.case.body1
    i64 30, label %switch.case.body2
    i64 1, label %switch.case.body3
    i64 7, label %switch.case.body6
  ]

switch.case.body:                                 ; preds = %entry
  %54 = load %src.Element*, %src.Element** %4, align 8
  %55 = getelementptr inbounds %src.Element, %src.Element* %54, i32 0, i32 4
  %56 = load %src.Window*, %src.Window** %55, align 8
  %57 = getelementptr inbounds %src.Window, %src.Window* %56, i32 0, i32 24
  %58 = load %src.Render_Target*, %src.Render_Target** %57, align 8
  store %src.Render_Target* %58, %src.Render_Target** %12, align 8
  %59 = load %src.Color_Picker_HUE*, %src.Color_Picker_HUE** %9, align 8
  %60 = getelementptr inbounds %src.Color_Picker_HUE, %src.Color_Picker_HUE* %59, i32 0, i32 1
  %61 = load float, float* %60, align 4
  %62 = bitcast %runtime.Context* %33 to i8*
  %63 = call i64 @src.color_hsv_to_rgb(float %61, float 1.000000e+00, float 1.000000e+00, i8* %62)
  %64 = bitcast [4 x i8]* %14 to i64*
  store i64 %63, i64* %64, align 8
  %65 = load [4 x i8], [4 x i8]* %14, align 1
  store [4 x i8] %65, [4 x i8]* %13, align 1
  %66 = load %src.Render_Target*, %src.Render_Target** %12, align 8
  %67 = load %src.Element*, %src.Element** %4, align 8
  %68 = getelementptr inbounds %src.Element, %src.Element* %67, i32 0, i32 5
  %69 = load %src.Rect, %src.Rect* %68, align 4
  %70 = load [4 x i8], [4 x i8]* %13, align 1
  %71 = bitcast { <2 x float>, <2 x float> }* %15 to %src.Rect*
  store %src.Rect %69, %src.Rect* %71, align 4
  %72 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %15, align 8
  %73 = bitcast [4 x i8]* %13 to i64*
  %74 = load i64, i64* %73, align 8
  %75 = bitcast %runtime.Context* %33 to i8*
  call void @src.render_texture(%src.Render_Target* %66, i64 1, { <2 x float>, <2 x float> } %72, i64 %74, i8* %75)
  %76 = load %src.Element*, %src.Element** %4, align 8
  %77 = getelementptr inbounds %src.Element, %src.Element* %76, i32 0, i32 5
  %78 = getelementptr inbounds %src.Rect, %src.Rect* %77, i32 0, i32 0
  %79 = load float, float* %78, align 4
  %80 = load %src.Color_Picker_SV*, %src.Color_Picker_SV** %8, align 8
  %81 = getelementptr inbounds %src.Color_Picker_SV, %src.Color_Picker_SV* %80, i32 0, i32 1
  %82 = load float, float* %81, align 4
  %83 = load %src.Element*, %src.Element** %4, align 8
  %84 = getelementptr inbounds %src.Element, %src.Element* %83, i32 0, i32 5
  %85 = load %src.Rect, %src.Rect* %84, align 4
  %86 = bitcast { <2 x float>, <2 x float> }* %17 to %src.Rect*
  store %src.Rect %85, %src.Rect* %86, align 4
  %87 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %17, align 8
  %88 = bitcast %runtime.Context* %33 to i8*
  %89 = call float @src.rect_width({ <2 x float>, <2 x float> } %87, i8* %88)
  %90 = fmul float %82, %89
  %91 = fadd float %79, %90
  %92 = load float, float* %11, align 4
  %93 = fdiv float %92, 2.000000e+00
  %94 = fsub float %91, %93
  %95 = load %src.Element*, %src.Element** %4, align 8
  %96 = getelementptr inbounds %src.Element, %src.Element* %95, i32 0, i32 5
  %97 = getelementptr inbounds %src.Rect, %src.Rect* %96, i32 0, i32 2
  %98 = load float, float* %97, align 4
  %99 = load %src.Color_Picker_SV*, %src.Color_Picker_SV** %8, align 8
  %100 = getelementptr inbounds %src.Color_Picker_SV, %src.Color_Picker_SV* %99, i32 0, i32 2
  %101 = load float, float* %100, align 4
  %102 = load %src.Element*, %src.Element** %4, align 8
  %103 = getelementptr inbounds %src.Element, %src.Element* %102, i32 0, i32 5
  %104 = load %src.Rect, %src.Rect* %103, align 4
  %105 = bitcast { <2 x float>, <2 x float> }* %18 to %src.Rect*
  store %src.Rect %104, %src.Rect* %105, align 4
  %106 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %18, align 8
  %107 = bitcast %runtime.Context* %33 to i8*
  %108 = call float @src.rect_height({ <2 x float>, <2 x float> } %106, i8* %107)
  %109 = fmul float %101, %108
  %110 = fadd float %98, %109
  %111 = load float, float* %11, align 4
  %112 = fdiv float %111, 2.000000e+00
  %113 = fsub float %110, %112
  %114 = load float, float* %11, align 4
  %115 = load float, float* %11, align 4
  %116 = bitcast %runtime.Context* %33 to i8*
  %117 = call { <2 x float>, <2 x float> } @src.rect_wh(float %94, float %113, float %114, float %115, i8* %116)
  %118 = bitcast %src.Rect* %19 to { <2 x float>, <2 x float> }*
  store { <2 x float>, <2 x float> } %117, { <2 x float>, <2 x float> }* %118, align 8
  %119 = load %src.Rect, %src.Rect* %19, align 4
  store %src.Rect %119, %src.Rect* %16, align 4
  %120 = load %src.Rect, %src.Rect* %16, align 4
  %121 = load %src.Color_Picker_SV*, %src.Color_Picker_SV** %8, align 8
  %122 = getelementptr inbounds %src.Color_Picker_SV, %src.Color_Picker_SV* %121, i32 0, i32 6
  %123 = load float, float* %122, align 4
  %124 = fneg float %123
  %125 = fmul float %124, 5.000000e+00
  %126 = call float @math.round_f32(float %125)
  %127 = bitcast %src.Rect* %16 to { <2 x float>, <2 x float> }*
  %128 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %127, align 8
  %129 = bitcast %runtime.Context* %33 to i8*
  %130 = call { <2 x float>, <2 x float> } @src.rect_margin({ <2 x float>, <2 x float> } %128, float %126, i8* %129)
  %131 = bitcast %src.Rect* %20 to { <2 x float>, <2 x float> }*
  store { <2 x float>, <2 x float> } %130, { <2 x float>, <2 x float> }* %131, align 8
  %132 = load %src.Rect, %src.Rect* %20, align 4
  store %src.Rect %132, %src.Rect* %16, align 4
  %133 = load %src.Color_Picker_SV*, %src.Color_Picker_SV** %8, align 8
  %134 = getelementptr inbounds %src.Color_Picker_SV, %src.Color_Picker_SV* %133, i32 0, i32 3
  %135 = load [4 x i8], [4 x i8]* %134, align 1
  %136 = bitcast i64* %21 to [4 x i8]*
  store [4 x i8] %135, [4 x i8]* %136, align 1
  %137 = load i64, i64* %21, align 8
  %138 = bitcast %runtime.Context* %33 to i8*
  %139 = call i64 @src.color_to_bw(i64 %137, i8* %138)
  %140 = bitcast [4 x i8]* %22 to i64*
  store i64 %139, i64* %140, align 8
  %141 = load [4 x i8], [4 x i8]* %22, align 1
  store [4 x i8] %141, [4 x i8]* %13, align 1
  %142 = load %src.Render_Target*, %src.Render_Target** %12, align 8
  %143 = load %src.Rect, %src.Rect* %16, align 4
  %144 = load %src.Color_Picker_SV*, %src.Color_Picker_SV** %8, align 8
  %145 = getelementptr inbounds %src.Color_Picker_SV, %src.Color_Picker_SV* %144, i32 0, i32 3
  %146 = load [4 x i8], [4 x i8]* %145, align 1
  %147 = bitcast %src.Rect* %16 to { <2 x float>, <2 x float> }*
  %148 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %147, align 8
  %149 = bitcast i64* %23 to [4 x i8]*
  store [4 x i8] %146, [4 x i8]* %149, align 1
  %150 = load i64, i64* %23, align 8
  %151 = bitcast %runtime.Context* %33 to i8*
  call void @src.render_rect(%src.Render_Target* %142, { <2 x float>, <2 x float> } %148, i64 %150, float 0.000000e+00, i8* %151)
  %152 = load %src.Render_Target*, %src.Render_Target** %12, align 8
  %153 = load %src.Rect, %src.Rect* %16, align 4
  %154 = load [4 x i8], [4 x i8]* %13, align 1
  %155 = load float, float* @src.LINE_WIDTH, align 4
  %156 = bitcast %src.Rect* %16 to { <2 x float>, <2 x float> }*
  %157 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %156, align 8
  %158 = bitcast [4 x i8]* %13 to i64*
  %159 = load i64, i64* %158, align 8
  %160 = bitcast %runtime.Context* %33 to i8*
  call void @src.render_rect_outline(%src.Render_Target* %152, { <2 x float>, <2 x float> } %157, i64 %159, float 0.000000e+00, float %155, i8* %160)
  br label %defer

defer:                                            ; preds = %switch.case.body
  %161 = load %src.Render_Target*, %src.Render_Target** %12, align 8
  %162 = load %src.Element*, %src.Element** %4, align 8
  %163 = getelementptr inbounds %src.Element, %src.Element* %162, i32 0, i32 5
  %164 = load %src.Rect, %src.Rect* %163, align 4
  %165 = load [4 x i8], [4 x i8]* getelementptr inbounds (%src.Theme, %src.Theme* @src.theme, i64 0, i32 2), align 1
  %166 = load float, float* @src.LINE_WIDTH, align 4
  %167 = bitcast { <2 x float>, <2 x float> }* %24 to %src.Rect*
  store %src.Rect %164, %src.Rect* %167, align 4
  %168 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %24, align 8
  %169 = bitcast i64* %25 to [4 x i8]*
  store [4 x i8] %165, [4 x i8]* %169, align 1
  %170 = load i64, i64* %25, align 8
  %171 = bitcast %runtime.Context* %33 to i8*
  call void @src.render_rect_outline(%src.Render_Target* %161, { <2 x float>, <2 x float> } %168, i64 %170, float 0.000000e+00, float %166, i8* %171)
  br label %switch.done7

switch.case.body1:                                ; preds = %entry
  ret i64 5

switch.case.body2:                                ; preds = %entry
  %172 = load %src.Color_Picker_SV*, %src.Color_Picker_SV** %8, align 8
  %173 = getelementptr inbounds %src.Color_Picker_SV, %src.Color_Picker_SV* %172, i32 0, i32 0
  %174 = getelementptr inbounds %src.Element, %src.Element* %173, i32 0, i32 2
  %175 = load %src.Element*, %src.Element** %174, align 8
  %176 = bitcast %src.Element* %175 to %src.Color_Picker*
  store %src.Color_Picker* %176, %src.Color_Picker** %26, align 8
  %177 = load %src.Color_Picker_SV*, %src.Color_Picker_SV** %8, align 8
  %178 = getelementptr inbounds %src.Color_Picker_SV, %src.Color_Picker_SV* %177, i32 0, i32 3
  %179 = load %src.Color_Picker_HUE*, %src.Color_Picker_HUE** %9, align 8
  %180 = getelementptr inbounds %src.Color_Picker_HUE, %src.Color_Picker_HUE* %179, i32 0, i32 1
  %181 = load float, float* %180, align 4
  %182 = load %src.Color_Picker_SV*, %src.Color_Picker_SV** %8, align 8
  %183 = getelementptr inbounds %src.Color_Picker_SV, %src.Color_Picker_SV* %182, i32 0, i32 1
  %184 = load float, float* %183, align 4
  %185 = load %src.Color_Picker_SV*, %src.Color_Picker_SV** %8, align 8
  %186 = getelementptr inbounds %src.Color_Picker_SV, %src.Color_Picker_SV* %185, i32 0, i32 2
  %187 = load float, float* %186, align 4
  %188 = fsub float 1.000000e+00, %187
  %189 = bitcast %runtime.Context* %33 to i8*
  %190 = call i64 @src.color_hsv_to_rgb(float %181, float %184, float %188, i8* %189)
  %191 = bitcast [4 x i8]* %27 to i64*
  store i64 %190, i64* %191, align 8
  %192 = load [4 x i8], [4 x i8]* %27, align 1
  store [4 x i8] %192, [4 x i8]* %178, align 1
  %193 = load %src.Color_Picker*, %src.Color_Picker** %26, align 8
  %194 = getelementptr inbounds %src.Color_Picker, %src.Color_Picker* %193, i32 0, i32 3
  %195 = load [4 x i8]*, [4 x i8]** %194, align 8
  %196 = icmp ne [4 x i8]* %195, null
  %197 = zext i1 %196 to i8
  %198 = trunc i8 %197 to i1
  br i1 %198, label %if.then, label %if.done

if.then:                                          ; preds = %switch.case.body2
  %199 = load %src.Color_Picker*, %src.Color_Picker** %26, align 8
  %200 = getelementptr inbounds %src.Color_Picker, %src.Color_Picker* %199, i32 0, i32 3
  %201 = load [4 x i8]*, [4 x i8]** %200, align 8
  %202 = load %src.Color_Picker_SV*, %src.Color_Picker_SV** %8, align 8
  %203 = getelementptr inbounds %src.Color_Picker_SV, %src.Color_Picker_SV* %202, i32 0, i32 3
  %204 = load [4 x i8], [4 x i8]* %203, align 1
  store [4 x i8] %204, [4 x i8]* %201, align 1
  br label %if.done

if.done:                                          ; preds = %if.then, %switch.case.body2
  br label %switch.done7

switch.case.body3:                                ; preds = %entry
  %205 = load i64, i64* %6, align 8
  switch i64 %205, label %switch.done [
    i64 3, label %switch.case.body4
    i64 4, label %switch.case.body5
  ]

switch.case.body4:                                ; preds = %switch.case.body3
  %206 = load %src.Color_Picker_SV*, %src.Color_Picker_SV** %8, align 8
  %207 = getelementptr inbounds %src.Color_Picker_SV, %src.Color_Picker_SV* %206, i32 0, i32 4
  store i8 1, i8* %207, align 1
  %208 = load %src.Color_Picker_SV*, %src.Color_Picker_SV** %8, align 8
  %209 = getelementptr inbounds %src.Color_Picker_SV, %src.Color_Picker_SV* %208, i32 0, i32 7
  store float 1.000000e+00, float* %209, align 4
  %210 = load %src.Element*, %src.Element** %4, align 8
  %211 = bitcast %runtime.Context* %33 to i8*
  call void @src.element_animation_start(%src.Element* %210, i8* %211)
  br label %switch.done

switch.case.body5:                                ; preds = %switch.case.body3
  %212 = load %src.Color_Picker_SV*, %src.Color_Picker_SV** %8, align 8
  %213 = getelementptr inbounds %src.Color_Picker_SV, %src.Color_Picker_SV* %212, i32 0, i32 4
  store i8 1, i8* %213, align 1
  %214 = load %src.Color_Picker_SV*, %src.Color_Picker_SV** %8, align 8
  %215 = getelementptr inbounds %src.Color_Picker_SV, %src.Color_Picker_SV* %214, i32 0, i32 7
  store float 0.000000e+00, float* %215, align 4
  %216 = load %src.Element*, %src.Element** %4, align 8
  %217 = bitcast %runtime.Context* %33 to i8*
  call void @src.element_animation_start(%src.Element* %216, i8* %217)
  br label %switch.done

switch.done:                                      ; preds = %switch.case.body5, %switch.case.body4, %switch.case.body3
  br label %switch.done7

switch.case.body6:                                ; preds = %entry
  store i8 0, i8* %28, align 1
  %218 = load %src.Color_Picker_SV*, %src.Color_Picker_SV** %8, align 8
  %219 = getelementptr inbounds %src.Color_Picker_SV, %src.Color_Picker_SV* %218, i32 0, i32 4
  %220 = load %src.Color_Picker_SV*, %src.Color_Picker_SV** %8, align 8
  %221 = getelementptr inbounds %src.Color_Picker_SV, %src.Color_Picker_SV* %220, i32 0, i32 6
  %222 = load %src.Color_Picker_SV*, %src.Color_Picker_SV** %8, align 8
  %223 = getelementptr inbounds %src.Color_Picker_SV, %src.Color_Picker_SV* %222, i32 0, i32 7
  %224 = load float, float* %223, align 4
  %225 = bitcast %runtime.Context* %33 to i8*
  %226 = call i8 @src.animate_to(i8* %219, float* %221, float %224, float 1.000000e+00, float 0x3F50624DE0000000, i8* %225)
  %227 = load i8, i8* %28, align 1
  %228 = or i8 %227, %226
  store i8 %228, i8* %28, align 1
  %229 = load i8, i8* %28, align 1
  %230 = icmp ne i8 %229, 0
  %231 = zext i1 %230 to i64
  ret i64 %231

switch.done7:                                     ; preds = %switch.done, %if.done, %defer, %entry
  %232 = load i64, i64* %5, align 8
  %233 = icmp eq i64 %232, 16
  %234 = zext i1 %233 to i8
  %235 = trunc i8 %234 to i1
  br i1 %235, label %if.then8, label %cmp.or

cmp.or:                                           ; preds = %switch.done7
  %236 = load i64, i64* %5, align 8
  %237 = icmp eq i64 %236, 15
  %238 = zext i1 %237 to i8
  %239 = trunc i8 %238 to i1
  br i1 %239, label %cmp.and, label %if.done9

cmp.and:                                          ; preds = %cmp.or
  %240 = load %src.Element*, %src.Element** %4, align 8
  %241 = getelementptr inbounds %src.Element, %src.Element* %240, i32 0, i32 4
  %242 = load %src.Window*, %src.Window** %241, align 8
  %243 = getelementptr inbounds %src.Window, %src.Window* %242, i32 0, i32 17
  %244 = load i64, i64* %243, align 8
  %245 = icmp eq i64 %244, 1
  %246 = zext i1 %245 to i8
  %247 = trunc i8 %246 to i1
  br i1 %247, label %if.then8, label %if.done9

if.then8:                                         ; preds = %cmp.and, %switch.done7
  %248 = load %src.Element*, %src.Element** %4, align 8
  %249 = getelementptr inbounds %src.Element, %src.Element* %248, i32 0, i32 4
  %250 = load %src.Window*, %src.Window** %249, align 8
  %251 = getelementptr inbounds %src.Window, %src.Window* %250, i32 0, i32 12
  %252 = load float, float* %251, align 4
  %253 = load %src.Element*, %src.Element** %4, align 8
  %254 = getelementptr inbounds %src.Element, %src.Element* %253, i32 0, i32 5
  %255 = getelementptr inbounds %src.Rect, %src.Rect* %254, i32 0, i32 0
  %256 = load float, float* %255, align 4
  %257 = fsub float %252, %256
  store float %257, float* %29, align 4
  %258 = load %src.Element*, %src.Element** %4, align 8
  %259 = getelementptr inbounds %src.Element, %src.Element* %258, i32 0, i32 4
  %260 = load %src.Window*, %src.Window** %259, align 8
  %261 = getelementptr inbounds %src.Window, %src.Window* %260, i32 0, i32 13
  %262 = load float, float* %261, align 4
  %263 = load %src.Element*, %src.Element** %4, align 8
  %264 = getelementptr inbounds %src.Element, %src.Element* %263, i32 0, i32 5
  %265 = getelementptr inbounds %src.Rect, %src.Rect* %264, i32 0, i32 2
  %266 = load float, float* %265, align 4
  %267 = fsub float %262, %266
  store float %267, float* %30, align 4
  %268 = load %src.Color_Picker_SV*, %src.Color_Picker_SV** %8, align 8
  %269 = getelementptr inbounds %src.Color_Picker_SV, %src.Color_Picker_SV* %268, i32 0, i32 1
  %270 = load float, float* %29, align 4
  %271 = load %src.Element*, %src.Element** %4, align 8
  %272 = getelementptr inbounds %src.Element, %src.Element* %271, i32 0, i32 5
  %273 = load %src.Rect, %src.Rect* %272, align 4
  %274 = bitcast { <2 x float>, <2 x float> }* %31 to %src.Rect*
  store %src.Rect %273, %src.Rect* %274, align 4
  %275 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %31, align 8
  %276 = bitcast %runtime.Context* %33 to i8*
  %277 = call float @src.rect_width({ <2 x float>, <2 x float> } %275, i8* %276)
  %278 = fdiv float %270, %277
  %279 = fcmp ogt float %278, 0.000000e+00
  %280 = select i1 %279, float %278, float 0.000000e+00
  %281 = fcmp olt float %280, 1.000000e+00
  %282 = select i1 %281, float %280, float 1.000000e+00
  store float %282, float* %269, align 4
  %283 = load %src.Color_Picker_SV*, %src.Color_Picker_SV** %8, align 8
  %284 = getelementptr inbounds %src.Color_Picker_SV, %src.Color_Picker_SV* %283, i32 0, i32 2
  %285 = load float, float* %30, align 4
  %286 = load %src.Element*, %src.Element** %4, align 8
  %287 = getelementptr inbounds %src.Element, %src.Element* %286, i32 0, i32 5
  %288 = load %src.Rect, %src.Rect* %287, align 4
  %289 = bitcast { <2 x float>, <2 x float> }* %32 to %src.Rect*
  store %src.Rect %288, %src.Rect* %289, align 4
  %290 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %32, align 8
  %291 = bitcast %runtime.Context* %33 to i8*
  %292 = call float @src.rect_height({ <2 x float>, <2 x float> } %290, i8* %291)
  %293 = fdiv float %285, %292
  %294 = fcmp ogt float %293, 0.000000e+00
  %295 = select i1 %294, float %293, float 0.000000e+00
  %296 = fcmp olt float %295, 1.000000e+00
  %297 = select i1 %296, float %295, float 1.000000e+00
  store float %297, float* %284, align 4
  %298 = load %src.Element*, %src.Element** %4, align 8
  %299 = bitcast %runtime.Context* %33 to i8*
  %300 = call i64 @src.element_message(%src.Element* %298, i64 30, i64 0, i8* null, i8* %299)
  %301 = load %src.Element*, %src.Element** %4, align 8
  %302 = bitcast %runtime.Context* %33 to i8*
  call void @src.element_repaint(%src.Element* %301, i8* %302)
  br label %if.done9

if.done9:                                         ; preds = %if.then8, %cmp.and, %cmp.or
  ret i64 0
}

define internal %src.Color_Picker* @src.color_picker_init(%src.Element* %0, i32 %1, float %2, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %3 = alloca %src.Element*, align 8
  %4 = alloca i32, align 4
  %5 = alloca float, align 4
  %6 = alloca %src.Color_Picker*, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Element* %0, %src.Element** %3, align 8
  store i32 %1, i32* %4, align 4
  store float %2, float* %5, align 4
  store %src.Color_Picker* null, %src.Color_Picker** %6, align 8
  %7 = bitcast i8* %__.context_ptr to %runtime.Context*
  %8 = load %src.Element*, %src.Element** %3, align 8
  %9 = load i32, i32* %4, align 4
  %10 = getelementptr inbounds %runtime.Context, %runtime.Context* %7, i32 0, i32 0
  %11 = load %runtime.Allocator, %runtime.Allocator* %10, align 8
  %12 = bitcast %runtime.Allocator* %10 to { i64, i64 }*
  %13 = load { i64, i64 }, { i64, i64 }* %12, align 8
  %14 = bitcast %runtime.Context* %7 to i8*
  %15 = call %src.Color_Picker* @src.element_init-48983(%src.Element* %8, i32 %9, i8* bitcast (i64 (%src.Element*, i64, i64, i8*, i8*)* @src.color_picker_message to i8*), i64 -1, { i64, i64 } %13, i8* %14)
  store %src.Color_Picker* %15, %src.Color_Picker** %6, align 8
  %16 = load %src.Color_Picker*, %src.Color_Picker** %6, align 8
  %17 = getelementptr inbounds %src.Color_Picker, %src.Color_Picker* %16, i32 0, i32 1
  %18 = load %src.Color_Picker*, %src.Color_Picker** %6, align 8
  %19 = load i32, i32* %4, align 4
  %20 = getelementptr inbounds %runtime.Context, %runtime.Context* %7, i32 0, i32 0
  %21 = load %runtime.Allocator, %runtime.Allocator* %20, align 8
  %22 = getelementptr inbounds %src.Color_Picker, %src.Color_Picker* %18, i32 0, i32 0
  %23 = bitcast %runtime.Allocator* %20 to { i64, i64 }*
  %24 = load { i64, i64 }, { i64, i64 }* %23, align 8
  %25 = bitcast %runtime.Context* %7 to i8*
  %26 = call %src.Color_Picker_SV* @src.element_init-48998(%src.Element* %22, i32 %19, i8* bitcast (i64 (%src.Element*, i64, i64, i8*, i8*)* @src.color_picker_sv_message to i8*), i64 -1, { i64, i64 } %24, i8* %25)
  store %src.Color_Picker_SV* %26, %src.Color_Picker_SV** %17, align 8
  %27 = load %src.Color_Picker*, %src.Color_Picker** %6, align 8
  %28 = getelementptr inbounds %src.Color_Picker, %src.Color_Picker* %27, i32 0, i32 2
  %29 = load %src.Color_Picker*, %src.Color_Picker** %6, align 8
  %30 = load i32, i32* %4, align 4
  %31 = getelementptr inbounds %runtime.Context, %runtime.Context* %7, i32 0, i32 0
  %32 = load %runtime.Allocator, %runtime.Allocator* %31, align 8
  %33 = getelementptr inbounds %src.Color_Picker, %src.Color_Picker* %29, i32 0, i32 0
  %34 = bitcast %runtime.Allocator* %31 to { i64, i64 }*
  %35 = load { i64, i64 }, { i64, i64 }* %34, align 8
  %36 = bitcast %runtime.Context* %7 to i8*
  %37 = call %src.Color_Picker_HUE* @src.element_init-49013(%src.Element* %33, i32 %30, i8* bitcast (i64 (%src.Element*, i64, i64, i8*, i8*)* @src.color_picker_hue_message to i8*), i64 -1, { i64, i64 } %35, i8* %36)
  store %src.Color_Picker_HUE* %37, %src.Color_Picker_HUE** %28, align 8
  %38 = load %src.Color_Picker*, %src.Color_Picker** %6, align 8
  store %src.Color_Picker* %38, %src.Color_Picker** %6, align 8
  ret %src.Color_Picker* %38
}

define internal i64 @src.toggle_selector_message(%src.Element* %0, i64 %1, i64 %2, i8* %3, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %4 = alloca %src.Element*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i8*, align 8
  %8 = alloca %src.Toggle_Selector*, align 8
  %9 = alloca { i64, i64 }, align 8
  %10 = alloca %runtime.Source_Code_Location, align 8
  %11 = alloca { <2 x float>, <2 x float> }, align 8
  %12 = alloca %src.Rect, align 4
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  %17 = alloca { i64, i64 }, align 8
  %18 = alloca %src.Rect, align 8
  %19 = alloca %src.Render_Target*, align 8
  %20 = alloca i8, align 1
  %21 = alloca i8, align 1
  %22 = alloca [4 x i8], align 8
  %23 = alloca %src.Rect, align 8
  %24 = alloca { i64, i64 }, align 8
  %25 = alloca i64, align 8
  %26 = alloca i64, align 8
  %27 = alloca i64, align 8
  %28 = alloca i64, align 8
  %29 = alloca i64, align 8
  %30 = alloca %src.Rect, align 8
  %31 = alloca { i64, i64 }, align 8
  %32 = alloca [4 x i8], align 8
  %33 = alloca { i64, i64 }, align 8
  %34 = alloca { <2 x float>, <2 x float> }, align 8
  %35 = alloca i64, align 8
  %36 = alloca i64, align 8
  %37 = alloca i64, align 8
  %38 = alloca i64, align 8
  %39 = alloca i64, align 8
  %40 = alloca %src.Rect, align 8
  %41 = alloca { i64, i64 }, align 8
  %42 = alloca i8, align 1
  %43 = alloca %runtime.Source_Code_Location, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Element* %0, %src.Element** %4, align 8
  store i64 %1, i64* %5, align 8
  store i64 %2, i64* %6, align 8
  store i8* %3, i8** %7, align 8
  %44 = bitcast i8* %__.context_ptr to %runtime.Context*
  %45 = load %src.Element*, %src.Element** %4, align 8
  %46 = bitcast %src.Element* %45 to %src.Toggle_Selector*
  store %src.Toggle_Selector* %46, %src.Toggle_Selector** %8, align 8
  %47 = load %src.Toggle_Selector*, %src.Toggle_Selector** %8, align 8
  %48 = getelementptr inbounds %src.Toggle_Selector, %src.Toggle_Selector* %47, i32 0, i32 3
  %49 = load { %..string*, i64 }, { %..string*, i64 }* %48, align 8
  %50 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %48, i32 0, i32 1
  %51 = load i64, i64* %50, align 8
  %52 = load %src.Toggle_Selector*, %src.Toggle_Selector** %8, align 8
  %53 = getelementptr inbounds %src.Toggle_Selector, %src.Toggle_Selector* %52, i32 0, i32 2
  %54 = load i64, i64* %53, align 8
  %55 = icmp eq i64 %51, %54
  %56 = zext i1 %55 to i8
  %57 = icmp ne i8 %56, 0
  %58 = bitcast { i64, i64 }* %9 to %..string*
  store %..string zeroinitializer, %..string* %58, align 8
  %59 = load { i64, i64 }, { i64, i64 }* %9, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([58 x i8], [58 x i8]* @"csbs$1a2", i64 0, i64 0), i64 57 }, i32 2159, i32 2, %..string { i8* getelementptr inbounds ([24 x i8], [24 x i8]* @"csbs$31b", i64 0, i64 0), i64 23 } }, %runtime.Source_Code_Location* %10, align 8
  %60 = bitcast %runtime.Context* %44 to i8*
  call void @runtime.assert(i1 %57, { i64, i64 } %59, %runtime.Source_Code_Location* %10, i8* %60)
  %61 = load i64, i64* %5, align 8
  switch i64 %61, label %switch.done [
    i64 3, label %switch.case.body
    i64 2, label %switch.case.body1
    i64 9, label %switch.case.body8
    i64 10, label %switch.case.body9
    i64 12, label %switch.case.body10
    i64 22, label %switch.case.body11
    i64 7, label %switch.case.body20
    i64 4, label %switch.case.body21
  ]

switch.case.body:                                 ; preds = %entry
  %62 = load %src.Toggle_Selector*, %src.Toggle_Selector** %8, align 8
  %63 = getelementptr inbounds %src.Toggle_Selector, %src.Toggle_Selector* %62, i32 0, i32 8
  %64 = load %src.Element*, %src.Element** %4, align 8
  %65 = getelementptr inbounds %src.Element, %src.Element* %64, i32 0, i32 5
  %66 = load %src.Rect, %src.Rect* %65, align 4
  %67 = bitcast { <2 x float>, <2 x float> }* %11 to %src.Rect*
  store %src.Rect %66, %src.Rect* %67, align 4
  %68 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %11, align 8
  %69 = bitcast %runtime.Context* %44 to i8*
  %70 = call float @src.rect_width({ <2 x float>, <2 x float> } %68, i8* %69)
  %71 = load %src.Toggle_Selector*, %src.Toggle_Selector** %8, align 8
  %72 = getelementptr inbounds %src.Toggle_Selector, %src.Toggle_Selector* %71, i32 0, i32 2
  %73 = load i64, i64* %72, align 8
  %74 = sitofp i64 %73 to float
  %75 = fdiv float %70, %74
  store float %75, float* %63, align 4
  %76 = load %src.Element*, %src.Element** %4, align 8
  %77 = getelementptr inbounds %src.Element, %src.Element* %76, i32 0, i32 5
  %78 = load %src.Rect, %src.Rect* %77, align 4
  store %src.Rect %78, %src.Rect* %12, align 4
  store i64 0, i64* %13, align 8
  store i64 0, i64* %14, align 8
  store i64 0, i64* %15, align 8
  br label %for.interval.loop

for.interval.loop:                                ; preds = %for.interval.post, %switch.case.body
  %79 = load %src.Toggle_Selector*, %src.Toggle_Selector** %8, align 8
  %80 = getelementptr inbounds %src.Toggle_Selector, %src.Toggle_Selector* %79, i32 0, i32 2
  %81 = load i64, i64* %80, align 8
  %82 = load i64, i64* %14, align 8
  %83 = icmp slt i64 %82, %81
  br i1 %83, label %for.interval.body, label %for.interval.done

for.interval.body:                                ; preds = %for.interval.loop
  %84 = load i64, i64* %14, align 8
  %85 = load i64, i64* %15, align 8
  store i64 %84, i64* %16, align 8
  %86 = load %src.Toggle_Selector*, %src.Toggle_Selector** %8, align 8
  %87 = getelementptr inbounds %src.Toggle_Selector, %src.Toggle_Selector* %86, i32 0, i32 4
  %88 = load { %src.Rect*, i64 }, { %src.Rect*, i64 }* %87, align 8
  %89 = getelementptr inbounds { %src.Rect*, i64 }, { %src.Rect*, i64 }* %87, i32 0, i32 0
  %90 = load %src.Rect*, %src.Rect** %89, align 8
  %91 = load i64, i64* %16, align 8
  %92 = getelementptr inbounds { %src.Rect*, i64 }, { %src.Rect*, i64 }* %87, i32 0, i32 1
  %93 = load i64, i64* %92, align 8
  %94 = bitcast { i64, i64 }* %17 to %..string*
  store %..string { i8* getelementptr inbounds ([58 x i8], [58 x i8]* @"csbs$1a2", i64 0, i64 0), i64 57 }, %..string* %94, align 8
  %95 = load { i64, i64 }, { i64, i64 }* %17, align 8
  call void @runtime.bounds_check_error({ i64, i64 } %95, i32 2168, i32 18, i64 %91, i64 %93)
  %96 = getelementptr %src.Rect, %src.Rect* %90, i64 %91
  %97 = load %src.Toggle_Selector*, %src.Toggle_Selector** %8, align 8
  %98 = getelementptr inbounds %src.Toggle_Selector, %src.Toggle_Selector* %97, i32 0, i32 8
  %99 = load float, float* %98, align 4
  %100 = bitcast %runtime.Context* %44 to i8*
  %101 = call { <2 x float>, <2 x float> } @src.rect_cut_left(%src.Rect* %12, float %99, i8* %100)
  %102 = bitcast %src.Rect* %18 to { <2 x float>, <2 x float> }*
  store { <2 x float>, <2 x float> } %101, { <2 x float>, <2 x float> }* %102, align 8
  %103 = load %src.Rect, %src.Rect* %18, align 4
  store %src.Rect %103, %src.Rect* %96, align 4
  br label %for.interval.post

for.interval.post:                                ; preds = %for.interval.body
  %104 = load i64, i64* %14, align 8
  %105 = add i64 %104, 1
  store i64 %105, i64* %14, align 8
  %106 = load i64, i64* %15, align 8
  %107 = add i64 %106, 1
  store i64 %107, i64* %15, align 8
  br label %for.interval.loop

for.interval.done:                                ; preds = %for.interval.loop
  br label %switch.done

switch.case.body1:                                ; preds = %entry
  %108 = load %src.Element*, %src.Element** %4, align 8
  %109 = getelementptr inbounds %src.Element, %src.Element* %108, i32 0, i32 4
  %110 = load %src.Window*, %src.Window** %109, align 8
  %111 = getelementptr inbounds %src.Window, %src.Window* %110, i32 0, i32 24
  %112 = load %src.Render_Target*, %src.Render_Target** %111, align 8
  store %src.Render_Target* %112, %src.Render_Target** %19, align 8
  %113 = load %src.Element*, %src.Element** %4, align 8
  %114 = getelementptr inbounds %src.Element, %src.Element* %113, i32 0, i32 4
  %115 = load %src.Window*, %src.Window** %114, align 8
  %116 = getelementptr inbounds %src.Window, %src.Window* %115, i32 0, i32 1
  %117 = load %src.Element*, %src.Element** %116, align 8
  %118 = load %src.Element*, %src.Element** %4, align 8
  %119 = icmp eq %src.Element* %117, %118
  %120 = zext i1 %119 to i8
  store i8 %120, i8* %20, align 1
  %121 = load %src.Element*, %src.Element** %4, align 8
  %122 = getelementptr inbounds %src.Element, %src.Element* %121, i32 0, i32 4
  %123 = load %src.Window*, %src.Window** %122, align 8
  %124 = getelementptr inbounds %src.Window, %src.Window* %123, i32 0, i32 2
  %125 = load %src.Element*, %src.Element** %124, align 8
  %126 = load %src.Element*, %src.Element** %4, align 8
  %127 = icmp eq %src.Element* %125, %126
  %128 = zext i1 %127 to i8
  store i8 %128, i8* %21, align 1
  %129 = load i8, i8* %20, align 1
  %130 = trunc i8 %129 to i1
  br i1 %130, label %if.then, label %cmp.or

cmp.or:                                           ; preds = %switch.case.body1
  %131 = load i8, i8* %21, align 1
  %132 = trunc i8 %131 to i1
  br i1 %132, label %if.then, label %if.else

if.then:                                          ; preds = %cmp.or, %switch.case.body1
  %133 = load [4 x i8], [4 x i8]* getelementptr inbounds (%src.Theme, %src.Theme* @src.theme, i64 0, i32 2), align 1
  br label %if.done

if.else:                                          ; preds = %cmp.or
  %134 = load [4 x i8], [4 x i8]* getelementptr inbounds (%src.Theme, %src.Theme* @src.theme, i64 0, i32 5), align 1
  br label %if.done

if.done:                                          ; preds = %if.else, %if.then
  %135 = phi [4 x i8] [ %133, %if.then ], [ %134, %if.else ]
  store [4 x i8] %135, [4 x i8]* %22, align 1
  %136 = load %src.Toggle_Selector*, %src.Toggle_Selector** %8, align 8
  %137 = getelementptr inbounds %src.Toggle_Selector, %src.Toggle_Selector* %136, i32 0, i32 4
  %138 = load { %src.Rect*, i64 }, { %src.Rect*, i64 }* %137, align 8
  %139 = getelementptr inbounds { %src.Rect*, i64 }, { %src.Rect*, i64 }* %137, i32 0, i32 0
  %140 = load %src.Rect*, %src.Rect** %139, align 8
  %141 = getelementptr inbounds { %src.Rect*, i64 }, { %src.Rect*, i64 }* %137, i32 0, i32 1
  %142 = load i64, i64* %141, align 8
  %143 = bitcast { i64, i64 }* %24 to %..string*
  store %..string { i8* getelementptr inbounds ([58 x i8], [58 x i8]* @"csbs$1a2", i64 0, i64 0), i64 57 }, %..string* %143, align 8
  %144 = load { i64, i64 }, { i64, i64 }* %24, align 8
  call void @runtime.bounds_check_error({ i64, i64 } %144, i32 2180, i32 30, i64 0, i64 %142)
  %145 = getelementptr %src.Rect, %src.Rect* %140, i64 0
  %146 = load %src.Rect, %src.Rect* %145, align 4
  store %src.Rect %146, %src.Rect* %23, align 4
  %147 = getelementptr inbounds %src.Rect, %src.Rect* %23, i32 0, i32 0
  %148 = load %src.Toggle_Selector*, %src.Toggle_Selector** %8, align 8
  %149 = getelementptr inbounds %src.Toggle_Selector, %src.Toggle_Selector* %148, i32 0, i32 7
  %150 = load float, float* %149, align 4
  %151 = load %src.Toggle_Selector*, %src.Toggle_Selector** %8, align 8
  %152 = getelementptr inbounds %src.Toggle_Selector, %src.Toggle_Selector* %151, i32 0, i32 8
  %153 = load float, float* %152, align 4
  %154 = fmul float %150, %153
  %155 = load float, float* %147, align 4
  %156 = fadd float %155, %154
  store float %156, float* %147, align 4
  %157 = getelementptr inbounds %src.Rect, %src.Rect* %23, i32 0, i32 1
  %158 = getelementptr inbounds %src.Rect, %src.Rect* %23, i32 0, i32 0
  %159 = load float, float* %158, align 4
  %160 = load %src.Toggle_Selector*, %src.Toggle_Selector** %8, align 8
  %161 = getelementptr inbounds %src.Toggle_Selector, %src.Toggle_Selector* %160, i32 0, i32 8
  %162 = load float, float* %161, align 4
  %163 = fadd float %159, %162
  store float %163, float* %157, align 4
  %164 = load %src.Render_Target*, %src.Render_Target** %19, align 8
  %165 = load %src.Rect, %src.Rect* %23, align 4
  %166 = load [4 x i8], [4 x i8]* getelementptr inbounds (%src.Theme, %src.Theme* @src.theme, i64 0, i32 3), align 1
  %167 = load float, float* @src.ROUNDNESS, align 4
  %168 = bitcast %src.Rect* %23 to { <2 x float>, <2 x float> }*
  %169 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %168, align 8
  %170 = bitcast i64* %25 to [4 x i8]*
  store [4 x i8] %166, [4 x i8]* %170, align 1
  %171 = load i64, i64* %25, align 8
  %172 = bitcast %runtime.Context* %44 to i8*
  call void @src.render_rect(%src.Render_Target* %164, { <2 x float>, <2 x float> } %169, i64 %171, float %167, i8* %172)
  store i64 0, i64* %26, align 8
  store i64 0, i64* %27, align 8
  store i64 0, i64* %28, align 8
  br label %for.interval.loop2

for.interval.loop2:                               ; preds = %for.interval.post6, %if.done
  %173 = load %src.Toggle_Selector*, %src.Toggle_Selector** %8, align 8
  %174 = getelementptr inbounds %src.Toggle_Selector, %src.Toggle_Selector* %173, i32 0, i32 2
  %175 = load i64, i64* %174, align 8
  %176 = load i64, i64* %27, align 8
  %177 = icmp slt i64 %176, %175
  br i1 %177, label %for.interval.body3, label %for.interval.done7

for.interval.body3:                               ; preds = %for.interval.loop2
  %178 = load i64, i64* %27, align 8
  %179 = load i64, i64* %28, align 8
  store i64 %178, i64* %29, align 8
  %180 = load %src.Toggle_Selector*, %src.Toggle_Selector** %8, align 8
  %181 = getelementptr inbounds %src.Toggle_Selector, %src.Toggle_Selector* %180, i32 0, i32 4
  %182 = load { %src.Rect*, i64 }, { %src.Rect*, i64 }* %181, align 8
  %183 = getelementptr inbounds { %src.Rect*, i64 }, { %src.Rect*, i64 }* %181, i32 0, i32 0
  %184 = load %src.Rect*, %src.Rect** %183, align 8
  %185 = load i64, i64* %29, align 8
  %186 = getelementptr inbounds { %src.Rect*, i64 }, { %src.Rect*, i64 }* %181, i32 0, i32 1
  %187 = load i64, i64* %186, align 8
  %188 = bitcast { i64, i64 }* %31 to %..string*
  store %..string { i8* getelementptr inbounds ([58 x i8], [58 x i8]* @"csbs$1a2", i64 0, i64 0), i64 57 }, %..string* %188, align 8
  %189 = load { i64, i64 }, { i64, i64 }* %31, align 8
  call void @runtime.bounds_check_error({ i64, i64 } %189, i32 2186, i32 23, i64 %185, i64 %187)
  %190 = getelementptr %src.Rect, %src.Rect* %184, i64 %185
  %191 = load %src.Rect, %src.Rect* %190, align 4
  store %src.Rect %191, %src.Rect* %30, align 4
  %192 = load [4 x i8], [4 x i8]* %22, align 1
  store [4 x i8] %192, [4 x i8]* %32, align 1
  %193 = load %src.Rect, %src.Rect* %30, align 4
  %194 = load %src.Element*, %src.Element** %4, align 8
  %195 = getelementptr inbounds %src.Element, %src.Element* %194, i32 0, i32 4
  %196 = load %src.Window*, %src.Window** %195, align 8
  %197 = getelementptr inbounds %src.Window, %src.Window* %196, i32 0, i32 12
  %198 = load float, float* %197, align 4
  %199 = load %src.Element*, %src.Element** %4, align 8
  %200 = getelementptr inbounds %src.Element, %src.Element* %199, i32 0, i32 4
  %201 = load %src.Window*, %src.Window** %200, align 8
  %202 = getelementptr inbounds %src.Window, %src.Window* %201, i32 0, i32 13
  %203 = load float, float* %202, align 4
  %204 = bitcast %src.Rect* %30 to { <2 x float>, <2 x float> }*
  %205 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %204, align 8
  %206 = bitcast %runtime.Context* %44 to i8*
  %207 = call i8 @src.rect_contains({ <2 x float>, <2 x float> } %205, float %198, float %203, i8* %206)
  %208 = trunc i8 %207 to i1
  br i1 %208, label %if.done5, label %if.then4

if.then4:                                         ; preds = %for.interval.body3
  %209 = load [4 x i8], [4 x i8]* getelementptr inbounds (%src.Theme, %src.Theme* @src.theme, i64 0, i32 5), align 1
  store [4 x i8] %209, [4 x i8]* %32, align 1
  br label %if.done5

if.done5:                                         ; preds = %if.then4, %for.interval.body3
  %210 = load %src.Element*, %src.Element** %4, align 8
  %211 = load %src.Toggle_Selector*, %src.Toggle_Selector** %8, align 8
  %212 = getelementptr inbounds %src.Toggle_Selector, %src.Toggle_Selector* %211, i32 0, i32 3
  %213 = load { %..string*, i64 }, { %..string*, i64 }* %212, align 8
  %214 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %212, i32 0, i32 0
  %215 = load %..string*, %..string** %214, align 8
  %216 = load i64, i64* %29, align 8
  %217 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %212, i32 0, i32 1
  %218 = load i64, i64* %217, align 8
  %219 = bitcast { i64, i64 }* %33 to %..string*
  store %..string { i8* getelementptr inbounds ([58 x i8], [58 x i8]* @"csbs$1a2", i64 0, i64 0), i64 57 }, %..string* %219, align 8
  %220 = load { i64, i64 }, { i64, i64 }* %33, align 8
  call void @runtime.bounds_check_error({ i64, i64 } %220, i32 2193, i32 50, i64 %216, i64 %218)
  %221 = getelementptr %..string, %..string* %215, i64 %216
  %222 = load %..string, %..string* %221, align 8
  %223 = load %src.Rect, %src.Rect* %30, align 4
  %224 = load [4 x i8], [4 x i8]* %32, align 1
  %225 = bitcast %..string* %221 to { i64, i64 }*
  %226 = load { i64, i64 }, { i64, i64 }* %225, align 8
  %227 = bitcast %src.Rect* %30 to { <2 x float>, <2 x float> }*
  %228 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %227, align 8
  %229 = bitcast [4 x i8]* %32 to i64*
  %230 = load i64, i64* %229, align 8
  %231 = bitcast %runtime.Context* %44 to i8*
  call void @src.erender_string_aligned(%src.Element* %210, { i64, i64 } %226, { <2 x float>, <2 x float> } %228, i64 %230, i64 1, i64 1, i8* %231)
  br label %for.interval.post6

for.interval.post6:                               ; preds = %if.done5
  %232 = load i64, i64* %27, align 8
  %233 = add i64 %232, 1
  store i64 %233, i64* %27, align 8
  %234 = load i64, i64* %28, align 8
  %235 = add i64 %234, 1
  store i64 %235, i64* %28, align 8
  br label %for.interval.loop2

for.interval.done7:                               ; preds = %for.interval.loop2
  %236 = load %src.Render_Target*, %src.Render_Target** %19, align 8
  %237 = load %src.Element*, %src.Element** %4, align 8
  %238 = getelementptr inbounds %src.Element, %src.Element* %237, i32 0, i32 5
  %239 = load %src.Rect, %src.Rect* %238, align 4
  %240 = load [4 x i8], [4 x i8]* %22, align 1
  %241 = load float, float* @src.ROUNDNESS, align 4
  %242 = load float, float* @src.LINE_WIDTH, align 4
  %243 = bitcast { <2 x float>, <2 x float> }* %34 to %src.Rect*
  store %src.Rect %239, %src.Rect* %243, align 4
  %244 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %34, align 8
  %245 = bitcast [4 x i8]* %22 to i64*
  %246 = load i64, i64* %245, align 8
  %247 = bitcast %runtime.Context* %44 to i8*
  call void @src.render_rect_outline(%src.Render_Target* %236, { <2 x float>, <2 x float> } %244, i64 %246, float %241, float %242, i8* %247)
  br label %switch.done

switch.case.body8:                                ; preds = %entry
  %248 = load float, float* @src.SCALE, align 4
  %249 = fmul float 1.000000e+02, %248
  %250 = fptosi float %249 to i64
  ret i64 %250

switch.case.body9:                                ; preds = %entry
  %251 = load %src.Element*, %src.Element** %4, align 8
  %252 = bitcast %runtime.Context* %44 to i8*
  %253 = call float @src.efont_size(%src.Element* %251, i8* %252)
  %254 = load float, float* @src.SCALE, align 4
  %255 = fmul float 1.000000e+01, %254
  %256 = fadd float %253, %255
  %257 = fptosi float %256 to i64
  ret i64 %257

switch.case.body10:                               ; preds = %entry
  %258 = load %src.Element*, %src.Element** %4, align 8
  %259 = bitcast %runtime.Context* %44 to i8*
  call void @src.element_repaint(%src.Element* %258, i8* %259)
  br label %switch.done

switch.case.body11:                               ; preds = %entry
  %260 = load %src.Toggle_Selector*, %src.Toggle_Selector** %8, align 8
  %261 = getelementptr inbounds %src.Toggle_Selector, %src.Toggle_Selector* %260, i32 0, i32 1
  %262 = load i64*, i64** %261, align 8
  %263 = load i64, i64* %262, align 8
  store i64 %263, i64* %35, align 8
  store i64 0, i64* %36, align 8
  store i64 0, i64* %37, align 8
  store i64 0, i64* %38, align 8
  br label %for.interval.loop12

for.interval.loop12:                              ; preds = %for.interval.post16, %switch.case.body11
  %264 = load %src.Toggle_Selector*, %src.Toggle_Selector** %8, align 8
  %265 = getelementptr inbounds %src.Toggle_Selector, %src.Toggle_Selector* %264, i32 0, i32 2
  %266 = load i64, i64* %265, align 8
  %267 = load i64, i64* %37, align 8
  %268 = icmp slt i64 %267, %266
  br i1 %268, label %for.interval.body13, label %for.interval.done17

for.interval.body13:                              ; preds = %for.interval.loop12
  %269 = load i64, i64* %37, align 8
  %270 = load i64, i64* %38, align 8
  store i64 %269, i64* %39, align 8
  %271 = load %src.Toggle_Selector*, %src.Toggle_Selector** %8, align 8
  %272 = getelementptr inbounds %src.Toggle_Selector, %src.Toggle_Selector* %271, i32 0, i32 4
  %273 = load { %src.Rect*, i64 }, { %src.Rect*, i64 }* %272, align 8
  %274 = getelementptr inbounds { %src.Rect*, i64 }, { %src.Rect*, i64 }* %272, i32 0, i32 0
  %275 = load %src.Rect*, %src.Rect** %274, align 8
  %276 = load i64, i64* %39, align 8
  %277 = getelementptr inbounds { %src.Rect*, i64 }, { %src.Rect*, i64 }* %272, i32 0, i32 1
  %278 = load i64, i64* %277, align 8
  %279 = bitcast { i64, i64 }* %41 to %..string*
  store %..string { i8* getelementptr inbounds ([58 x i8], [58 x i8]* @"csbs$1a2", i64 0, i64 0), i64 57 }, %..string* %279, align 8
  %280 = load { i64, i64 }, { i64, i64 }* %41, align 8
  call void @runtime.bounds_check_error({ i64, i64 } %280, i32 2216, i32 23, i64 %276, i64 %278)
  %281 = getelementptr %src.Rect, %src.Rect* %275, i64 %276
  %282 = load %src.Rect, %src.Rect* %281, align 4
  store %src.Rect %282, %src.Rect* %40, align 4
  %283 = load %src.Rect, %src.Rect* %40, align 4
  %284 = load %src.Element*, %src.Element** %4, align 8
  %285 = getelementptr inbounds %src.Element, %src.Element* %284, i32 0, i32 4
  %286 = load %src.Window*, %src.Window** %285, align 8
  %287 = getelementptr inbounds %src.Window, %src.Window* %286, i32 0, i32 12
  %288 = load float, float* %287, align 4
  %289 = load %src.Element*, %src.Element** %4, align 8
  %290 = getelementptr inbounds %src.Element, %src.Element* %289, i32 0, i32 4
  %291 = load %src.Window*, %src.Window** %290, align 8
  %292 = getelementptr inbounds %src.Window, %src.Window* %291, i32 0, i32 13
  %293 = load float, float* %292, align 4
  %294 = bitcast %src.Rect* %40 to { <2 x float>, <2 x float> }*
  %295 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %294, align 8
  %296 = bitcast %runtime.Context* %44 to i8*
  %297 = call i8 @src.rect_contains({ <2 x float>, <2 x float> } %295, float %288, float %293, i8* %296)
  %298 = trunc i8 %297 to i1
  br i1 %298, label %if.then14, label %if.done15

if.then14:                                        ; preds = %for.interval.body13
  %299 = load %src.Toggle_Selector*, %src.Toggle_Selector** %8, align 8
  %300 = getelementptr inbounds %src.Toggle_Selector, %src.Toggle_Selector* %299, i32 0, i32 1
  %301 = load i64*, i64** %300, align 8
  %302 = load i64, i64* %39, align 8
  store i64 %302, i64* %301, align 8
  %303 = load %src.Toggle_Selector*, %src.Toggle_Selector** %8, align 8
  %304 = getelementptr inbounds %src.Toggle_Selector, %src.Toggle_Selector* %303, i32 0, i32 5
  store i8 1, i8* %304, align 1
  %305 = load %src.Element*, %src.Element** %4, align 8
  %306 = bitcast %runtime.Context* %44 to i8*
  call void @src.element_animation_start(%src.Element* %305, i8* %306)
  br label %for.interval.done17

unreachable:                                      ; No predecessors!
  br label %if.done15

if.done15:                                        ; preds = %unreachable, %for.interval.body13
  br label %for.interval.post16

for.interval.post16:                              ; preds = %if.done15
  %307 = load i64, i64* %37, align 8
  %308 = add i64 %307, 1
  store i64 %308, i64* %37, align 8
  %309 = load i64, i64* %38, align 8
  %310 = add i64 %309, 1
  store i64 %310, i64* %38, align 8
  br label %for.interval.loop12

for.interval.done17:                              ; preds = %if.then14, %for.interval.loop12
  %311 = load i64, i64* %35, align 8
  %312 = load %src.Toggle_Selector*, %src.Toggle_Selector** %8, align 8
  %313 = getelementptr inbounds %src.Toggle_Selector, %src.Toggle_Selector* %312, i32 0, i32 1
  %314 = load i64*, i64** %313, align 8
  %315 = load i64, i64* %314, align 8
  %316 = icmp ne i64 %311, %315
  %317 = zext i1 %316 to i8
  %318 = trunc i8 %317 to i1
  br i1 %318, label %if.then18, label %if.done19

if.then18:                                        ; preds = %for.interval.done17
  %319 = load %src.Element*, %src.Element** %4, align 8
  %320 = bitcast %runtime.Context* %44 to i8*
  call void @src.element_repaint(%src.Element* %319, i8* %320)
  br label %if.done19

if.done19:                                        ; preds = %if.then18, %for.interval.done17
  br label %switch.done

switch.case.body20:                               ; preds = %entry
  %321 = load %src.Toggle_Selector*, %src.Toggle_Selector** %8, align 8
  %322 = getelementptr inbounds %src.Toggle_Selector, %src.Toggle_Selector* %321, i32 0, i32 5
  %323 = load %src.Toggle_Selector*, %src.Toggle_Selector** %8, align 8
  %324 = getelementptr inbounds %src.Toggle_Selector, %src.Toggle_Selector* %323, i32 0, i32 7
  %325 = load %src.Toggle_Selector*, %src.Toggle_Selector** %8, align 8
  %326 = getelementptr inbounds %src.Toggle_Selector, %src.Toggle_Selector* %325, i32 0, i32 1
  %327 = load i64*, i64** %326, align 8
  %328 = load i64, i64* %327, align 8
  %329 = sitofp i64 %328 to float
  %330 = bitcast %runtime.Context* %44 to i8*
  %331 = call i8 @src.animate_to(i8* %322, float* %324, float %329, float 1.000000e+00, float 0x3F847AE140000000, i8* %330)
  store i8 %331, i8* %42, align 1
  %332 = load i8, i8* %42, align 1
  %333 = icmp ne i8 %332, 0
  %334 = zext i1 %333 to i64
  ret i64 %334

switch.case.body21:                               ; preds = %entry
  %335 = load %src.Toggle_Selector*, %src.Toggle_Selector** %8, align 8
  %336 = getelementptr inbounds %src.Toggle_Selector, %src.Toggle_Selector* %335, i32 0, i32 4
  %337 = load { %src.Rect*, i64 }, { %src.Rect*, i64 }* %336, align 8
  %338 = getelementptr inbounds %runtime.Context, %runtime.Context* %44, i32 0, i32 0
  %339 = load %runtime.Allocator, %runtime.Allocator* %338, align 8
  %340 = bitcast { %src.Rect*, i64 }* %336 to { i64, i64 }*
  %341 = load { i64, i64 }, { i64, i64 }* %340, align 8
  %342 = bitcast %runtime.Allocator* %338 to { i64, i64 }*
  %343 = load { i64, i64 }, { i64, i64 }* %342, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([58 x i8], [58 x i8]* @"csbs$1a2", i64 0, i64 0), i64 57 }, i32 2243, i32 4, %..string { i8* getelementptr inbounds ([24 x i8], [24 x i8]* @"csbs$31b", i64 0, i64 0), i64 23 } }, %runtime.Source_Code_Location* %43, align 8
  %344 = bitcast %runtime.Context* %44 to i8*
  %345 = call i8 @runtime.delete_slice-49046({ i64, i64 } %341, { i64, i64 } %343, %runtime.Source_Code_Location* %43, i8* %344)
  br label %switch.done

switch.done:                                      ; preds = %switch.case.body21, %if.done19, %switch.case.body10, %for.interval.done7, %for.interval.done, %entry
  ret i64 0
}

define internal %src.Toggle_Selector* @src.toggle_selector_init(%src.Element* %0, i32 %1, i64* %2, i64 %3, { i64, i64 } %4, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %5 = alloca %src.Element*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i64*, align 8
  %8 = alloca i64, align 8
  %9 = alloca { %..string*, i64 }, align 8
  %10 = alloca %src.Toggle_Selector*, align 8
  %11 = alloca %runtime.Source_Code_Location, align 8
  %12 = alloca { { %src.Rect*, i64 }, i8 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Element* %0, %src.Element** %5, align 8
  store i32 %1, i32* %6, align 4
  store i64* %2, i64** %7, align 8
  store i64 %3, i64* %8, align 8
  %13 = bitcast { %..string*, i64 }* %9 to { i64, i64 }*
  store { i64, i64 } %4, { i64, i64 }* %13, align 8
  %14 = load { %..string*, i64 }, { %..string*, i64 }* %9, align 8
  store %src.Toggle_Selector* null, %src.Toggle_Selector** %10, align 8
  %15 = bitcast i8* %__.context_ptr to %runtime.Context*
  %16 = load %src.Element*, %src.Element** %5, align 8
  %17 = load i32, i32* %6, align 4
  %18 = getelementptr inbounds %runtime.Context, %runtime.Context* %15, i32 0, i32 0
  %19 = load %runtime.Allocator, %runtime.Allocator* %18, align 8
  %20 = bitcast %runtime.Allocator* %18 to { i64, i64 }*
  %21 = load { i64, i64 }, { i64, i64 }* %20, align 8
  %22 = bitcast %runtime.Context* %15 to i8*
  %23 = call %src.Toggle_Selector* @src.element_init-49075(%src.Element* %16, i32 %17, i8* bitcast (i64 (%src.Element*, i64, i64, i8*, i8*)* @src.toggle_selector_message to i8*), i64 -1, { i64, i64 } %21, i8* %22)
  store %src.Toggle_Selector* %23, %src.Toggle_Selector** %10, align 8
  %24 = load %src.Toggle_Selector*, %src.Toggle_Selector** %10, align 8
  %25 = getelementptr inbounds %src.Toggle_Selector, %src.Toggle_Selector* %24, i32 0, i32 1
  %26 = load i64*, i64** %7, align 8
  store i64* %26, i64** %25, align 8
  %27 = load %src.Toggle_Selector*, %src.Toggle_Selector** %10, align 8
  %28 = getelementptr inbounds %src.Toggle_Selector, %src.Toggle_Selector* %27, i32 0, i32 2
  %29 = load i64, i64* %8, align 8
  store i64 %29, i64* %28, align 8
  %30 = load %src.Toggle_Selector*, %src.Toggle_Selector** %10, align 8
  %31 = getelementptr inbounds %src.Toggle_Selector, %src.Toggle_Selector* %30, i32 0, i32 3
  %32 = load { %..string*, i64 }, { %..string*, i64 }* %9, align 8
  store { %..string*, i64 } %32, { %..string*, i64 }* %31, align 8
  %33 = load %src.Toggle_Selector*, %src.Toggle_Selector** %10, align 8
  %34 = getelementptr inbounds %src.Toggle_Selector, %src.Toggle_Selector* %33, i32 0, i32 4
  %35 = load i64, i64* %8, align 8
  %36 = getelementptr inbounds %runtime.Context, %runtime.Context* %15, i32 0, i32 0
  %37 = load %runtime.Allocator, %runtime.Allocator* %36, align 8
  %38 = bitcast %runtime.Allocator* %36 to { i64, i64 }*
  %39 = load { i64, i64 }, { i64, i64 }* %38, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([58 x i8], [58 x i8]* @"csbs$1a2", i64 0, i64 0), i64 57 }, i32 2261, i32 14, %..string { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @"csbs$31c", i64 0, i64 0), i64 20 } }, %runtime.Source_Code_Location* %11, align 8
  %40 = bitcast { { %src.Rect*, i64 }, i8 }* %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* %40, i8 0, i64 24, i1 false)
  %41 = bitcast %runtime.Context* %15 to i8*
  call void @runtime.make_slice-49090({ { %src.Rect*, i64 }, i8 }* sret %12, i64 %35, { i64, i64 } %39, %runtime.Source_Code_Location* %11, i8* %41)
  %42 = load { { %src.Rect*, i64 }, i8 }, { { %src.Rect*, i64 }, i8 }* %12, align 8
  %43 = getelementptr inbounds { { %src.Rect*, i64 }, i8 }, { { %src.Rect*, i64 }, i8 }* %12, i32 0, i32 0
  %44 = load { %src.Rect*, i64 }, { %src.Rect*, i64 }* %43, align 8
  store { %src.Rect*, i64 } %44, { %src.Rect*, i64 }* %34, align 8
  %45 = load %src.Toggle_Selector*, %src.Toggle_Selector** %10, align 8
  store %src.Toggle_Selector* %45, %src.Toggle_Selector** %10, align 8
  ret %src.Toggle_Selector* %45
}

define internal i64 @src.split_pane_message(%src.Element* %0, i64 %1, i64 %2, i8* %3, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %4 = alloca %src.Element*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i8*, align 8
  %8 = alloca %src.Split_Pane*, align 8
  %9 = alloca i8, align 1
  %10 = alloca i8, align 1
  %11 = alloca %src.Element*, align 8
  %12 = alloca { i64, i64 }, align 8
  %13 = alloca %src.Element*, align 8
  %14 = alloca { i64, i64 }, align 8
  %15 = alloca %src.Element*, align 8
  %16 = alloca { i64, i64 }, align 8
  %17 = alloca float, align 4
  %18 = alloca float, align 4
  %19 = alloca { <2 x float>, <2 x float> }, align 8
  %20 = alloca { <2 x float>, <2 x float> }, align 8
  %21 = alloca float, align 4
  %22 = alloca float, align 4
  %23 = alloca %src.Rect, align 4
  %24 = alloca %src.Rect, align 8
  %25 = alloca %src.Rect, align 8
  %26 = alloca %src.Rect, align 8
  %27 = alloca %src.Rect, align 8
  %28 = alloca %src.Rect, align 8
  %29 = alloca %src.Rect, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Element* %0, %src.Element** %4, align 8
  store i64 %1, i64* %5, align 8
  store i64 %2, i64* %6, align 8
  store i8* %3, i8** %7, align 8
  %30 = bitcast i8* %__.context_ptr to %runtime.Context*
  %31 = load %src.Element*, %src.Element** %4, align 8
  %32 = bitcast %src.Element* %31 to %src.Split_Pane*
  store %src.Split_Pane* %32, %src.Split_Pane** %8, align 8
  %33 = load %src.Element*, %src.Element** %4, align 8
  %34 = getelementptr inbounds %src.Element, %src.Element* %33, i32 0, i32 0
  %35 = load i32, i32* %34, align 4
  %36 = and i32 %35, 131072
  %37 = icmp ne i32 %36, 0
  %38 = zext i1 %37 to i8
  store i8 %38, i8* %9, align 1
  %39 = load %src.Split_Pane*, %src.Split_Pane** %8, align 8
  %40 = getelementptr inbounds %src.Split_Pane, %src.Split_Pane* %39, i32 0, i32 0
  %41 = getelementptr inbounds %src.Element, %src.Element* %40, i32 0, i32 0
  %42 = load i32, i32* %41, align 4
  %43 = and i32 %42, 262144
  %44 = icmp ne i32 %43, 0
  %45 = zext i1 %44 to i8
  store i8 %45, i8* %10, align 1
  %46 = load i64, i64* %5, align 8
  switch i64 %46, label %switch.done [
    i64 3, label %switch.case.body
  ]

switch.case.body:                                 ; preds = %entry
  %47 = load %src.Element*, %src.Element** %4, align 8
  %48 = getelementptr inbounds %src.Element, %src.Element* %47, i32 0, i32 3
  %49 = load { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %48, align 8
  %50 = getelementptr inbounds { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %48, i32 0, i32 0
  %51 = load %src.Element**, %src.Element*** %50, align 8
  %52 = getelementptr inbounds { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %48, i32 0, i32 1
  %53 = load i64, i64* %52, align 8
  %54 = bitcast { i64, i64 }* %12 to %..string*
  store %..string { i8* getelementptr inbounds ([58 x i8], [58 x i8]* @"csbs$1a2", i64 0, i64 0), i64 57 }, %..string* %54, align 8
  %55 = load { i64, i64 }, { i64, i64 }* %12, align 8
  call void @runtime.bounds_check_error({ i64, i64 } %55, i32 2287, i32 33, i64 0, i64 %53)
  %56 = getelementptr %src.Element*, %src.Element** %51, i64 0
  %57 = load %src.Element*, %src.Element** %56, align 8
  store %src.Element* %57, %src.Element** %11, align 8
  %58 = load %src.Element*, %src.Element** %4, align 8
  %59 = getelementptr inbounds %src.Element, %src.Element* %58, i32 0, i32 3
  %60 = load { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %59, align 8
  %61 = getelementptr inbounds { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %59, i32 0, i32 0
  %62 = load %src.Element**, %src.Element*** %61, align 8
  %63 = getelementptr inbounds { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %59, i32 0, i32 1
  %64 = load i64, i64* %63, align 8
  %65 = bitcast { i64, i64 }* %14 to %..string*
  store %..string { i8* getelementptr inbounds ([58 x i8], [58 x i8]* @"csbs$1a2", i64 0, i64 0), i64 57 }, %..string* %65, align 8
  %66 = load { i64, i64 }, { i64, i64 }* %14, align 8
  call void @runtime.bounds_check_error({ i64, i64 } %66, i32 2288, i32 29, i64 1, i64 %64)
  %67 = getelementptr %src.Element*, %src.Element** %62, i64 1
  %68 = load %src.Element*, %src.Element** %67, align 8
  store %src.Element* %68, %src.Element** %13, align 8
  %69 = load %src.Element*, %src.Element** %4, align 8
  %70 = getelementptr inbounds %src.Element, %src.Element* %69, i32 0, i32 3
  %71 = load { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %70, align 8
  %72 = getelementptr inbounds { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %70, i32 0, i32 0
  %73 = load %src.Element**, %src.Element*** %72, align 8
  %74 = getelementptr inbounds { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %70, i32 0, i32 1
  %75 = load i64, i64* %74, align 8
  %76 = bitcast { i64, i64 }* %16 to %..string*
  store %..string { i8* getelementptr inbounds ([58 x i8], [58 x i8]* @"csbs$1a2", i64 0, i64 0), i64 57 }, %..string* %76, align 8
  %77 = load { i64, i64 }, { i64, i64 }* %16, align 8
  call void @runtime.bounds_check_error({ i64, i64 } %77, i32 2289, i32 30, i64 2, i64 %75)
  %78 = getelementptr %src.Element*, %src.Element** %73, i64 2
  %79 = load %src.Element*, %src.Element** %78, align 8
  store %src.Element* %79, %src.Element** %15, align 8
  %80 = load i8, i8* %10, align 1
  %81 = trunc i8 %80 to i1
  br i1 %81, label %if.then, label %if.done6

if.then:                                          ; preds = %switch.case.body
  %82 = load %src.Element*, %src.Element** %13, align 8
  %83 = getelementptr inbounds %src.Element, %src.Element* %82, i32 0, i32 0
  %84 = load i32, i32* %83, align 4
  %85 = and i32 %84, 2
  %86 = icmp ne i32 %85, 0
  %87 = zext i1 %86 to i8
  %88 = trunc i8 %87 to i1
  br i1 %88, label %if.then1, label %if.else

if.then1:                                         ; preds = %if.then
  %89 = load %src.Split_Pane*, %src.Split_Pane** %8, align 8
  %90 = getelementptr inbounds %src.Split_Pane, %src.Split_Pane* %89, i32 0, i32 3
  %91 = load float, float* %90, align 4
  %92 = fcmp one float %91, 0.000000e+00
  %93 = zext i1 %92 to i8
  %94 = trunc i8 %93 to i1
  br i1 %94, label %if.then2, label %if.done

if.then2:                                         ; preds = %if.then1
  %95 = load %src.Split_Pane*, %src.Split_Pane** %8, align 8
  %96 = getelementptr inbounds %src.Split_Pane, %src.Split_Pane* %95, i32 0, i32 6
  %97 = load %src.Split_Pane*, %src.Split_Pane** %8, align 8
  %98 = getelementptr inbounds %src.Split_Pane, %src.Split_Pane* %97, i32 0, i32 3
  %99 = load float, float* %98, align 4
  store float %99, float* %96, align 4
  %100 = load %src.Split_Pane*, %src.Split_Pane** %8, align 8
  %101 = getelementptr inbounds %src.Split_Pane, %src.Split_Pane* %100, i32 0, i32 3
  store float 0.000000e+00, float* %101, align 4
  br label %if.done

if.done:                                          ; preds = %if.then2, %if.then1
  br label %if.done5

if.else:                                          ; preds = %if.then
  %102 = load %src.Split_Pane*, %src.Split_Pane** %8, align 8
  %103 = getelementptr inbounds %src.Split_Pane, %src.Split_Pane* %102, i32 0, i32 3
  %104 = load float, float* %103, align 4
  %105 = fcmp oeq float %104, 0.000000e+00
  %106 = zext i1 %105 to i8
  %107 = trunc i8 %106 to i1
  br i1 %107, label %if.then3, label %if.done4

if.then3:                                         ; preds = %if.else
  %108 = load %src.Split_Pane*, %src.Split_Pane** %8, align 8
  %109 = getelementptr inbounds %src.Split_Pane, %src.Split_Pane* %108, i32 0, i32 3
  %110 = load %src.Split_Pane*, %src.Split_Pane** %8, align 8
  %111 = getelementptr inbounds %src.Split_Pane, %src.Split_Pane* %110, i32 0, i32 6
  %112 = load float, float* %111, align 4
  store float %112, float* %109, align 4
  br label %if.done4

if.done4:                                         ; preds = %if.then3, %if.else
  br label %if.done5

if.done5:                                         ; preds = %if.done4, %if.done
  br label %if.done6

if.done6:                                         ; preds = %if.done5, %switch.case.body
  %113 = load float, float* @src.SCALE, align 4
  %114 = fmul float 4.000000e+00, %113
  %115 = call float @math.round_f32(float %114)
  store float %115, float* %17, align 4
  %116 = load i8, i8* %9, align 1
  %117 = trunc i8 %116 to i1
  br i1 %117, label %if.then7, label %if.else8

if.then7:                                         ; preds = %if.done6
  %118 = load %src.Element*, %src.Element** %4, align 8
  %119 = getelementptr inbounds %src.Element, %src.Element* %118, i32 0, i32 5
  %120 = load %src.Rect, %src.Rect* %119, align 4
  %121 = bitcast { <2 x float>, <2 x float> }* %19 to %src.Rect*
  store %src.Rect %120, %src.Rect* %121, align 4
  %122 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %19, align 8
  %123 = bitcast %runtime.Context* %30 to i8*
  %124 = call float @src.rect_height({ <2 x float>, <2 x float> } %122, i8* %123)
  br label %if.done9

if.else8:                                         ; preds = %if.done6
  %125 = load %src.Element*, %src.Element** %4, align 8
  %126 = getelementptr inbounds %src.Element, %src.Element* %125, i32 0, i32 5
  %127 = load %src.Rect, %src.Rect* %126, align 4
  %128 = bitcast { <2 x float>, <2 x float> }* %20 to %src.Rect*
  store %src.Rect %127, %src.Rect* %128, align 4
  %129 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %20, align 8
  %130 = bitcast %runtime.Context* %30 to i8*
  %131 = call float @src.rect_width({ <2 x float>, <2 x float> } %129, i8* %130)
  br label %if.done9

if.done9:                                         ; preds = %if.else8, %if.then7
  %132 = phi float [ %124, %if.then7 ], [ %131, %if.else8 ]
  %133 = load float, float* %17, align 4
  %134 = fsub float %132, %133
  store float %134, float* %18, align 4
  store float 0.000000e+00, float* %21, align 4
  store float 0.000000e+00, float* %22, align 4
  %135 = load %src.Element*, %src.Element** %4, align 8
  %136 = getelementptr inbounds %src.Element, %src.Element* %135, i32 0, i32 5
  %137 = load %src.Rect, %src.Rect* %136, align 4
  store %src.Rect %137, %src.Rect* %23, align 4
  %138 = load %src.Split_Pane*, %src.Split_Pane** %8, align 8
  %139 = getelementptr inbounds %src.Split_Pane, %src.Split_Pane* %138, i32 0, i32 1
  %140 = load i8, i8* %139, align 1
  %141 = trunc i8 %140 to i1
  br i1 %141, label %if.then10, label %if.else11

if.then10:                                        ; preds = %if.done9
  %142 = load %src.Split_Pane*, %src.Split_Pane** %8, align 8
  %143 = getelementptr inbounds %src.Split_Pane, %src.Split_Pane* %142, i32 0, i32 3
  %144 = load float, float* %143, align 4
  %145 = load float, float* @src.SCALE, align 4
  %146 = fmul float %144, %145
  store float %146, float* %21, align 4
  %147 = load float, float* %18, align 4
  %148 = load %src.Split_Pane*, %src.Split_Pane** %8, align 8
  %149 = getelementptr inbounds %src.Split_Pane, %src.Split_Pane* %148, i32 0, i32 3
  %150 = load float, float* %149, align 4
  %151 = load float, float* @src.SCALE, align 4
  %152 = fmul float %150, %151
  %153 = fsub float %147, %152
  store float %153, float* %22, align 4
  br label %if.done12

if.else11:                                        ; preds = %if.done9
  %154 = load float, float* %18, align 4
  %155 = load %src.Split_Pane*, %src.Split_Pane** %8, align 8
  %156 = getelementptr inbounds %src.Split_Pane, %src.Split_Pane* %155, i32 0, i32 3
  %157 = load float, float* %156, align 4
  %158 = fmul float %154, %157
  store float %158, float* %21, align 4
  %159 = load float, float* %18, align 4
  %160 = load float, float* %21, align 4
  %161 = fsub float %159, %160
  store float %161, float* %22, align 4
  br label %if.done12

if.done12:                                        ; preds = %if.else11, %if.then10
  %162 = load i8, i8* %9, align 1
  %163 = trunc i8 %162 to i1
  br i1 %163, label %if.then13, label %if.else14

if.then13:                                        ; preds = %if.done12
  %164 = load %src.Element*, %src.Element** %13, align 8
  %165 = bitcast %src.Rect* %24 to i8*
  call void @llvm.memset.p0i8.i64(i8* %165, i8 0, i64 16, i1 false)
  store %src.Rect zeroinitializer, %src.Rect* %24, align 4
  %166 = getelementptr inbounds %src.Rect, %src.Rect* %23, i32 0, i32 0
  %167 = load float, float* %166, align 4
  %168 = getelementptr inbounds %src.Rect, %src.Rect* %24, i32 0, i32 0
  store float %167, float* %168, align 4
  %169 = getelementptr inbounds %src.Rect, %src.Rect* %23, i32 0, i32 1
  %170 = load float, float* %169, align 4
  %171 = getelementptr inbounds %src.Rect, %src.Rect* %24, i32 0, i32 1
  store float %170, float* %171, align 4
  %172 = getelementptr inbounds %src.Rect, %src.Rect* %23, i32 0, i32 2
  %173 = load float, float* %172, align 4
  %174 = getelementptr inbounds %src.Rect, %src.Rect* %24, i32 0, i32 2
  store float %173, float* %174, align 4
  %175 = getelementptr inbounds %src.Rect, %src.Rect* %23, i32 0, i32 2
  %176 = load float, float* %175, align 4
  %177 = load float, float* %21, align 4
  %178 = fadd float %176, %177
  %179 = getelementptr inbounds %src.Rect, %src.Rect* %24, i32 0, i32 3
  store float %178, float* %179, align 4
  %180 = load %src.Rect, %src.Rect* %24, align 4
  %181 = bitcast %src.Rect* %24 to { <2 x float>, <2 x float> }*
  %182 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %181, align 8
  %183 = bitcast %runtime.Context* %30 to i8*
  call void @src.element_move(%src.Element* %164, { <2 x float>, <2 x float> } %182, i8* %183)
  %184 = load %src.Element*, %src.Element** %11, align 8
  %185 = bitcast %src.Rect* %25 to i8*
  call void @llvm.memset.p0i8.i64(i8* %185, i8 0, i64 16, i1 false)
  store %src.Rect zeroinitializer, %src.Rect* %25, align 4
  %186 = getelementptr inbounds %src.Rect, %src.Rect* %23, i32 0, i32 0
  %187 = load float, float* %186, align 4
  %188 = getelementptr inbounds %src.Rect, %src.Rect* %25, i32 0, i32 0
  store float %187, float* %188, align 4
  %189 = getelementptr inbounds %src.Rect, %src.Rect* %23, i32 0, i32 1
  %190 = load float, float* %189, align 4
  %191 = getelementptr inbounds %src.Rect, %src.Rect* %25, i32 0, i32 1
  store float %190, float* %191, align 4
  %192 = getelementptr inbounds %src.Rect, %src.Rect* %23, i32 0, i32 2
  %193 = load float, float* %192, align 4
  %194 = load float, float* %21, align 4
  %195 = fadd float %193, %194
  %196 = getelementptr inbounds %src.Rect, %src.Rect* %25, i32 0, i32 2
  store float %195, float* %196, align 4
  %197 = getelementptr inbounds %src.Rect, %src.Rect* %23, i32 0, i32 2
  %198 = load float, float* %197, align 4
  %199 = load float, float* %21, align 4
  %200 = fadd float %198, %199
  %201 = load float, float* %17, align 4
  %202 = fadd float %200, %201
  %203 = getelementptr inbounds %src.Rect, %src.Rect* %25, i32 0, i32 3
  store float %202, float* %203, align 4
  %204 = load %src.Rect, %src.Rect* %25, align 4
  %205 = bitcast %src.Rect* %25 to { <2 x float>, <2 x float> }*
  %206 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %205, align 8
  %207 = bitcast %runtime.Context* %30 to i8*
  call void @src.element_move(%src.Element* %184, { <2 x float>, <2 x float> } %206, i8* %207)
  %208 = load %src.Element*, %src.Element** %15, align 8
  %209 = bitcast %src.Rect* %26 to i8*
  call void @llvm.memset.p0i8.i64(i8* %209, i8 0, i64 16, i1 false)
  store %src.Rect zeroinitializer, %src.Rect* %26, align 4
  %210 = getelementptr inbounds %src.Rect, %src.Rect* %23, i32 0, i32 0
  %211 = load float, float* %210, align 4
  %212 = getelementptr inbounds %src.Rect, %src.Rect* %26, i32 0, i32 0
  store float %211, float* %212, align 4
  %213 = getelementptr inbounds %src.Rect, %src.Rect* %23, i32 0, i32 1
  %214 = load float, float* %213, align 4
  %215 = getelementptr inbounds %src.Rect, %src.Rect* %26, i32 0, i32 1
  store float %214, float* %215, align 4
  %216 = getelementptr inbounds %src.Rect, %src.Rect* %23, i32 0, i32 3
  %217 = load float, float* %216, align 4
  %218 = load float, float* %22, align 4
  %219 = fsub float %217, %218
  %220 = getelementptr inbounds %src.Rect, %src.Rect* %26, i32 0, i32 2
  store float %219, float* %220, align 4
  %221 = getelementptr inbounds %src.Rect, %src.Rect* %23, i32 0, i32 3
  %222 = load float, float* %221, align 4
  %223 = getelementptr inbounds %src.Rect, %src.Rect* %26, i32 0, i32 3
  store float %222, float* %223, align 4
  %224 = load %src.Rect, %src.Rect* %26, align 4
  %225 = bitcast %src.Rect* %26 to { <2 x float>, <2 x float> }*
  %226 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %225, align 8
  %227 = bitcast %runtime.Context* %30 to i8*
  call void @src.element_move(%src.Element* %208, { <2 x float>, <2 x float> } %226, i8* %227)
  br label %if.done15

if.else14:                                        ; preds = %if.done12
  %228 = load %src.Element*, %src.Element** %13, align 8
  %229 = bitcast %src.Rect* %27 to i8*
  call void @llvm.memset.p0i8.i64(i8* %229, i8 0, i64 16, i1 false)
  store %src.Rect zeroinitializer, %src.Rect* %27, align 4
  %230 = getelementptr inbounds %src.Rect, %src.Rect* %23, i32 0, i32 0
  %231 = load float, float* %230, align 4
  %232 = getelementptr inbounds %src.Rect, %src.Rect* %27, i32 0, i32 0
  store float %231, float* %232, align 4
  %233 = getelementptr inbounds %src.Rect, %src.Rect* %23, i32 0, i32 0
  %234 = load float, float* %233, align 4
  %235 = load float, float* %21, align 4
  %236 = fadd float %234, %235
  %237 = getelementptr inbounds %src.Rect, %src.Rect* %27, i32 0, i32 1
  store float %236, float* %237, align 4
  %238 = getelementptr inbounds %src.Rect, %src.Rect* %23, i32 0, i32 2
  %239 = load float, float* %238, align 4
  %240 = getelementptr inbounds %src.Rect, %src.Rect* %27, i32 0, i32 2
  store float %239, float* %240, align 4
  %241 = getelementptr inbounds %src.Rect, %src.Rect* %23, i32 0, i32 3
  %242 = load float, float* %241, align 4
  %243 = getelementptr inbounds %src.Rect, %src.Rect* %27, i32 0, i32 3
  store float %242, float* %243, align 4
  %244 = load %src.Rect, %src.Rect* %27, align 4
  %245 = bitcast %src.Rect* %27 to { <2 x float>, <2 x float> }*
  %246 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %245, align 8
  %247 = bitcast %runtime.Context* %30 to i8*
  call void @src.element_move(%src.Element* %228, { <2 x float>, <2 x float> } %246, i8* %247)
  %248 = load %src.Element*, %src.Element** %11, align 8
  %249 = bitcast %src.Rect* %28 to i8*
  call void @llvm.memset.p0i8.i64(i8* %249, i8 0, i64 16, i1 false)
  store %src.Rect zeroinitializer, %src.Rect* %28, align 4
  %250 = getelementptr inbounds %src.Rect, %src.Rect* %23, i32 0, i32 0
  %251 = load float, float* %250, align 4
  %252 = load float, float* %21, align 4
  %253 = fadd float %251, %252
  %254 = getelementptr inbounds %src.Rect, %src.Rect* %28, i32 0, i32 0
  store float %253, float* %254, align 4
  %255 = getelementptr inbounds %src.Rect, %src.Rect* %23, i32 0, i32 0
  %256 = load float, float* %255, align 4
  %257 = load float, float* %21, align 4
  %258 = fadd float %256, %257
  %259 = load float, float* %17, align 4
  %260 = fadd float %258, %259
  %261 = getelementptr inbounds %src.Rect, %src.Rect* %28, i32 0, i32 1
  store float %260, float* %261, align 4
  %262 = getelementptr inbounds %src.Rect, %src.Rect* %23, i32 0, i32 2
  %263 = load float, float* %262, align 4
  %264 = getelementptr inbounds %src.Rect, %src.Rect* %28, i32 0, i32 2
  store float %263, float* %264, align 4
  %265 = getelementptr inbounds %src.Rect, %src.Rect* %23, i32 0, i32 3
  %266 = load float, float* %265, align 4
  %267 = getelementptr inbounds %src.Rect, %src.Rect* %28, i32 0, i32 3
  store float %266, float* %267, align 4
  %268 = load %src.Rect, %src.Rect* %28, align 4
  %269 = bitcast %src.Rect* %28 to { <2 x float>, <2 x float> }*
  %270 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %269, align 8
  %271 = bitcast %runtime.Context* %30 to i8*
  call void @src.element_move(%src.Element* %248, { <2 x float>, <2 x float> } %270, i8* %271)
  %272 = load %src.Element*, %src.Element** %15, align 8
  %273 = bitcast %src.Rect* %29 to i8*
  call void @llvm.memset.p0i8.i64(i8* %273, i8 0, i64 16, i1 false)
  store %src.Rect zeroinitializer, %src.Rect* %29, align 4
  %274 = getelementptr inbounds %src.Rect, %src.Rect* %23, i32 0, i32 1
  %275 = load float, float* %274, align 4
  %276 = load float, float* %22, align 4
  %277 = fsub float %275, %276
  %278 = getelementptr inbounds %src.Rect, %src.Rect* %29, i32 0, i32 0
  store float %277, float* %278, align 4
  %279 = getelementptr inbounds %src.Rect, %src.Rect* %23, i32 0, i32 1
  %280 = load float, float* %279, align 4
  %281 = getelementptr inbounds %src.Rect, %src.Rect* %29, i32 0, i32 1
  store float %280, float* %281, align 4
  %282 = getelementptr inbounds %src.Rect, %src.Rect* %23, i32 0, i32 2
  %283 = load float, float* %282, align 4
  %284 = getelementptr inbounds %src.Rect, %src.Rect* %29, i32 0, i32 2
  store float %283, float* %284, align 4
  %285 = getelementptr inbounds %src.Rect, %src.Rect* %23, i32 0, i32 3
  %286 = load float, float* %285, align 4
  %287 = getelementptr inbounds %src.Rect, %src.Rect* %29, i32 0, i32 3
  store float %286, float* %287, align 4
  %288 = load %src.Rect, %src.Rect* %29, align 4
  %289 = bitcast %src.Rect* %29 to { <2 x float>, <2 x float> }*
  %290 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %289, align 8
  %291 = bitcast %runtime.Context* %30 to i8*
  call void @src.element_move(%src.Element* %272, { <2 x float>, <2 x float> } %290, i8* %291)
  br label %if.done15

if.done15:                                        ; preds = %if.else14, %if.then13
  br label %switch.done

switch.done:                                      ; preds = %if.done15, %entry
  ret i64 0
}

define internal i64 @src.splitter_message(%src.Element* %0, i64 %1, i64 %2, i8* %3, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %4 = alloca %src.Element*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i8*, align 8
  %8 = alloca %src.Split_Pane*, align 8
  %9 = alloca i8, align 1
  %10 = alloca i8, align 1
  %11 = alloca %src.Render_Target*, align 8
  %12 = alloca { <2 x float>, <2 x float> }, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca float, align 4
  %16 = alloca float, align 4
  %17 = alloca float, align 4
  %18 = alloca { <2 x float>, <2 x float> }, align 8
  %19 = alloca { <2 x float>, <2 x float> }, align 8
  %20 = alloca float, align 4
  %21 = alloca float, align 4
  %22 = alloca %src.Element*, align 8
  %23 = alloca { i64, i64 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Element* %0, %src.Element** %4, align 8
  store i64 %1, i64* %5, align 8
  store i64 %2, i64* %6, align 8
  store i8* %3, i8** %7, align 8
  %24 = bitcast i8* %__.context_ptr to %runtime.Context*
  %25 = load %src.Element*, %src.Element** %4, align 8
  %26 = getelementptr inbounds %src.Element, %src.Element* %25, i32 0, i32 2
  %27 = load %src.Element*, %src.Element** %26, align 8
  %28 = bitcast %src.Element* %27 to %src.Split_Pane*
  store %src.Split_Pane* %28, %src.Split_Pane** %8, align 8
  %29 = load %src.Split_Pane*, %src.Split_Pane** %8, align 8
  %30 = getelementptr inbounds %src.Split_Pane, %src.Split_Pane* %29, i32 0, i32 0
  %31 = getelementptr inbounds %src.Element, %src.Element* %30, i32 0, i32 0
  %32 = load i32, i32* %31, align 4
  %33 = and i32 %32, 131072
  %34 = icmp ne i32 %33, 0
  %35 = zext i1 %34 to i8
  store i8 %35, i8* %9, align 1
  %36 = load %src.Split_Pane*, %src.Split_Pane** %8, align 8
  %37 = getelementptr inbounds %src.Split_Pane, %src.Split_Pane* %36, i32 0, i32 0
  %38 = getelementptr inbounds %src.Element, %src.Element* %37, i32 0, i32 0
  %39 = load i32, i32* %38, align 4
  %40 = and i32 %39, 262144
  %41 = icmp ne i32 %40, 0
  %42 = zext i1 %41 to i8
  store i8 %42, i8* %10, align 1
  %43 = load i64, i64* %5, align 8
  switch i64 %43, label %switch.done [
    i64 2, label %switch.case.body
    i64 24, label %switch.case.body1
    i64 16, label %switch.case.body2
    i64 15, label %switch.case.body7
  ]

switch.case.body:                                 ; preds = %entry
  %44 = load %src.Element*, %src.Element** %4, align 8
  %45 = getelementptr inbounds %src.Element, %src.Element* %44, i32 0, i32 4
  %46 = load %src.Window*, %src.Window** %45, align 8
  %47 = getelementptr inbounds %src.Window, %src.Window* %46, i32 0, i32 24
  %48 = load %src.Render_Target*, %src.Render_Target** %47, align 8
  store %src.Render_Target* %48, %src.Render_Target** %11, align 8
  %49 = load %src.Render_Target*, %src.Render_Target** %11, align 8
  %50 = load %src.Element*, %src.Element** %4, align 8
  %51 = getelementptr inbounds %src.Element, %src.Element* %50, i32 0, i32 5
  %52 = load %src.Rect, %src.Rect* %51, align 4
  %53 = load [4 x i8], [4 x i8]* getelementptr inbounds (%src.Theme, %src.Theme* @src.theme, i64 0, i32 2), align 1
  %54 = bitcast { <2 x float>, <2 x float> }* %12 to %src.Rect*
  store %src.Rect %52, %src.Rect* %54, align 4
  %55 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %12, align 8
  %56 = bitcast i64* %13 to [4 x i8]*
  store [4 x i8] %53, [4 x i8]* %56, align 1
  %57 = load i64, i64* %13, align 8
  %58 = bitcast %runtime.Context* %24 to i8*
  call void @src.render_rect(%src.Render_Target* %49, { <2 x float>, <2 x float> } %55, i64 %57, float 0.000000e+00, i8* %58)
  br label %switch.done

switch.case.body1:                                ; preds = %entry
  %59 = load i8, i8* %9, align 1
  %60 = trunc i8 %59 to i1
  br i1 %60, label %if.then, label %if.else

if.then:                                          ; preds = %switch.case.body1
  br label %if.done

if.else:                                          ; preds = %switch.case.body1
  br label %if.done

if.done:                                          ; preds = %if.else, %if.then
  %61 = phi i64 [ 3, %if.then ], [ 4, %if.else ]
  ret i64 %61

switch.case.body2:                                ; preds = %entry
  %62 = load i64, i64* %6, align 8
  store i64 %62, i64* %14, align 8
  %63 = load i64, i64* %14, align 8
  %64 = icmp ne i64 %63, 0
  %65 = zext i1 %64 to i8
  %66 = trunc i8 %65 to i1
  br i1 %66, label %if.then3, label %if.done6

if.then3:                                         ; preds = %switch.case.body2
  %67 = load %src.Split_Pane*, %src.Split_Pane** %8, align 8
  %68 = getelementptr inbounds %src.Split_Pane, %src.Split_Pane* %67, i32 0, i32 3
  %69 = load float, float* %68, align 4
  %70 = load %src.Split_Pane*, %src.Split_Pane** %8, align 8
  %71 = getelementptr inbounds %src.Split_Pane, %src.Split_Pane* %70, i32 0, i32 4
  %72 = load float, float* %71, align 4
  %73 = fcmp one float %69, %72
  %74 = zext i1 %73 to i8
  %75 = trunc i8 %74 to i1
  br i1 %75, label %if.then4, label %if.done5

if.then4:                                         ; preds = %if.then3
  %76 = load %src.Split_Pane*, %src.Split_Pane** %8, align 8
  %77 = getelementptr inbounds %src.Split_Pane, %src.Split_Pane* %76, i32 0, i32 3
  %78 = load %src.Split_Pane*, %src.Split_Pane** %8, align 8
  %79 = getelementptr inbounds %src.Split_Pane, %src.Split_Pane* %78, i32 0, i32 4
  %80 = load float, float* %79, align 4
  store float %80, float* %77, align 4
  %81 = load %src.Split_Pane*, %src.Split_Pane** %8, align 8
  %82 = getelementptr inbounds %src.Split_Pane, %src.Split_Pane* %81, i32 0, i32 0
  %83 = bitcast %runtime.Context* %24 to i8*
  call void @src.element_repaint(%src.Element* %82, i8* %83)
  br label %if.done5

if.done5:                                         ; preds = %if.then4, %if.then3
  br label %if.done6

if.done6:                                         ; preds = %if.done5, %switch.case.body2
  br label %switch.done

switch.case.body7:                                ; preds = %entry
  %84 = load i8, i8* %9, align 1
  %85 = trunc i8 %84 to i1
  br i1 %85, label %if.then8, label %if.else9

if.then8:                                         ; preds = %switch.case.body7
  %86 = load %src.Element*, %src.Element** %4, align 8
  %87 = getelementptr inbounds %src.Element, %src.Element* %86, i32 0, i32 4
  %88 = load %src.Window*, %src.Window** %87, align 8
  %89 = getelementptr inbounds %src.Window, %src.Window* %88, i32 0, i32 13
  %90 = load float, float* %89, align 4
  br label %if.done10

if.else9:                                         ; preds = %switch.case.body7
  %91 = load %src.Element*, %src.Element** %4, align 8
  %92 = getelementptr inbounds %src.Element, %src.Element* %91, i32 0, i32 4
  %93 = load %src.Window*, %src.Window** %92, align 8
  %94 = getelementptr inbounds %src.Window, %src.Window* %93, i32 0, i32 12
  %95 = load float, float* %94, align 4
  br label %if.done10

if.done10:                                        ; preds = %if.else9, %if.then8
  %96 = phi float [ %90, %if.then8 ], [ %95, %if.else9 ]
  store float %96, float* %15, align 4
  %97 = load float, float* @src.SCALE, align 4
  %98 = fmul float 4.000000e+00, %97
  %99 = call float @math.round_f32(float %98)
  store float %99, float* %16, align 4
  %100 = load i8, i8* %9, align 1
  %101 = trunc i8 %100 to i1
  br i1 %101, label %if.then11, label %if.else12

if.then11:                                        ; preds = %if.done10
  %102 = load %src.Split_Pane*, %src.Split_Pane** %8, align 8
  %103 = getelementptr inbounds %src.Split_Pane, %src.Split_Pane* %102, i32 0, i32 0
  %104 = getelementptr inbounds %src.Element, %src.Element* %103, i32 0, i32 5
  %105 = load %src.Rect, %src.Rect* %104, align 4
  %106 = bitcast { <2 x float>, <2 x float> }* %18 to %src.Rect*
  store %src.Rect %105, %src.Rect* %106, align 4
  %107 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %18, align 8
  %108 = bitcast %runtime.Context* %24 to i8*
  %109 = call float @src.rect_height({ <2 x float>, <2 x float> } %107, i8* %108)
  br label %if.done13

if.else12:                                        ; preds = %if.done10
  %110 = load %src.Split_Pane*, %src.Split_Pane** %8, align 8
  %111 = getelementptr inbounds %src.Split_Pane, %src.Split_Pane* %110, i32 0, i32 0
  %112 = getelementptr inbounds %src.Element, %src.Element* %111, i32 0, i32 5
  %113 = load %src.Rect, %src.Rect* %112, align 4
  %114 = bitcast { <2 x float>, <2 x float> }* %19 to %src.Rect*
  store %src.Rect %113, %src.Rect* %114, align 4
  %115 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %19, align 8
  %116 = bitcast %runtime.Context* %24 to i8*
  %117 = call float @src.rect_width({ <2 x float>, <2 x float> } %115, i8* %116)
  br label %if.done13

if.done13:                                        ; preds = %if.else12, %if.then11
  %118 = phi float [ %109, %if.then11 ], [ %117, %if.else12 ]
  %119 = load float, float* %16, align 4
  %120 = fsub float %118, %119
  store float %120, float* %17, align 4
  %121 = load %src.Split_Pane*, %src.Split_Pane** %8, align 8
  %122 = getelementptr inbounds %src.Split_Pane, %src.Split_Pane* %121, i32 0, i32 3
  %123 = load float, float* %122, align 4
  store float %123, float* %20, align 4
  %124 = load %src.Split_Pane*, %src.Split_Pane** %8, align 8
  %125 = getelementptr inbounds %src.Split_Pane, %src.Split_Pane* %124, i32 0, i32 1
  %126 = load i8, i8* %125, align 1
  %127 = trunc i8 %126 to i1
  br i1 %127, label %if.then14, label %if.else18

if.then14:                                        ; preds = %if.done13
  %128 = load float, float* %15, align 4
  %129 = load float, float* %16, align 4
  %130 = fdiv float %129, 2.000000e+00
  %131 = fsub float %128, %130
  %132 = load i8, i8* %9, align 1
  %133 = trunc i8 %132 to i1
  br i1 %133, label %if.then15, label %if.else16

if.then15:                                        ; preds = %if.then14
  %134 = load %src.Split_Pane*, %src.Split_Pane** %8, align 8
  %135 = getelementptr inbounds %src.Split_Pane, %src.Split_Pane* %134, i32 0, i32 0
  %136 = getelementptr inbounds %src.Element, %src.Element* %135, i32 0, i32 5
  %137 = getelementptr inbounds %src.Rect, %src.Rect* %136, i32 0, i32 2
  %138 = load float, float* %137, align 4
  br label %if.done17

if.else16:                                        ; preds = %if.then14
  %139 = load %src.Split_Pane*, %src.Split_Pane** %8, align 8
  %140 = getelementptr inbounds %src.Split_Pane, %src.Split_Pane* %139, i32 0, i32 0
  %141 = getelementptr inbounds %src.Element, %src.Element* %140, i32 0, i32 5
  %142 = getelementptr inbounds %src.Rect, %src.Rect* %141, i32 0, i32 0
  %143 = load float, float* %142, align 4
  br label %if.done17

if.done17:                                        ; preds = %if.else16, %if.then15
  %144 = phi float [ %138, %if.then15 ], [ %143, %if.else16 ]
  %145 = fsub float %131, %144
  store float %145, float* %21, align 4
  %146 = load %src.Split_Pane*, %src.Split_Pane** %8, align 8
  %147 = getelementptr inbounds %src.Split_Pane, %src.Split_Pane* %146, i32 0, i32 3
  %148 = load float, float* %21, align 4
  %149 = load float, float* @src.SCALE, align 4
  %150 = fdiv float %148, %149
  store float %150, float* %147, align 4
  br label %if.done22

if.else18:                                        ; preds = %if.done13
  %151 = load %src.Split_Pane*, %src.Split_Pane** %8, align 8
  %152 = getelementptr inbounds %src.Split_Pane, %src.Split_Pane* %151, i32 0, i32 3
  %153 = load float, float* %15, align 4
  %154 = load float, float* %16, align 4
  %155 = fdiv float %154, 2.000000e+00
  %156 = fsub float %153, %155
  %157 = load i8, i8* %9, align 1
  %158 = trunc i8 %157 to i1
  br i1 %158, label %if.then19, label %if.else20

if.then19:                                        ; preds = %if.else18
  %159 = load %src.Split_Pane*, %src.Split_Pane** %8, align 8
  %160 = getelementptr inbounds %src.Split_Pane, %src.Split_Pane* %159, i32 0, i32 0
  %161 = getelementptr inbounds %src.Element, %src.Element* %160, i32 0, i32 5
  %162 = getelementptr inbounds %src.Rect, %src.Rect* %161, i32 0, i32 2
  %163 = load float, float* %162, align 4
  br label %if.done21

if.else20:                                        ; preds = %if.else18
  %164 = load %src.Split_Pane*, %src.Split_Pane** %8, align 8
  %165 = getelementptr inbounds %src.Split_Pane, %src.Split_Pane* %164, i32 0, i32 0
  %166 = getelementptr inbounds %src.Element, %src.Element* %165, i32 0, i32 5
  %167 = getelementptr inbounds %src.Rect, %src.Rect* %166, i32 0, i32 0
  %168 = load float, float* %167, align 4
  br label %if.done21

if.done21:                                        ; preds = %if.else20, %if.then19
  %169 = phi float [ %163, %if.then19 ], [ %168, %if.else20 ]
  %170 = fsub float %156, %169
  %171 = load float, float* %17, align 4
  %172 = fdiv float %170, %171
  store float %172, float* %152, align 4
  br label %if.done22

if.done22:                                        ; preds = %if.done21, %if.done17
  %173 = load i8, i8* %10, align 1
  %174 = trunc i8 %173 to i1
  br i1 %174, label %if.else28, label %if.then23

if.then23:                                        ; preds = %if.done22
  %175 = load %src.Split_Pane*, %src.Split_Pane** %8, align 8
  %176 = getelementptr inbounds %src.Split_Pane, %src.Split_Pane* %175, i32 0, i32 3
  %177 = load float, float* %176, align 4
  %178 = fcmp olt float %177, 0x3FA99999A0000000
  %179 = zext i1 %178 to i8
  %180 = trunc i8 %179 to i1
  br i1 %180, label %if.then24, label %if.done25

if.then24:                                        ; preds = %if.then23
  %181 = load %src.Split_Pane*, %src.Split_Pane** %8, align 8
  %182 = getelementptr inbounds %src.Split_Pane, %src.Split_Pane* %181, i32 0, i32 3
  store float 0x3FA99999A0000000, float* %182, align 4
  br label %if.done25

if.done25:                                        ; preds = %if.then24, %if.then23
  %183 = load %src.Split_Pane*, %src.Split_Pane** %8, align 8
  %184 = getelementptr inbounds %src.Split_Pane, %src.Split_Pane* %183, i32 0, i32 3
  %185 = load float, float* %184, align 4
  %186 = fcmp ogt float %185, 0x3FEE666660000000
  %187 = zext i1 %186 to i8
  %188 = trunc i8 %187 to i1
  br i1 %188, label %if.then26, label %if.done27

if.then26:                                        ; preds = %if.done25
  %189 = load %src.Split_Pane*, %src.Split_Pane** %8, align 8
  %190 = getelementptr inbounds %src.Split_Pane, %src.Split_Pane* %189, i32 0, i32 3
  store float 0x3FEE666660000000, float* %190, align 4
  br label %if.done27

if.done27:                                        ; preds = %if.then26, %if.done25
  br label %if.done38

if.else28:                                        ; preds = %if.done22
  %191 = load %src.Split_Pane*, %src.Split_Pane** %8, align 8
  %192 = getelementptr inbounds %src.Split_Pane, %src.Split_Pane* %191, i32 0, i32 5
  %193 = load float, float* %192, align 4
  %194 = fcmp one float %193, -1.000000e+00
  %195 = zext i1 %194 to i8
  %196 = trunc i8 %195 to i1
  br i1 %196, label %if.then29, label %if.done37

if.then29:                                        ; preds = %if.else28
  %197 = load %src.Split_Pane*, %src.Split_Pane** %8, align 8
  %198 = getelementptr inbounds %src.Split_Pane, %src.Split_Pane* %197, i32 0, i32 0
  %199 = getelementptr inbounds %src.Element, %src.Element* %198, i32 0, i32 3
  %200 = load { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %199, align 8
  %201 = getelementptr inbounds { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %199, i32 0, i32 0
  %202 = load %src.Element**, %src.Element*** %201, align 8
  %203 = getelementptr inbounds { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %199, i32 0, i32 1
  %204 = load i64, i64* %203, align 8
  %205 = bitcast { i64, i64 }* %23 to %..string*
  store %..string { i8* getelementptr inbounds ([58 x i8], [58 x i8]* @"csbs$1a2", i64 0, i64 0), i64 57 }, %..string* %205, align 8
  %206 = load { i64, i64 }, { i64, i64 }* %23, align 8
  call void @runtime.bounds_check_error({ i64, i64 } %206, i32 2386, i32 29, i64 1, i64 %204)
  %207 = getelementptr %src.Element*, %src.Element** %202, i64 1
  %208 = load %src.Element*, %src.Element** %207, align 8
  store %src.Element* %208, %src.Element** %22, align 8
  %209 = load %src.Split_Pane*, %src.Split_Pane** %8, align 8
  %210 = getelementptr inbounds %src.Split_Pane, %src.Split_Pane* %209, i32 0, i32 3
  %211 = load float, float* %210, align 4
  %212 = load %src.Split_Pane*, %src.Split_Pane** %8, align 8
  %213 = getelementptr inbounds %src.Split_Pane, %src.Split_Pane* %212, i32 0, i32 5
  %214 = load float, float* %213, align 4
  %215 = fdiv float %214, 2.000000e+00
  %216 = fcmp ogt float %211, %215
  %217 = zext i1 %216 to i8
  %218 = trunc i8 %217 to i1
  br i1 %218, label %if.then30, label %if.done31

if.then30:                                        ; preds = %if.then29
  %219 = load %src.Element*, %src.Element** %22, align 8
  %220 = bitcast %runtime.Context* %24 to i8*
  call void @src.element_hide(%src.Element* %219, i1 false, i8* %220)
  br label %if.done31

if.done31:                                        ; preds = %if.then30, %if.then29
  %221 = load %src.Split_Pane*, %src.Split_Pane** %8, align 8
  %222 = getelementptr inbounds %src.Split_Pane, %src.Split_Pane* %221, i32 0, i32 3
  %223 = load float, float* %222, align 4
  %224 = load %src.Split_Pane*, %src.Split_Pane** %8, align 8
  %225 = getelementptr inbounds %src.Split_Pane, %src.Split_Pane* %224, i32 0, i32 5
  %226 = load float, float* %225, align 4
  %227 = fcmp olt float %223, %226
  %228 = zext i1 %227 to i8
  %229 = trunc i8 %228 to i1
  br i1 %229, label %if.then32, label %if.done36

if.then32:                                        ; preds = %if.done31
  %230 = load %src.Split_Pane*, %src.Split_Pane** %8, align 8
  %231 = getelementptr inbounds %src.Split_Pane, %src.Split_Pane* %230, i32 0, i32 3
  %232 = load float, float* %231, align 4
  %233 = load %src.Split_Pane*, %src.Split_Pane** %8, align 8
  %234 = getelementptr inbounds %src.Split_Pane, %src.Split_Pane* %233, i32 0, i32 5
  %235 = load float, float* %234, align 4
  %236 = fdiv float %235, 2.000000e+00
  %237 = fcmp olt float %232, %236
  %238 = zext i1 %237 to i8
  %239 = trunc i8 %238 to i1
  br i1 %239, label %if.then33, label %if.else34

if.then33:                                        ; preds = %if.then32
  %240 = load %src.Split_Pane*, %src.Split_Pane** %8, align 8
  %241 = getelementptr inbounds %src.Split_Pane, %src.Split_Pane* %240, i32 0, i32 3
  store float 0.000000e+00, float* %241, align 4
  %242 = load %src.Element*, %src.Element** %22, align 8
  %243 = bitcast %runtime.Context* %24 to i8*
  call void @src.element_hide(%src.Element* %242, i1 true, i8* %243)
  br label %if.done35

if.else34:                                        ; preds = %if.then32
  %244 = load %src.Split_Pane*, %src.Split_Pane** %8, align 8
  %245 = getelementptr inbounds %src.Split_Pane, %src.Split_Pane* %244, i32 0, i32 3
  %246 = load %src.Split_Pane*, %src.Split_Pane** %8, align 8
  %247 = getelementptr inbounds %src.Split_Pane, %src.Split_Pane* %246, i32 0, i32 5
  %248 = load float, float* %247, align 4
  store float %248, float* %245, align 4
  br label %if.done35

if.done35:                                        ; preds = %if.else34, %if.then33
  br label %if.done36

if.done36:                                        ; preds = %if.done35, %if.done31
  br label %if.done37

if.done37:                                        ; preds = %if.done36, %if.else28
  br label %if.done38

if.done38:                                        ; preds = %if.done37, %if.done27
  %249 = load %src.Split_Pane*, %src.Split_Pane** %8, align 8
  %250 = getelementptr inbounds %src.Split_Pane, %src.Split_Pane* %249, i32 0, i32 0
  %251 = bitcast %runtime.Context* %24 to i8*
  call void @src.element_repaint(%src.Element* %250, i8* %251)
  br label %switch.done

switch.done:                                      ; preds = %if.done38, %if.done6, %switch.case.body, %entry
  ret i64 0
}

define internal %src.Split_Pane* @src.split_pane_init(%src.Element* %0, i32 %1, float %2, float %3, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %4 = alloca %src.Element*, align 8
  %5 = alloca i32, align 4
  %6 = alloca float, align 4
  %7 = alloca float, align 4
  %8 = alloca %src.Split_Pane*, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Element* %0, %src.Element** %4, align 8
  store i32 %1, i32* %5, align 4
  store float %2, float* %6, align 4
  store float %3, float* %7, align 4
  store %src.Split_Pane* null, %src.Split_Pane** %8, align 8
  %9 = bitcast i8* %__.context_ptr to %runtime.Context*
  %10 = load %src.Element*, %src.Element** %4, align 8
  %11 = load i32, i32* %5, align 4
  %12 = getelementptr inbounds %runtime.Context, %runtime.Context* %9, i32 0, i32 0
  %13 = load %runtime.Allocator, %runtime.Allocator* %12, align 8
  %14 = bitcast %runtime.Allocator* %12 to { i64, i64 }*
  %15 = load { i64, i64 }, { i64, i64 }* %14, align 8
  %16 = bitcast %runtime.Context* %9 to i8*
  %17 = call %src.Split_Pane* @src.element_init-49162(%src.Element* %10, i32 %11, i8* bitcast (i64 (%src.Element*, i64, i64, i8*, i8*)* @src.split_pane_message to i8*), i64 -1, { i64, i64 } %15, i8* %16)
  store %src.Split_Pane* %17, %src.Split_Pane** %8, align 8
  %18 = load %src.Split_Pane*, %src.Split_Pane** %8, align 8
  %19 = getelementptr inbounds %src.Split_Pane, %src.Split_Pane* %18, i32 0, i32 3
  %20 = load float, float* %6, align 4
  store float %20, float* %19, align 4
  %21 = load %src.Split_Pane*, %src.Split_Pane** %8, align 8
  %22 = getelementptr inbounds %src.Split_Pane, %src.Split_Pane* %21, i32 0, i32 4
  %23 = load float, float* %6, align 4
  store float %23, float* %22, align 4
  %24 = load %src.Split_Pane*, %src.Split_Pane** %8, align 8
  %25 = getelementptr inbounds %src.Split_Pane, %src.Split_Pane* %24, i32 0, i32 5
  %26 = load float, float* %6, align 4
  store float %26, float* %25, align 4
  %27 = load %src.Split_Pane*, %src.Split_Pane** %8, align 8
  %28 = getelementptr inbounds %runtime.Context, %runtime.Context* %9, i32 0, i32 0
  %29 = load %runtime.Allocator, %runtime.Allocator* %28, align 8
  %30 = getelementptr inbounds %src.Split_Pane, %src.Split_Pane* %27, i32 0, i32 0
  %31 = bitcast %runtime.Allocator* %28 to { i64, i64 }*
  %32 = load { i64, i64 }, { i64, i64 }* %31, align 8
  %33 = bitcast %runtime.Context* %9 to i8*
  %34 = call %src.Element* @src.element_init-48739(%src.Element* %30, i32 0, i8* bitcast (i64 (%src.Element*, i64, i64, i8*, i8*)* @src.splitter_message to i8*), i64 -1, { i64, i64 } %32, i8* %33)
  %35 = load %src.Split_Pane*, %src.Split_Pane** %8, align 8
  store %src.Split_Pane* %35, %src.Split_Pane** %8, align 8
  ret %src.Split_Pane* %35
}

define internal i64 @src.enum_panel_message(%src.Element* %0, i64 %1, i64 %2, i8* %3, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %4 = alloca %src.Element*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i8*, align 8
  %8 = alloca %src.Enum_Panel*, align 8
  %9 = alloca { i64, i64 }, align 8
  %10 = alloca %runtime.Source_Code_Location, align 8
  %11 = alloca { i64, i64 }, align 8
  %12 = alloca %runtime.Source_Code_Location, align 8
  %13 = alloca %src.Element*, align 8
  %14 = alloca { i64, i64 }, align 8
  %15 = alloca %src.Element*, align 8
  %16 = alloca i64, align 8
  %17 = alloca %src.Element*, align 8
  %18 = alloca { <2 x float>, <2 x float> }, align 8
  %19 = alloca %src.Find_By_Point*, align 8
  %20 = alloca %src.Render_Target*, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Element* %0, %src.Element** %4, align 8
  store i64 %1, i64* %5, align 8
  store i64 %2, i64* %6, align 8
  store i8* %3, i8** %7, align 8
  %21 = bitcast i8* %__.context_ptr to %runtime.Context*
  %22 = load %src.Element*, %src.Element** %4, align 8
  %23 = bitcast %src.Element* %22 to %src.Enum_Panel*
  store %src.Enum_Panel* %23, %src.Enum_Panel** %8, align 8
  %24 = load %src.Enum_Panel*, %src.Enum_Panel** %8, align 8
  %25 = getelementptr inbounds %src.Enum_Panel, %src.Enum_Panel* %24, i32 0, i32 1
  %26 = load i64*, i64** %25, align 8
  %27 = icmp ne i64* %26, null
  %28 = zext i1 %27 to i8
  %29 = icmp ne i8 %28, 0
  %30 = bitcast { i64, i64 }* %9 to %..string*
  store %..string zeroinitializer, %..string* %30, align 8
  %31 = load { i64, i64 }, { i64, i64 }* %9, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([58 x i8], [58 x i8]* @"csbs$1a2", i64 0, i64 0), i64 57 }, i32 2450, i32 2, %..string { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @"csbs$31d", i64 0, i64 0), i64 18 } }, %runtime.Source_Code_Location* %10, align 8
  %32 = bitcast %runtime.Context* %21 to i8*
  call void @runtime.assert(i1 %29, { i64, i64 } %31, %runtime.Source_Code_Location* %10, i8* %32)
  %33 = load %src.Element*, %src.Element** %4, align 8
  %34 = getelementptr inbounds %src.Element, %src.Element* %33, i32 0, i32 3
  %35 = load { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %34, align 8
  %36 = getelementptr inbounds { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %34, i32 0, i32 1
  %37 = load i64, i64* %36, align 8
  %38 = load %src.Enum_Panel*, %src.Enum_Panel** %8, align 8
  %39 = getelementptr inbounds %src.Enum_Panel, %src.Enum_Panel* %38, i32 0, i32 2
  %40 = load i64, i64* %39, align 8
  %41 = icmp eq i64 %37, %40
  %42 = zext i1 %41 to i8
  %43 = icmp ne i8 %42, 0
  %44 = bitcast { i64, i64 }* %11 to %..string*
  store %..string zeroinitializer, %..string* %44, align 8
  %45 = load { i64, i64 }, { i64, i64 }* %11, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([58 x i8], [58 x i8]* @"csbs$1a2", i64 0, i64 0), i64 57 }, i32 2451, i32 2, %..string { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @"csbs$31d", i64 0, i64 0), i64 18 } }, %runtime.Source_Code_Location* %12, align 8
  %46 = bitcast %runtime.Context* %21 to i8*
  call void @runtime.assert(i1 %43, { i64, i64 } %45, %runtime.Source_Code_Location* %12, i8* %46)
  %47 = load %src.Element*, %src.Element** %4, align 8
  %48 = getelementptr inbounds %src.Element, %src.Element* %47, i32 0, i32 3
  %49 = load { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %48, align 8
  %50 = getelementptr inbounds { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %48, i32 0, i32 0
  %51 = load %src.Element**, %src.Element*** %50, align 8
  %52 = getelementptr inbounds { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %48, i32 0, i32 1
  %53 = load i64, i64* %52, align 8
  %54 = load %src.Enum_Panel*, %src.Enum_Panel** %8, align 8
  %55 = getelementptr inbounds %src.Enum_Panel, %src.Enum_Panel* %54, i32 0, i32 1
  %56 = load i64*, i64** %55, align 8
  %57 = load i64, i64* %56, align 8
  %58 = bitcast { i64, i64 }* %14 to %..string*
  store %..string { i8* getelementptr inbounds ([58 x i8], [58 x i8]* @"csbs$1a2", i64 0, i64 0), i64 57 }, %..string* %58, align 8
  %59 = load { i64, i64 }, { i64, i64 }* %14, align 8
  call void @runtime.bounds_check_error({ i64, i64 } %59, i32 2452, i32 39, i64 %57, i64 %53)
  %60 = getelementptr %src.Element*, %src.Element** %51, i64 %57
  %61 = load %src.Element*, %src.Element** %60, align 8
  store %src.Element* %61, %src.Element** %13, align 8
  %62 = load i64, i64* %5, align 8
  switch i64 %62, label %switch.done [
    i64 3, label %switch.case.body
    i64 1, label %switch.case.body1
    i64 29, label %switch.case.body2
    i64 2, label %switch.case.body3
  ]

switch.case.body:                                 ; preds = %entry
  store %src.Element* null, %src.Element** %15, align 8
  %63 = load %src.Element*, %src.Element** %4, align 8
  %64 = getelementptr inbounds %src.Element, %src.Element* %63, i32 0, i32 3
  %65 = getelementptr inbounds { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %64, i32 0, i32 1
  store i64 -1, i64* %16, align 8
  br label %for.index.loop

for.index.loop:                                   ; preds = %for.index.body, %switch.case.body
  %66 = load i64, i64* %16, align 8
  %67 = add i64 %66, 1
  store i64 %67, i64* %16, align 8
  %68 = load i64, i64* %65, align 8
  %69 = icmp slt i64 %67, %68
  br i1 %69, label %for.index.body, label %for.index.done

for.index.body:                                   ; preds = %for.index.loop
  %70 = load i64, i64* %16, align 8
  %71 = getelementptr inbounds { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %64, i32 0, i32 0
  %72 = load %src.Element**, %src.Element*** %71, align 8
  %73 = getelementptr %src.Element*, %src.Element** %72, i64 %70
  %74 = load %src.Element*, %src.Element** %73, align 8
  store %src.Element* %74, %src.Element** %17, align 8
  %75 = load %src.Element*, %src.Element** %17, align 8
  %76 = getelementptr inbounds %src.Element, %src.Element* %75, i32 0, i32 6
  store %src.Rect zeroinitializer, %src.Rect* %76, align 4
  br label %for.index.loop

for.index.done:                                   ; preds = %for.index.loop
  %77 = load %src.Element*, %src.Element** %13, align 8
  %78 = load %src.Element*, %src.Element** %4, align 8
  %79 = getelementptr inbounds %src.Element, %src.Element* %78, i32 0, i32 5
  %80 = load %src.Rect, %src.Rect* %79, align 4
  %81 = bitcast { <2 x float>, <2 x float> }* %18 to %src.Rect*
  store %src.Rect %80, %src.Rect* %81, align 4
  %82 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %18, align 8
  %83 = bitcast %runtime.Context* %21 to i8*
  call void @src.element_move(%src.Element* %77, { <2 x float>, <2 x float> } %82, i8* %83)
  br label %switch.done

switch.case.body1:                                ; preds = %entry
  %84 = load %src.Element*, %src.Element** %13, align 8
  %85 = load i64, i64* %5, align 8
  %86 = load i64, i64* %6, align 8
  %87 = load i8*, i8** %7, align 8
  %88 = bitcast %runtime.Context* %21 to i8*
  %89 = call i64 @src.element_message(%src.Element* %84, i64 %85, i64 %86, i8* %87, i8* %88)
  br label %switch.done

switch.case.body2:                                ; preds = %entry
  %90 = load i8*, i8** %7, align 8
  %91 = bitcast i8* %90 to %src.Find_By_Point*
  store %src.Find_By_Point* %91, %src.Find_By_Point** %19, align 8
  %92 = load %src.Element*, %src.Element** %13, align 8
  %93 = load %src.Find_By_Point*, %src.Find_By_Point** %19, align 8
  %94 = bitcast %runtime.Context* %21 to i8*
  %95 = call i64 @src.element_find_by_point_custom(%src.Element* %92, %src.Find_By_Point* %93, i8* %94)
  ret i64 1

switch.case.body3:                                ; preds = %entry
  %96 = load %src.Element*, %src.Element** %4, align 8
  %97 = getelementptr inbounds %src.Element, %src.Element* %96, i32 0, i32 4
  %98 = load %src.Window*, %src.Window** %97, align 8
  %99 = getelementptr inbounds %src.Window, %src.Window* %98, i32 0, i32 24
  %100 = load %src.Render_Target*, %src.Render_Target** %99, align 8
  store %src.Render_Target* %100, %src.Render_Target** %20, align 8
  %101 = load %src.Render_Target*, %src.Render_Target** %20, align 8
  %102 = load %src.Element*, %src.Element** %13, align 8
  %103 = bitcast %runtime.Context* %21 to i8*
  call void @src.render_element_clipped(%src.Render_Target* %101, %src.Element* %102, i8* %103)
  ret i64 1

switch.done:                                      ; preds = %switch.case.body1, %for.index.done, %entry
  ret i64 0
}

define internal %src.Enum_Panel* @src.enum_panel_init(%src.Element* %0, i32 %1, i64* %2, i64 %3, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %4 = alloca %src.Element*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i64*, align 8
  %7 = alloca i64, align 8
  %8 = alloca %src.Enum_Panel*, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Element* %0, %src.Element** %4, align 8
  store i32 %1, i32* %5, align 4
  store i64* %2, i64** %6, align 8
  store i64 %3, i64* %7, align 8
  store %src.Enum_Panel* null, %src.Enum_Panel** %8, align 8
  %9 = bitcast i8* %__.context_ptr to %runtime.Context*
  %10 = load %src.Element*, %src.Element** %4, align 8
  %11 = load i32, i32* %5, align 4
  %12 = getelementptr inbounds %runtime.Context, %runtime.Context* %9, i32 0, i32 0
  %13 = load %runtime.Allocator, %runtime.Allocator* %12, align 8
  %14 = bitcast %runtime.Allocator* %12 to { i64, i64 }*
  %15 = load { i64, i64 }, { i64, i64 }* %14, align 8
  %16 = bitcast %runtime.Context* %9 to i8*
  %17 = call %src.Enum_Panel* @src.element_init-49189(%src.Element* %10, i32 %11, i8* bitcast (i64 (%src.Element*, i64, i64, i8*, i8*)* @src.enum_panel_message to i8*), i64 -1, { i64, i64 } %15, i8* %16)
  store %src.Enum_Panel* %17, %src.Enum_Panel** %8, align 8
  %18 = load %src.Enum_Panel*, %src.Enum_Panel** %8, align 8
  %19 = getelementptr inbounds %src.Enum_Panel, %src.Enum_Panel* %18, i32 0, i32 1
  %20 = load i64*, i64** %6, align 8
  store i64* %20, i64** %19, align 8
  %21 = load %src.Enum_Panel*, %src.Enum_Panel** %8, align 8
  %22 = getelementptr inbounds %src.Enum_Panel, %src.Enum_Panel* %21, i32 0, i32 2
  %23 = load i64, i64* %7, align 8
  store i64 %23, i64* %22, align 8
  %24 = load %src.Enum_Panel*, %src.Enum_Panel** %8, align 8
  store %src.Enum_Panel* %24, %src.Enum_Panel** %8, align 8
  ret %src.Enum_Panel* %24
}

define internal i64 @src.linear_gauge_message(%src.Element* %0, i64 %1, i64 %2, i8* %3, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %4 = alloca %src.Element*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i8*, align 8
  %8 = alloca %src.Linear_Gauge*, align 8
  %9 = alloca %src.Render_Target*, align 8
  %10 = alloca [4 x i8], align 8
  %11 = alloca { <2 x float>, <2 x float> }, align 8
  %12 = alloca i64, align 8
  %13 = alloca %src.Rect, align 8
  %14 = alloca i64, align 8
  %15 = alloca %..string, align 8
  %16 = alloca %..string, align 8
  %17 = alloca { <2 x float>, <2 x float> }, align 8
  %18 = alloca %..string, align 8
  %19 = alloca %..string, align 8
  %20 = alloca float, align 4
  br label %entry

entry:                                            ; preds = %decls
  store %src.Element* %0, %src.Element** %4, align 8
  store i64 %1, i64* %5, align 8
  store i64 %2, i64* %6, align 8
  store i8* %3, i8** %7, align 8
  %21 = bitcast i8* %__.context_ptr to %runtime.Context*
  %22 = load %src.Element*, %src.Element** %4, align 8
  %23 = bitcast %src.Element* %22 to %src.Linear_Gauge*
  store %src.Linear_Gauge* %23, %src.Linear_Gauge** %8, align 8
  %24 = load i64, i64* %5, align 8
  switch i64 %24, label %switch.done [
    i64 2, label %switch.case.body
    i64 9, label %switch.case.body1
    i64 10, label %switch.case.body2
  ]

switch.case.body:                                 ; preds = %entry
  %25 = load %src.Element*, %src.Element** %4, align 8
  %26 = getelementptr inbounds %src.Element, %src.Element* %25, i32 0, i32 4
  %27 = load %src.Window*, %src.Window** %26, align 8
  %28 = getelementptr inbounds %src.Window, %src.Window* %27, i32 0, i32 24
  %29 = load %src.Render_Target*, %src.Render_Target** %28, align 8
  store %src.Render_Target* %29, %src.Render_Target** %9, align 8
  %30 = load [4 x i8], [4 x i8]* getelementptr inbounds (%src.Theme, %src.Theme* @src.theme, i64 0, i32 0, i64 1), align 1
  store [4 x i8] %30, [4 x i8]* %10, align 1
  %31 = load %src.Render_Target*, %src.Render_Target** %9, align 8
  %32 = load %src.Element*, %src.Element** %4, align 8
  %33 = getelementptr inbounds %src.Element, %src.Element* %32, i32 0, i32 5
  %34 = load %src.Rect, %src.Rect* %33, align 4
  %35 = load [4 x i8], [4 x i8]* getelementptr inbounds (%src.Theme, %src.Theme* @src.theme, i64 0, i32 4), align 1
  %36 = load float, float* @src.ROUNDNESS, align 4
  %37 = bitcast { <2 x float>, <2 x float> }* %11 to %src.Rect*
  store %src.Rect %34, %src.Rect* %37, align 4
  %38 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %11, align 8
  %39 = bitcast i64* %12 to [4 x i8]*
  store [4 x i8] %35, [4 x i8]* %39, align 1
  %40 = load i64, i64* %12, align 8
  %41 = bitcast %runtime.Context* %21 to i8*
  call void @src.render_rect(%src.Render_Target* %31, { <2 x float>, <2 x float> } %38, i64 %40, float %36, i8* %41)
  %42 = load %src.Element*, %src.Element** %4, align 8
  %43 = getelementptr inbounds %src.Element, %src.Element* %42, i32 0, i32 5
  %44 = load %src.Rect, %src.Rect* %43, align 4
  store %src.Rect %44, %src.Rect* %13, align 4
  %45 = getelementptr inbounds %src.Rect, %src.Rect* %13, i32 0, i32 1
  %46 = getelementptr inbounds %src.Rect, %src.Rect* %13, i32 0, i32 0
  %47 = load float, float* %46, align 4
  %48 = load %src.Linear_Gauge*, %src.Linear_Gauge** %8, align 8
  %49 = getelementptr inbounds %src.Linear_Gauge, %src.Linear_Gauge* %48, i32 0, i32 1
  %50 = load float, float* %49, align 4
  %51 = fcmp olt float %50, 1.000000e+00
  %52 = select i1 %51, float %50, float 1.000000e+00
  %53 = load %src.Rect, %src.Rect* %13, align 4
  %54 = bitcast %src.Rect* %13 to { <2 x float>, <2 x float> }*
  %55 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %54, align 8
  %56 = bitcast %runtime.Context* %21 to i8*
  %57 = call float @src.rect_width({ <2 x float>, <2 x float> } %55, i8* %56)
  %58 = fmul float %52, %57
  %59 = fadd float %47, %58
  store float %59, float* %45, align 4
  %60 = load %src.Render_Target*, %src.Render_Target** %9, align 8
  %61 = load %src.Rect, %src.Rect* %13, align 4
  %62 = load [4 x i8], [4 x i8]* getelementptr inbounds (%src.Theme, %src.Theme* @src.theme, i64 0, i32 3), align 1
  %63 = load float, float* @src.ROUNDNESS, align 4
  %64 = bitcast %src.Rect* %13 to { <2 x float>, <2 x float> }*
  %65 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %64, align 8
  %66 = bitcast i64* %14 to [4 x i8]*
  store [4 x i8] %62, [4 x i8]* %66, align 1
  %67 = load i64, i64* %14, align 8
  %68 = bitcast %runtime.Context* %21 to i8*
  call void @src.render_rect(%src.Render_Target* %60, { <2 x float>, <2 x float> } %65, i64 %67, float %63, i8* %68)
  %69 = load %src.Linear_Gauge*, %src.Linear_Gauge** %8, align 8
  %70 = bitcast %runtime.Context* %21 to i8*
  %71 = call { i64, i64 } @src.linear_gauge_message.gauge_text-0(%src.Linear_Gauge* %69, i8* %70)
  %72 = bitcast %..string* %16 to { i64, i64 }*
  store { i64, i64 } %71, { i64, i64 }* %72, align 8
  %73 = load %..string, %..string* %16, align 8
  store %..string %73, %..string* %15, align 8
  %74 = load %src.Element*, %src.Element** %4, align 8
  %75 = load %..string, %..string* %15, align 8
  %76 = load %src.Element*, %src.Element** %4, align 8
  %77 = getelementptr inbounds %src.Element, %src.Element* %76, i32 0, i32 5
  %78 = load %src.Rect, %src.Rect* %77, align 4
  %79 = load [4 x i8], [4 x i8]* %10, align 1
  %80 = bitcast %..string* %15 to { i64, i64 }*
  %81 = load { i64, i64 }, { i64, i64 }* %80, align 8
  %82 = bitcast { <2 x float>, <2 x float> }* %17 to %src.Rect*
  store %src.Rect %78, %src.Rect* %82, align 4
  %83 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %17, align 8
  %84 = bitcast [4 x i8]* %10 to i64*
  %85 = load i64, i64* %84, align 8
  %86 = bitcast %runtime.Context* %21 to i8*
  call void @src.erender_string_aligned(%src.Element* %74, { i64, i64 } %81, { <2 x float>, <2 x float> } %83, i64 %85, i64 1, i64 1, i8* %86)
  br label %switch.done

switch.case.body1:                                ; preds = %entry
  %87 = load %src.Linear_Gauge*, %src.Linear_Gauge** %8, align 8
  %88 = bitcast %runtime.Context* %21 to i8*
  %89 = call { i64, i64 } @src.linear_gauge_message.gauge_text-0(%src.Linear_Gauge* %87, i8* %88)
  %90 = bitcast %..string* %19 to { i64, i64 }*
  store { i64, i64 } %89, { i64, i64 }* %90, align 8
  %91 = load %..string, %..string* %19, align 8
  store %..string %91, %..string* %18, align 8
  %92 = load float, float* @src.SCALE, align 4
  %93 = fmul float 1.500000e+02, %92
  %94 = load %src.Element*, %src.Element** %4, align 8
  %95 = load %..string, %..string* %18, align 8
  %96 = bitcast %..string* %18 to { i64, i64 }*
  %97 = load { i64, i64 }, { i64, i64 }* %96, align 8
  %98 = bitcast %runtime.Context* %21 to i8*
  %99 = call float @src.estring_width(%src.Element* %94, { i64, i64 } %97, i8* %98)
  %100 = load float, float* @src.SCALE, align 4
  %101 = fmul float 1.000000e+01, %100
  %102 = fadd float %99, %101
  %103 = fcmp ogt float %93, %102
  %104 = select i1 %103, float %93, float %102
  store float %104, float* %20, align 4
  %105 = load float, float* %20, align 4
  %106 = fptosi float %105 to i64
  ret i64 %106

switch.case.body2:                                ; preds = %entry
  %107 = load %src.Element*, %src.Element** %4, align 8
  %108 = bitcast %runtime.Context* %21 to i8*
  %109 = call float @src.efont_size(%src.Element* %107, i8* %108)
  %110 = load float, float* @src.SCALE, align 4
  %111 = fmul float 1.000000e+01, %110
  %112 = fadd float %109, %111
  %113 = fptosi float %112 to i64
  ret i64 %113

switch.done:                                      ; preds = %switch.case.body, %entry
  ret i64 0
}

define internal %src.Linear_Gauge* @src.linear_gauge_init(%src.Element* %0, i32 %1, float %2, { i64, i64 } %3, { i64, i64 } %4, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %5 = alloca %src.Element*, align 8
  %6 = alloca i32, align 4
  %7 = alloca float, align 4
  %8 = alloca %..string, align 8
  %9 = alloca %..string, align 8
  %10 = alloca %src.Linear_Gauge*, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Element* %0, %src.Element** %5, align 8
  store i32 %1, i32* %6, align 4
  store float %2, float* %7, align 4
  %11 = bitcast %..string* %8 to { i64, i64 }*
  store { i64, i64 } %3, { i64, i64 }* %11, align 8
  %12 = load %..string, %..string* %8, align 8
  %13 = bitcast %..string* %9 to { i64, i64 }*
  store { i64, i64 } %4, { i64, i64 }* %13, align 8
  %14 = load %..string, %..string* %9, align 8
  store %src.Linear_Gauge* null, %src.Linear_Gauge** %10, align 8
  %15 = bitcast i8* %__.context_ptr to %runtime.Context*
  %16 = load %src.Element*, %src.Element** %5, align 8
  %17 = load i32, i32* %6, align 4
  %18 = getelementptr inbounds %runtime.Context, %runtime.Context* %15, i32 0, i32 0
  %19 = load %runtime.Allocator, %runtime.Allocator* %18, align 8
  %20 = bitcast %runtime.Allocator* %18 to { i64, i64 }*
  %21 = load { i64, i64 }, { i64, i64 }* %20, align 8
  %22 = bitcast %runtime.Context* %15 to i8*
  %23 = call %src.Linear_Gauge* @src.element_init-49214(%src.Element* %16, i32 %17, i8* bitcast (i64 (%src.Element*, i64, i64, i8*, i8*)* @src.linear_gauge_message to i8*), i64 -1, { i64, i64 } %21, i8* %22)
  store %src.Linear_Gauge* %23, %src.Linear_Gauge** %10, align 8
  %24 = load %src.Linear_Gauge*, %src.Linear_Gauge** %10, align 8
  %25 = getelementptr inbounds %src.Linear_Gauge, %src.Linear_Gauge* %24, i32 0, i32 4
  %26 = load %..string, %..string* %8, align 8
  store %..string %26, %..string* %25, align 8
  %27 = load %src.Linear_Gauge*, %src.Linear_Gauge** %10, align 8
  %28 = getelementptr inbounds %src.Linear_Gauge, %src.Linear_Gauge* %27, i32 0, i32 5
  %29 = load %..string, %..string* %9, align 8
  store %..string %29, %..string* %28, align 8
  %30 = load %src.Linear_Gauge*, %src.Linear_Gauge** %10, align 8
  %31 = getelementptr inbounds %src.Linear_Gauge, %src.Linear_Gauge* %30, i32 0, i32 1
  %32 = load float, float* %7, align 4
  store float %32, float* %31, align 4
  %33 = load %src.Linear_Gauge*, %src.Linear_Gauge** %10, align 8
  store %src.Linear_Gauge* %33, %src.Linear_Gauge** %10, align 8
  ret %src.Linear_Gauge* %33
}

define internal { i64, float } @src.element_retrieve_font_options(%src.Element* %0, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %1 = alloca %src.Element*, align 8
  %2 = alloca %fontstash.Font*, align 8
  %3 = alloca float, align 4
  %4 = alloca { %fontstash.Font*, float }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Element* %0, %src.Element** %1, align 8
  store %fontstash.Font* null, %fontstash.Font** %2, align 8
  store float 0.000000e+00, float* %3, align 4
  %5 = bitcast i8* %__.context_ptr to %runtime.Context*
  %6 = load %src.Element*, %src.Element** %1, align 8
  %7 = getelementptr inbounds %src.Element, %src.Element* %6, i32 0, i32 10
  %8 = load %src.Font_Options*, %src.Font_Options** %7, align 8
  %9 = icmp eq %src.Font_Options* %8, null
  %10 = zext i1 %9 to i8
  %11 = trunc i8 %10 to i1
  br i1 %11, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %12 = load %fontstash.Font*, %fontstash.Font** @src.font_regular, align 8
  store %fontstash.Font* %12, %fontstash.Font** %2, align 8
  store float 2.000000e+01, float* %3, align 4
  br label %if.done

if.else:                                          ; preds = %entry
  %13 = load %src.Element*, %src.Element** %1, align 8
  %14 = getelementptr inbounds %src.Element, %src.Element* %13, i32 0, i32 10
  %15 = load %src.Font_Options*, %src.Font_Options** %14, align 8
  %16 = getelementptr inbounds %src.Font_Options, %src.Font_Options* %15, i32 0, i32 0
  %17 = load %fontstash.Font*, %fontstash.Font** %16, align 8
  store %fontstash.Font* %17, %fontstash.Font** %2, align 8
  %18 = load %src.Element*, %src.Element** %1, align 8
  %19 = getelementptr inbounds %src.Element, %src.Element* %18, i32 0, i32 10
  %20 = load %src.Font_Options*, %src.Font_Options** %19, align 8
  %21 = getelementptr inbounds %src.Font_Options, %src.Font_Options* %20, i32 0, i32 1
  %22 = load float, float* %21, align 4
  store float %22, float* %3, align 4
  br label %if.done

if.done:                                          ; preds = %if.else, %if.then
  %23 = load %fontstash.Font*, %fontstash.Font** %2, align 8
  %24 = load float, float* %3, align 4
  store %fontstash.Font* %23, %fontstash.Font** %2, align 8
  store float %24, float* %3, align 4
  %25 = getelementptr inbounds { %fontstash.Font*, float }, { %fontstash.Font*, float }* %4, i32 0, i32 0
  %26 = getelementptr inbounds { %fontstash.Font*, float }, { %fontstash.Font*, float }* %4, i32 0, i32 1
  store %fontstash.Font* %23, %fontstash.Font** %25, align 8
  store float %24, float* %26, align 4
  %27 = load { %fontstash.Font*, float }, { %fontstash.Font*, float }* %4, align 8
  %28 = bitcast { %fontstash.Font*, float }* %4 to { i64, float }*
  %29 = load { i64, float }, { i64, float }* %28, align 8
  ret { i64, float } %29
}

; Function Attrs: alwaysinline
define internal void @src.erender_string_aligned(%src.Element* %0, { i64, i64 } %1, { <2 x float>, <2 x float> } %2, i64 %3, i64 %4, i64 %5, i8* noalias nocapture nonnull %__.context_ptr) #4 {
decls:
  %6 = alloca %src.Element*, align 8
  %7 = alloca %..string, align 8
  %8 = alloca %src.Rect, align 8
  %9 = alloca [4 x i8], align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca %fontstash.Font*, align 8
  %13 = alloca float, align 4
  %14 = alloca { %fontstash.Font*, float }, align 8
  %15 = alloca %src.Rect, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Element* %0, %src.Element** %6, align 8
  %16 = bitcast %..string* %7 to { i64, i64 }*
  store { i64, i64 } %1, { i64, i64 }* %16, align 8
  %17 = load %..string, %..string* %7, align 8
  %18 = bitcast %src.Rect* %8 to { <2 x float>, <2 x float> }*
  store { <2 x float>, <2 x float> } %2, { <2 x float>, <2 x float> }* %18, align 8
  %19 = load %src.Rect, %src.Rect* %8, align 4
  %20 = bitcast [4 x i8]* %9 to i64*
  store i64 %3, i64* %20, align 8
  %21 = load [4 x i8], [4 x i8]* %9, align 1
  store i64 %4, i64* %10, align 8
  store i64 %5, i64* %11, align 8
  %22 = bitcast i8* %__.context_ptr to %runtime.Context*
  %23 = load %src.Element*, %src.Element** %6, align 8
  %24 = bitcast %runtime.Context* %22 to i8*
  %25 = call { i64, float } @src.element_retrieve_font_options(%src.Element* %23, i8* %24) #4
  %26 = bitcast { %fontstash.Font*, float }* %14 to { i64, float }*
  store { i64, float } %25, { i64, float }* %26, align 8
  %27 = load { %fontstash.Font*, float }, { %fontstash.Font*, float }* %14, align 8
  %28 = getelementptr inbounds { %fontstash.Font*, float }, { %fontstash.Font*, float }* %14, i32 0, i32 0
  %29 = load %fontstash.Font*, %fontstash.Font** %28, align 8
  %30 = getelementptr inbounds { %fontstash.Font*, float }, { %fontstash.Font*, float }* %14, i32 0, i32 1
  %31 = load float, float* %30, align 4
  store %fontstash.Font* %29, %fontstash.Font** %12, align 8
  store float %31, float* %13, align 4
  %32 = load %src.Element*, %src.Element** %6, align 8
  %33 = getelementptr inbounds %src.Element, %src.Element* %32, i32 0, i32 4
  %34 = load %src.Window*, %src.Window** %33, align 8
  %35 = getelementptr inbounds %src.Window, %src.Window* %34, i32 0, i32 24
  %36 = load %src.Render_Target*, %src.Render_Target** %35, align 8
  %37 = load %fontstash.Font*, %fontstash.Font** %12, align 8
  %38 = load %..string, %..string* %7, align 8
  %39 = load %src.Rect, %src.Rect* %8, align 4
  %40 = load [4 x i8], [4 x i8]* %9, align 1
  %41 = load i64, i64* %10, align 8
  %42 = load i64, i64* %11, align 8
  %43 = load float, float* %13, align 4
  %44 = load float, float* @src.SCALE, align 4
  %45 = fmul float %43, %44
  %46 = bitcast %..string* %7 to { i64, i64 }*
  %47 = load { i64, i64 }, { i64, i64 }* %46, align 8
  %48 = bitcast %src.Rect* %8 to { <2 x float>, <2 x float> }*
  %49 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %48, align 8
  %50 = bitcast [4 x i8]* %9 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = bitcast %runtime.Context* %22 to i8*
  %53 = call { <2 x float>, <2 x float> } @src.render_string_aligned(%src.Render_Target* %36, %fontstash.Font* %37, { i64, i64 } %47, { <2 x float>, <2 x float> } %49, i64 %51, i64 %41, i64 %42, float %45, i8* %52) #4
  %54 = bitcast %src.Rect* %15 to { <2 x float>, <2 x float> }*
  store { <2 x float>, <2 x float> } %53, { <2 x float>, <2 x float> }* %54, align 8
  %55 = load %src.Rect, %src.Rect* %15, align 4
  ret void
}

; Function Attrs: alwaysinline
define internal float @src.estring_width(%src.Element* %0, { i64, i64 } %1, i8* noalias nocapture nonnull %__.context_ptr) #4 {
decls:
  %2 = alloca %src.Element*, align 8
  %3 = alloca %..string, align 8
  %4 = alloca %fontstash.Font*, align 8
  %5 = alloca float, align 4
  %6 = alloca { %fontstash.Font*, float }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Element* %0, %src.Element** %2, align 8
  %7 = bitcast %..string* %3 to { i64, i64 }*
  store { i64, i64 } %1, { i64, i64 }* %7, align 8
  %8 = load %..string, %..string* %3, align 8
  %9 = bitcast i8* %__.context_ptr to %runtime.Context*
  %10 = load %src.Element*, %src.Element** %2, align 8
  %11 = bitcast %runtime.Context* %9 to i8*
  %12 = call { i64, float } @src.element_retrieve_font_options(%src.Element* %10, i8* %11) #4
  %13 = bitcast { %fontstash.Font*, float }* %6 to { i64, float }*
  store { i64, float } %12, { i64, float }* %13, align 8
  %14 = load { %fontstash.Font*, float }, { %fontstash.Font*, float }* %6, align 8
  %15 = getelementptr inbounds { %fontstash.Font*, float }, { %fontstash.Font*, float }* %6, i32 0, i32 0
  %16 = load %fontstash.Font*, %fontstash.Font** %15, align 8
  %17 = getelementptr inbounds { %fontstash.Font*, float }, { %fontstash.Font*, float }* %6, i32 0, i32 1
  %18 = load float, float* %17, align 4
  store %fontstash.Font* %16, %fontstash.Font** %4, align 8
  store float %18, float* %5, align 4
  %19 = load %fontstash.Font*, %fontstash.Font** %4, align 8
  %20 = load float, float* %5, align 4
  %21 = load float, float* @src.SCALE, align 4
  %22 = fmul float %20, %21
  %23 = load %..string, %..string* %3, align 8
  %24 = bitcast %..string* %3 to { i64, i64 }*
  %25 = load { i64, i64 }, { i64, i64 }* %24, align 8
  %26 = bitcast %runtime.Context* %9 to i8*
  %27 = call float @fontstash.string_width(%fontstash.Font* %19, float %22, { i64, i64 } %25, i8* %26) #4
  ret float %27
}

define internal float @src.efont_size(%src.Element* %0, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %1 = alloca %src.Element*, align 8
  %2 = alloca float, align 4
  %3 = alloca { %fontstash.Font*, float }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Element* %0, %src.Element** %1, align 8
  %4 = bitcast i8* %__.context_ptr to %runtime.Context*
  %5 = load %src.Element*, %src.Element** %1, align 8
  %6 = bitcast %runtime.Context* %4 to i8*
  %7 = call { i64, float } @src.element_retrieve_font_options(%src.Element* %5, i8* %6)
  %8 = bitcast { %fontstash.Font*, float }* %3 to { i64, float }*
  store { i64, float } %7, { i64, float }* %8, align 8
  %9 = load { %fontstash.Font*, float }, { %fontstash.Font*, float }* %3, align 8
  %10 = getelementptr inbounds { %fontstash.Font*, float }, { %fontstash.Font*, float }* %3, i32 0, i32 0
  %11 = load %fontstash.Font*, %fontstash.Font** %10, align 8
  %12 = getelementptr inbounds { %fontstash.Font*, float }, { %fontstash.Font*, float }* %3, i32 0, i32 1
  %13 = load float, float* %12, align 4
  store float %13, float* %2, align 4
  %14 = load float, float* %2, align 4
  %15 = load float, float* @src.SCALE, align 4
  %16 = fmul float %14, %15
  %17 = call float @math.round_f32(float %16)
  ret float %17
}

define internal void @src.fonts_init(i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %0 = alloca { i64, i64 }, align 8
  %1 = alloca { i64, i64 }, align 8
  %2 = alloca { i64, i64 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  %3 = bitcast i8* %__.context_ptr to %runtime.Context*
  %4 = bitcast { i64, i64 }* %0 to %..string*
  store %..string { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"csbs$31e", i64 0, i64 0), i64 16 }, %..string* %4, align 8
  %5 = load { i64, i64 }, { i64, i64 }* %0, align 8
  %6 = bitcast %runtime.Context* %3 to i8*
  %7 = call %fontstash.Font* @fontstash.font_init({ i64, i64 } %5, i1 true, float 2.000000e+01, i8* %6)
  store %fontstash.Font* %7, %fontstash.Font** @src.font_regular, align 8
  %8 = bitcast { i64, i64 }* %1 to %..string*
  store %..string { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @"csbs$31f", i64 0, i64 0), i64 13 }, %..string* %8, align 8
  %9 = load { i64, i64 }, { i64, i64 }* %1, align 8
  %10 = bitcast %runtime.Context* %3 to i8*
  %11 = call %fontstash.Font* @fontstash.font_init({ i64, i64 } %9, i1 true, float 2.000000e+01, i8* %10)
  store %fontstash.Font* %11, %fontstash.Font** @src.font_bold, align 8
  %12 = bitcast { i64, i64 }* %2 to %..string*
  store %..string { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"csbs$320", i64 0, i64 0), i64 11 }, %..string* %12, align 8
  %13 = load { i64, i64 }, { i64, i64 }* %2, align 8
  %14 = bitcast %runtime.Context* %3 to i8*
  %15 = call %fontstash.Font* @fontstash.font_init({ i64, i64 } %13, i1 false, float 0.000000e+00, i8* %14)
  store %fontstash.Font* %15, %fontstash.Font** @src.font_icon, align 8
  ret void
}

define internal void @src.fonts_destroy(i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  br label %entry

entry:                                            ; preds = %decls
  %0 = bitcast i8* %__.context_ptr to %runtime.Context*
  %1 = load %fontstash.Font*, %fontstash.Font** @src.font_regular, align 8
  %2 = bitcast %runtime.Context* %0 to i8*
  call void @fontstash.font_destroy(%fontstash.Font* %1, i8* %2)
  %3 = load %fontstash.Font*, %fontstash.Font** @src.font_bold, align 8
  %4 = bitcast %runtime.Context* %0 to i8*
  call void @fontstash.font_destroy(%fontstash.Font* %3, i8* %4)
  %5 = load %fontstash.Font*, %fontstash.Font** @src.font_icon, align 8
  %6 = bitcast %runtime.Context* %0 to i8*
  call void @fontstash.font_destroy(%fontstash.Font* %5, i8* %6)
  ret void
}

define internal void @src.sound_play(i64 %0, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %1 = alloca i64, align 8
  %2 = alloca { i64, i64 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i64 %0, i64* %1, align 8
  %3 = bitcast i8* %__.context_ptr to %runtime.Context*
  %4 = load i64, i64* %1, align 8
  %5 = getelementptr [4 x %sdl2_mixer.Chunk*], [4 x %sdl2_mixer.Chunk*]* getelementptr inbounds (%src.Global_State, %src.Global_State* @src.gs, i64 0, i32 11), i64 0, i64 %4
  %6 = bitcast { i64, i64 }* %2 to %..string*
  store %..string { i8* getelementptr inbounds ([57 x i8], [57 x i8]* @"csbs$19a", i64 0, i64 0), i64 56 }, %..string* %6, align 8
  %7 = load { i64, i64 }, { i64, i64 }* %2, align 8
  call void @runtime.bounds_check_error({ i64, i64 } %7, i32 159, i32 31, i64 %4, i64 4)
  %8 = load %sdl2_mixer.Chunk*, %sdl2_mixer.Chunk** %5, align 8
  %9 = call i32 @sdl2_mixer.PlayChannel(i32 0, %sdl2_mixer.Chunk* %8, i32 0)
  ret void
}

define internal void @src.mix_volume_set(i32 %0, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %1 = alloca i32, align 4
  br label %entry

entry:                                            ; preds = %decls
  store i32 %0, i32* %1, align 4
  %2 = bitcast i8* %__.context_ptr to %runtime.Context*
  %3 = load i32, i32* %1, align 4
  %4 = call i32 @Mix_Volume(i32 0, i32 %3)
  ret void
}

define internal void @src.window_add_shortcut(%src.Window* %0, { i64, i64 } %1, i8* %2, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %3 = alloca %src.Window*, align 8
  %4 = alloca %..string, align 8
  %5 = alloca i8*, align 8
  %6 = alloca %runtime.Map_Header, align 8
  %7 = alloca %runtime.Map_Hash, align 8
  %8 = alloca i8*, align 8
  %9 = alloca %runtime.Source_Code_Location, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Window* %0, %src.Window** %3, align 8
  %10 = bitcast %..string* %4 to { i64, i64 }*
  store { i64, i64 } %1, { i64, i64 }* %10, align 8
  %11 = load %..string, %..string* %4, align 8
  store i8* %2, i8** %5, align 8
  %12 = bitcast i8* %__.context_ptr to %runtime.Context*
  %13 = load %src.Window*, %src.Window** %3, align 8
  %14 = getelementptr inbounds %src.Window, %src.Window* %13, i32 0, i32 37
  %15 = load { { i64*, i64 }, { i8*, i64, i64, %runtime.Allocator } }, { { i64*, i64 }, { i8*, i64, i64, %runtime.Allocator } }* %14, align 8
  %16 = load %..string, %..string* %4, align 8
  %17 = load i8*, i8** %5, align 8
  store %runtime.Map_Header { %runtime.Raw_Map* null, i8* bitcast (i8 (i8*, i8*)* @"__$equal6" to i8*), i64 40, i64 8, i64 16, i64 16, i64 32, i64 8 }, %runtime.Map_Header* %6, align 8
  %18 = getelementptr inbounds %runtime.Map_Header, %runtime.Map_Header* %6, i32 0, i32 0
  %19 = bitcast { { i64*, i64 }, { i8*, i64, i64, %runtime.Allocator } }* %14 to %runtime.Raw_Map*
  store %runtime.Raw_Map* %19, %runtime.Raw_Map** %18, align 8
  %20 = load %runtime.Map_Header, %runtime.Map_Header* %6, align 8
  %21 = bitcast %runtime.Map_Hash* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* %21, i8 0, i64 16, i1 false)
  %22 = bitcast %..string* %4 to i8*
  %23 = call i64 @"__$hasher1"(i8* %22, i64 0)
  %24 = getelementptr inbounds %runtime.Map_Hash, %runtime.Map_Hash* %7, i32 0, i32 0
  store i64 %23, i64* %24, align 8
  %25 = getelementptr inbounds %runtime.Map_Hash, %runtime.Map_Hash* %7, i32 0, i32 1
  store i8* %22, i8** %25, align 8
  %26 = load %runtime.Map_Hash, %runtime.Map_Hash* %7, align 8
  store i8* %17, i8** %8, align 8
  %27 = bitcast i8** %8 to i8*
  %28 = bitcast %runtime.Map_Hash* %7 to { i64, i64 }*
  %29 = load { i64, i64 }, { i64, i64 }* %28, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([57 x i8], [57 x i8]* @"csbs$19a", i64 0, i64 0), i64 56 }, i32 178, i32 26, %..string { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @"csbs$321", i64 0, i64 0), i64 19 } }, %runtime.Source_Code_Location* %9, align 8
  %30 = bitcast %runtime.Context* %12 to i8*
  %31 = call %runtime.Map_Entry_Header* @runtime.__dynamic_map_set(%runtime.Map_Header* %6, { i64, i64 } %29, i8* %27, %runtime.Source_Code_Location* %9, i8* %30)
  ret void
}

define internal %src.Window* @src.window_init(i8* %0, i32 %1, i32 %2, i64 %3, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %4 = alloca i8*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = alloca %src.Window*, align 8
  %9 = alloca %sdl2.Window*, align 8
  %10 = alloca %..string, align 8
  %11 = alloca %..any, align 8
  %12 = alloca %..any, align 8
  %13 = alloca i8*, align 8
  %14 = alloca { %..any*, i64 }, align 8
  %15 = alloca [2 x %..any], align 8
  %16 = alloca %runtime.Source_Code_Location, align 8
  %17 = alloca i32, align 4
  %18 = alloca { i8*, i64 }, align 8
  %19 = alloca %runtime.Source_Code_Location, align 8
  %20 = alloca { { i8*, i64 }, i8 }, align 8
  %21 = alloca %mem.Arena, align 8
  %22 = alloca %runtime.Allocator, align 8
  %23 = alloca %strings.Builder, align 8
  %24 = alloca %strings.Builder, align 8
  %25 = alloca %strings.Builder, align 8
  %26 = alloca %strings.Builder, align 8
  %27 = alloca %runtime.Source_Code_Location, align 8
  %28 = alloca { { i64*, i64 }, { i8*, i64, i64, %runtime.Allocator } }, align 8
  %29 = alloca %strings.Builder, align 8
  %30 = alloca %runtime.Source_Code_Location, align 8
  %31 = alloca { { i64*, i64, i64, %runtime.Allocator }, i8 }, align 8
  %32 = alloca %runtime.Source_Code_Location, align 8
  %33 = alloca %src.Window*, align 8
  %34 = alloca { i64, i64 }, align 8
  %35 = alloca %src.Panel_Floaty*, align 8
  %36 = alloca %src.Panel*, align 8
  %37 = alloca { i64, i64 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i8* %0, i8** %4, align 8
  store i32 %1, i32* %5, align 4
  store i32 %2, i32* %6, align 4
  store i64 %3, i64* %7, align 8
  store %src.Window* null, %src.Window** %8, align 8
  %38 = bitcast i8* %__.context_ptr to %runtime.Context*
  %39 = load i8*, i8** %4, align 8
  %40 = load i32, i32* %5, align 4
  %41 = load i32, i32* %6, align 4
  %42 = call %sdl2.Window* @SDL_CreateWindow(i8* %39, i32 536805376, i32 536805376, i32 %40, i32 %41, i32 34)
  store %sdl2.Window* %42, %sdl2.Window** %9, align 8
  %43 = load %sdl2.Window*, %sdl2.Window** %9, align 8
  %44 = icmp eq %sdl2.Window* %43, null
  %45 = zext i1 %44 to i8
  %46 = trunc i8 %45 to i1
  br i1 %46, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  call void @SDL_Quit()
  %47 = call i8* @SDL_GetError()
  store %..string { i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"csbs$322", i64 0, i64 0), i64 37 }, %..string* %10, align 8
  %48 = bitcast %..string* %10 to i8*
  %49 = getelementptr inbounds %..any, %..any* %11, i32 0, i32 0
  %50 = getelementptr inbounds %..any, %..any* %11, i32 0, i32 1
  store i8* %48, i8** %49, align 8
  store i64 432345564227567633, i64* %50, align 8
  %51 = load %..any, %..any* %11, align 8
  %52 = bitcast %..any* %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* %52, i8 0, i64 16, i1 false)
  store i8* %47, i8** %13, align 8
  %53 = bitcast i8** %13 to i8*
  %54 = getelementptr inbounds %..any, %..any* %12, i32 0, i32 0
  %55 = getelementptr inbounds %..any, %..any* %12, i32 0, i32 1
  store i8* %53, i8** %54, align 8
  store i64 5044031582654955706, i64* %55, align 8
  %56 = load %..any, %..any* %12, align 8
  %57 = bitcast { %..any*, i64 }* %14 to i8*
  call void @llvm.memset.p0i8.i64(i8* %57, i8 0, i64 16, i1 false)
  %58 = bitcast [2 x %..any]* %15 to i8*
  call void @llvm.memset.p0i8.i64(i8* %58, i8 0, i64 32, i1 false)
  %59 = getelementptr [2 x %..any], [2 x %..any]* %15, i64 0, i64 0
  store %..any %51, %..any* %59, align 8
  %60 = getelementptr [2 x %..any], [2 x %..any]* %15, i64 0, i64 1
  store %..any %56, %..any* %60, align 8
  %61 = getelementptr [2 x %..any], [2 x %..any]* %15, i64 0, i64 0
  %62 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %14, i32 0, i32 0
  store %..any* %61, %..any** %62, align 8
  %63 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %14, i32 0, i32 1
  store i64 2, i64* %63, align 8
  %64 = load { %..any*, i64 }, { %..any*, i64 }* %14, align 8
  %65 = bitcast { %..any*, i64 }* %14 to { i64, i64 }*
  %66 = load { i64, i64 }, { i64, i64 }* %65, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([57 x i8], [57 x i8]* @"csbs$19a", i64 0, i64 0), i64 56 }, i32 196, i32 7, %..string { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"csbs$323", i64 0, i64 0), i64 11 } }, %runtime.Source_Code_Location* %16, align 8
  %67 = bitcast %runtime.Context* %38 to i8*
  call void @log.panic({ i64, i64 } %66, %runtime.Source_Code_Location* %16, i8* %67)
  unreachable

if.done:                                          ; preds = %entry
  %68 = load %sdl2.Window*, %sdl2.Window** %9, align 8
  %69 = call i32 @SDL_GetWindowID(%sdl2.Window* %68)
  store i32 %69, i32* %17, align 4
  %70 = load i64, i64* %7, align 8
  %71 = getelementptr inbounds %runtime.Context, %runtime.Context* %38, i32 0, i32 0
  %72 = load %runtime.Allocator, %runtime.Allocator* %71, align 8
  %73 = bitcast %runtime.Allocator* %71 to { i64, i64 }*
  %74 = load { i64, i64 }, { i64, i64 }* %73, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([57 x i8], [57 x i8]* @"csbs$19a", i64 0, i64 0), i64 56 }, i32 227, i32 19, %..string { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"csbs$323", i64 0, i64 0), i64 11 } }, %runtime.Source_Code_Location* %19, align 8
  %75 = bitcast { { i8*, i64 }, i8 }* %20 to i8*
  call void @llvm.memset.p0i8.i64(i8* %75, i8 0, i64 24, i1 false)
  %76 = bitcast %runtime.Context* %38 to i8*
  call void @runtime.make_slice-49269({ { i8*, i64 }, i8 }* sret %20, i64 %70, { i64, i64 } %74, %runtime.Source_Code_Location* %19, i8* %76)
  %77 = load { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %20, align 8
  %78 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %20, i32 0, i32 0
  %79 = load { i8*, i64 }, { i8*, i64 }* %78, align 8
  store { i8*, i64 } %79, { i8*, i64 }* %18, align 8
  %80 = bitcast %mem.Arena* %21 to i8*
  call void @llvm.memset.p0i8.i64(i8* %80, i8 0, i64 40, i1 false)
  %81 = load { i8*, i64 }, { i8*, i64 }* %18, align 8
  %82 = bitcast { i8*, i64 }* %18 to { i64, i64 }*
  %83 = load { i64, i64 }, { i64, i64 }* %82, align 8
  %84 = bitcast %runtime.Context* %38 to i8*
  call void @mem.arena_init(%mem.Arena* %21, { i64, i64 } %83, i8* %84)
  %85 = bitcast %runtime.Context* %38 to i8*
  %86 = call { i64, i64 } @mem.arena_allocator(%mem.Arena* %21, i8* %85)
  %87 = bitcast %runtime.Allocator* %22 to { i64, i64 }*
  store { i64, i64 } %86, { i64, i64 }* %87, align 8
  %88 = load %runtime.Allocator, %runtime.Allocator* %22, align 8
  %89 = bitcast %runtime.Allocator* %22 to { i64, i64 }*
  %90 = load { i64, i64 }, { i64, i64 }* %89, align 8
  %91 = bitcast %runtime.Context* %38 to i8*
  %92 = call %src.Window* @src.element_init-49320(%src.Element* null, i32 512, i8* bitcast (i64 (%src.Element*, i64, i64, i8*, i8*)* @src.window_init._window_message-0 to i8*), i64 -1, { i64, i64 } %90, i8* %91)
  store %src.Window* %92, %src.Window** %8, align 8
  %93 = load %src.Window*, %src.Window** %8, align 8
  %94 = getelementptr inbounds %src.Window, %src.Window* %93, i32 0, i32 25
  %95 = load %sdl2.Window*, %sdl2.Window** %9, align 8
  store %sdl2.Window* %95, %sdl2.Window** %94, align 8
  %96 = load %src.Window*, %src.Window** %8, align 8
  %97 = getelementptr inbounds %src.Window, %src.Window* %96, i32 0, i32 26
  %98 = load i32, i32* %17, align 4
  store i32 %98, i32* %97, align 4
  %99 = load %src.Window*, %src.Window** %8, align 8
  %100 = getelementptr inbounds %src.Window, %src.Window* %99, i32 0, i32 1
  %101 = load %src.Window*, %src.Window** %8, align 8
  %102 = getelementptr inbounds %src.Window, %src.Window* %101, i32 0, i32 0
  store %src.Element* %102, %src.Element** %100, align 8
  %103 = load %src.Window*, %src.Window** %8, align 8
  %104 = getelementptr inbounds %src.Window, %src.Window* %103, i32 0, i32 31
  %105 = getelementptr inbounds %runtime.Context, %runtime.Context* %38, i32 0, i32 0
  %106 = load %runtime.Allocator, %runtime.Allocator* %105, align 8
  %107 = bitcast %runtime.Allocator* %105 to { i64, i64 }*
  %108 = load { i64, i64 }, { i64, i64 }* %107, align 8
  %109 = bitcast %strings.Builder* %23 to i8*
  call void @llvm.memset.p0i8.i64(i8* %109, i8 0, i64 40, i1 false)
  %110 = bitcast %runtime.Context* %38 to i8*
  call void @strings.builder_make_len_cap(%strings.Builder* sret %23, i64 0, i64 32, { i64, i64 } %108, i8* %110)
  %111 = load %strings.Builder, %strings.Builder* %23, align 8
  store %strings.Builder %111, %strings.Builder* %104, align 8
  %112 = load %src.Window*, %src.Window** %8, align 8
  %113 = getelementptr inbounds %src.Window, %src.Window* %112, i32 0, i32 44
  %114 = getelementptr inbounds %runtime.Context, %runtime.Context* %38, i32 0, i32 0
  %115 = load %runtime.Allocator, %runtime.Allocator* %114, align 8
  %116 = bitcast %runtime.Allocator* %114 to { i64, i64 }*
  %117 = load { i64, i64 }, { i64, i64 }* %116, align 8
  %118 = bitcast %strings.Builder* %24 to i8*
  call void @llvm.memset.p0i8.i64(i8* %118, i8 0, i64 40, i1 false)
  %119 = bitcast %runtime.Context* %38 to i8*
  call void @strings.builder_make_len_cap(%strings.Builder* sret %24, i64 0, i64 64, { i64, i64 } %117, i8* %119)
  %120 = load %strings.Builder, %strings.Builder* %24, align 8
  store %strings.Builder %120, %strings.Builder* %113, align 8
  %121 = load %src.Window*, %src.Window** %8, align 8
  %122 = getelementptr inbounds %src.Window, %src.Window* %121, i32 0, i32 41
  %123 = getelementptr inbounds %runtime.Context, %runtime.Context* %38, i32 0, i32 0
  %124 = load %runtime.Allocator, %runtime.Allocator* %123, align 8
  %125 = bitcast %runtime.Allocator* %123 to { i64, i64 }*
  %126 = load { i64, i64 }, { i64, i64 }* %125, align 8
  %127 = bitcast %strings.Builder* %25 to i8*
  call void @llvm.memset.p0i8.i64(i8* %127, i8 0, i64 40, i1 false)
  %128 = bitcast %runtime.Context* %38 to i8*
  call void @strings.builder_make_len_cap(%strings.Builder* sret %25, i64 0, i64 64, { i64, i64 } %126, i8* %128)
  %129 = load %strings.Builder, %strings.Builder* %25, align 8
  store %strings.Builder %129, %strings.Builder* %122, align 8
  %130 = load %src.Window*, %src.Window** %8, align 8
  %131 = getelementptr inbounds %src.Window, %src.Window* %130, i32 0, i32 45
  %132 = getelementptr inbounds %runtime.Context, %runtime.Context* %38, i32 0, i32 0
  %133 = load %runtime.Allocator, %runtime.Allocator* %132, align 8
  %134 = bitcast %runtime.Allocator* %132 to { i64, i64 }*
  %135 = load { i64, i64 }, { i64, i64 }* %134, align 8
  %136 = bitcast %strings.Builder* %26 to i8*
  call void @llvm.memset.p0i8.i64(i8* %136, i8 0, i64 40, i1 false)
  %137 = bitcast %runtime.Context* %38 to i8*
  call void @strings.builder_make_len_cap(%strings.Builder* sret %26, i64 0, i64 256, { i64, i64 } %135, i8* %137)
  %138 = load %strings.Builder, %strings.Builder* %26, align 8
  store %strings.Builder %138, %strings.Builder* %131, align 8
  %139 = load %src.Window*, %src.Window** %8, align 8
  %140 = getelementptr inbounds %src.Window, %src.Window* %139, i32 0, i32 37
  %141 = getelementptr inbounds %runtime.Context, %runtime.Context* %38, i32 0, i32 0
  %142 = load %runtime.Allocator, %runtime.Allocator* %141, align 8
  %143 = bitcast %runtime.Allocator* %141 to { i64, i64 }*
  %144 = load { i64, i64 }, { i64, i64 }* %143, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([57 x i8], [57 x i8]* @"csbs$19a", i64 0, i64 0), i64 56 }, i32 246, i32 18, %..string { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"csbs$323", i64 0, i64 0), i64 11 } }, %runtime.Source_Code_Location* %27, align 8
  %145 = bitcast { { i64*, i64 }, { i8*, i64, i64, %runtime.Allocator } }* %28 to i8*
  call void @llvm.memset.p0i8.i64(i8* %145, i8 0, i64 56, i1 false)
  %146 = bitcast %runtime.Context* %38 to i8*
  call void @runtime.make_map-49386({ { i64*, i64 }, { i8*, i64, i64, %runtime.Allocator } }* sret %28, i64 32, { i64, i64 } %144, %runtime.Source_Code_Location* %27, i8* %146)
  %147 = load { { i64*, i64 }, { i8*, i64, i64, %runtime.Allocator } }, { { i64*, i64 }, { i8*, i64, i64, %runtime.Allocator } }* %28, align 8
  store { { i64*, i64 }, { i8*, i64, i64, %runtime.Allocator } } %147, { { i64*, i64 }, { i8*, i64, i64, %runtime.Allocator } }* %140, align 8
  %148 = load %src.Window*, %src.Window** %8, align 8
  %149 = getelementptr inbounds %src.Window, %src.Window* %148, i32 0, i32 24
  %150 = load %sdl2.Window*, %sdl2.Window** %9, align 8
  %151 = bitcast %runtime.Context* %38 to i8*
  %152 = call %src.Render_Target* @src.render_target_init(%sdl2.Window* %150, i8* %151)
  store %src.Render_Target* %152, %src.Render_Target** %149, align 8
  %153 = load %src.Window*, %src.Window** %8, align 8
  %154 = getelementptr inbounds %src.Window, %src.Window* %153, i32 0, i32 22
  store i8 1, i8* %154, align 1
  %155 = load %src.Window*, %src.Window** %8, align 8
  %156 = getelementptr inbounds %src.Window, %src.Window* %155, i32 0, i32 12
  store float -1.000000e+02, float* %156, align 4
  %157 = load %src.Window*, %src.Window** %8, align 8
  %158 = getelementptr inbounds %src.Window, %src.Window* %157, i32 0, i32 13
  store float -1.000000e+02, float* %158, align 4
  %159 = load %src.Window*, %src.Window** %8, align 8
  %160 = getelementptr inbounds %src.Window, %src.Window* %159, i32 0, i32 47
  %161 = getelementptr inbounds %runtime.Context, %runtime.Context* %38, i32 0, i32 0
  %162 = load %runtime.Allocator, %runtime.Allocator* %161, align 8
  %163 = bitcast %runtime.Allocator* %161 to { i64, i64 }*
  %164 = load { i64, i64 }, { i64, i64 }* %163, align 8
  %165 = bitcast %strings.Builder* %29 to i8*
  call void @llvm.memset.p0i8.i64(i8* %165, i8 0, i64 40, i1 false)
  %166 = bitcast %runtime.Context* %38 to i8*
  call void @strings.builder_make_len_cap(%strings.Builder* sret %29, i64 0, i64 2048, { i64, i64 } %164, i8* %166)
  %167 = load %strings.Builder, %strings.Builder* %29, align 8
  store %strings.Builder %167, %strings.Builder* %160, align 8
  %168 = load %src.Window*, %src.Window** %8, align 8
  %169 = getelementptr inbounds %src.Window, %src.Window* %168, i32 0, i32 46
  %170 = getelementptr inbounds %runtime.Context, %runtime.Context* %38, i32 0, i32 0
  %171 = load %runtime.Allocator, %runtime.Allocator* %170, align 8
  %172 = bitcast %runtime.Allocator* %170 to { i64, i64 }*
  %173 = load { i64, i64 }, { i64, i64 }* %172, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([57 x i8], [57 x i8]* @"csbs$19a", i64 0, i64 0), i64 56 }, i32 252, i32 21, %..string { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"csbs$323", i64 0, i64 0), i64 11 } }, %runtime.Source_Code_Location* %30, align 8
  %174 = bitcast { { i64*, i64, i64, %runtime.Allocator }, i8 }* %31 to i8*
  call void @llvm.memset.p0i8.i64(i8* %174, i8 0, i64 48, i1 false)
  %175 = bitcast %runtime.Context* %38 to i8*
  call void @runtime.make_dynamic_array_len_cap-49438({ { i64*, i64, i64, %runtime.Allocator }, i8 }* sret %31, i64 0, i64 128, { i64, i64 } %173, %runtime.Source_Code_Location* %30, i8* %175)
  %176 = load { { i64*, i64, i64, %runtime.Allocator }, i8 }, { { i64*, i64, i64, %runtime.Allocator }, i8 }* %31, align 8
  %177 = getelementptr inbounds { { i64*, i64, i64, %runtime.Allocator }, i8 }, { { i64*, i64, i64, %runtime.Allocator }, i8 }* %31, i32 0, i32 0
  %178 = load { i64*, i64, i64, %runtime.Allocator }, { i64*, i64, i64, %runtime.Allocator }* %177, align 8
  store { i64*, i64, i64, %runtime.Allocator } %178, { i64*, i64, i64, %runtime.Allocator }* %169, align 8
  %179 = load %src.Window*, %src.Window** %8, align 8
  %180 = getelementptr inbounds %src.Window, %src.Window* %179, i32 0, i32 43
  %181 = bitcast %runtime.Context* %38 to i8*
  call void @src.undo_manager_init(%src.Undo_Manager* %180, i64 10240, i8* %181)
  %182 = load %src.Window*, %src.Window** %8, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([57 x i8], [57 x i8]* @"csbs$19a", i64 0, i64 0), i64 56 }, i32 254, i32 2, %..string { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"csbs$323", i64 0, i64 0), i64 11 } }, %runtime.Source_Code_Location* %32, align 8
  %183 = bitcast %runtime.Context* %38 to i8*
  call void @runtime.append_elem-49471({ %src.Window**, i64, i64, %runtime.Allocator }* getelementptr inbounds (%src.Global_State, %src.Global_State* @src.gs, i64 0, i32 0), %src.Window* %182, %runtime.Source_Code_Location* %32, i8* %183)
  %184 = load { %src.Window**, i64, i64, %runtime.Allocator }, { %src.Window**, i64, i64, %runtime.Allocator }* getelementptr inbounds (%src.Global_State, %src.Global_State* @src.gs, i64 0, i32 0), align 8
  %185 = load %src.Window**, %src.Window*** getelementptr inbounds (%src.Global_State, %src.Global_State* @src.gs, i64 0, i32 0, i32 0), align 8
  %186 = load i64, i64* getelementptr inbounds (%src.Global_State, %src.Global_State* @src.gs, i64 0, i32 0, i32 1), align 8
  %187 = load { %src.Window**, i64, i64, %runtime.Allocator }, { %src.Window**, i64, i64, %runtime.Allocator }* getelementptr inbounds (%src.Global_State, %src.Global_State* @src.gs, i64 0, i32 0), align 8
  %188 = load i64, i64* getelementptr inbounds (%src.Global_State, %src.Global_State* @src.gs, i64 0, i32 0, i32 1), align 8
  %189 = sub i64 %188, 1
  %190 = bitcast { i64, i64 }* %34 to %..string*
  store %..string { i8* getelementptr inbounds ([57 x i8], [57 x i8]* @"csbs$19a", i64 0, i64 0), i64 56 }, %..string* %190, align 8
  %191 = load { i64, i64 }, { i64, i64 }* %34, align 8
  call void @runtime.bounds_check_error({ i64, i64 } %191, i32 256, i32 27, i64 %189, i64 %186)
  %192 = getelementptr %src.Window*, %src.Window** %185, i64 %189
  %193 = load %src.Window*, %src.Window** %192, align 8
  store %src.Window* %193, %src.Window** %33, align 8
  %194 = load %src.Window*, %src.Window** %8, align 8
  %195 = getelementptr inbounds %src.Window, %src.Window* %194, i32 0, i32 0
  %196 = getelementptr inbounds %src.Element, %src.Element* %195, i32 0, i32 4
  %197 = load %src.Window*, %src.Window** %33, align 8
  store %src.Window* %197, %src.Window** %196, align 8
  %198 = load %src.Window*, %src.Window** %8, align 8
  %199 = getelementptr inbounds %src.Window, %src.Window* %198, i32 0, i32 7
  %200 = load %src.Window*, %src.Window** %8, align 8
  %201 = bitcast %src.Window* %200 to i8*
  %202 = call i32 @SDL_AddTimer(i32 250, i8* bitcast (i32 (i32, i8*)* @src.window_init.window_timer_callback-1 to i8*), i8* %201)
  store i32 %202, i32* %199, align 4
  %203 = load %src.Window*, %src.Window** %8, align 8
  %204 = getelementptr inbounds %src.Window, %src.Window* %203, i32 0, i32 0
  %205 = bitcast %runtime.Context* %38 to i8*
  %206 = call %src.Panel_Floaty* @src.panel_floaty_init(%src.Element* %204, i32 0, i8* %205)
  store %src.Panel_Floaty* %206, %src.Panel_Floaty** %35, align 8
  %207 = load %src.Panel_Floaty*, %src.Panel_Floaty** %35, align 8
  %208 = getelementptr inbounds %src.Panel_Floaty, %src.Panel_Floaty* %207, i32 0, i32 2
  store float 0.000000e+00, float* %208, align 4
  %209 = load %src.Panel_Floaty*, %src.Panel_Floaty** %35, align 8
  %210 = getelementptr inbounds %src.Panel_Floaty, %src.Panel_Floaty* %209, i32 0, i32 3
  store float 0.000000e+00, float* %210, align 4
  %211 = load %src.Panel_Floaty*, %src.Panel_Floaty** %35, align 8
  %212 = getelementptr inbounds %src.Panel_Floaty, %src.Panel_Floaty* %211, i32 0, i32 4
  %213 = load float, float* @src.SCALE, align 4
  %214 = fmul float 1.000000e+02, %213
  store float %214, float* %212, align 4
  %215 = load %src.Panel_Floaty*, %src.Panel_Floaty** %35, align 8
  %216 = getelementptr inbounds %src.Panel_Floaty, %src.Panel_Floaty* %215, i32 0, i32 5
  %217 = load float, float* @src.SCALE, align 4
  %218 = fmul float 2.000000e+01, %217
  %219 = load float, float* @src.SCALE, align 4
  %220 = fmul float 1.000000e+01, %219
  %221 = fadd float %218, %220
  store float %221, float* %216, align 4
  %222 = load %src.Panel_Floaty*, %src.Panel_Floaty** %35, align 8
  %223 = getelementptr inbounds %src.Panel_Floaty, %src.Panel_Floaty* %222, i32 0, i32 0
  %224 = getelementptr inbounds %src.Element, %src.Element* %223, i32 0, i32 9
  store i64 255, i64* %224, align 8
  %225 = load %src.Panel_Floaty*, %src.Panel_Floaty** %35, align 8
  %226 = getelementptr inbounds %src.Panel_Floaty, %src.Panel_Floaty* %225, i32 0, i32 1
  %227 = load %src.Panel*, %src.Panel** %226, align 8
  store %src.Panel* %227, %src.Panel** %36, align 8
  %228 = load %src.Panel*, %src.Panel** %36, align 8
  %229 = getelementptr inbounds %src.Panel, %src.Panel* %228, i32 0, i32 0
  %230 = getelementptr inbounds %src.Element, %src.Element* %229, i32 0, i32 0
  %231 = load i32, i32* %230, align 4
  %232 = or i32 %231, 256
  store i32 %232, i32* %230, align 4
  %233 = load %src.Panel*, %src.Panel** %36, align 8
  %234 = getelementptr inbounds %src.Panel, %src.Panel* %233, i32 0, i32 8
  store i8 1, i8* %234, align 1
  %235 = load %src.Panel*, %src.Panel** %36, align 8
  %236 = getelementptr inbounds %src.Panel, %src.Panel* %235, i32 0, i32 9
  store i8 1, i8* %236, align 1
  %237 = load %src.Panel*, %src.Panel** %36, align 8
  %238 = getelementptr inbounds %src.Panel, %src.Panel* %237, i32 0, i32 0
  %239 = bitcast { i64, i64 }* %37 to %..string*
  store %..string zeroinitializer, %..string* %239, align 8
  %240 = load { i64, i64 }, { i64, i64 }* %37, align 8
  %241 = bitcast %runtime.Context* %38 to i8*
  %242 = call %src.Label* @src.label_init(%src.Element* %238, i32 2048, { i64, i64 } %240, float -1.000000e+00, i8* %241)
  %243 = load %src.Window*, %src.Window** %8, align 8
  %244 = getelementptr inbounds %src.Window, %src.Window* %243, i32 0, i32 6
  %245 = load %src.Panel_Floaty*, %src.Panel_Floaty** %35, align 8
  store %src.Panel_Floaty* %245, %src.Panel_Floaty** %244, align 8
  %246 = load %src.Panel_Floaty*, %src.Panel_Floaty** %35, align 8
  %247 = getelementptr inbounds %src.Panel_Floaty, %src.Panel_Floaty* %246, i32 0, i32 0
  %248 = bitcast %runtime.Context* %38 to i8*
  call void @src.element_hide(%src.Element* %247, i1 true, i8* %248)
  %249 = load %src.Window*, %src.Window** %8, align 8
  store %src.Window* %249, %src.Window** %8, align 8
  ret %src.Window* %249
}

define internal void @src.window_hovered_panel_spawn(%src.Window* %0, %src.Element* %1, { i64, i64 } %2, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %3 = alloca %src.Window*, align 8
  %4 = alloca %src.Element*, align 8
  %5 = alloca %..string, align 8
  %6 = alloca %src.Panel_Floaty*, align 8
  %7 = alloca %src.Panel*, align 8
  %8 = alloca %src.Label*, align 8
  %9 = alloca { i64, i64 }, align 8
  %10 = alloca float, align 4
  %11 = alloca float, align 4
  %12 = alloca float, align 4
  br label %entry

entry:                                            ; preds = %decls
  store %src.Window* %0, %src.Window** %3, align 8
  store %src.Element* %1, %src.Element** %4, align 8
  %13 = bitcast %..string* %5 to { i64, i64 }*
  store { i64, i64 } %2, { i64, i64 }* %13, align 8
  %14 = load %..string, %..string* %5, align 8
  %15 = bitcast i8* %__.context_ptr to %runtime.Context*
  %16 = load %src.Window*, %src.Window** %3, align 8
  %17 = getelementptr inbounds %src.Window, %src.Window* %16, i32 0, i32 6
  %18 = load %src.Panel_Floaty*, %src.Panel_Floaty** %17, align 8
  store %src.Panel_Floaty* %18, %src.Panel_Floaty** %6, align 8
  %19 = load %src.Panel_Floaty*, %src.Panel_Floaty** %6, align 8
  %20 = getelementptr inbounds %src.Panel_Floaty, %src.Panel_Floaty* %19, i32 0, i32 0
  %21 = bitcast %runtime.Context* %15 to i8*
  call void @src.element_hide(%src.Element* %20, i1 false, i8* %21)
  %22 = load %src.Panel_Floaty*, %src.Panel_Floaty** %6, align 8
  %23 = getelementptr inbounds %src.Panel_Floaty, %src.Panel_Floaty* %22, i32 0, i32 1
  %24 = load %src.Panel*, %src.Panel** %23, align 8
  store %src.Panel* %24, %src.Panel** %7, align 8
  %25 = load %src.Panel_Floaty*, %src.Panel_Floaty** %6, align 8
  %26 = getelementptr inbounds %src.Panel_Floaty, %src.Panel_Floaty* %25, i32 0, i32 2
  %27 = load %src.Window*, %src.Window** %3, align 8
  %28 = getelementptr inbounds %src.Window, %src.Window* %27, i32 0, i32 12
  %29 = load float, float* %28, align 4
  store float %29, float* %26, align 4
  %30 = load %src.Panel*, %src.Panel** %7, align 8
  %31 = getelementptr inbounds %src.Panel, %src.Panel* %30, i32 0, i32 0
  %32 = getelementptr inbounds %src.Element, %src.Element* %31, i32 0, i32 3
  %33 = load { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %32, align 8
  %34 = getelementptr inbounds { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %32, i32 0, i32 0
  %35 = load %src.Element**, %src.Element*** %34, align 8
  %36 = getelementptr inbounds { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %32, i32 0, i32 1
  %37 = load i64, i64* %36, align 8
  %38 = bitcast { i64, i64 }* %9 to %..string*
  store %..string { i8* getelementptr inbounds ([57 x i8], [57 x i8]* @"csbs$19a", i64 0, i64 0), i64 56 }, %..string* %38, align 8
  %39 = load { i64, i64 }, { i64, i64 }* %9, align 8
  call void @runtime.bounds_check_error({ i64, i64 } %39, i32 301, i32 35, i64 0, i64 %37)
  %40 = getelementptr %src.Element*, %src.Element** %35, i64 0
  %41 = load %src.Element*, %src.Element** %40, align 8
  %42 = bitcast %src.Element* %41 to %src.Label*
  store %src.Label* %42, %src.Label** %8, align 8
  %43 = load %src.Label*, %src.Label** %8, align 8
  %44 = getelementptr inbounds %src.Label, %src.Label* %43, i32 0, i32 1
  %45 = bitcast %runtime.Context* %15 to i8*
  call void @strings.builder_reset(%strings.Builder* %44, i8* %45)
  %46 = load %src.Label*, %src.Label** %8, align 8
  %47 = getelementptr inbounds %src.Label, %src.Label* %46, i32 0, i32 1
  %48 = load %..string, %..string* %5, align 8
  %49 = bitcast %..string* %5 to { i64, i64 }*
  %50 = load { i64, i64 }, { i64, i64 }* %49, align 8
  %51 = bitcast %runtime.Context* %15 to i8*
  %52 = call i64 @strings.write_string(%strings.Builder* %47, { i64, i64 } %50, i8* %51)
  %53 = load %src.Element*, %src.Element** %4, align 8
  %54 = getelementptr inbounds %src.Element, %src.Element* %53, i32 0, i32 5
  %55 = getelementptr inbounds %src.Rect, %src.Rect* %54, i32 0, i32 3
  %56 = load float, float* %55, align 4
  %57 = fadd float %56, 5.000000e+00
  store float %57, float* %10, align 4
  %58 = load float, float* %10, align 4
  %59 = load %src.Panel_Floaty*, %src.Panel_Floaty** %6, align 8
  %60 = getelementptr inbounds %src.Panel_Floaty, %src.Panel_Floaty* %59, i32 0, i32 5
  %61 = load float, float* %60, align 4
  %62 = fadd float %58, %61
  %63 = load %src.Window*, %src.Window** %3, align 8
  %64 = getelementptr inbounds %src.Window, %src.Window* %63, i32 0, i32 21
  %65 = load float, float* %64, align 4
  %66 = fcmp ogt float %62, %65
  %67 = zext i1 %66 to i8
  %68 = trunc i8 %67 to i1
  br i1 %68, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  %69 = load %src.Element*, %src.Element** %4, align 8
  %70 = getelementptr inbounds %src.Element, %src.Element* %69, i32 0, i32 5
  %71 = getelementptr inbounds %src.Rect, %src.Rect* %70, i32 0, i32 2
  %72 = load float, float* %71, align 4
  %73 = load %src.Panel_Floaty*, %src.Panel_Floaty** %6, align 8
  %74 = getelementptr inbounds %src.Panel_Floaty, %src.Panel_Floaty* %73, i32 0, i32 5
  %75 = load float, float* %74, align 4
  %76 = fsub float %72, %75
  store float %76, float* %10, align 4
  br label %if.done

if.done:                                          ; preds = %if.then, %entry
  %77 = load %src.Panel_Floaty*, %src.Panel_Floaty** %6, align 8
  %78 = getelementptr inbounds %src.Panel_Floaty, %src.Panel_Floaty* %77, i32 0, i32 3
  %79 = load float, float* %10, align 4
  store float %79, float* %78, align 4
  %80 = load float, float* @src.SCALE, align 4
  %81 = fmul float 2.000000e+01, %80
  %82 = call float @math.round_f32(float %81)
  store float %82, float* %11, align 4
  %83 = load %fontstash.Font*, %fontstash.Font** @src.font_regular, align 8
  %84 = load float, float* %11, align 4
  %85 = load %..string, %..string* %5, align 8
  %86 = bitcast %..string* %5 to { i64, i64 }*
  %87 = load { i64, i64 }, { i64, i64 }* %86, align 8
  %88 = bitcast %runtime.Context* %15 to i8*
  %89 = call float @fontstash.string_width(%fontstash.Font* %83, float %84, { i64, i64 } %87, i8* %88)
  store float %89, float* %12, align 4
  %90 = load %src.Panel_Floaty*, %src.Panel_Floaty** %6, align 8
  %91 = getelementptr inbounds %src.Panel_Floaty, %src.Panel_Floaty* %90, i32 0, i32 4
  %92 = load float, float* @src.SCALE, align 4
  %93 = fmul float 1.000000e+02, %92
  %94 = load float, float* %12, align 4
  %95 = load float, float* @src.SCALE, align 4
  %96 = fmul float 1.000000e+01, %95
  %97 = fadd float %94, %96
  %98 = fcmp ogt float %93, %97
  %99 = select i1 %98, float %93, float %97
  store float %99, float* %91, align 4
  ret void
}

define internal void @src.window_poll_size(%src.Window* %0, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %1 = alloca %src.Window*, align 8
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  br label %entry

entry:                                            ; preds = %decls
  store %src.Window* %0, %src.Window** %1, align 8
  %4 = bitcast i8* %__.context_ptr to %runtime.Context*
  store i32 0, i32* %2, align 4
  store i32 0, i32* %3, align 4
  %5 = load %src.Window*, %src.Window** %1, align 8
  %6 = getelementptr inbounds %src.Window, %src.Window* %5, i32 0, i32 25
  %7 = load %sdl2.Window*, %sdl2.Window** %6, align 8
  call void @SDL_GetWindowSize(%sdl2.Window* %7, i32* %2, i32* %3)
  %8 = load %src.Window*, %src.Window** %1, align 8
  %9 = getelementptr inbounds %src.Window, %src.Window* %8, i32 0, i32 18
  %10 = load i32, i32* %2, align 4
  %11 = sext i32 %10 to i64
  store i64 %11, i64* %9, align 8
  %12 = load %src.Window*, %src.Window** %1, align 8
  %13 = getelementptr inbounds %src.Window, %src.Window* %12, i32 0, i32 20
  %14 = load %src.Window*, %src.Window** %1, align 8
  %15 = getelementptr inbounds %src.Window, %src.Window* %14, i32 0, i32 18
  %16 = load i64, i64* %15, align 8
  %17 = sitofp i64 %16 to float
  store float %17, float* %13, align 4
  %18 = load %src.Window*, %src.Window** %1, align 8
  %19 = getelementptr inbounds %src.Window, %src.Window* %18, i32 0, i32 19
  %20 = load i32, i32* %3, align 4
  %21 = sext i32 %20 to i64
  store i64 %21, i64* %19, align 8
  %22 = load %src.Window*, %src.Window** %1, align 8
  %23 = getelementptr inbounds %src.Window, %src.Window* %22, i32 0, i32 21
  %24 = load %src.Window*, %src.Window** %1, align 8
  %25 = getelementptr inbounds %src.Window, %src.Window* %24, i32 0, i32 19
  %26 = load i64, i64* %25, align 8
  %27 = sitofp i64 %26 to float
  store float %27, float* %23, align 4
  ret void
}

define internal i8 @src.window_send_msg_to_focused_or_parents(%src.Window* %0, i64 %1, i64 %2, i8* %3, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %4 = alloca %src.Window*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i8, align 1
  %9 = alloca %src.Element*, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Window* %0, %src.Window** %4, align 8
  store i64 %1, i64* %5, align 8
  store i64 %2, i64* %6, align 8
  store i8* %3, i8** %7, align 8
  store i8 0, i8* %8, align 1
  %10 = bitcast i8* %__.context_ptr to %runtime.Context*
  %11 = load %src.Window*, %src.Window** %4, align 8
  %12 = getelementptr inbounds %src.Window, %src.Window* %11, i32 0, i32 4
  %13 = load %src.Element*, %src.Element** %12, align 8
  %14 = icmp ne %src.Element* %13, null
  %15 = zext i1 %14 to i8
  %16 = trunc i8 %15 to i1
  br i1 %16, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %17 = load %src.Window*, %src.Window** %4, align 8
  %18 = getelementptr inbounds %src.Window, %src.Window* %17, i32 0, i32 4
  %19 = load %src.Element*, %src.Element** %18, align 8
  store %src.Element* %19, %src.Element** %9, align 8
  br label %for.loop

for.loop:                                         ; preds = %if.done4, %if.then
  %20 = load %src.Element*, %src.Element** %9, align 8
  %21 = icmp ne %src.Element* %20, null
  %22 = zext i1 %21 to i8
  %23 = trunc i8 %22 to i1
  br i1 %23, label %for.body, label %for.done

for.body:                                         ; preds = %for.loop
  %24 = load %src.Element*, %src.Element** %9, align 8
  %25 = load i64, i64* %5, align 8
  %26 = load i64, i64* %6, align 8
  %27 = load i8*, i8** %7, align 8
  %28 = bitcast %runtime.Context* %10 to i8*
  %29 = call i64 @src.element_message(%src.Element* %24, i64 %25, i64 %26, i8* %27, i8* %28)
  %30 = icmp eq i64 %29, 1
  %31 = zext i1 %30 to i8
  %32 = trunc i8 %31 to i1
  br i1 %32, label %if.then1, label %if.done

if.then1:                                         ; preds = %for.body
  store i8 1, i8* %8, align 1
  br label %for.done

unreachable:                                      ; No predecessors!
  br label %if.done

if.done:                                          ; preds = %unreachable, %for.body
  %33 = load %src.Window*, %src.Window** %4, align 8
  %34 = getelementptr inbounds %src.Window, %src.Window* %33, i32 0, i32 38
  %35 = load %src.Element*, %src.Element** %34, align 8
  %36 = icmp ne %src.Element* %35, null
  %37 = zext i1 %36 to i8
  %38 = trunc i8 %37 to i1
  br i1 %38, label %cmp.and, label %if.done4

cmp.and:                                          ; preds = %if.done
  %39 = load %src.Element*, %src.Element** %9, align 8
  %40 = load %src.Window*, %src.Window** %4, align 8
  %41 = getelementptr inbounds %src.Window, %src.Window* %40, i32 0, i32 38
  %42 = load %src.Element*, %src.Element** %41, align 8
  %43 = icmp eq %src.Element* %39, %42
  %44 = zext i1 %43 to i8
  %45 = trunc i8 %44 to i1
  br i1 %45, label %if.then2, label %if.done4

if.then2:                                         ; preds = %cmp.and
  br label %for.done

unreachable3:                                     ; No predecessors!
  br label %if.done4

if.done4:                                         ; preds = %unreachable3, %cmp.and, %if.done
  %46 = load %src.Element*, %src.Element** %9, align 8
  %47 = getelementptr inbounds %src.Element, %src.Element* %46, i32 0, i32 2
  %48 = load %src.Element*, %src.Element** %47, align 8
  store %src.Element* %48, %src.Element** %9, align 8
  br label %for.loop

for.done:                                         ; preds = %if.then2, %if.then1, %for.loop
  br label %if.done7

if.else:                                          ; preds = %entry
  %49 = load %src.Window*, %src.Window** %4, align 8
  %50 = getelementptr inbounds %src.Window, %src.Window* %49, i32 0, i32 0
  %51 = load i64, i64* %5, align 8
  %52 = load i64, i64* %6, align 8
  %53 = load i8*, i8** %7, align 8
  %54 = bitcast %runtime.Context* %10 to i8*
  %55 = call i64 @src.element_message(%src.Element* %50, i64 %51, i64 %52, i8* %53, i8* %54)
  %56 = icmp eq i64 %55, 1
  %57 = zext i1 %56 to i8
  %58 = trunc i8 %57 to i1
  br i1 %58, label %if.then5, label %if.done6

if.then5:                                         ; preds = %if.else
  store i8 1, i8* %8, align 1
  br label %if.done6

if.done6:                                         ; preds = %if.then5, %if.else
  br label %if.done7

if.done7:                                         ; preds = %if.done6, %for.done
  %59 = load i8, i8* %8, align 1
  store i8 %59, i8* %8, align 1
  ret i8 %59
}

define internal void @src.element_send_msg_until_received(%src.Element* %0, i64 %1, i64 %2, i8* %3, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %4 = alloca %src.Element*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i8*, align 8
  %8 = alloca %src.Element*, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Element* %0, %src.Element** %4, align 8
  store i64 %1, i64* %5, align 8
  store i64 %2, i64* %6, align 8
  store i8* %3, i8** %7, align 8
  %9 = bitcast i8* %__.context_ptr to %runtime.Context*
  %10 = load %src.Element*, %src.Element** %4, align 8
  store %src.Element* %10, %src.Element** %8, align 8
  br label %for.loop

for.loop:                                         ; preds = %if.done, %entry
  %11 = load %src.Element*, %src.Element** %8, align 8
  %12 = icmp ne %src.Element* %11, null
  %13 = zext i1 %12 to i8
  %14 = trunc i8 %13 to i1
  br i1 %14, label %for.body, label %for.done

for.body:                                         ; preds = %for.loop
  %15 = load %src.Element*, %src.Element** %8, align 8
  %16 = load i64, i64* %5, align 8
  %17 = load i64, i64* %6, align 8
  %18 = load i8*, i8** %7, align 8
  %19 = bitcast %runtime.Context* %9 to i8*
  %20 = call i64 @src.element_message(%src.Element* %15, i64 %16, i64 %17, i8* %18, i8* %19)
  %21 = icmp eq i64 %20, 1
  %22 = zext i1 %21 to i8
  %23 = trunc i8 %22 to i1
  br i1 %23, label %if.then, label %if.done

if.then:                                          ; preds = %for.body
  br label %for.done

unreachable:                                      ; No predecessors!
  br label %if.done

if.done:                                          ; preds = %unreachable, %for.body
  %24 = load %src.Element*, %src.Element** %8, align 8
  %25 = getelementptr inbounds %src.Element, %src.Element* %24, i32 0, i32 2
  %26 = load %src.Element*, %src.Element** %25, align 8
  store %src.Element* %26, %src.Element** %8, align 8
  br label %for.loop

for.done:                                         ; preds = %if.then, %for.loop
  ret void
}

define internal void @src.window_set_cursor(%src.Window* %0, i64 %1, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %2 = alloca %src.Window*, align 8
  %3 = alloca i64, align 8
  %4 = alloca { i64, i64 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Window* %0, %src.Window** %2, align 8
  store i64 %1, i64* %3, align 8
  %5 = bitcast i8* %__.context_ptr to %runtime.Context*
  %6 = load %src.Window*, %src.Window** %2, align 8
  %7 = getelementptr inbounds %src.Window, %src.Window* %6, i32 0, i32 28
  %8 = load i64, i64* %3, align 8
  store i64 %8, i64* %7, align 8
  %9 = load i64, i64* %3, align 8
  %10 = getelementptr [6 x %sdl2.Cursor*], [6 x %sdl2.Cursor*]* getelementptr inbounds (%src.Global_State, %src.Global_State* @src.gs, i64 0, i32 4), i64 0, i64 %9
  %11 = bitcast { i64, i64 }* %4 to %..string*
  store %..string { i8* getelementptr inbounds ([57 x i8], [57 x i8]* @"csbs$19a", i64 0, i64 0), i64 56 }, %..string* %11, align 8
  %12 = load { i64, i64 }, { i64, i64 }* %4, align 8
  call void @runtime.bounds_check_error({ i64, i64 } %12, i32 372, i32 27, i64 %9, i64 6)
  %13 = load %sdl2.Cursor*, %sdl2.Cursor** %10, align 8
  call void @SDL_SetCursor(%sdl2.Cursor* %13)
  ret void
}

define internal i8 @src.window_input_event(%src.Window* %0, i64 %1, i64 %2, i8* %3, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %4 = alloca %src.Window*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i8, align 1
  %9 = alloca %src.Element*, align 8
  %10 = alloca [2 x float]*, align 8
  %11 = alloca i8, align 1
  %12 = alloca { <2 x float>, <2 x float> }, align 8
  %13 = alloca %src.Element*, align 8
  %14 = alloca i64, align 8
  %15 = alloca i8, align 1
  %16 = alloca %..string, align 8
  %17 = alloca i8, align 1
  %18 = alloca { i64, i64 }, align 8
  %19 = alloca { i64, i64 }, align 8
  %20 = alloca i8, align 1
  %21 = alloca { i64, i64 }, align 8
  %22 = alloca { i64, i64 }, align 8
  %23 = alloca { i64, i64 }, align 8
  %24 = alloca { i64, i64 }, align 8
  %25 = alloca { i64, i64 }, align 8
  %26 = alloca { i64, i64 }, align 8
  %27 = alloca %src.Element*, align 8
  %28 = alloca %src.Element*, align 8
  %29 = alloca i8, align 1
  %30 = alloca %src.Rect, align 4
  %31 = alloca { i64, i64 }, align 8
  %32 = alloca { i64, i64 }, align 8
  %33 = alloca %src.Element*, align 8
  %34 = alloca i8, align 1
  %35 = alloca i64, align 8
  %36 = alloca i64, align 8
  %37 = alloca %src.Element*, align 8
  %38 = alloca %time.Tick, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Window* %0, %src.Window** %4, align 8
  store i64 %1, i64* %5, align 8
  store i64 %2, i64* %6, align 8
  store i8* %3, i8** %7, align 8
  store i8 0, i8* %8, align 1
  %39 = bitcast i8* %__.context_ptr to %runtime.Context*
  %40 = load i64, i64* %5, align 8
  %41 = icmp eq i64 %40, 26
  %42 = zext i1 %41 to i8
  %43 = trunc i8 %42 to i1
  br i1 %43, label %if.then, label %if.done2

if.then:                                          ; preds = %entry
  %44 = load %src.Window*, %src.Window** %4, align 8
  %45 = getelementptr inbounds %src.Window, %src.Window* %44, i32 0, i32 1
  %46 = load %src.Element*, %src.Element** %45, align 8
  %47 = icmp eq %src.Element* %46, null
  %48 = zext i1 %47 to i8
  %49 = trunc i8 %48 to i1
  br i1 %49, label %if.then1, label %if.else

if.then1:                                         ; preds = %if.then
  %50 = load %src.Window*, %src.Window** %4, align 8
  %51 = getelementptr inbounds %src.Window, %src.Window* %50, i32 0, i32 0
  br label %if.done

if.else:                                          ; preds = %if.then
  %52 = load %src.Window*, %src.Window** %4, align 8
  %53 = getelementptr inbounds %src.Window, %src.Window* %52, i32 0, i32 1
  %54 = load %src.Element*, %src.Element** %53, align 8
  br label %if.done

if.done:                                          ; preds = %if.else, %if.then1
  %55 = phi %src.Element* [ %51, %if.then1 ], [ %54, %if.else ]
  store %src.Element* %55, %src.Element** %9, align 8
  %56 = load %src.Element*, %src.Element** %9, align 8
  %57 = load i64, i64* %5, align 8
  %58 = load i64, i64* %6, align 8
  %59 = load i8*, i8** %7, align 8
  %60 = bitcast %runtime.Context* %39 to i8*
  call void @src.element_send_msg_until_received(%src.Element* %56, i64 %57, i64 %58, i8* %59, i8* %60)
  %61 = load i8, i8* %8, align 1
  store i8 %61, i8* %8, align 1
  ret i8 %61

if.done2:                                         ; preds = %entry
  %62 = load %src.Window*, %src.Window** %4, align 8
  %63 = getelementptr inbounds %src.Window, %src.Window* %62, i32 0, i32 2
  %64 = load %src.Element*, %src.Element** %63, align 8
  %65 = icmp ne %src.Element* %64, null
  %66 = zext i1 %65 to i8
  %67 = trunc i8 %66 to i1
  br i1 %67, label %if.then3, label %if.done27

if.then3:                                         ; preds = %if.done2
  %68 = load i64, i64* %5, align 8
  %69 = icmp eq i64 %68, 12
  %70 = zext i1 %69 to i8
  %71 = trunc i8 %70 to i1
  br i1 %71, label %if.then4, label %if.else13

if.then4:                                         ; preds = %if.then3
  store [2 x float]* null, [2 x float]** %10, align 8
  %72 = load %src.Window*, %src.Window** %4, align 8
  %73 = getelementptr inbounds %src.Window, %src.Window* %72, i32 0, i32 17
  %74 = load i64, i64* %73, align 8
  %75 = icmp eq i64 %74, 1
  %76 = zext i1 %75 to i8
  %77 = trunc i8 %76 to i1
  br i1 %77, label %if.then5, label %if.else6

if.then5:                                         ; preds = %if.then4
  %78 = load %src.Window*, %src.Window** %4, align 8
  %79 = getelementptr inbounds %src.Window, %src.Window* %78, i32 0, i32 15
  store [2 x float]* %79, [2 x float]** %10, align 8
  br label %if.done12

if.else6:                                         ; preds = %if.then4
  %80 = load %src.Window*, %src.Window** %4, align 8
  %81 = getelementptr inbounds %src.Window, %src.Window* %80, i32 0, i32 17
  %82 = load i64, i64* %81, align 8
  %83 = icmp eq i64 %82, 2
  %84 = zext i1 %83 to i8
  %85 = trunc i8 %84 to i1
  br i1 %85, label %if.then7, label %if.else8

if.then7:                                         ; preds = %if.else6
  %86 = load %src.Window*, %src.Window** %4, align 8
  %87 = getelementptr inbounds %src.Window, %src.Window* %86, i32 0, i32 14
  store [2 x float]* %87, [2 x float]** %10, align 8
  br label %if.done11

if.else8:                                         ; preds = %if.else6
  %88 = load %src.Window*, %src.Window** %4, align 8
  %89 = getelementptr inbounds %src.Window, %src.Window* %88, i32 0, i32 17
  %90 = load i64, i64* %89, align 8
  %91 = icmp eq i64 %90, 3
  %92 = zext i1 %91 to i8
  %93 = trunc i8 %92 to i1
  br i1 %93, label %if.then9, label %if.done10

if.then9:                                         ; preds = %if.else8
  %94 = load %src.Window*, %src.Window** %4, align 8
  %95 = getelementptr inbounds %src.Window, %src.Window* %94, i32 0, i32 16
  store [2 x float]* %95, [2 x float]** %10, align 8
  br label %if.done10

if.done10:                                        ; preds = %if.then9, %if.else8
  br label %if.done11

if.done11:                                        ; preds = %if.done10, %if.then7
  br label %if.done12

if.done12:                                        ; preds = %if.done11, %if.then5
  %96 = call i32 @SDL_CaptureMouse(i32 1)
  %97 = load %src.Window*, %src.Window** %4, align 8
  %98 = getelementptr inbounds %src.Window, %src.Window* %97, i32 0, i32 2
  %99 = load %src.Element*, %src.Element** %98, align 8
  %100 = load %src.Window*, %src.Window** %4, align 8
  %101 = getelementptr inbounds %src.Window, %src.Window* %100, i32 0, i32 10
  %102 = load i64, i64* %101, align 8
  %103 = load [2 x float]*, [2 x float]** %10, align 8
  %104 = bitcast [2 x float]* %103 to i8*
  %105 = bitcast %runtime.Context* %39 to i8*
  call void @src.element_send_msg_until_received(%src.Element* %99, i64 15, i64 %102, i8* %104, i8* %105)
  br label %if.done26

if.else13:                                        ; preds = %if.then3
  %106 = load i64, i64* %5, align 8
  %107 = icmp eq i64 %106, 17
  %108 = zext i1 %107 to i8
  %109 = trunc i8 %108 to i1
  br i1 %109, label %cmp.and, label %if.else17

cmp.and:                                          ; preds = %if.else13
  %110 = load %src.Window*, %src.Window** %4, align 8
  %111 = getelementptr inbounds %src.Window, %src.Window* %110, i32 0, i32 17
  %112 = load i64, i64* %111, align 8
  %113 = icmp eq i64 %112, 1
  %114 = zext i1 %113 to i8
  %115 = trunc i8 %114 to i1
  br i1 %115, label %if.then14, label %if.else17

if.then14:                                        ; preds = %cmp.and
  %116 = load %src.Window*, %src.Window** %4, align 8
  %117 = getelementptr inbounds %src.Window, %src.Window* %116, i32 0, i32 1
  %118 = load %src.Element*, %src.Element** %117, align 8
  %119 = load %src.Window*, %src.Window** %4, align 8
  %120 = getelementptr inbounds %src.Window, %src.Window* %119, i32 0, i32 2
  %121 = load %src.Element*, %src.Element** %120, align 8
  %122 = icmp eq %src.Element* %118, %121
  %123 = zext i1 %122 to i8
  %124 = trunc i8 %123 to i1
  br i1 %124, label %if.then15, label %if.done16

if.then15:                                        ; preds = %if.then14
  %125 = load %src.Window*, %src.Window** %4, align 8
  %126 = getelementptr inbounds %src.Window, %src.Window* %125, i32 0, i32 2
  %127 = load %src.Element*, %src.Element** %126, align 8
  %128 = load i64, i64* %6, align 8
  %129 = load i8*, i8** %7, align 8
  %130 = bitcast %runtime.Context* %39 to i8*
  %131 = call i64 @src.element_message(%src.Element* %127, i64 22, i64 %128, i8* %129, i8* %130)
  br label %if.done16

if.done16:                                        ; preds = %if.then15, %if.then14
  %132 = load %src.Window*, %src.Window** %4, align 8
  %133 = getelementptr inbounds %src.Window, %src.Window* %132, i32 0, i32 2
  %134 = load %src.Element*, %src.Element** %133, align 8
  %135 = load i64, i64* %6, align 8
  %136 = load i8*, i8** %7, align 8
  %137 = bitcast %runtime.Context* %39 to i8*
  %138 = call i64 @src.element_message(%src.Element* %134, i64 17, i64 %135, i8* %136, i8* %137)
  %139 = load %src.Window*, %src.Window** %4, align 8
  %140 = bitcast %runtime.Context* %39 to i8*
  call void @src.window_set_pressed(%src.Window* %139, %src.Element* null, i64 1, i8* %140)
  %141 = call i32 @SDL_CaptureMouse(i32 0)
  br label %if.done25

if.else17:                                        ; preds = %cmp.and, %if.else13
  %142 = load i64, i64* %5, align 8
  %143 = icmp eq i64 %142, 19
  %144 = zext i1 %143 to i8
  %145 = trunc i8 %144 to i1
  br i1 %145, label %cmp.and18, label %if.else20

cmp.and18:                                        ; preds = %if.else17
  %146 = load %src.Window*, %src.Window** %4, align 8
  %147 = getelementptr inbounds %src.Window, %src.Window* %146, i32 0, i32 17
  %148 = load i64, i64* %147, align 8
  %149 = icmp eq i64 %148, 2
  %150 = zext i1 %149 to i8
  %151 = trunc i8 %150 to i1
  br i1 %151, label %if.then19, label %if.else20

if.then19:                                        ; preds = %cmp.and18
  %152 = load %src.Window*, %src.Window** %4, align 8
  %153 = getelementptr inbounds %src.Window, %src.Window* %152, i32 0, i32 2
  %154 = load %src.Element*, %src.Element** %153, align 8
  %155 = load i64, i64* %6, align 8
  %156 = load i8*, i8** %7, align 8
  %157 = bitcast %runtime.Context* %39 to i8*
  %158 = call i64 @src.element_message(%src.Element* %154, i64 19, i64 %155, i8* %156, i8* %157)
  %159 = load %src.Window*, %src.Window** %4, align 8
  %160 = bitcast %runtime.Context* %39 to i8*
  call void @src.window_set_pressed(%src.Window* %159, %src.Element* null, i64 2, i8* %160)
  %161 = call i32 @SDL_CaptureMouse(i32 0)
  br label %if.done24

if.else20:                                        ; preds = %cmp.and18, %if.else17
  %162 = load i64, i64* %5, align 8
  %163 = icmp eq i64 %162, 21
  %164 = zext i1 %163 to i8
  %165 = trunc i8 %164 to i1
  br i1 %165, label %cmp.and21, label %if.done23

cmp.and21:                                        ; preds = %if.else20
  %166 = load %src.Window*, %src.Window** %4, align 8
  %167 = getelementptr inbounds %src.Window, %src.Window* %166, i32 0, i32 17
  %168 = load i64, i64* %167, align 8
  %169 = icmp eq i64 %168, 3
  %170 = zext i1 %169 to i8
  %171 = trunc i8 %170 to i1
  br i1 %171, label %if.then22, label %if.done23

if.then22:                                        ; preds = %cmp.and21
  %172 = load %src.Window*, %src.Window** %4, align 8
  %173 = getelementptr inbounds %src.Window, %src.Window* %172, i32 0, i32 2
  %174 = load %src.Element*, %src.Element** %173, align 8
  %175 = load i64, i64* %6, align 8
  %176 = load i8*, i8** %7, align 8
  %177 = bitcast %runtime.Context* %39 to i8*
  %178 = call i64 @src.element_message(%src.Element* %174, i64 21, i64 %175, i8* %176, i8* %177)
  %179 = load %src.Window*, %src.Window** %4, align 8
  %180 = bitcast %runtime.Context* %39 to i8*
  call void @src.window_set_pressed(%src.Window* %179, %src.Element* null, i64 3, i8* %180)
  %181 = call i32 @SDL_CaptureMouse(i32 0)
  br label %if.done23

if.done23:                                        ; preds = %if.then22, %cmp.and21, %if.else20
  br label %if.done24

if.done24:                                        ; preds = %if.done23, %if.then19
  br label %if.done25

if.done25:                                        ; preds = %if.done24, %if.done16
  br label %if.done26

if.done26:                                        ; preds = %if.done25, %if.done12
  br label %if.done27

if.done27:                                        ; preds = %if.done26, %if.done2
  %182 = load %src.Window*, %src.Window** %4, align 8
  %183 = getelementptr inbounds %src.Window, %src.Window* %182, i32 0, i32 2
  %184 = load %src.Element*, %src.Element** %183, align 8
  %185 = icmp ne %src.Element* %184, null
  %186 = zext i1 %185 to i8
  %187 = trunc i8 %186 to i1
  br i1 %187, label %if.then28, label %if.else36

if.then28:                                        ; preds = %if.done27
  %188 = load %src.Window*, %src.Window** %4, align 8
  %189 = getelementptr inbounds %src.Window, %src.Window* %188, i32 0, i32 2
  %190 = load %src.Element*, %src.Element** %189, align 8
  %191 = getelementptr inbounds %src.Element, %src.Element* %190, i32 0, i32 6
  %192 = load %src.Rect, %src.Rect* %191, align 4
  %193 = load %src.Window*, %src.Window** %4, align 8
  %194 = getelementptr inbounds %src.Window, %src.Window* %193, i32 0, i32 12
  %195 = load float, float* %194, align 4
  %196 = load %src.Window*, %src.Window** %4, align 8
  %197 = getelementptr inbounds %src.Window, %src.Window* %196, i32 0, i32 13
  %198 = load float, float* %197, align 4
  %199 = bitcast { <2 x float>, <2 x float> }* %12 to %src.Rect*
  store %src.Rect %192, %src.Rect* %199, align 4
  %200 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %12, align 8
  %201 = bitcast %runtime.Context* %39 to i8*
  %202 = call i8 @src.rect_contains({ <2 x float>, <2 x float> } %200, float %195, float %198, i8* %201)
  store i8 %202, i8* %11, align 1
  %203 = load i8, i8* %11, align 1
  %204 = trunc i8 %203 to i1
  br i1 %204, label %cmp.and29, label %if.else31

cmp.and29:                                        ; preds = %if.then28
  %205 = load %src.Window*, %src.Window** %4, align 8
  %206 = getelementptr inbounds %src.Window, %src.Window* %205, i32 0, i32 1
  %207 = load %src.Element*, %src.Element** %206, align 8
  %208 = load %src.Window*, %src.Window** %4, align 8
  %209 = getelementptr inbounds %src.Window, %src.Window* %208, i32 0, i32 0
  %210 = icmp eq %src.Element* %207, %209
  %211 = zext i1 %210 to i8
  %212 = trunc i8 %211 to i1
  br i1 %212, label %if.then30, label %if.else31

if.then30:                                        ; preds = %cmp.and29
  %213 = load %src.Window*, %src.Window** %4, align 8
  %214 = getelementptr inbounds %src.Window, %src.Window* %213, i32 0, i32 1
  %215 = load %src.Window*, %src.Window** %4, align 8
  %216 = getelementptr inbounds %src.Window, %src.Window* %215, i32 0, i32 2
  %217 = load %src.Element*, %src.Element** %216, align 8
  store %src.Element* %217, %src.Element** %214, align 8
  %218 = load %src.Window*, %src.Window** %4, align 8
  %219 = getelementptr inbounds %src.Window, %src.Window* %218, i32 0, i32 2
  %220 = load %src.Element*, %src.Element** %219, align 8
  %221 = bitcast %runtime.Context* %39 to i8*
  %222 = call i64 @src.element_message(%src.Element* %220, i64 1, i64 1, i8* null, i8* %221)
  br label %if.done35

if.else31:                                        ; preds = %cmp.and29, %if.then28
  %223 = load i8, i8* %11, align 1
  %224 = trunc i8 %223 to i1
  br i1 %224, label %if.done34, label %cmp.and32

cmp.and32:                                        ; preds = %if.else31
  %225 = load %src.Window*, %src.Window** %4, align 8
  %226 = getelementptr inbounds %src.Window, %src.Window* %225, i32 0, i32 1
  %227 = load %src.Element*, %src.Element** %226, align 8
  %228 = load %src.Window*, %src.Window** %4, align 8
  %229 = getelementptr inbounds %src.Window, %src.Window* %228, i32 0, i32 2
  %230 = load %src.Element*, %src.Element** %229, align 8
  %231 = icmp eq %src.Element* %227, %230
  %232 = zext i1 %231 to i8
  %233 = trunc i8 %232 to i1
  br i1 %233, label %if.then33, label %if.done34

if.then33:                                        ; preds = %cmp.and32
  %234 = load %src.Window*, %src.Window** %4, align 8
  %235 = getelementptr inbounds %src.Window, %src.Window* %234, i32 0, i32 1
  %236 = load %src.Window*, %src.Window** %4, align 8
  %237 = getelementptr inbounds %src.Window, %src.Window* %236, i32 0, i32 0
  store %src.Element* %237, %src.Element** %235, align 8
  %238 = load %src.Window*, %src.Window** %4, align 8
  %239 = getelementptr inbounds %src.Window, %src.Window* %238, i32 0, i32 2
  %240 = load %src.Element*, %src.Element** %239, align 8
  %241 = bitcast %runtime.Context* %39 to i8*
  %242 = call i64 @src.element_message(%src.Element* %240, i64 1, i64 1, i8* null, i8* %241)
  br label %if.done34

if.done34:                                        ; preds = %if.then33, %cmp.and32, %if.else31
  br label %if.done35

if.done35:                                        ; preds = %if.done34, %if.then30
  br label %if.done91

if.else36:                                        ; preds = %if.done27
  %243 = load %src.Window*, %src.Window** %4, align 8
  %244 = getelementptr inbounds %src.Window, %src.Window* %243, i32 0, i32 0
  %245 = load %src.Window*, %src.Window** %4, align 8
  %246 = getelementptr inbounds %src.Window, %src.Window* %245, i32 0, i32 12
  %247 = load float, float* %246, align 4
  %248 = load %src.Window*, %src.Window** %4, align 8
  %249 = getelementptr inbounds %src.Window, %src.Window* %248, i32 0, i32 13
  %250 = load float, float* %249, align 4
  %251 = bitcast %runtime.Context* %39 to i8*
  %252 = call %src.Element* @src.element_find_by_point(%src.Element* %244, float %247, float %250, i8* %251)
  store %src.Element* %252, %src.Element** %13, align 8
  %253 = load i64, i64* %5, align 8
  switch i64 %253, label %switch.done [
    i64 12, label %switch.case.body
    i64 16, label %switch.case.body39
    i64 18, label %switch.case.body40
    i64 20, label %switch.case.body41
    i64 27, label %switch.case.body42
    i64 28, label %switch.case.body85
    i64 13, label %switch.case.body86
    i64 14, label %switch.case.body87
  ]

switch.case.body:                                 ; preds = %if.else36
  %254 = load %src.Element*, %src.Element** %13, align 8
  %255 = load i64, i64* %6, align 8
  %256 = load i8*, i8** %7, align 8
  %257 = bitcast %runtime.Context* %39 to i8*
  %258 = call i64 @src.element_message(%src.Element* %254, i64 12, i64 %255, i8* %256, i8* %257)
  %259 = load %src.Element*, %src.Element** %13, align 8
  %260 = bitcast %runtime.Context* %39 to i8*
  %261 = call i64 @src.element_message(%src.Element* %259, i64 24, i64 0, i8* null, i8* %260)
  store i64 %261, i64* %14, align 8
  %262 = load i64, i64* %14, align 8
  %263 = load %src.Window*, %src.Window** %4, align 8
  %264 = getelementptr inbounds %src.Window, %src.Window* %263, i32 0, i32 28
  %265 = load i64, i64* %264, align 8
  %266 = icmp ne i64 %262, %265
  %267 = zext i1 %266 to i8
  %268 = trunc i8 %267 to i1
  br i1 %268, label %if.then37, label %if.done38

if.then37:                                        ; preds = %switch.case.body
  %269 = load %src.Window*, %src.Window** %4, align 8
  %270 = load i64, i64* %14, align 8
  %271 = bitcast %runtime.Context* %39 to i8*
  call void @src.window_set_cursor(%src.Window* %269, i64 %270, i8* %271)
  br label %if.done38

if.done38:                                        ; preds = %if.then37, %switch.case.body
  br label %switch.done

switch.case.body39:                               ; preds = %if.else36
  %272 = load %src.Window*, %src.Window** %4, align 8
  %273 = load %src.Element*, %src.Element** %13, align 8
  %274 = bitcast %runtime.Context* %39 to i8*
  call void @src.window_set_pressed(%src.Window* %272, %src.Element* %273, i64 1, i8* %274)
  %275 = load %src.Element*, %src.Element** %13, align 8
  %276 = load i64, i64* %5, align 8
  %277 = load %src.Window*, %src.Window** %4, align 8
  %278 = getelementptr inbounds %src.Window, %src.Window* %277, i32 0, i32 10
  %279 = load i64, i64* %278, align 8
  %280 = load i8*, i8** %7, align 8
  %281 = bitcast %runtime.Context* %39 to i8*
  %282 = call i64 @src.element_message(%src.Element* %275, i64 %276, i64 %279, i8* %280, i8* %281)
  br label %switch.done

switch.case.body40:                               ; preds = %if.else36
  %283 = load %src.Window*, %src.Window** %4, align 8
  %284 = load %src.Element*, %src.Element** %13, align 8
  %285 = bitcast %runtime.Context* %39 to i8*
  call void @src.window_set_pressed(%src.Window* %283, %src.Element* %284, i64 2, i8* %285)
  %286 = load %src.Element*, %src.Element** %13, align 8
  %287 = load i64, i64* %5, align 8
  %288 = load i64, i64* %6, align 8
  %289 = load i8*, i8** %7, align 8
  %290 = bitcast %runtime.Context* %39 to i8*
  call void @src.element_send_msg_until_received(%src.Element* %286, i64 %287, i64 %288, i8* %289, i8* %290)
  br label %switch.done

switch.case.body41:                               ; preds = %if.else36
  %291 = load %src.Window*, %src.Window** %4, align 8
  %292 = load %src.Element*, %src.Element** %13, align 8
  %293 = bitcast %runtime.Context* %39 to i8*
  call void @src.window_set_pressed(%src.Window* %291, %src.Element* %292, i64 3, i8* %293)
  %294 = load %src.Element*, %src.Element** %13, align 8
  %295 = load i64, i64* %5, align 8
  %296 = load i64, i64* %6, align 8
  %297 = load i8*, i8** %7, align 8
  %298 = bitcast %runtime.Context* %39 to i8*
  %299 = call i64 @src.element_message(%src.Element* %294, i64 %295, i64 %296, i8* %297, i8* %298)
  br label %switch.done

switch.case.body42:                               ; preds = %if.else36
  store i8 0, i8* %15, align 1
  %300 = load %src.Window*, %src.Window** %4, align 8
  %301 = getelementptr inbounds %src.Window, %src.Window* %300, i32 0, i32 4
  %302 = load %src.Element*, %src.Element** %301, align 8
  %303 = icmp eq %src.Element* %302, null
  %304 = zext i1 %303 to i8
  %305 = trunc i8 %304 to i1
  br i1 %305, label %if.then43, label %if.done46

if.then43:                                        ; preds = %switch.case.body42
  %306 = load %src.Window*, %src.Window** %4, align 8
  %307 = getelementptr inbounds %src.Window, %src.Window* %306, i32 0, i32 0
  %308 = load i64, i64* %5, align 8
  %309 = load i64, i64* %6, align 8
  %310 = load i8*, i8** %7, align 8
  %311 = bitcast %runtime.Context* %39 to i8*
  %312 = call i64 @src.element_message(%src.Element* %307, i64 %308, i64 %309, i8* %310, i8* %311)
  %313 = icmp eq i64 %312, 1
  %314 = zext i1 %313 to i8
  %315 = trunc i8 %314 to i1
  br i1 %315, label %if.then44, label %if.done45

if.then44:                                        ; preds = %if.then43
  store i8 1, i8* %15, align 1
  br label %if.done45

if.done45:                                        ; preds = %if.then44, %if.then43
  br label %if.done46

if.done46:                                        ; preds = %if.done45, %switch.case.body42
  %316 = load i8, i8* %15, align 1
  %317 = trunc i8 %316 to i1
  br i1 %317, label %if.done82, label %cmp.and47

cmp.and47:                                        ; preds = %if.done46
  %318 = load %src.Window*, %src.Window** %4, align 8
  %319 = getelementptr inbounds %src.Window, %src.Window* %318, i32 0, i32 33
  %320 = load i8, i8* %319, align 1
  %321 = trunc i8 %320 to i1
  br i1 %321, label %if.done82, label %cmp.and48

cmp.and48:                                        ; preds = %cmp.and47
  %322 = load %src.Window*, %src.Window** %4, align 8
  %323 = getelementptr inbounds %src.Window, %src.Window* %322, i32 0, i32 35
  %324 = load i8, i8* %323, align 1
  %325 = trunc i8 %324 to i1
  br i1 %325, label %if.done82, label %if.then49

if.then49:                                        ; preds = %cmp.and48
  %326 = load i8*, i8** %7, align 8
  %327 = bitcast i8* %326 to %..string*
  %328 = load %..string, %..string* %327, align 8
  store %..string %328, %..string* %16, align 8
  %329 = load %..string, %..string* %16, align 8
  %330 = bitcast %..string* %16 to { i64, i64 }*
  %331 = load { i64, i64 }, { i64, i64 }* %330, align 8
  %332 = bitcast { i64, i64 }* %18 to %..string*
  store %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$1d7", i64 0, i64 0), i64 3 }, %..string* %332, align 8
  %333 = load { i64, i64 }, { i64, i64 }* %18, align 8
  %334 = call i8 @runtime.string_eq({ i64, i64 } %331, { i64, i64 } %333)
  %335 = trunc i8 %334 to i1
  br i1 %335, label %logical.cmp.done, label %logical.cmp.rhs

logical.cmp.rhs:                                  ; preds = %if.then49
  %336 = load %..string, %..string* %16, align 8
  %337 = bitcast %..string* %16 to { i64, i64 }*
  %338 = load { i64, i64 }, { i64, i64 }* %337, align 8
  %339 = bitcast { i64, i64 }* %19 to %..string*
  store %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$324", i64 0, i64 0), i64 9 }, %..string* %339, align 8
  %340 = load { i64, i64 }, { i64, i64 }* %19, align 8
  %341 = call i8 @runtime.string_eq({ i64, i64 } %338, { i64, i64 } %340)
  br label %logical.cmp.done

logical.cmp.done:                                 ; preds = %logical.cmp.rhs, %if.then49
  %342 = phi i8 [ 1, %if.then49 ], [ %341, %logical.cmp.rhs ]
  store i8 %342, i8* %17, align 1
  %343 = load %src.Window*, %src.Window** %4, align 8
  %344 = getelementptr inbounds %src.Window, %src.Window* %343, i32 0, i32 34
  %345 = load i8, i8* %344, align 1
  store i8 %345, i8* %20, align 1
  %346 = load %src.Window*, %src.Window** %4, align 8
  %347 = getelementptr inbounds %src.Window, %src.Window* %346, i32 0, i32 38
  %348 = load %src.Element*, %src.Element** %347, align 8
  %349 = icmp ne %src.Element* %348, null
  %350 = zext i1 %349 to i8
  %351 = trunc i8 %350 to i1
  br i1 %351, label %if.then50, label %if.done56

if.then50:                                        ; preds = %logical.cmp.done
  %352 = load %..string, %..string* %16, align 8
  %353 = bitcast %..string* %16 to { i64, i64 }*
  %354 = load { i64, i64 }, { i64, i64 }* %353, align 8
  %355 = bitcast { i64, i64 }* %21 to %..string*
  store %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$325", i64 0, i64 0), i64 2 }, %..string* %355, align 8
  %356 = load { i64, i64 }, { i64, i64 }* %21, align 8
  %357 = call i8 @runtime.string_eq({ i64, i64 } %354, { i64, i64 } %356)
  %358 = trunc i8 %357 to i1
  br i1 %358, label %logical.cmp.done53, label %cmp.or

cmp.or:                                           ; preds = %if.then50
  %359 = load %..string, %..string* %16, align 8
  %360 = bitcast %..string* %16 to { i64, i64 }*
  %361 = load { i64, i64 }, { i64, i64 }* %360, align 8
  %362 = bitcast { i64, i64 }* %22 to %..string*
  store %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$326", i64 0, i64 0), i64 4 }, %..string* %362, align 8
  %363 = load { i64, i64 }, { i64, i64 }* %22, align 8
  %364 = call i8 @runtime.string_eq({ i64, i64 } %361, { i64, i64 } %363)
  %365 = trunc i8 %364 to i1
  br i1 %365, label %logical.cmp.done53, label %cmp.or51

cmp.or51:                                         ; preds = %cmp.or
  %366 = load %..string, %..string* %16, align 8
  %367 = bitcast %..string* %16 to { i64, i64 }*
  %368 = load { i64, i64 }, { i64, i64 }* %367, align 8
  %369 = bitcast { i64, i64 }* %23 to %..string*
  store %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$2f9", i64 0, i64 0), i64 4 }, %..string* %369, align 8
  %370 = load { i64, i64 }, { i64, i64 }* %23, align 8
  %371 = call i8 @runtime.string_eq({ i64, i64 } %368, { i64, i64 } %370)
  %372 = trunc i8 %371 to i1
  br i1 %372, label %logical.cmp.done53, label %logical.cmp.rhs52

logical.cmp.rhs52:                                ; preds = %cmp.or51
  %373 = load %..string, %..string* %16, align 8
  %374 = bitcast %..string* %16 to { i64, i64 }*
  %375 = load { i64, i64 }, { i64, i64 }* %374, align 8
  %376 = bitcast { i64, i64 }* %24 to %..string*
  store %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$2fd", i64 0, i64 0), i64 5 }, %..string* %376, align 8
  %377 = load { i64, i64 }, { i64, i64 }* %24, align 8
  %378 = call i8 @runtime.string_eq({ i64, i64 } %375, { i64, i64 } %377)
  br label %logical.cmp.done53

logical.cmp.done53:                               ; preds = %logical.cmp.rhs52, %cmp.or51, %cmp.or, %if.then50
  %379 = phi i8 [ 1, %if.then50 ], [ 1, %cmp.or ], [ 1, %cmp.or51 ], [ %378, %logical.cmp.rhs52 ]
  %380 = load i8, i8* %17, align 1
  %381 = or i8 %380, %379
  store i8 %381, i8* %17, align 1
  %382 = load %..string, %..string* %16, align 8
  %383 = bitcast %..string* %16 to { i64, i64 }*
  %384 = load { i64, i64 }, { i64, i64 }* %383, align 8
  %385 = bitcast { i64, i64 }* %25 to %..string*
  store %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$325", i64 0, i64 0), i64 2 }, %..string* %385, align 8
  %386 = load { i64, i64 }, { i64, i64 }* %25, align 8
  %387 = call i8 @runtime.string_eq({ i64, i64 } %384, { i64, i64 } %386)
  %388 = trunc i8 %387 to i1
  br i1 %388, label %logical.cmp.done55, label %logical.cmp.rhs54

logical.cmp.rhs54:                                ; preds = %logical.cmp.done53
  %389 = load %..string, %..string* %16, align 8
  %390 = bitcast %..string* %16 to { i64, i64 }*
  %391 = load { i64, i64 }, { i64, i64 }* %390, align 8
  %392 = bitcast { i64, i64 }* %26 to %..string*
  store %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$2f9", i64 0, i64 0), i64 4 }, %..string* %392, align 8
  %393 = load { i64, i64 }, { i64, i64 }* %26, align 8
  %394 = call i8 @runtime.string_eq({ i64, i64 } %391, { i64, i64 } %393)
  br label %logical.cmp.done55

logical.cmp.done55:                               ; preds = %logical.cmp.rhs54, %logical.cmp.done53
  %395 = phi i8 [ 1, %logical.cmp.done53 ], [ %394, %logical.cmp.rhs54 ]
  %396 = load i8, i8* %20, align 1
  %397 = or i8 %396, %395
  store i8 %397, i8* %20, align 1
  br label %if.done56

if.done56:                                        ; preds = %logical.cmp.done55, %logical.cmp.done
  %398 = load i8, i8* %17, align 1
  %399 = trunc i8 %398 to i1
  br i1 %399, label %if.then57, label %if.done81

if.then57:                                        ; preds = %if.done56
  %400 = load %src.Window*, %src.Window** %4, align 8
  %401 = getelementptr inbounds %src.Window, %src.Window* %400, i32 0, i32 4
  %402 = load %src.Element*, %src.Element** %401, align 8
  %403 = icmp ne %src.Element* %402, null
  %404 = zext i1 %403 to i8
  %405 = trunc i8 %404 to i1
  br i1 %405, label %if.then58, label %if.else59

if.then58:                                        ; preds = %if.then57
  %406 = load %src.Window*, %src.Window** %4, align 8
  %407 = getelementptr inbounds %src.Window, %src.Window* %406, i32 0, i32 4
  %408 = load %src.Element*, %src.Element** %407, align 8
  br label %if.done60

if.else59:                                        ; preds = %if.then57
  %409 = load %src.Window*, %src.Window** %4, align 8
  %410 = getelementptr inbounds %src.Window, %src.Window* %409, i32 0, i32 0
  br label %if.done60

if.done60:                                        ; preds = %if.else59, %if.then58
  %411 = phi %src.Element* [ %408, %if.then58 ], [ %410, %if.else59 ]
  store %src.Element* %411, %src.Element** %27, align 8
  %412 = load %src.Element*, %src.Element** %27, align 8
  store %src.Element* %412, %src.Element** %28, align 8
  store i8 1, i8* %29, align 1
  br label %for.loop

for.loop:                                         ; preds = %if.done79, %if.done67, %if.done60
  %413 = load %src.Element*, %src.Element** %28, align 8
  %414 = load %src.Element*, %src.Element** %27, align 8
  %415 = bitcast %runtime.Context* %39 to i8*
  %416 = call i8 @src.window_input_event.cond-0(%src.Element* %413, %src.Element* %414, i8* %29, i8* %415)
  %417 = trunc i8 %416 to i1
  br i1 %417, label %for.body, label %for.done80

for.body:                                         ; preds = %for.loop
  %418 = load %src.Element*, %src.Element** %28, align 8
  %419 = getelementptr inbounds %src.Element, %src.Element* %418, i32 0, i32 0
  %420 = load i32, i32* %419, align 4
  %421 = and i32 %420, 512
  %422 = icmp ne i32 %421, 0
  %423 = zext i1 %422 to i8
  %424 = trunc i8 %423 to i1
  br i1 %424, label %cmp.and61, label %if.done68

cmp.and61:                                        ; preds = %for.body
  %425 = load %src.Element*, %src.Element** %28, align 8
  %426 = getelementptr inbounds %src.Element, %src.Element* %425, i32 0, i32 3
  %427 = load { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %426, align 8
  %428 = getelementptr inbounds { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %426, i32 0, i32 1
  %429 = load i64, i64* %428, align 8
  %430 = icmp ne i64 %429, 0
  %431 = zext i1 %430 to i8
  %432 = trunc i8 %431 to i1
  br i1 %432, label %cmp.and62, label %if.done68

cmp.and62:                                        ; preds = %cmp.and61
  %433 = load %src.Element*, %src.Element** %28, align 8
  %434 = getelementptr inbounds %src.Element, %src.Element* %433, i32 0, i32 0
  %435 = load i32, i32* %434, align 4
  %436 = and i32 %435, 2
  %437 = icmp eq i32 %436, 0
  %438 = zext i1 %437 to i8
  %439 = trunc i8 %438 to i1
  br i1 %439, label %cmp.and63, label %if.done68

cmp.and63:                                        ; preds = %cmp.and62
  %440 = load %src.Element*, %src.Element** %28, align 8
  %441 = getelementptr inbounds %src.Element, %src.Element* %440, i32 0, i32 6
  %442 = load %src.Rect, %src.Rect* %441, align 4
  store %src.Rect zeroinitializer, %src.Rect* %30, align 4
  %443 = bitcast %src.Rect* %441 to i8*
  %444 = bitcast %src.Rect* %30 to i8*
  %445 = call i8 @runtime.memory_equal(i8* %443, i8* %444, i64 16)
  %446 = icmp eq i8 %445, 0
  %447 = zext i1 %446 to i8
  %448 = trunc i8 %447 to i1
  br i1 %448, label %if.then64, label %if.done68

if.then64:                                        ; preds = %cmp.and63
  %449 = load i8, i8* %20, align 1
  %450 = trunc i8 %449 to i1
  br i1 %450, label %if.then65, label %if.else66

if.then65:                                        ; preds = %if.then64
  %451 = load %src.Element*, %src.Element** %28, align 8
  %452 = getelementptr inbounds %src.Element, %src.Element* %451, i32 0, i32 3
  %453 = load { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %452, align 8
  %454 = getelementptr inbounds { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %452, i32 0, i32 0
  %455 = load %src.Element**, %src.Element*** %454, align 8
  %456 = getelementptr inbounds { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %452, i32 0, i32 1
  %457 = load i64, i64* %456, align 8
  %458 = load %src.Element*, %src.Element** %28, align 8
  %459 = getelementptr inbounds %src.Element, %src.Element* %458, i32 0, i32 3
  %460 = load { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %459, align 8
  %461 = getelementptr inbounds { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %459, i32 0, i32 1
  %462 = load i64, i64* %461, align 8
  %463 = sub i64 %462, 1
  %464 = bitcast { i64, i64 }* %31 to %..string*
  store %..string { i8* getelementptr inbounds ([57 x i8], [57 x i8]* @"csbs$19a", i64 0, i64 0), i64 56 }, %..string* %464, align 8
  %465 = load { i64, i64 }, { i64, i64 }* %31, align 8
  call void @runtime.bounds_check_error({ i64, i64 } %465, i32 518, i32 37, i64 %463, i64 %457)
  %466 = getelementptr %src.Element*, %src.Element** %455, i64 %463
  %467 = load %src.Element*, %src.Element** %466, align 8
  store %src.Element* %467, %src.Element** %28, align 8
  br label %if.done67

if.else66:                                        ; preds = %if.then64
  %468 = load %src.Element*, %src.Element** %28, align 8
  %469 = getelementptr inbounds %src.Element, %src.Element* %468, i32 0, i32 3
  %470 = load { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %469, align 8
  %471 = getelementptr inbounds { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %469, i32 0, i32 0
  %472 = load %src.Element**, %src.Element*** %471, align 8
  %473 = getelementptr inbounds { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %469, i32 0, i32 1
  %474 = load i64, i64* %473, align 8
  %475 = bitcast { i64, i64 }* %32 to %..string*
  store %..string { i8* getelementptr inbounds ([57 x i8], [57 x i8]* @"csbs$19a", i64 0, i64 0), i64 56 }, %..string* %475, align 8
  %476 = load { i64, i64 }, { i64, i64 }* %32, align 8
  call void @runtime.bounds_check_error({ i64, i64 } %476, i32 520, i32 37, i64 0, i64 %474)
  %477 = getelementptr %src.Element*, %src.Element** %472, i64 0
  %478 = load %src.Element*, %src.Element** %477, align 8
  store %src.Element* %478, %src.Element** %28, align 8
  br label %if.done67

if.done67:                                        ; preds = %if.else66, %if.then65
  br label %for.loop

unreachable:                                      ; No predecessors!
  br label %if.done68

if.done68:                                        ; preds = %unreachable, %cmp.and63, %cmp.and62, %cmp.and61, %for.body
  br label %for.loop69

for.loop69:                                       ; preds = %if.done77, %if.done68
  %479 = load %src.Element*, %src.Element** %28, align 8
  %480 = icmp ne %src.Element* %479, null
  %481 = zext i1 %480 to i8
  %482 = trunc i8 %481 to i1
  br i1 %482, label %for.body70, label %for.done

for.body70:                                       ; preds = %for.loop69
  %483 = load %src.Element*, %src.Element** %28, align 8
  %484 = load i8, i8* %20, align 1
  %485 = icmp ne i8 %484, 0
  %486 = bitcast %runtime.Context* %39 to i8*
  %487 = call %src.Element* @src.element_next_or_previous_sibling(%src.Element* %483, i1 %485, i8* %486)
  store %src.Element* %487, %src.Element** %33, align 8
  %488 = load %src.Element*, %src.Element** %33, align 8
  %489 = icmp ne %src.Element* %488, null
  %490 = zext i1 %489 to i8
  %491 = trunc i8 %490 to i1
  br i1 %491, label %if.then71, label %if.done73

if.then71:                                        ; preds = %for.body70
  %492 = load %src.Element*, %src.Element** %33, align 8
  store %src.Element* %492, %src.Element** %28, align 8
  br label %for.done

unreachable72:                                    ; No predecessors!
  br label %if.done73

if.done73:                                        ; preds = %unreachable72, %for.body70
  %493 = load %src.Window*, %src.Window** %4, align 8
  %494 = getelementptr inbounds %src.Window, %src.Window* %493, i32 0, i32 38
  %495 = load %src.Element*, %src.Element** %494, align 8
  %496 = icmp eq %src.Element* %495, null
  %497 = zext i1 %496 to i8
  %498 = trunc i8 %497 to i1
  br i1 %498, label %if.then74, label %if.else75

if.then74:                                        ; preds = %if.done73
  %499 = load %src.Element*, %src.Element** %28, align 8
  %500 = getelementptr inbounds %src.Element, %src.Element* %499, i32 0, i32 2
  %501 = load %src.Element*, %src.Element** %500, align 8
  store %src.Element* %501, %src.Element** %28, align 8
  br label %if.done77

if.else75:                                        ; preds = %if.done73
  %502 = load %src.Element*, %src.Element** %27, align 8
  store %src.Element* %502, %src.Element** %28, align 8
  br label %for.done80

unreachable76:                                    ; No predecessors!
  br label %if.done77

if.done77:                                        ; preds = %unreachable76, %if.then74
  br label %for.loop69

for.done:                                         ; preds = %if.then71, %for.loop69
  %503 = load %src.Element*, %src.Element** %28, align 8
  %504 = icmp eq %src.Element* %503, null
  %505 = zext i1 %504 to i8
  %506 = trunc i8 %505 to i1
  br i1 %506, label %if.then78, label %if.done79

if.then78:                                        ; preds = %for.done
  %507 = load %src.Window*, %src.Window** %4, align 8
  %508 = getelementptr inbounds %src.Window, %src.Window* %507, i32 0, i32 0
  store %src.Element* %508, %src.Element** %28, align 8
  br label %if.done79

if.done79:                                        ; preds = %if.then78, %for.done
  br label %for.loop

for.done80:                                       ; preds = %if.else75, %for.loop
  %509 = load %src.Element*, %src.Element** %28, align 8
  %510 = bitcast %runtime.Context* %39 to i8*
  %511 = call i8 @src.element_focus(%src.Element* %509, i8* %510)
  %512 = load %src.Element*, %src.Element** %28, align 8
  %513 = bitcast %runtime.Context* %39 to i8*
  call void @src.element_repaint(%src.Element* %512, i8* %513)
  store i8 1, i8* %15, align 1
  br label %if.done81

if.done81:                                        ; preds = %for.done80, %if.done56
  br label %if.done82

if.done82:                                        ; preds = %if.done81, %cmp.and48, %cmp.and47, %if.done46
  %514 = load i8, i8* %15, align 1
  %515 = trunc i8 %514 to i1
  br i1 %515, label %if.done84, label %if.then83

if.then83:                                        ; preds = %if.done82
  %516 = load %src.Window*, %src.Window** %4, align 8
  %517 = load i64, i64* %6, align 8
  %518 = load i8*, i8** %7, align 8
  %519 = bitcast %runtime.Context* %39 to i8*
  %520 = call i8 @src.window_send_msg_to_focused_or_parents(%src.Window* %516, i64 27, i64 %517, i8* %518, i8* %519)
  store i8 %520, i8* %15, align 1
  br label %if.done84

if.done84:                                        ; preds = %if.then83, %if.done82
  %521 = load i8, i8* %15, align 1
  store i8 %521, i8* %8, align 1
  br label %switch.done

switch.case.body85:                               ; preds = %if.else36
  %522 = load %src.Window*, %src.Window** %4, align 8
  %523 = load i64, i64* %6, align 8
  %524 = load i8*, i8** %7, align 8
  %525 = bitcast %runtime.Context* %39 to i8*
  %526 = call i8 @src.window_send_msg_to_focused_or_parents(%src.Window* %522, i64 28, i64 %523, i8* %524, i8* %525)
  store i8 %526, i8* %34, align 1
  %527 = load i8, i8* %34, align 1
  store i8 %527, i8* %8, align 1
  br label %switch.done

switch.case.body86:                               ; preds = %if.else36
  %528 = load i64, i64* %6, align 8
  %529 = bitcast %runtime.Context* %39 to i8*
  %530 = call i64 @src.options_scroll_x(i8* %529)
  %531 = mul i64 %528, %530
  store i64 %531, i64* %35, align 8
  %532 = load %src.Window*, %src.Window** %4, align 8
  %533 = getelementptr inbounds %src.Window, %src.Window* %532, i32 0, i32 1
  %534 = load %src.Element*, %src.Element** %533, align 8
  %535 = load i64, i64* %35, align 8
  %536 = load i8*, i8** %7, align 8
  %537 = bitcast %runtime.Context* %39 to i8*
  call void @src.element_send_msg_until_received(%src.Element* %534, i64 13, i64 %535, i8* %536, i8* %537)
  br label %switch.done

switch.case.body87:                               ; preds = %if.else36
  %538 = load i64, i64* %6, align 8
  %539 = bitcast %runtime.Context* %39 to i8*
  %540 = call i64 @src.options_scroll_y(i8* %539)
  %541 = mul i64 %538, %540
  store i64 %541, i64* %36, align 8
  %542 = load %src.Window*, %src.Window** %4, align 8
  %543 = getelementptr inbounds %src.Window, %src.Window* %542, i32 0, i32 1
  %544 = load %src.Element*, %src.Element** %543, align 8
  %545 = load i64, i64* %36, align 8
  %546 = load i8*, i8** %7, align 8
  %547 = bitcast %runtime.Context* %39 to i8*
  call void @src.element_send_msg_until_received(%src.Element* %544, i64 14, i64 %545, i8* %546, i8* %547)
  br label %switch.done

switch.done:                                      ; preds = %switch.case.body87, %switch.case.body86, %switch.case.body85, %if.done84, %switch.case.body41, %switch.case.body40, %switch.case.body39, %if.done38, %if.else36
  %548 = load %src.Element*, %src.Element** %13, align 8
  %549 = load %src.Window*, %src.Window** %4, align 8
  %550 = getelementptr inbounds %src.Window, %src.Window* %549, i32 0, i32 1
  %551 = load %src.Element*, %src.Element** %550, align 8
  %552 = icmp ne %src.Element* %548, %551
  %553 = zext i1 %552 to i8
  %554 = trunc i8 %553 to i1
  br i1 %554, label %if.then88, label %if.else89

if.then88:                                        ; preds = %switch.done
  %555 = load %src.Window*, %src.Window** %4, align 8
  %556 = getelementptr inbounds %src.Window, %src.Window* %555, i32 0, i32 1
  %557 = load %src.Element*, %src.Element** %556, align 8
  store %src.Element* %557, %src.Element** %37, align 8
  %558 = load %src.Window*, %src.Window** %4, align 8
  %559 = getelementptr inbounds %src.Window, %src.Window* %558, i32 0, i32 1
  %560 = load %src.Element*, %src.Element** %13, align 8
  store %src.Element* %560, %src.Element** %559, align 8
  %561 = load %src.Window*, %src.Window** %4, align 8
  %562 = getelementptr inbounds %src.Window, %src.Window* %561, i32 0, i32 5
  %563 = call i64 @time.tick_now()
  %564 = bitcast %time.Tick* %38 to i64*
  store i64 %563, i64* %564, align 8
  %565 = load %time.Tick, %time.Tick* %38, align 8
  store %time.Tick %565, %time.Tick* %562, align 8
  %566 = load %src.Window*, %src.Window** %4, align 8
  %567 = getelementptr inbounds %src.Window, %src.Window* %566, i32 0, i32 3
  store %src.Element* null, %src.Element** %567, align 8
  %568 = load %src.Element*, %src.Element** %37, align 8
  %569 = bitcast %runtime.Context* %39 to i8*
  %570 = call i64 @src.element_message(%src.Element* %568, i64 1, i64 2, i8* null, i8* %569)
  %571 = load %src.Window*, %src.Window** %4, align 8
  %572 = getelementptr inbounds %src.Window, %src.Window* %571, i32 0, i32 1
  %573 = load %src.Element*, %src.Element** %572, align 8
  %574 = bitcast %runtime.Context* %39 to i8*
  %575 = call i64 @src.element_message(%src.Element* %573, i64 1, i64 1, i8* null, i8* %574)
  br label %if.done90

if.else89:                                        ; preds = %switch.done
  %576 = load %src.Window*, %src.Window** %4, align 8
  %577 = bitcast %runtime.Context* %39 to i8*
  %578 = call i8 @src.window_hovered_check(%src.Window* %576, i8* %577)
  br label %if.done90

if.done90:                                        ; preds = %if.else89, %if.then88
  br label %if.done91

if.done91:                                        ; preds = %if.done90, %if.done35
  %579 = load i8, i8* %8, align 1
  store i8 %579, i8* %8, align 1
  ret i8 %579
}

define internal %src.Element* @src.element_next_or_previous_sibling(%src.Element* %0, i1 zeroext %1, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %2 = alloca %src.Element*, align 8
  %3 = alloca i8, align 1
  %4 = alloca { %src.Element**, i64, i64, %runtime.Allocator }, align 8
  %5 = alloca %src.Element*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca %src.Element*, align 8
  %9 = alloca i64, align 8
  %10 = alloca { i64, i64 }, align 8
  %11 = alloca { i64, i64 }, align 8
  %12 = alloca { i64, i64 }, align 8
  %13 = alloca %runtime.Source_Code_Location, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Element* %0, %src.Element** %2, align 8
  %14 = zext i1 %1 to i8
  store i8 %14, i8* %3, align 1
  %15 = bitcast i8* %__.context_ptr to %runtime.Context*
  %16 = load %src.Element*, %src.Element** %2, align 8
  %17 = getelementptr inbounds %src.Element, %src.Element* %16, i32 0, i32 2
  %18 = load %src.Element*, %src.Element** %17, align 8
  %19 = icmp eq %src.Element* %18, null
  %20 = zext i1 %19 to i8
  %21 = trunc i8 %20 to i1
  br i1 %21, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  ret %src.Element* null

if.done:                                          ; preds = %entry
  %22 = load %src.Element*, %src.Element** %2, align 8
  %23 = getelementptr inbounds %src.Element, %src.Element* %22, i32 0, i32 2
  %24 = load %src.Element*, %src.Element** %23, align 8
  %25 = getelementptr inbounds %src.Element, %src.Element* %24, i32 0, i32 3
  %26 = load { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %25, align 8
  store { %src.Element**, i64, i64, %runtime.Allocator } %26, { %src.Element**, i64, i64, %runtime.Allocator }* %4, align 8
  store %src.Element* null, %src.Element** %5, align 8
  store i64 0, i64* %6, align 8
  %27 = getelementptr inbounds { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %4, i32 0, i32 1
  store i64 -1, i64* %7, align 8
  br label %for.index.loop

for.index.loop:                                   ; preds = %if.done10, %if.done
  %28 = load i64, i64* %7, align 8
  %29 = add i64 %28, 1
  store i64 %29, i64* %7, align 8
  %30 = load i64, i64* %27, align 8
  %31 = icmp slt i64 %29, %30
  br i1 %31, label %for.index.body, label %for.index.done

for.index.body:                                   ; preds = %for.index.loop
  %32 = load i64, i64* %7, align 8
  %33 = getelementptr inbounds { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %4, i32 0, i32 0
  %34 = load %src.Element**, %src.Element*** %33, align 8
  %35 = getelementptr %src.Element*, %src.Element** %34, i64 %32
  %36 = load %src.Element*, %src.Element** %35, align 8
  store %src.Element* %36, %src.Element** %8, align 8
  store i64 %32, i64* %9, align 8
  %37 = load %src.Element*, %src.Element** %8, align 8
  %38 = load %src.Element*, %src.Element** %2, align 8
  %39 = icmp eq %src.Element* %37, %38
  %40 = zext i1 %39 to i8
  %41 = trunc i8 %40 to i1
  br i1 %41, label %if.then1, label %if.done10

if.then1:                                         ; preds = %for.index.body
  %42 = load i8, i8* %3, align 1
  %43 = trunc i8 %42 to i1
  br i1 %43, label %if.then2, label %if.else5

if.then2:                                         ; preds = %if.then1
  %44 = load i64, i64* %9, align 8
  %45 = icmp sgt i64 %44, 0
  %46 = zext i1 %45 to i8
  %47 = trunc i8 %46 to i1
  br i1 %47, label %if.then3, label %if.else

if.then3:                                         ; preds = %if.then2
  %48 = load { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %4, align 8
  %49 = getelementptr inbounds { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %4, i32 0, i32 0
  %50 = load %src.Element**, %src.Element*** %49, align 8
  %51 = getelementptr inbounds { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %4, i32 0, i32 1
  %52 = load i64, i64* %51, align 8
  %53 = load i64, i64* %9, align 8
  %54 = sub i64 %53, 1
  %55 = bitcast { i64, i64 }* %10 to %..string*
  store %..string { i8* getelementptr inbounds ([57 x i8], [57 x i8]* @"csbs$19a", i64 0, i64 0), i64 56 }, %..string* %55, align 8
  %56 = load { i64, i64 }, { i64, i64 }* %10, align 8
  call void @runtime.bounds_check_error({ i64, i64 } %56, i32 606, i32 29, i64 %54, i64 %52)
  %57 = getelementptr %src.Element*, %src.Element** %50, i64 %54
  %58 = load %src.Element*, %src.Element** %57, align 8
  br label %if.done4

if.else:                                          ; preds = %if.then2
  br label %if.done4

if.done4:                                         ; preds = %if.else, %if.then3
  %59 = phi %src.Element* [ %58, %if.then3 ], [ null, %if.else ]
  ret %src.Element* %59

if.else5:                                         ; preds = %if.then1
  %60 = load i64, i64* %9, align 8
  %61 = load { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %4, align 8
  %62 = getelementptr inbounds { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %4, i32 0, i32 1
  %63 = load i64, i64* %62, align 8
  %64 = sub i64 %63, 1
  %65 = icmp slt i64 %60, %64
  %66 = zext i1 %65 to i8
  %67 = trunc i8 %66 to i1
  br i1 %67, label %if.then6, label %if.else7

if.then6:                                         ; preds = %if.else5
  %68 = load { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %4, align 8
  %69 = getelementptr inbounds { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %4, i32 0, i32 0
  %70 = load %src.Element**, %src.Element*** %69, align 8
  %71 = getelementptr inbounds { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %4, i32 0, i32 1
  %72 = load i64, i64* %71, align 8
  %73 = load i64, i64* %9, align 8
  %74 = add i64 %73, 1
  %75 = bitcast { i64, i64 }* %11 to %..string*
  store %..string { i8* getelementptr inbounds ([57 x i8], [57 x i8]* @"csbs$19a", i64 0, i64 0), i64 56 }, %..string* %75, align 8
  %76 = load { i64, i64 }, { i64, i64 }* %11, align 8
  call void @runtime.bounds_check_error({ i64, i64 } %76, i32 608, i32 45, i64 %74, i64 %72)
  %77 = getelementptr %src.Element*, %src.Element** %70, i64 %74
  %78 = load %src.Element*, %src.Element** %77, align 8
  br label %if.done8

if.else7:                                         ; preds = %if.else5
  br label %if.done8

if.done8:                                         ; preds = %if.else7, %if.then6
  %79 = phi %src.Element* [ %78, %if.then6 ], [ null, %if.else7 ]
  ret %src.Element* %79

if.done9:                                         ; No predecessors!
  br label %if.done10

if.done10:                                        ; preds = %if.done9, %for.index.body
  br label %for.index.loop

for.index.done:                                   ; preds = %for.index.loop
  %80 = bitcast { i64, i64 }* %12 to %..string*
  store %..string { i8* getelementptr inbounds ([40 x i8], [40 x i8]* @"csbs$327", i64 0, i64 0), i64 39 }, %..string* %80, align 8
  %81 = load { i64, i64 }, { i64, i64 }* %12, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([57 x i8], [57 x i8]* @"csbs$19a", i64 0, i64 0), i64 56 }, i32 613, i32 2, %..string { i8* getelementptr inbounds ([33 x i8], [33 x i8]* @"csbs$328", i64 0, i64 0), i64 32 } }, %runtime.Source_Code_Location* %13, align 8
  %82 = bitcast %runtime.Context* %15 to i8*
  call void @runtime.unimplemented({ i64, i64 } %81, %runtime.Source_Code_Location* %13, i8* %82)
  unreachable
}

define internal i8 @src.window_hovered_check(%src.Window* %0, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %1 = alloca %src.Window*, align 8
  %2 = alloca %src.Element*, align 8
  %3 = alloca { i64, i64 }, align 8
  %4 = alloca i64, align 8
  %5 = alloca %..string, align 8
  %6 = alloca { i64, i64 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Window* %0, %src.Window** %1, align 8
  %7 = bitcast i8* %__.context_ptr to %runtime.Context*
  %8 = load %src.Window*, %src.Window** %1, align 8
  %9 = getelementptr inbounds %src.Window, %src.Window* %8, i32 0, i32 1
  %10 = load %src.Element*, %src.Element** %9, align 8
  store %src.Element* %10, %src.Element** %2, align 8
  %11 = load %src.Element*, %src.Element** %2, align 8
  %12 = icmp eq %src.Element* %11, null
  %13 = zext i1 %12 to i8
  %14 = trunc i8 %13 to i1
  br i1 %14, label %if.then, label %cmp.or

cmp.or:                                           ; preds = %entry
  %15 = load %src.Window*, %src.Window** %1, align 8
  %16 = getelementptr inbounds %src.Window, %src.Window* %15, i32 0, i32 6
  %17 = load %src.Panel_Floaty*, %src.Panel_Floaty** %16, align 8
  %18 = icmp eq %src.Panel_Floaty* %17, null
  %19 = zext i1 %18 to i8
  %20 = trunc i8 %19 to i1
  br i1 %20, label %if.then, label %if.done

if.then:                                          ; preds = %cmp.or, %entry
  ret i8 0

if.done:                                          ; preds = %cmp.or
  %21 = load %src.Window*, %src.Window** %1, align 8
  %22 = getelementptr inbounds %src.Window, %src.Window* %21, i32 0, i32 6
  %23 = load %src.Panel_Floaty*, %src.Panel_Floaty** %22, align 8
  %24 = getelementptr inbounds %src.Panel_Floaty, %src.Panel_Floaty* %23, i32 0, i32 0
  %25 = getelementptr inbounds %src.Element, %src.Element* %24, i32 0, i32 0
  %26 = load i32, i32* %25, align 4
  %27 = and i32 %26, 2
  %28 = icmp ne i32 %27, 0
  %29 = zext i1 %28 to i8
  %30 = trunc i8 %29 to i1
  br i1 %30, label %if.then1, label %if.else

if.then1:                                         ; preds = %if.done
  %31 = load %src.Element*, %src.Element** %2, align 8
  %32 = getelementptr inbounds %src.Element, %src.Element* %31, i32 0, i32 11
  %33 = load %..string, %..string* %32, align 8
  %34 = bitcast %..string* %32 to { i64, i64 }*
  %35 = load { i64, i64 }, { i64, i64 }* %34, align 8
  %36 = bitcast { i64, i64 }* %3 to %..string*
  store %..string zeroinitializer, %..string* %36, align 8
  %37 = load { i64, i64 }, { i64, i64 }* %3, align 8
  %38 = call i8 @runtime.string_ne({ i64, i64 } %35, { i64, i64 } %37)
  %39 = trunc i8 %38 to i1
  br i1 %39, label %cmp.and, label %if.done5

cmp.and:                                          ; preds = %if.then1
  %40 = load %src.Window*, %src.Window** %1, align 8
  %41 = getelementptr inbounds %src.Window, %src.Window* %40, i32 0, i32 3
  %42 = load %src.Element*, %src.Element** %41, align 8
  %43 = load %src.Element*, %src.Element** %2, align 8
  %44 = icmp ne %src.Element* %42, %43
  %45 = zext i1 %44 to i8
  %46 = trunc i8 %45 to i1
  br i1 %46, label %if.then2, label %if.done5

if.then2:                                         ; preds = %cmp.and
  %47 = load %src.Window*, %src.Window** %1, align 8
  %48 = getelementptr inbounds %src.Window, %src.Window* %47, i32 0, i32 5
  %49 = load %time.Tick, %time.Tick* %48, align 8
  %50 = bitcast %time.Tick* %48 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = call i64 @time.tick_since(i64 %51)
  store i64 %52, i64* %4, align 8
  %53 = load i64, i64* %4, align 8
  %54 = icmp sgt i64 %53, 500000000
  %55 = zext i1 %54 to i8
  %56 = trunc i8 %55 to i1
  br i1 %56, label %if.then3, label %if.done4

if.then3:                                         ; preds = %if.then2
  %57 = load %src.Element*, %src.Element** %2, align 8
  %58 = getelementptr inbounds %src.Element, %src.Element* %57, i32 0, i32 11
  %59 = load %..string, %..string* %58, align 8
  store %..string %59, %..string* %5, align 8
  %60 = load %src.Window*, %src.Window** %1, align 8
  %61 = load %src.Element*, %src.Element** %2, align 8
  %62 = load %..string, %..string* %5, align 8
  %63 = bitcast %..string* %5 to { i64, i64 }*
  %64 = load { i64, i64 }, { i64, i64 }* %63, align 8
  %65 = bitcast %runtime.Context* %7 to i8*
  call void @src.window_hovered_panel_spawn(%src.Window* %60, %src.Element* %61, { i64, i64 } %64, i8* %65)
  %66 = load %src.Window*, %src.Window** %1, align 8
  %67 = getelementptr inbounds %src.Window, %src.Window* %66, i32 0, i32 0
  %68 = bitcast %runtime.Context* %7 to i8*
  call void @src.element_repaint(%src.Element* %67, i8* %68)
  ret i8 1

if.done4:                                         ; preds = %if.then2
  br label %if.done5

if.done5:                                         ; preds = %if.done4, %cmp.and, %if.then1
  br label %if.done10

if.else:                                          ; preds = %if.done
  %69 = load %src.Element*, %src.Element** %2, align 8
  %70 = getelementptr inbounds %src.Element, %src.Element* %69, i32 0, i32 11
  %71 = load %..string, %..string* %70, align 8
  %72 = bitcast %..string* %70 to { i64, i64 }*
  %73 = load { i64, i64 }, { i64, i64 }* %72, align 8
  %74 = bitcast { i64, i64 }* %6 to %..string*
  store %..string zeroinitializer, %..string* %74, align 8
  %75 = load { i64, i64 }, { i64, i64 }* %6, align 8
  %76 = call i8 @runtime.string_eq({ i64, i64 } %73, { i64, i64 } %75)
  %77 = trunc i8 %76 to i1
  br i1 %77, label %if.then6, label %if.done7

if.then6:                                         ; preds = %if.else
  %78 = load %src.Window*, %src.Window** %1, align 8
  %79 = getelementptr inbounds %src.Window, %src.Window* %78, i32 0, i32 6
  %80 = load %src.Panel_Floaty*, %src.Panel_Floaty** %79, align 8
  %81 = getelementptr inbounds %src.Panel_Floaty, %src.Panel_Floaty* %80, i32 0, i32 0
  %82 = bitcast %runtime.Context* %7 to i8*
  call void @src.element_hide(%src.Element* %81, i1 true, i8* %82)
  %83 = load %src.Window*, %src.Window** %1, align 8
  %84 = getelementptr inbounds %src.Window, %src.Window* %83, i32 0, i32 0
  %85 = bitcast %runtime.Context* %7 to i8*
  call void @src.element_repaint(%src.Element* %84, i8* %85)
  ret i8 1

if.done7:                                         ; preds = %if.else
  %86 = load %src.Window*, %src.Window** %1, align 8
  %87 = getelementptr inbounds %src.Window, %src.Window* %86, i32 0, i32 3
  %88 = load %src.Element*, %src.Element** %87, align 8
  %89 = load %src.Element*, %src.Element** %2, align 8
  %90 = icmp eq %src.Element* %88, %89
  %91 = zext i1 %90 to i8
  %92 = trunc i8 %91 to i1
  br i1 %92, label %if.then8, label %if.done9

if.then8:                                         ; preds = %if.done7
  %93 = load %src.Window*, %src.Window** %1, align 8
  %94 = getelementptr inbounds %src.Window, %src.Window* %93, i32 0, i32 6
  %95 = load %src.Panel_Floaty*, %src.Panel_Floaty** %94, align 8
  %96 = getelementptr inbounds %src.Panel_Floaty, %src.Panel_Floaty* %95, i32 0, i32 0
  %97 = bitcast %runtime.Context* %7 to i8*
  call void @src.element_hide(%src.Element* %96, i1 true, i8* %97)
  %98 = load %src.Window*, %src.Window** %1, align 8
  %99 = getelementptr inbounds %src.Window, %src.Window* %98, i32 0, i32 0
  %100 = bitcast %runtime.Context* %7 to i8*
  call void @src.element_repaint(%src.Element* %99, i8* %100)
  ret i8 1

if.done9:                                         ; preds = %if.done7
  br label %if.done10

if.done10:                                        ; preds = %if.done9, %if.done5
  ret i8 0
}

define internal void @src.window_set_pressed(%src.Window* %0, %src.Element* %1, i64 %2, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %3 = alloca %src.Window*, align 8
  %4 = alloca %src.Element*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %src.Element*, align 8
  %7 = alloca %time.Tick, align 8
  %8 = alloca i64, align 8
  %9 = alloca %time.Tick, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Window* %0, %src.Window** %3, align 8
  store %src.Element* %1, %src.Element** %4, align 8
  store i64 %2, i64* %5, align 8
  %10 = bitcast i8* %__.context_ptr to %runtime.Context*
  %11 = load %src.Window*, %src.Window** %3, align 8
  %12 = getelementptr inbounds %src.Window, %src.Window* %11, i32 0, i32 2
  %13 = load %src.Element*, %src.Element** %12, align 8
  store %src.Element* %13, %src.Element** %6, align 8
  %14 = load %src.Window*, %src.Window** %3, align 8
  %15 = getelementptr inbounds %src.Window, %src.Window* %14, i32 0, i32 2
  %16 = load %src.Element*, %src.Element** %4, align 8
  store %src.Element* %16, %src.Element** %15, align 8
  %17 = load %src.Window*, %src.Window** %3, align 8
  %18 = getelementptr inbounds %src.Window, %src.Window* %17, i32 0, i32 17
  %19 = load i64, i64* %5, align 8
  store i64 %19, i64* %18, align 8
  %20 = load %src.Element*, %src.Element** %6, align 8
  %21 = icmp ne %src.Element* %20, null
  %22 = zext i1 %21 to i8
  %23 = trunc i8 %22 to i1
  br i1 %23, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  %24 = load %src.Element*, %src.Element** %6, align 8
  %25 = bitcast %runtime.Context* %10 to i8*
  %26 = call i64 @src.element_message(%src.Element* %24, i64 1, i64 4, i8* null, i8* %25)
  br label %if.done

if.done:                                          ; preds = %if.then, %entry
  %27 = load %src.Element*, %src.Element** %4, align 8
  %28 = icmp ne %src.Element* %27, null
  %29 = zext i1 %28 to i8
  %30 = trunc i8 %29 to i1
  br i1 %30, label %if.then1, label %if.done2

if.then1:                                         ; preds = %if.done
  %31 = load %src.Element*, %src.Element** %4, align 8
  %32 = bitcast %runtime.Context* %10 to i8*
  %33 = call i64 @src.element_message(%src.Element* %31, i64 1, i64 3, i8* null, i8* %32)
  br label %if.done2

if.done2:                                         ; preds = %if.then1, %if.done
  %34 = load %src.Element*, %src.Element** %4, align 8
  %35 = icmp ne %src.Element* %34, null
  %36 = zext i1 %35 to i8
  %37 = trunc i8 %36 to i1
  br i1 %37, label %if.then3, label %if.done12

if.then3:                                         ; preds = %if.done2
  %38 = load %src.Window*, %src.Window** %3, align 8
  %39 = getelementptr inbounds %src.Window, %src.Window* %38, i32 0, i32 9
  %40 = load %src.Element*, %src.Element** %39, align 8
  %41 = load %src.Element*, %src.Element** %4, align 8
  %42 = icmp ne %src.Element* %40, %41
  %43 = zext i1 %42 to i8
  %44 = trunc i8 %43 to i1
  br i1 %44, label %if.then4, label %if.else

if.then4:                                         ; preds = %if.then3
  %45 = load %src.Window*, %src.Window** %3, align 8
  %46 = getelementptr inbounds %src.Window, %src.Window* %45, i32 0, i32 10
  store i64 0, i64* %46, align 8
  br label %if.done11

if.else:                                          ; preds = %if.then3
  %47 = load %src.Window*, %src.Window** %3, align 8
  %48 = getelementptr inbounds %src.Window, %src.Window* %47, i32 0, i32 11
  %49 = load %time.Tick, %time.Tick* %48, align 8
  store %time.Tick zeroinitializer, %time.Tick* %7, align 8
  %50 = bitcast %time.Tick* %48 to i8*
  %51 = bitcast %time.Tick* %7 to i8*
  %52 = call i8 @runtime.memory_equal(i8* %50, i8* %51, i64 8)
  %53 = trunc i8 %52 to i1
  br i1 %53, label %if.then5, label %if.else6

if.then5:                                         ; preds = %if.else
  %54 = load %src.Window*, %src.Window** %3, align 8
  %55 = getelementptr inbounds %src.Window, %src.Window* %54, i32 0, i32 10
  store i64 0, i64* %55, align 8
  br label %if.done10

if.else6:                                         ; preds = %if.else
  %56 = load %src.Window*, %src.Window** %3, align 8
  %57 = getelementptr inbounds %src.Window, %src.Window* %56, i32 0, i32 11
  %58 = load %time.Tick, %time.Tick* %57, align 8
  %59 = bitcast %time.Tick* %57 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = call i64 @time.tick_since(i64 %60)
  store i64 %61, i64* %8, align 8
  %62 = load i64, i64* %8, align 8
  %63 = icmp slt i64 %62, 500000000
  %64 = zext i1 %63 to i8
  %65 = trunc i8 %64 to i1
  br i1 %65, label %if.then7, label %if.else8

if.then7:                                         ; preds = %if.else6
  %66 = load %src.Window*, %src.Window** %3, align 8
  %67 = getelementptr inbounds %src.Window, %src.Window* %66, i32 0, i32 10
  %68 = load i64, i64* %67, align 8
  %69 = add i64 %68, 1
  store i64 %69, i64* %67, align 8
  br label %if.done9

if.else8:                                         ; preds = %if.else6
  %70 = load %src.Window*, %src.Window** %3, align 8
  %71 = getelementptr inbounds %src.Window, %src.Window* %70, i32 0, i32 10
  store i64 0, i64* %71, align 8
  br label %if.done9

if.done9:                                         ; preds = %if.else8, %if.then7
  br label %if.done10

if.done10:                                        ; preds = %if.done9, %if.then5
  br label %if.done11

if.done11:                                        ; preds = %if.done10, %if.then4
  %72 = load %src.Window*, %src.Window** %3, align 8
  %73 = getelementptr inbounds %src.Window, %src.Window* %72, i32 0, i32 9
  %74 = load %src.Element*, %src.Element** %4, align 8
  store %src.Element* %74, %src.Element** %73, align 8
  %75 = load %src.Window*, %src.Window** %3, align 8
  %76 = getelementptr inbounds %src.Window, %src.Window* %75, i32 0, i32 11
  %77 = call i64 @time.tick_now()
  %78 = bitcast %time.Tick* %9 to i64*
  store i64 %77, i64* %78, align 8
  %79 = load %time.Tick, %time.Tick* %9, align 8
  store %time.Tick %79, %time.Tick* %76, align 8
  br label %if.done12

if.done12:                                        ; preds = %if.done11, %if.done2
  %80 = load %src.Element*, %src.Element** %4, align 8
  %81 = icmp ne %src.Element* %80, null
  %82 = zext i1 %81 to i8
  %83 = trunc i8 %82 to i1
  br i1 %83, label %if.then13, label %if.done14

if.then13:                                        ; preds = %if.done12
  %84 = load %src.Window*, %src.Window** %3, align 8
  %85 = getelementptr inbounds %src.Window, %src.Window* %84, i32 0, i32 3
  %86 = load %src.Element*, %src.Element** %4, align 8
  store %src.Element* %86, %src.Element** %85, align 8
  br label %if.done14

if.done14:                                        ; preds = %if.then13, %if.done12
  ret void
}

define internal void @src.window_title_build(%src.Window* %0, { i64, i64 } %1, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %2 = alloca %src.Window*, align 8
  %3 = alloca %..string, align 8
  %4 = alloca %strings.Builder*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca %..string, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Window* %0, %src.Window** %2, align 8
  %7 = bitcast %..string* %3 to { i64, i64 }*
  store { i64, i64 } %1, { i64, i64 }* %7, align 8
  %8 = load %..string, %..string* %3, align 8
  %9 = bitcast i8* %__.context_ptr to %runtime.Context*
  %10 = load %src.Window*, %src.Window** %2, align 8
  %11 = getelementptr inbounds %src.Window, %src.Window* %10, i32 0, i32 44
  store %strings.Builder* %11, %strings.Builder** %4, align 8
  %12 = load %strings.Builder*, %strings.Builder** %4, align 8
  %13 = bitcast %runtime.Context* %9 to i8*
  call void @strings.builder_reset(%strings.Builder* %12, i8* %13)
  %14 = load %strings.Builder*, %strings.Builder** %4, align 8
  %15 = load %..string, %..string* %3, align 8
  %16 = bitcast %..string* %3 to { i64, i64 }*
  %17 = load { i64, i64 }, { i64, i64 }* %16, align 8
  %18 = bitcast %runtime.Context* %9 to i8*
  %19 = call i64 @strings.write_string(%strings.Builder* %14, { i64, i64 } %17, i8* %18)
  %20 = load %strings.Builder*, %strings.Builder** %4, align 8
  %21 = bitcast %runtime.Context* %9 to i8*
  %22 = call i64 @strings.write_byte(%strings.Builder* %20, i8 0, i8* %21)
  %23 = load %strings.Builder*, %strings.Builder** %4, align 8
  %24 = load %strings.Builder, %strings.Builder* %23, align 8
  %25 = bitcast %runtime.Context* %9 to i8*
  %26 = call { i64, i64 } @strings.to_string(%strings.Builder* %23, i8* %25)
  %27 = bitcast %..string* %6 to { i64, i64 }*
  store { i64, i64 } %26, { i64, i64 }* %27, align 8
  %28 = load %..string, %..string* %6, align 8
  %29 = bitcast %..string* %6 to { i64, i64 }*
  %30 = load { i64, i64 }, { i64, i64 }* %29, align 8
  %31 = bitcast %runtime.Context* %9 to i8*
  %32 = call i8* @strings.unsafe_string_to_cstring({ i64, i64 } %30, i8* %31)
  store i8* %32, i8** %5, align 8
  %33 = load %src.Window*, %src.Window** %2, align 8
  %34 = getelementptr inbounds %src.Window, %src.Window* %33, i32 0, i32 25
  %35 = load %sdl2.Window*, %sdl2.Window** %34, align 8
  %36 = load i8*, i8** %5, align 8
  call void @SDL_SetWindowTitle(%sdl2.Window* %35, i8* %36)
  ret void
}

define internal void @src.window_destroy(%src.Window* %0, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %1 = alloca %src.Window*, align 8
  %2 = alloca %runtime.Source_Code_Location, align 8
  %3 = alloca %runtime.Source_Code_Location, align 8
  %4 = alloca %runtime.Source_Code_Location, align 8
  %5 = alloca %runtime.Source_Code_Location, align 8
  %6 = alloca %runtime.Source_Code_Location, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Window* %0, %src.Window** %1, align 8
  %7 = bitcast i8* %__.context_ptr to %runtime.Context*
  %8 = load %src.Window*, %src.Window** %1, align 8
  %9 = getelementptr inbounds %src.Window, %src.Window* %8, i32 0, i32 7
  %10 = load i32, i32* %9, align 4
  %11 = call i32 @SDL_RemoveTimer(i32 %10)
  %12 = load %src.Window*, %src.Window** %1, align 8
  %13 = getelementptr inbounds %src.Window, %src.Window* %12, i32 0, i32 43
  %14 = load %src.Undo_Manager, %src.Undo_Manager* %13, align 8
  %15 = bitcast %runtime.Context* %7 to i8*
  call void @src.undo_manager_destroy(%src.Undo_Manager* %13, i8* %15)
  %16 = load %src.Window*, %src.Window** %1, align 8
  %17 = getelementptr inbounds %src.Window, %src.Window* %16, i32 0, i32 24
  %18 = load %src.Render_Target*, %src.Render_Target** %17, align 8
  %19 = bitcast %runtime.Context* %7 to i8*
  call void @src.render_target_destroy(%src.Render_Target* %18, i8* %19)
  %20 = load %src.Window*, %src.Window** %1, align 8
  %21 = getelementptr inbounds %src.Window, %src.Window* %20, i32 0, i32 37
  %22 = load { { i64*, i64 }, { i8*, i64, i64, %runtime.Allocator } }, { { i64*, i64 }, { i8*, i64, i64, %runtime.Allocator } }* %21, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([57 x i8], [57 x i8]* @"csbs$19a", i64 0, i64 0), i64 56 }, i32 711, i32 2, %..string { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"csbs$329", i64 0, i64 0), i64 14 } }, %runtime.Source_Code_Location* %2, align 8
  %23 = bitcast %runtime.Context* %7 to i8*
  %24 = call i8 @runtime.delete_map-49574({ { i64*, i64 }, { i8*, i64, i64, %runtime.Allocator } }* %21, %runtime.Source_Code_Location* %2, i8* %23)
  %25 = load %src.Window*, %src.Window** %1, align 8
  %26 = getelementptr inbounds %src.Window, %src.Window* %25, i32 0, i32 0
  %27 = bitcast %runtime.Context* %7 to i8*
  call void @src.element_destroy(%src.Element* %26, i8* %27)
  %28 = load %src.Window*, %src.Window** %1, align 8
  %29 = getelementptr inbounds %src.Window, %src.Window* %28, i32 0, i32 0
  %30 = bitcast %runtime.Context* %7 to i8*
  %31 = call i8 @src.element_deallocate(%src.Element* %29, i8* %30)
  %32 = load %src.Window*, %src.Window** %1, align 8
  %33 = getelementptr inbounds %src.Window, %src.Window* %32, i32 0, i32 31
  %34 = getelementptr inbounds %strings.Builder, %strings.Builder* %33, i32 0, i32 0
  %35 = load { i8*, i64, i64, %runtime.Allocator }, { i8*, i64, i64, %runtime.Allocator }* %34, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([57 x i8], [57 x i8]* @"csbs$19a", i64 0, i64 0), i64 56 }, i32 714, i32 2, %..string { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"csbs$329", i64 0, i64 0), i64 14 } }, %runtime.Source_Code_Location* %3, align 8
  %36 = bitcast %runtime.Context* %7 to i8*
  %37 = call i8 @runtime.delete_dynamic_array-47636({ i8*, i64, i64, %runtime.Allocator }* %34, %runtime.Source_Code_Location* %3, i8* %36)
  %38 = load %src.Window*, %src.Window** %1, align 8
  %39 = getelementptr inbounds %src.Window, %src.Window* %38, i32 0, i32 44
  %40 = getelementptr inbounds %strings.Builder, %strings.Builder* %39, i32 0, i32 0
  %41 = load { i8*, i64, i64, %runtime.Allocator }, { i8*, i64, i64, %runtime.Allocator }* %40, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([57 x i8], [57 x i8]* @"csbs$19a", i64 0, i64 0), i64 56 }, i32 715, i32 2, %..string { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"csbs$329", i64 0, i64 0), i64 14 } }, %runtime.Source_Code_Location* %4, align 8
  %42 = bitcast %runtime.Context* %7 to i8*
  %43 = call i8 @runtime.delete_dynamic_array-47636({ i8*, i64, i64, %runtime.Allocator }* %40, %runtime.Source_Code_Location* %4, i8* %42)
  %44 = load %src.Window*, %src.Window** %1, align 8
  %45 = getelementptr inbounds %src.Window, %src.Window* %44, i32 0, i32 41
  %46 = getelementptr inbounds %strings.Builder, %strings.Builder* %45, i32 0, i32 0
  %47 = load { i8*, i64, i64, %runtime.Allocator }, { i8*, i64, i64, %runtime.Allocator }* %46, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([57 x i8], [57 x i8]* @"csbs$19a", i64 0, i64 0), i64 56 }, i32 716, i32 2, %..string { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"csbs$329", i64 0, i64 0), i64 14 } }, %runtime.Source_Code_Location* %5, align 8
  %48 = bitcast %runtime.Context* %7 to i8*
  %49 = call i8 @runtime.delete_dynamic_array-47636({ i8*, i64, i64, %runtime.Allocator }* %46, %runtime.Source_Code_Location* %5, i8* %48)
  %50 = load %src.Window*, %src.Window** %1, align 8
  %51 = getelementptr inbounds %src.Window, %src.Window* %50, i32 0, i32 45
  %52 = getelementptr inbounds %strings.Builder, %strings.Builder* %51, i32 0, i32 0
  %53 = load { i8*, i64, i64, %runtime.Allocator }, { i8*, i64, i64, %runtime.Allocator }* %52, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([57 x i8], [57 x i8]* @"csbs$19a", i64 0, i64 0), i64 56 }, i32 717, i32 2, %..string { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"csbs$329", i64 0, i64 0), i64 14 } }, %runtime.Source_Code_Location* %6, align 8
  %54 = bitcast %runtime.Context* %7 to i8*
  %55 = call i8 @runtime.delete_dynamic_array-47636({ i8*, i64, i64, %runtime.Allocator }* %52, %runtime.Source_Code_Location* %6, i8* %54)
  %56 = load %src.Window*, %src.Window** %1, align 8
  %57 = getelementptr inbounds %src.Window, %src.Window* %56, i32 0, i32 25
  %58 = load %sdl2.Window*, %sdl2.Window** %57, align 8
  call void @SDL_DestroyWindow(%sdl2.Window* %58)
  ret void
}

define internal void @src.window_layout_update(%src.Window* %0, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %1 = alloca %src.Window*, align 8
  %2 = alloca %src.Rect, align 4
  br label %entry

entry:                                            ; preds = %decls
  store %src.Window* %0, %src.Window** %1, align 8
  %3 = bitcast i8* %__.context_ptr to %runtime.Context*
  %4 = load %src.Window*, %src.Window** %1, align 8
  %5 = getelementptr inbounds %src.Window, %src.Window* %4, i32 0, i32 0
  %6 = getelementptr inbounds %src.Element, %src.Element* %5, i32 0, i32 5
  %7 = bitcast %src.Rect* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* %7, i8 0, i64 16, i1 false)
  store %src.Rect zeroinitializer, %src.Rect* %2, align 4
  %8 = load %src.Window*, %src.Window** %1, align 8
  %9 = getelementptr inbounds %src.Window, %src.Window* %8, i32 0, i32 20
  %10 = load float, float* %9, align 4
  %11 = getelementptr inbounds %src.Rect, %src.Rect* %2, i32 0, i32 1
  store float %10, float* %11, align 4
  %12 = load %src.Window*, %src.Window** %1, align 8
  %13 = getelementptr inbounds %src.Window, %src.Window* %12, i32 0, i32 21
  %14 = load float, float* %13, align 4
  %15 = getelementptr inbounds %src.Rect, %src.Rect* %2, i32 0, i32 3
  store float %14, float* %15, align 4
  %16 = load %src.Rect, %src.Rect* %2, align 4
  store %src.Rect %16, %src.Rect* %6, align 4
  %17 = load %src.Window*, %src.Window** %1, align 8
  %18 = getelementptr inbounds %src.Window, %src.Window* %17, i32 0, i32 0
  %19 = getelementptr inbounds %src.Element, %src.Element* %18, i32 0, i32 6
  %20 = load %src.Window*, %src.Window** %1, align 8
  %21 = getelementptr inbounds %src.Window, %src.Window* %20, i32 0, i32 0
  %22 = getelementptr inbounds %src.Element, %src.Element* %21, i32 0, i32 5
  %23 = load %src.Rect, %src.Rect* %22, align 4
  store %src.Rect %23, %src.Rect* %19, align 4
  %24 = load %src.Window*, %src.Window** %1, align 8
  %25 = getelementptr inbounds %src.Window, %src.Window* %24, i32 0, i32 22
  store i8 1, i8* %25, align 1
  ret void
}

define internal void @src.window_build_combo({ %..string, i8 }* noalias sret %agg.result, %src.Window* %0, %sdl2.KeyboardEvent* %1, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %2 = alloca %src.Window*, align 8
  %3 = alloca i8, align 1
  %4 = alloca i8, align 1
  %5 = alloca i8, align 1
  %6 = alloca i8, align 1
  %7 = alloca %strings.Builder*, align 8
  %8 = alloca { i64, i64 }, align 8
  %9 = alloca { i64, i64 }, align 8
  %10 = alloca { i64, i64 }, align 8
  %11 = alloca i8*, align 8
  %12 = alloca %..string, align 8
  %13 = alloca %..string, align 8
  %14 = alloca %..string, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Window* %0, %src.Window** %2, align 8
  %15 = getelementptr inbounds { %..string, i8 }, { %..string, i8 }* %agg.result, i32 0, i32 0
  %16 = getelementptr inbounds { %..string, i8 }, { %..string, i8 }* %agg.result, i32 0, i32 1
  %17 = bitcast i8* %__.context_ptr to %runtime.Context*
  %18 = getelementptr inbounds %sdl2.KeyboardEvent, %sdl2.KeyboardEvent* %1, i32 0, i32 7
  %19 = getelementptr inbounds %sdl2.Keysym, %sdl2.Keysym* %18, i32 0, i32 0
  %20 = load i32, i32* %19, align 4
  %21 = icmp eq i32 %20, 224
  %22 = zext i1 %21 to i8
  %23 = trunc i8 %22 to i1
  br i1 %23, label %logical.cmp.done, label %logical.cmp.rhs

logical.cmp.rhs:                                  ; preds = %entry
  %24 = getelementptr inbounds %sdl2.KeyboardEvent, %sdl2.KeyboardEvent* %1, i32 0, i32 7
  %25 = getelementptr inbounds %sdl2.Keysym, %sdl2.Keysym* %24, i32 0, i32 0
  %26 = load i32, i32* %25, align 4
  %27 = icmp eq i32 %26, 228
  %28 = zext i1 %27 to i8
  br label %logical.cmp.done

logical.cmp.done:                                 ; preds = %logical.cmp.rhs, %entry
  %29 = phi i8 [ 1, %entry ], [ %28, %logical.cmp.rhs ]
  store i8 %29, i8* %3, align 1
  %30 = getelementptr inbounds %sdl2.KeyboardEvent, %sdl2.KeyboardEvent* %1, i32 0, i32 7
  %31 = getelementptr inbounds %sdl2.Keysym, %sdl2.Keysym* %30, i32 0, i32 0
  %32 = load i32, i32* %31, align 4
  %33 = icmp eq i32 %32, 225
  %34 = zext i1 %33 to i8
  %35 = trunc i8 %34 to i1
  br i1 %35, label %logical.cmp.done2, label %logical.cmp.rhs1

logical.cmp.rhs1:                                 ; preds = %logical.cmp.done
  %36 = getelementptr inbounds %sdl2.KeyboardEvent, %sdl2.KeyboardEvent* %1, i32 0, i32 7
  %37 = getelementptr inbounds %sdl2.Keysym, %sdl2.Keysym* %36, i32 0, i32 0
  %38 = load i32, i32* %37, align 4
  %39 = icmp eq i32 %38, 229
  %40 = zext i1 %39 to i8
  br label %logical.cmp.done2

logical.cmp.done2:                                ; preds = %logical.cmp.rhs1, %logical.cmp.done
  %41 = phi i8 [ 1, %logical.cmp.done ], [ %40, %logical.cmp.rhs1 ]
  store i8 %41, i8* %4, align 1
  %42 = getelementptr inbounds %sdl2.KeyboardEvent, %sdl2.KeyboardEvent* %1, i32 0, i32 7
  %43 = getelementptr inbounds %sdl2.Keysym, %sdl2.Keysym* %42, i32 0, i32 0
  %44 = load i32, i32* %43, align 4
  %45 = icmp eq i32 %44, 226
  %46 = zext i1 %45 to i8
  %47 = trunc i8 %46 to i1
  br i1 %47, label %logical.cmp.done4, label %logical.cmp.rhs3

logical.cmp.rhs3:                                 ; preds = %logical.cmp.done2
  %48 = getelementptr inbounds %sdl2.KeyboardEvent, %sdl2.KeyboardEvent* %1, i32 0, i32 7
  %49 = getelementptr inbounds %sdl2.Keysym, %sdl2.Keysym* %48, i32 0, i32 0
  %50 = load i32, i32* %49, align 4
  %51 = icmp eq i32 %50, 230
  %52 = zext i1 %51 to i8
  br label %logical.cmp.done4

logical.cmp.done4:                                ; preds = %logical.cmp.rhs3, %logical.cmp.done2
  %53 = phi i8 [ 1, %logical.cmp.done2 ], [ %52, %logical.cmp.rhs3 ]
  store i8 %53, i8* %5, align 1
  %54 = getelementptr inbounds %sdl2.KeyboardEvent, %sdl2.KeyboardEvent* %1, i32 0, i32 7
  %55 = getelementptr inbounds %sdl2.Keysym, %sdl2.Keysym* %54, i32 0, i32 0
  %56 = load i32, i32* %55, align 4
  %57 = icmp eq i32 %56, 227
  %58 = zext i1 %57 to i8
  %59 = trunc i8 %58 to i1
  br i1 %59, label %logical.cmp.done6, label %logical.cmp.rhs5

logical.cmp.rhs5:                                 ; preds = %logical.cmp.done4
  %60 = getelementptr inbounds %sdl2.KeyboardEvent, %sdl2.KeyboardEvent* %1, i32 0, i32 7
  %61 = getelementptr inbounds %sdl2.Keysym, %sdl2.Keysym* %60, i32 0, i32 0
  %62 = load i32, i32* %61, align 4
  %63 = icmp eq i32 %62, 231
  %64 = zext i1 %63 to i8
  br label %logical.cmp.done6

logical.cmp.done6:                                ; preds = %logical.cmp.rhs5, %logical.cmp.done4
  %65 = phi i8 [ 1, %logical.cmp.done4 ], [ %64, %logical.cmp.rhs5 ]
  store i8 %65, i8* %6, align 1
  %66 = load i8, i8* %3, align 1
  %67 = trunc i8 %66 to i1
  br i1 %67, label %if.then, label %cmp.or

cmp.or:                                           ; preds = %logical.cmp.done6
  %68 = load i8, i8* %4, align 1
  %69 = trunc i8 %68 to i1
  br i1 %69, label %if.then, label %cmp.or7

cmp.or7:                                          ; preds = %cmp.or
  %70 = load i8, i8* %5, align 1
  %71 = trunc i8 %70 to i1
  br i1 %71, label %if.then, label %cmp.or8

cmp.or8:                                          ; preds = %cmp.or7
  %72 = load i8, i8* %6, align 1
  %73 = trunc i8 %72 to i1
  br i1 %73, label %if.then, label %if.done

if.then:                                          ; preds = %cmp.or8, %cmp.or7, %cmp.or, %logical.cmp.done6
  %74 = load %..string, %..string* %15, align 8
  %75 = load i8, i8* %16, align 1
  store %..string %74, %..string* %15, align 8
  store i8 %75, i8* %16, align 1
  %76 = getelementptr inbounds { %..string, i8 }, { %..string, i8 }* %agg.result, i32 0, i32 0
  %77 = getelementptr inbounds { %..string, i8 }, { %..string, i8 }* %agg.result, i32 0, i32 1
  store %..string %74, %..string* %76, align 8
  store i8 %75, i8* %77, align 1
  ret void

if.done:                                          ; preds = %cmp.or8
  %78 = load %src.Window*, %src.Window** %2, align 8
  %79 = getelementptr inbounds %src.Window, %src.Window* %78, i32 0, i32 31
  store %strings.Builder* %79, %strings.Builder** %7, align 8
  %80 = load %strings.Builder*, %strings.Builder** %7, align 8
  %81 = bitcast %runtime.Context* %17 to i8*
  call void @strings.builder_reset(%strings.Builder* %80, i8* %81)
  %82 = load %src.Window*, %src.Window** %2, align 8
  %83 = getelementptr inbounds %src.Window, %src.Window* %82, i32 0, i32 33
  %84 = load i8, i8* %83, align 1
  %85 = trunc i8 %84 to i1
  br i1 %85, label %if.then9, label %if.done10

if.then9:                                         ; preds = %if.done
  %86 = load %strings.Builder*, %strings.Builder** %7, align 8
  %87 = bitcast { i64, i64 }* %8 to %..string*
  store %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$32a", i64 0, i64 0), i64 5 }, %..string* %87, align 8
  %88 = load { i64, i64 }, { i64, i64 }* %8, align 8
  %89 = bitcast %runtime.Context* %17 to i8*
  %90 = call i64 @strings.write_string(%strings.Builder* %86, { i64, i64 } %88, i8* %89)
  br label %if.done10

if.done10:                                        ; preds = %if.then9, %if.done
  %91 = load %src.Window*, %src.Window** %2, align 8
  %92 = getelementptr inbounds %src.Window, %src.Window* %91, i32 0, i32 34
  %93 = load i8, i8* %92, align 1
  %94 = trunc i8 %93 to i1
  br i1 %94, label %if.then11, label %if.done12

if.then11:                                        ; preds = %if.done10
  %95 = load %strings.Builder*, %strings.Builder** %7, align 8
  %96 = bitcast { i64, i64 }* %9 to %..string*
  store %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$32b", i64 0, i64 0), i64 6 }, %..string* %96, align 8
  %97 = load { i64, i64 }, { i64, i64 }* %9, align 8
  %98 = bitcast %runtime.Context* %17 to i8*
  %99 = call i64 @strings.write_string(%strings.Builder* %95, { i64, i64 } %97, i8* %98)
  br label %if.done12

if.done12:                                        ; preds = %if.then11, %if.done10
  %100 = load %src.Window*, %src.Window** %2, align 8
  %101 = getelementptr inbounds %src.Window, %src.Window* %100, i32 0, i32 35
  %102 = load i8, i8* %101, align 1
  %103 = trunc i8 %102 to i1
  br i1 %103, label %if.then13, label %if.done14

if.then13:                                        ; preds = %if.done12
  %104 = load %strings.Builder*, %strings.Builder** %7, align 8
  %105 = bitcast { i64, i64 }* %10 to %..string*
  store %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$32c", i64 0, i64 0), i64 4 }, %..string* %105, align 8
  %106 = load { i64, i64 }, { i64, i64 }* %10, align 8
  %107 = bitcast %runtime.Context* %17 to i8*
  %108 = call i64 @strings.write_string(%strings.Builder* %104, { i64, i64 } %106, i8* %107)
  br label %if.done14

if.done14:                                        ; preds = %if.then13, %if.done12
  %109 = getelementptr inbounds %sdl2.KeyboardEvent, %sdl2.KeyboardEvent* %1, i32 0, i32 7
  %110 = getelementptr inbounds %sdl2.Keysym, %sdl2.Keysym* %109, i32 0, i32 1
  %111 = load i32, i32* %110, align 4
  %112 = call i8* @SDL_GetKeyName(i32 %111)
  store i8* %112, i8** %11, align 8
  %113 = load %strings.Builder*, %strings.Builder** %7, align 8
  %114 = load i8*, i8** %11, align 8
  %115 = call { i64, i64 } @runtime.cstring_to_string(i8* %114)
  %116 = bitcast %..string* %12 to { i64, i64 }*
  store { i64, i64 } %115, { i64, i64 }* %116, align 8
  %117 = load %..string, %..string* %12, align 8
  %118 = bitcast %..string* %12 to { i64, i64 }*
  %119 = load { i64, i64 }, { i64, i64 }* %118, align 8
  %120 = bitcast %runtime.Context* %17 to i8*
  %121 = call i64 @strings.write_string(%strings.Builder* %113, { i64, i64 } %119, i8* %120)
  store i8 1, i8* %16, align 1
  %122 = load %strings.Builder*, %strings.Builder** %7, align 8
  %123 = load %strings.Builder, %strings.Builder* %122, align 8
  %124 = bitcast %runtime.Context* %17 to i8*
  %125 = call { i64, i64 } @strings.to_string(%strings.Builder* %122, i8* %124)
  %126 = bitcast %..string* %13 to { i64, i64 }*
  store { i64, i64 } %125, { i64, i64 }* %126, align 8
  %127 = load %..string, %..string* %13, align 8
  %128 = getelementptr inbounds %runtime.Context, %runtime.Context* %17, i32 0, i32 1
  %129 = load %runtime.Allocator, %runtime.Allocator* %128, align 8
  %130 = bitcast %..string* %13 to { i64, i64 }*
  %131 = load { i64, i64 }, { i64, i64 }* %130, align 8
  %132 = bitcast %runtime.Allocator* %128 to { i64, i64 }*
  %133 = load { i64, i64 }, { i64, i64 }* %132, align 8
  %134 = bitcast %runtime.Context* %17 to i8*
  %135 = call { i64, i64 } @strings.to_lower({ i64, i64 } %131, { i64, i64 } %133, i8* %134)
  %136 = bitcast %..string* %14 to { i64, i64 }*
  store { i64, i64 } %135, { i64, i64 }* %136, align 8
  %137 = load %..string, %..string* %14, align 8
  store %..string %137, %..string* %15, align 8
  %138 = load %..string, %..string* %15, align 8
  %139 = load i8, i8* %16, align 1
  store %..string %138, %..string* %15, align 8
  store i8 %139, i8* %16, align 1
  %140 = getelementptr inbounds { %..string, i8 }, { %..string, i8 }* %agg.result, i32 0, i32 0
  %141 = getelementptr inbounds { %..string, i8 }, { %..string, i8 }* %agg.result, i32 0, i32 1
  store %..string %138, %..string* %140, align 8
  store i8 %139, i8* %141, align 1
  ret void
}

define internal void @src.window_handle_event(%src.Window* %0, %sdl2.Event* %1, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %2 = alloca %src.Window*, align 8
  %3 = alloca %sdl2.Event*, align 8
  %4 = alloca %sdl2.Event, align 8
  %5 = alloca %src.Window*, align 8
  %6 = alloca i64, align 8
  %7 = alloca %src.Window*, align 8
  %8 = alloca %..string, align 8
  %9 = alloca i8, align 1
  %10 = alloca { %..string, i8 }, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  %16 = alloca { i64, i64 }, align 8
  %17 = alloca i32, align 4
  %18 = alloca i64, align 8
  %19 = alloca { i64, i64 }, align 8
  %20 = alloca { i8*, i64 }, align 8
  %21 = alloca { i32, i64 }, align 8
  %22 = alloca i32, align 4
  %23 = alloca [2 x float], align 4
  %24 = alloca [2 x float], align 4
  %25 = alloca [2 x float], align 4
  %26 = alloca %strings.Builder*, align 8
  %27 = alloca { i64*, i64, i64, %runtime.Allocator }*, align 8
  %28 = alloca %..string, align 8
  %29 = alloca %..string, align 8
  %30 = alloca %runtime.Source_Code_Location, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Window* %0, %src.Window** %2, align 8
  store %sdl2.Event* %1, %sdl2.Event** %3, align 8
  %31 = bitcast i8* %__.context_ptr to %runtime.Context*
  %32 = load %sdl2.Event*, %sdl2.Event** %3, align 8
  %33 = bitcast %sdl2.Event* %32 to i32*
  %34 = load i32, i32* %33, align 4
  switch i32 %34, label %switch.done72 [
    i32 512, label %switch.case.body
    i32 256, label %switch.case.body11
    i32 768, label %switch.case.body14
    i32 771, label %switch.case.body21
    i32 1027, label %switch.case.body28
    i32 1024, label %switch.case.body37
    i32 1025, label %switch.case.body40
    i32 1026, label %switch.case.body50
    i32 4098, label %switch.case.body61
    i32 4099, label %switch.case.body61
    i32 4096, label %switch.case.body61
    i32 4097, label %switch.case.body61
  ]

switch.case.body:                                 ; preds = %entry
  %35 = load %src.Window*, %src.Window** %2, align 8
  %36 = getelementptr inbounds %src.Window, %src.Window* %35, i32 0, i32 26
  %37 = load i32, i32* %36, align 4
  %38 = load %sdl2.Event*, %sdl2.Event** %3, align 8
  %39 = bitcast %sdl2.Event* %38 to %sdl2.WindowEvent*
  %40 = getelementptr inbounds %sdl2.WindowEvent, %sdl2.WindowEvent* %39, i32 0, i32 2
  %41 = load i32, i32* %40, align 4
  %42 = icmp ne i32 %37, %41
  %43 = zext i1 %42 to i8
  %44 = trunc i8 %43 to i1
  br i1 %44, label %if.then, label %if.done

if.then:                                          ; preds = %switch.case.body
  ret void

if.done:                                          ; preds = %switch.case.body
  %45 = load %sdl2.Event*, %sdl2.Event** %3, align 8
  %46 = bitcast %sdl2.Event* %45 to %sdl2.WindowEvent*
  %47 = getelementptr inbounds %sdl2.WindowEvent, %sdl2.WindowEvent* %46, i32 0, i32 3
  %48 = load i8, i8* %47, align 1
  switch i8 %48, label %switch.done [
    i8 14, label %switch.case.body1
    i8 5, label %switch.case.body6
    i8 3, label %switch.case.body7
    i8 12, label %switch.case.body10
  ]

switch.case.body1:                                ; preds = %if.done
  store i8 1, i8* getelementptr inbounds (%src.Global_State, %src.Global_State* @src.gs, i64 0, i32 9), align 1
  %49 = load %src.Window*, %src.Window** %2, align 8
  %50 = getelementptr inbounds %src.Window, %src.Window* %49, i32 0, i32 0
  %51 = bitcast %runtime.Context* %31 to i8*
  %52 = call i64 @src.element_message(%src.Element* %50, i64 36, i64 0, i8* null, i8* %51)
  %53 = icmp eq i64 %52, 0
  %54 = zext i1 %53 to i8
  %55 = trunc i8 %54 to i1
  br i1 %55, label %if.then2, label %if.done5

if.then2:                                         ; preds = %switch.case.body1
  %56 = load %src.Window*, %src.Window** %2, align 8
  %57 = getelementptr inbounds %src.Window, %src.Window* %56, i32 0, i32 0
  %58 = bitcast %runtime.Context* %31 to i8*
  call void @src.element_destroy(%src.Element* %57, i8* %58)
  %59 = load %src.Window*, %src.Window** %2, align 8
  %60 = getelementptr inbounds %src.Window, %src.Window* %59, i32 0, i32 25
  %61 = load %sdl2.Window*, %sdl2.Window** %60, align 8
  call void @SDL_HideWindow(%sdl2.Window* %61)
  %62 = load { %src.Window**, i64, i64, %runtime.Allocator }, { %src.Window**, i64, i64, %runtime.Allocator }* getelementptr inbounds (%src.Global_State, %src.Global_State* @src.gs, i64 0, i32 0), align 8
  %63 = load i64, i64* getelementptr inbounds (%src.Global_State, %src.Global_State* @src.gs, i64 0, i32 0, i32 1), align 8
  %64 = icmp eq i64 %63, 1
  %65 = zext i1 %64 to i8
  %66 = trunc i8 %65 to i1
  br i1 %66, label %if.then3, label %if.done4

if.then3:                                         ; preds = %if.then2
  %67 = bitcast %sdl2.Event* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* %67, i8 0, i64 56, i1 false)
  %68 = bitcast %sdl2.Event* %4 to i32*
  store i32 256, i32* %68, align 4
  %69 = call i32 @SDL_PushEvent(%sdl2.Event* %4)
  br label %if.done4

if.done4:                                         ; preds = %if.then3, %if.then2
  store i8 0, i8* getelementptr inbounds (%src.Global_State, %src.Global_State* @src.gs, i64 0, i32 9), align 1
  br label %if.done5

if.done5:                                         ; preds = %if.done4, %switch.case.body1
  br label %switch.done

switch.case.body6:                                ; preds = %if.done
  %70 = load %src.Window*, %src.Window** %2, align 8
  %71 = getelementptr inbounds %src.Window, %src.Window* %70, i32 0, i32 18
  %72 = load %sdl2.Event*, %sdl2.Event** %3, align 8
  %73 = bitcast %sdl2.Event* %72 to %sdl2.WindowEvent*
  %74 = getelementptr inbounds %sdl2.WindowEvent, %sdl2.WindowEvent* %73, i32 0, i32 7
  %75 = load i32, i32* %74, align 4
  %76 = sext i32 %75 to i64
  store i64 %76, i64* %71, align 8
  %77 = load %src.Window*, %src.Window** %2, align 8
  %78 = getelementptr inbounds %src.Window, %src.Window* %77, i32 0, i32 20
  %79 = load %src.Window*, %src.Window** %2, align 8
  %80 = getelementptr inbounds %src.Window, %src.Window* %79, i32 0, i32 18
  %81 = load i64, i64* %80, align 8
  %82 = sitofp i64 %81 to float
  store float %82, float* %78, align 4
  %83 = load %src.Window*, %src.Window** %2, align 8
  %84 = getelementptr inbounds %src.Window, %src.Window* %83, i32 0, i32 19
  %85 = load %sdl2.Event*, %sdl2.Event** %3, align 8
  %86 = bitcast %sdl2.Event* %85 to %sdl2.WindowEvent*
  %87 = getelementptr inbounds %sdl2.WindowEvent, %sdl2.WindowEvent* %86, i32 0, i32 8
  %88 = load i32, i32* %87, align 4
  %89 = sext i32 %88 to i64
  store i64 %89, i64* %84, align 8
  %90 = load %src.Window*, %src.Window** %2, align 8
  %91 = getelementptr inbounds %src.Window, %src.Window* %90, i32 0, i32 21
  %92 = load %src.Window*, %src.Window** %2, align 8
  %93 = getelementptr inbounds %src.Window, %src.Window* %92, i32 0, i32 19
  %94 = load i64, i64* %93, align 8
  %95 = sitofp i64 %94 to float
  store float %95, float* %91, align 4
  %96 = load %src.Window*, %src.Window** %2, align 8
  %97 = getelementptr inbounds %src.Window, %src.Window* %96, i32 0, i32 22
  store i8 1, i8* %97, align 1
  br label %switch.done

switch.case.body7:                                ; preds = %if.done
  %98 = load %src.Window*, %src.Window** %2, align 8
  %99 = getelementptr inbounds %src.Window, %src.Window* %98, i32 0, i32 42
  %100 = load i8*, i8** %99, align 8
  %101 = icmp ne i8* %100, null
  %102 = zext i1 %101 to i8
  %103 = trunc i8 %102 to i1
  br i1 %103, label %if.then8, label %if.done9

if.then8:                                         ; preds = %switch.case.body7
  %104 = load %src.Window*, %src.Window** %2, align 8
  %105 = getelementptr inbounds %src.Window, %src.Window* %104, i32 0, i32 42
  %106 = load i8*, i8** %105, align 8
  %107 = load %src.Window*, %src.Window** %2, align 8
  %108 = bitcast %runtime.Context* %31 to i8*
  %109 = bitcast i8* %106 to void (%src.Window*, i8*)*
  call void %109(%src.Window* %107, i8* %108)
  br label %if.done9

if.done9:                                         ; preds = %if.then8, %switch.case.body7
  %110 = load %src.Window*, %src.Window** %2, align 8
  %111 = bitcast %runtime.Context* %31 to i8*
  call void @src.window_poll_size(%src.Window* %110, i8* %111)
  %112 = load %src.Window*, %src.Window** %2, align 8
  %113 = bitcast %runtime.Context* %31 to i8*
  call void @src.window_layout_update(%src.Window* %112, i8* %113)
  br label %switch.done

switch.case.body10:                               ; preds = %if.done
  call void @SDL_FlushEvent(i32 768)
  br label %switch.done

switch.done:                                      ; preds = %switch.case.body10, %if.done9, %switch.case.body6, %if.done5, %if.done
  br label %switch.done72

switch.case.body11:                               ; preds = %entry
  %114 = load i8, i8* getelementptr inbounds (%src.Global_State, %src.Global_State* @src.gs, i64 0, i32 9), align 1
  %115 = trunc i8 %114 to i1
  br i1 %115, label %if.then12, label %if.done13

if.then12:                                        ; preds = %switch.case.body11
  ret void

if.done13:                                        ; preds = %switch.case.body11
  store i8 0, i8* getelementptr inbounds (%src.Global_State, %src.Global_State* @src.gs, i64 0, i32 2), align 1
  store %src.Window* null, %src.Window** %5, align 8
  store i64 -1, i64* %6, align 8
  br label %for.index.loop

for.index.loop:                                   ; preds = %for.index.body, %if.done13
  %116 = load i64, i64* %6, align 8
  %117 = add i64 %116, 1
  store i64 %117, i64* %6, align 8
  %118 = load i64, i64* getelementptr inbounds (%src.Global_State, %src.Global_State* @src.gs, i64 0, i32 0, i32 1), align 8
  %119 = icmp slt i64 %117, %118
  br i1 %119, label %for.index.body, label %for.index.done

for.index.body:                                   ; preds = %for.index.loop
  %120 = load i64, i64* %6, align 8
  %121 = load %src.Window**, %src.Window*** getelementptr inbounds (%src.Global_State, %src.Global_State* @src.gs, i64 0, i32 0, i32 0), align 8
  %122 = getelementptr %src.Window*, %src.Window** %121, i64 %120
  %123 = load %src.Window*, %src.Window** %122, align 8
  store %src.Window* %123, %src.Window** %7, align 8
  %124 = load %src.Window*, %src.Window** %7, align 8
  %125 = getelementptr inbounds %src.Window, %src.Window* %124, i32 0, i32 39
  store i8 1, i8* %125, align 1
  br label %for.index.loop

for.index.done:                                   ; preds = %for.index.loop
  br label %switch.done72

switch.case.body14:                               ; preds = %entry
  %126 = load %sdl2.Event*, %sdl2.Event** %3, align 8
  %127 = bitcast %sdl2.Event* %126 to %sdl2.KeyboardEvent*
  %128 = getelementptr inbounds %sdl2.KeyboardEvent, %sdl2.KeyboardEvent* %127, i32 0, i32 2
  %129 = load i32, i32* %128, align 4
  %130 = load %src.Window*, %src.Window** %2, align 8
  %131 = getelementptr inbounds %src.Window, %src.Window* %130, i32 0, i32 26
  %132 = load i32, i32* %131, align 4
  %133 = icmp ne i32 %129, %132
  %134 = zext i1 %133 to i8
  %135 = trunc i8 %134 to i1
  br i1 %135, label %if.then15, label %if.done16

if.then15:                                        ; preds = %switch.case.body14
  ret void

if.done16:                                        ; preds = %switch.case.body14
  br label %if.init

if.init:                                          ; preds = %if.done16
  %136 = load %src.Window*, %src.Window** %2, align 8
  %137 = load %sdl2.Event*, %sdl2.Event** %3, align 8
  %138 = bitcast %sdl2.Event* %137 to %sdl2.KeyboardEvent*
  %139 = load %sdl2.KeyboardEvent, %sdl2.KeyboardEvent* %138, align 4
  %140 = bitcast { %..string, i8 }* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* %140, i8 0, i64 24, i1 false)
  %141 = bitcast %runtime.Context* %31 to i8*
  call void @src.window_build_combo({ %..string, i8 }* sret %10, %src.Window* %136, %sdl2.KeyboardEvent* %138, i8* %141)
  %142 = load { %..string, i8 }, { %..string, i8 }* %10, align 8
  %143 = getelementptr inbounds { %..string, i8 }, { %..string, i8 }* %10, i32 0, i32 0
  %144 = load %..string, %..string* %143, align 8
  %145 = getelementptr inbounds { %..string, i8 }, { %..string, i8 }* %10, i32 0, i32 1
  %146 = load i8, i8* %145, align 1
  store %..string %144, %..string* %8, align 8
  store i8 %146, i8* %9, align 1
  %147 = load i8, i8* %9, align 1
  %148 = trunc i8 %147 to i1
  br i1 %148, label %if.then17, label %if.done20

if.then17:                                        ; preds = %if.init
  %149 = load %src.Window*, %src.Window** %2, align 8
  %150 = bitcast %..string* %8 to i8*
  %151 = bitcast %runtime.Context* %31 to i8*
  %152 = call i8 @src.window_input_event(%src.Window* %149, i64 27, i64 0, i8* %150, i8* %151)
  %153 = trunc i8 %152 to i1
  br i1 %153, label %if.then18, label %if.done19

if.then18:                                        ; preds = %if.then17
  %154 = load %src.Window*, %src.Window** %2, align 8
  %155 = getelementptr inbounds %src.Window, %src.Window* %154, i32 0, i32 32
  store i8 1, i8* %155, align 1
  br label %if.done19

if.done19:                                        ; preds = %if.then18, %if.then17
  br label %if.done20

if.done20:                                        ; preds = %if.done19, %if.init
  br label %switch.done72

switch.case.body21:                               ; preds = %entry
  %156 = load %sdl2.Event*, %sdl2.Event** %3, align 8
  %157 = bitcast %sdl2.Event* %156 to %sdl2.TextInputEvent*
  %158 = getelementptr inbounds %sdl2.TextInputEvent, %sdl2.TextInputEvent* %157, i32 0, i32 2
  %159 = load i32, i32* %158, align 4
  %160 = load %src.Window*, %src.Window** %2, align 8
  %161 = getelementptr inbounds %src.Window, %src.Window* %160, i32 0, i32 26
  %162 = load i32, i32* %161, align 4
  %163 = icmp ne i32 %159, %162
  %164 = zext i1 %163 to i8
  %165 = trunc i8 %164 to i1
  br i1 %165, label %if.then22, label %if.done23

if.then22:                                        ; preds = %switch.case.body21
  ret void

if.done23:                                        ; preds = %switch.case.body21
  %166 = load %src.Window*, %src.Window** %2, align 8
  %167 = getelementptr inbounds %src.Window, %src.Window* %166, i32 0, i32 32
  %168 = load i8, i8* %167, align 1
  %169 = trunc i8 %168 to i1
  br i1 %169, label %if.then24, label %if.done25

if.then24:                                        ; preds = %if.done23
  ret void

if.done25:                                        ; preds = %if.done23
  store i64 -1, i64* %11, align 8
  store i64 0, i64* %12, align 8
  store i64 0, i64* %13, align 8
  store i64 0, i64* %14, align 8
  br label %for.interval.loop

for.interval.loop:                                ; preds = %for.interval.post, %if.done25
  %170 = load i64, i64* %13, align 8
  %171 = icmp slt i64 %170, 32
  br i1 %171, label %for.interval.body, label %for.interval.done

for.interval.body:                                ; preds = %for.interval.loop
  %172 = load i64, i64* %13, align 8
  %173 = load i64, i64* %14, align 8
  store i64 %172, i64* %15, align 8
  %174 = load %sdl2.Event*, %sdl2.Event** %3, align 8
  %175 = bitcast %sdl2.Event* %174 to %sdl2.TextInputEvent*
  %176 = getelementptr inbounds %sdl2.TextInputEvent, %sdl2.TextInputEvent* %175, i32 0, i32 3
  %177 = load i64, i64* %15, align 8
  %178 = getelementptr [32 x i8], [32 x i8]* %176, i64 0, i64 %177
  %179 = bitcast { i64, i64 }* %16 to %..string*
  store %..string { i8* getelementptr inbounds ([57 x i8], [57 x i8]* @"csbs$19a", i64 0, i64 0), i64 56 }, %..string* %179, align 8
  %180 = load { i64, i64 }, { i64, i64 }* %16, align 8
  call void @runtime.bounds_check_error({ i64, i64 } %180, i32 852, i32 19, i64 %177, i64 32)
  %181 = load i8, i8* %178, align 1
  %182 = icmp eq i8 %181, 0
  %183 = zext i1 %182 to i8
  %184 = trunc i8 %183 to i1
  br i1 %184, label %if.then26, label %if.done27

if.then26:                                        ; preds = %for.interval.body
  %185 = load i64, i64* %15, align 8
  store i64 %185, i64* %11, align 8
  br label %for.interval.done

unreachable:                                      ; No predecessors!
  br label %if.done27

if.done27:                                        ; preds = %unreachable, %for.interval.body
  br label %for.interval.post

for.interval.post:                                ; preds = %if.done27
  %186 = load i64, i64* %13, align 8
  %187 = add i64 %186, 1
  store i64 %187, i64* %13, align 8
  %188 = load i64, i64* %14, align 8
  %189 = add i64 %188, 1
  store i64 %189, i64* %14, align 8
  br label %for.interval.loop

for.interval.done:                                ; preds = %if.then26, %for.interval.loop
  %190 = load i64, i64* %11, align 8
  %191 = load %sdl2.Event*, %sdl2.Event** %3, align 8
  %192 = bitcast %sdl2.Event* %191 to %sdl2.TextInputEvent*
  %193 = getelementptr inbounds %sdl2.TextInputEvent, %sdl2.TextInputEvent* %192, i32 0, i32 3
  %194 = load [32 x i8], [32 x i8]* %193, align 1
  %195 = bitcast { i64, i64 }* %19 to %..string*
  store %..string { i8* getelementptr inbounds ([57 x i8], [57 x i8]* @"csbs$19a", i64 0, i64 0), i64 56 }, %..string* %195, align 8
  %196 = load { i64, i64 }, { i64, i64 }* %19, align 8
  call void @runtime.slice_expr_error_hi({ i64, i64 } %196, i32 858, i32 43, i64 %190, i64 32)
  %197 = getelementptr [32 x i8], [32 x i8]* %193, i64 0, i64 0
  %198 = getelementptr i8, i8* %197, i64 0
  %199 = sub i64 %190, 0
  %200 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %20, i32 0, i32 0
  store i8* %198, i8** %200, align 8
  %201 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %20, i32 0, i32 1
  store i64 %199, i64* %201, align 8
  %202 = load { i8*, i64 }, { i8*, i64 }* %20, align 8
  %203 = bitcast { i8*, i64 }* %20 to { i64, i64 }*
  %204 = load { i64, i64 }, { i64, i64 }* %203, align 8
  %205 = bitcast %runtime.Context* %31 to i8*
  %206 = call { i64, i64 } @utf8.decode_rune_in_bytes({ i64, i64 } %204, i8* %205)
  %207 = bitcast { i32, i64 }* %21 to { i64, i64 }*
  store { i64, i64 } %206, { i64, i64 }* %207, align 8
  %208 = load { i32, i64 }, { i32, i64 }* %21, align 8
  %209 = getelementptr inbounds { i32, i64 }, { i32, i64 }* %21, i32 0, i32 0
  %210 = load i32, i32* %209, align 4
  %211 = getelementptr inbounds { i32, i64 }, { i32, i64 }* %21, i32 0, i32 1
  %212 = load i64, i64* %211, align 8
  store i32 %210, i32* %17, align 4
  store i64 %212, i64* %18, align 8
  %213 = load %src.Window*, %src.Window** %2, align 8
  %214 = bitcast i32* %17 to i8*
  %215 = bitcast %runtime.Context* %31 to i8*
  %216 = call i8 @src.window_input_event(%src.Window* %213, i64 28, i64 0, i8* %214, i8* %215)
  br label %switch.done72

switch.case.body28:                               ; preds = %entry
  %217 = load %sdl2.Event*, %sdl2.Event** %3, align 8
  %218 = bitcast %sdl2.Event* %217 to %sdl2.MouseWheelEvent*
  %219 = getelementptr inbounds %sdl2.MouseWheelEvent, %sdl2.MouseWheelEvent* %218, i32 0, i32 2
  %220 = load i32, i32* %219, align 4
  %221 = load %src.Window*, %src.Window** %2, align 8
  %222 = getelementptr inbounds %src.Window, %src.Window* %221, i32 0, i32 26
  %223 = load i32, i32* %222, align 4
  %224 = icmp ne i32 %220, %223
  %225 = zext i1 %224 to i8
  %226 = trunc i8 %225 to i1
  br i1 %226, label %if.then29, label %if.done30

if.then29:                                        ; preds = %switch.case.body28
  ret void

if.done30:                                        ; preds = %switch.case.body28
  store i32 1, i32* %22, align 4
  %227 = load %sdl2.Event*, %sdl2.Event** %3, align 8
  %228 = bitcast %sdl2.Event* %227 to %sdl2.MouseWheelEvent*
  %229 = getelementptr inbounds %sdl2.MouseWheelEvent, %sdl2.MouseWheelEvent* %228, i32 0, i32 6
  %230 = load i32, i32* %229, align 4
  %231 = icmp eq i32 %230, 1
  %232 = zext i1 %231 to i8
  %233 = trunc i8 %232 to i1
  br i1 %233, label %if.then31, label %if.done32

if.then31:                                        ; preds = %if.done30
  %234 = load i32, i32* %22, align 4
  %235 = mul i32 %234, -1
  store i32 %235, i32* %22, align 4
  br label %if.done32

if.done32:                                        ; preds = %if.then31, %if.done30
  %236 = load %sdl2.Event*, %sdl2.Event** %3, align 8
  %237 = bitcast %sdl2.Event* %236 to %sdl2.MouseWheelEvent*
  %238 = getelementptr inbounds %sdl2.MouseWheelEvent, %sdl2.MouseWheelEvent* %237, i32 0, i32 5
  %239 = load i32, i32* %238, align 4
  %240 = icmp ne i32 %239, 0
  %241 = zext i1 %240 to i8
  %242 = trunc i8 %241 to i1
  br i1 %242, label %if.then33, label %if.done34

if.then33:                                        ; preds = %if.done32
  %243 = load %src.Window*, %src.Window** %2, align 8
  %244 = load %sdl2.Event*, %sdl2.Event** %3, align 8
  %245 = bitcast %sdl2.Event* %244 to %sdl2.MouseWheelEvent*
  %246 = getelementptr inbounds %sdl2.MouseWheelEvent, %sdl2.MouseWheelEvent* %245, i32 0, i32 5
  %247 = load i32, i32* %246, align 4
  %248 = load i32, i32* %22, align 4
  %249 = mul i32 %247, %248
  %250 = sext i32 %249 to i64
  %251 = bitcast %runtime.Context* %31 to i8*
  %252 = call i8 @src.window_input_event(%src.Window* %243, i64 14, i64 %250, i8* null, i8* %251)
  br label %if.done34

if.done34:                                        ; preds = %if.then33, %if.done32
  %253 = load %sdl2.Event*, %sdl2.Event** %3, align 8
  %254 = bitcast %sdl2.Event* %253 to %sdl2.MouseWheelEvent*
  %255 = getelementptr inbounds %sdl2.MouseWheelEvent, %sdl2.MouseWheelEvent* %254, i32 0, i32 4
  %256 = load i32, i32* %255, align 4
  %257 = icmp ne i32 %256, 0
  %258 = zext i1 %257 to i8
  %259 = trunc i8 %258 to i1
  br i1 %259, label %if.then35, label %if.done36

if.then35:                                        ; preds = %if.done34
  %260 = load %src.Window*, %src.Window** %2, align 8
  %261 = load %sdl2.Event*, %sdl2.Event** %3, align 8
  %262 = bitcast %sdl2.Event* %261 to %sdl2.MouseWheelEvent*
  %263 = getelementptr inbounds %sdl2.MouseWheelEvent, %sdl2.MouseWheelEvent* %262, i32 0, i32 4
  %264 = load i32, i32* %263, align 4
  %265 = load i32, i32* %22, align 4
  %266 = mul i32 %264, %265
  %267 = sext i32 %266 to i64
  %268 = bitcast %runtime.Context* %31 to i8*
  %269 = call i8 @src.window_input_event(%src.Window* %260, i64 13, i64 %267, i8* null, i8* %268)
  br label %if.done36

if.done36:                                        ; preds = %if.then35, %if.done34
  br label %switch.done72

switch.case.body37:                               ; preds = %entry
  %270 = load %sdl2.Event*, %sdl2.Event** %3, align 8
  %271 = bitcast %sdl2.Event* %270 to %sdl2.MouseMotionEvent*
  %272 = getelementptr inbounds %sdl2.MouseMotionEvent, %sdl2.MouseMotionEvent* %271, i32 0, i32 2
  %273 = load i32, i32* %272, align 4
  %274 = load %src.Window*, %src.Window** %2, align 8
  %275 = getelementptr inbounds %src.Window, %src.Window* %274, i32 0, i32 26
  %276 = load i32, i32* %275, align 4
  %277 = icmp ne i32 %273, %276
  %278 = zext i1 %277 to i8
  %279 = trunc i8 %278 to i1
  br i1 %279, label %if.then38, label %if.done39

if.then38:                                        ; preds = %switch.case.body37
  ret void

if.done39:                                        ; preds = %switch.case.body37
  %280 = load %src.Window*, %src.Window** %2, align 8
  %281 = getelementptr inbounds %src.Window, %src.Window* %280, i32 0, i32 12
  %282 = load %sdl2.Event*, %sdl2.Event** %3, align 8
  %283 = bitcast %sdl2.Event* %282 to %sdl2.MouseMotionEvent*
  %284 = getelementptr inbounds %sdl2.MouseMotionEvent, %sdl2.MouseMotionEvent* %283, i32 0, i32 5
  %285 = load i32, i32* %284, align 4
  %286 = sitofp i32 %285 to float
  store float %286, float* %281, align 4
  %287 = load %src.Window*, %src.Window** %2, align 8
  %288 = getelementptr inbounds %src.Window, %src.Window* %287, i32 0, i32 13
  %289 = load %sdl2.Event*, %sdl2.Event** %3, align 8
  %290 = bitcast %sdl2.Event* %289 to %sdl2.MouseMotionEvent*
  %291 = getelementptr inbounds %sdl2.MouseMotionEvent, %sdl2.MouseMotionEvent* %290, i32 0, i32 6
  %292 = load i32, i32* %291, align 4
  %293 = sitofp i32 %292 to float
  store float %293, float* %288, align 4
  %294 = load %src.Window*, %src.Window** %2, align 8
  %295 = bitcast %runtime.Context* %31 to i8*
  %296 = call i8 @src.window_input_event(%src.Window* %294, i64 12, i64 0, i8* null, i8* %295)
  br label %switch.done72

switch.case.body40:                               ; preds = %entry
  %297 = load %sdl2.Event*, %sdl2.Event** %3, align 8
  %298 = bitcast %sdl2.Event* %297 to %sdl2.MouseButtonEvent*
  %299 = getelementptr inbounds %sdl2.MouseButtonEvent, %sdl2.MouseButtonEvent* %298, i32 0, i32 2
  %300 = load i32, i32* %299, align 4
  %301 = load %src.Window*, %src.Window** %2, align 8
  %302 = getelementptr inbounds %src.Window, %src.Window* %301, i32 0, i32 26
  %303 = load i32, i32* %302, align 4
  %304 = icmp ne i32 %300, %303
  %305 = zext i1 %304 to i8
  %306 = trunc i8 %305 to i1
  br i1 %306, label %if.then41, label %if.done42

if.then41:                                        ; preds = %switch.case.body40
  ret void

if.done42:                                        ; preds = %switch.case.body40
  %307 = load %sdl2.Event*, %sdl2.Event** %3, align 8
  %308 = bitcast %sdl2.Event* %307 to %sdl2.MouseButtonEvent*
  %309 = getelementptr inbounds %sdl2.MouseButtonEvent, %sdl2.MouseButtonEvent* %308, i32 0, i32 4
  %310 = load i8, i8* %309, align 1
  %311 = icmp eq i8 %310, 1
  %312 = zext i1 %311 to i8
  %313 = trunc i8 %312 to i1
  br i1 %313, label %if.then43, label %if.else

if.then43:                                        ; preds = %if.done42
  %314 = load %src.Window*, %src.Window** %2, align 8
  %315 = getelementptr inbounds %src.Window, %src.Window* %314, i32 0, i32 15
  %316 = bitcast [2 x float]* %23 to i8*
  call void @llvm.memset.p0i8.i64(i8* %316, i8 0, i64 8, i1 false)
  store [2 x float] zeroinitializer, [2 x float]* %23, align 4
  %317 = load %sdl2.Event*, %sdl2.Event** %3, align 8
  %318 = bitcast %sdl2.Event* %317 to %sdl2.MouseButtonEvent*
  %319 = getelementptr inbounds %sdl2.MouseButtonEvent, %sdl2.MouseButtonEvent* %318, i32 0, i32 8
  %320 = load i32, i32* %319, align 4
  %321 = sitofp i32 %320 to float
  %322 = load %sdl2.Event*, %sdl2.Event** %3, align 8
  %323 = bitcast %sdl2.Event* %322 to %sdl2.MouseButtonEvent*
  %324 = getelementptr inbounds %sdl2.MouseButtonEvent, %sdl2.MouseButtonEvent* %323, i32 0, i32 9
  %325 = load i32, i32* %324, align 4
  %326 = sitofp i32 %325 to float
  %327 = getelementptr [2 x float], [2 x float]* %23, i64 0, i64 0
  %328 = getelementptr [2 x float], [2 x float]* %23, i64 0, i64 1
  store float %321, float* %327, align 4
  store float %326, float* %328, align 4
  %329 = load [2 x float], [2 x float]* %23, align 4
  store [2 x float] %329, [2 x float]* %315, align 4
  %330 = load %src.Window*, %src.Window** %2, align 8
  %331 = load %sdl2.Event*, %sdl2.Event** %3, align 8
  %332 = bitcast %sdl2.Event* %331 to %sdl2.MouseButtonEvent*
  %333 = getelementptr inbounds %sdl2.MouseButtonEvent, %sdl2.MouseButtonEvent* %332, i32 0, i32 6
  %334 = load i8, i8* %333, align 1
  %335 = zext i8 %334 to i64
  %336 = bitcast %runtime.Context* %31 to i8*
  %337 = call i8 @src.window_input_event(%src.Window* %330, i64 16, i64 %335, i8* null, i8* %336)
  br label %if.done49

if.else:                                          ; preds = %if.done42
  %338 = load %sdl2.Event*, %sdl2.Event** %3, align 8
  %339 = bitcast %sdl2.Event* %338 to %sdl2.MouseButtonEvent*
  %340 = getelementptr inbounds %sdl2.MouseButtonEvent, %sdl2.MouseButtonEvent* %339, i32 0, i32 4
  %341 = load i8, i8* %340, align 1
  %342 = icmp eq i8 %341, 2
  %343 = zext i1 %342 to i8
  %344 = trunc i8 %343 to i1
  br i1 %344, label %if.then44, label %if.else45

if.then44:                                        ; preds = %if.else
  %345 = load %src.Window*, %src.Window** %2, align 8
  %346 = getelementptr inbounds %src.Window, %src.Window* %345, i32 0, i32 14
  %347 = bitcast [2 x float]* %24 to i8*
  call void @llvm.memset.p0i8.i64(i8* %347, i8 0, i64 8, i1 false)
  store [2 x float] zeroinitializer, [2 x float]* %24, align 4
  %348 = load %sdl2.Event*, %sdl2.Event** %3, align 8
  %349 = bitcast %sdl2.Event* %348 to %sdl2.MouseButtonEvent*
  %350 = getelementptr inbounds %sdl2.MouseButtonEvent, %sdl2.MouseButtonEvent* %349, i32 0, i32 8
  %351 = load i32, i32* %350, align 4
  %352 = sitofp i32 %351 to float
  %353 = load %sdl2.Event*, %sdl2.Event** %3, align 8
  %354 = bitcast %sdl2.Event* %353 to %sdl2.MouseButtonEvent*
  %355 = getelementptr inbounds %sdl2.MouseButtonEvent, %sdl2.MouseButtonEvent* %354, i32 0, i32 9
  %356 = load i32, i32* %355, align 4
  %357 = sitofp i32 %356 to float
  %358 = getelementptr [2 x float], [2 x float]* %24, i64 0, i64 0
  %359 = getelementptr [2 x float], [2 x float]* %24, i64 0, i64 1
  store float %352, float* %358, align 4
  store float %357, float* %359, align 4
  %360 = load [2 x float], [2 x float]* %24, align 4
  store [2 x float] %360, [2 x float]* %346, align 4
  %361 = load %src.Window*, %src.Window** %2, align 8
  %362 = load %sdl2.Event*, %sdl2.Event** %3, align 8
  %363 = bitcast %sdl2.Event* %362 to %sdl2.MouseButtonEvent*
  %364 = getelementptr inbounds %sdl2.MouseButtonEvent, %sdl2.MouseButtonEvent* %363, i32 0, i32 6
  %365 = load i8, i8* %364, align 1
  %366 = zext i8 %365 to i64
  %367 = bitcast %runtime.Context* %31 to i8*
  %368 = call i8 @src.window_input_event(%src.Window* %361, i64 18, i64 %366, i8* null, i8* %367)
  br label %if.done48

if.else45:                                        ; preds = %if.else
  %369 = load %sdl2.Event*, %sdl2.Event** %3, align 8
  %370 = bitcast %sdl2.Event* %369 to %sdl2.MouseButtonEvent*
  %371 = getelementptr inbounds %sdl2.MouseButtonEvent, %sdl2.MouseButtonEvent* %370, i32 0, i32 4
  %372 = load i8, i8* %371, align 1
  %373 = icmp eq i8 %372, 3
  %374 = zext i1 %373 to i8
  %375 = trunc i8 %374 to i1
  br i1 %375, label %if.then46, label %if.done47

if.then46:                                        ; preds = %if.else45
  %376 = load %src.Window*, %src.Window** %2, align 8
  %377 = getelementptr inbounds %src.Window, %src.Window* %376, i32 0, i32 16
  %378 = bitcast [2 x float]* %25 to i8*
  call void @llvm.memset.p0i8.i64(i8* %378, i8 0, i64 8, i1 false)
  store [2 x float] zeroinitializer, [2 x float]* %25, align 4
  %379 = load %sdl2.Event*, %sdl2.Event** %3, align 8
  %380 = bitcast %sdl2.Event* %379 to %sdl2.MouseButtonEvent*
  %381 = getelementptr inbounds %sdl2.MouseButtonEvent, %sdl2.MouseButtonEvent* %380, i32 0, i32 8
  %382 = load i32, i32* %381, align 4
  %383 = sitofp i32 %382 to float
  %384 = load %sdl2.Event*, %sdl2.Event** %3, align 8
  %385 = bitcast %sdl2.Event* %384 to %sdl2.MouseButtonEvent*
  %386 = getelementptr inbounds %sdl2.MouseButtonEvent, %sdl2.MouseButtonEvent* %385, i32 0, i32 9
  %387 = load i32, i32* %386, align 4
  %388 = sitofp i32 %387 to float
  %389 = getelementptr [2 x float], [2 x float]* %25, i64 0, i64 0
  %390 = getelementptr [2 x float], [2 x float]* %25, i64 0, i64 1
  store float %383, float* %389, align 4
  store float %388, float* %390, align 4
  %391 = load [2 x float], [2 x float]* %25, align 4
  store [2 x float] %391, [2 x float]* %377, align 4
  %392 = load %src.Window*, %src.Window** %2, align 8
  %393 = load %sdl2.Event*, %sdl2.Event** %3, align 8
  %394 = bitcast %sdl2.Event* %393 to %sdl2.MouseButtonEvent*
  %395 = getelementptr inbounds %sdl2.MouseButtonEvent, %sdl2.MouseButtonEvent* %394, i32 0, i32 6
  %396 = load i8, i8* %395, align 1
  %397 = zext i8 %396 to i64
  %398 = bitcast %runtime.Context* %31 to i8*
  %399 = call i8 @src.window_input_event(%src.Window* %392, i64 20, i64 %397, i8* null, i8* %398)
  br label %if.done47

if.done47:                                        ; preds = %if.then46, %if.else45
  br label %if.done48

if.done48:                                        ; preds = %if.done47, %if.then44
  br label %if.done49

if.done49:                                        ; preds = %if.done48, %if.then43
  br label %switch.done72

switch.case.body50:                               ; preds = %entry
  %400 = load %sdl2.Event*, %sdl2.Event** %3, align 8
  %401 = bitcast %sdl2.Event* %400 to %sdl2.MouseButtonEvent*
  %402 = getelementptr inbounds %sdl2.MouseButtonEvent, %sdl2.MouseButtonEvent* %401, i32 0, i32 2
  %403 = load i32, i32* %402, align 4
  %404 = load %src.Window*, %src.Window** %2, align 8
  %405 = getelementptr inbounds %src.Window, %src.Window* %404, i32 0, i32 26
  %406 = load i32, i32* %405, align 4
  %407 = icmp ne i32 %403, %406
  %408 = zext i1 %407 to i8
  %409 = trunc i8 %408 to i1
  br i1 %409, label %if.then51, label %if.done52

if.then51:                                        ; preds = %switch.case.body50
  ret void

if.done52:                                        ; preds = %switch.case.body50
  %410 = load %sdl2.Event*, %sdl2.Event** %3, align 8
  %411 = bitcast %sdl2.Event* %410 to %sdl2.MouseButtonEvent*
  %412 = getelementptr inbounds %sdl2.MouseButtonEvent, %sdl2.MouseButtonEvent* %411, i32 0, i32 4
  %413 = load i8, i8* %412, align 1
  %414 = icmp eq i8 %413, 1
  %415 = zext i1 %414 to i8
  %416 = trunc i8 %415 to i1
  br i1 %416, label %if.then53, label %if.else54

if.then53:                                        ; preds = %if.done52
  %417 = load %src.Window*, %src.Window** %2, align 8
  %418 = bitcast %runtime.Context* %31 to i8*
  %419 = call i8 @src.window_input_event(%src.Window* %417, i64 17, i64 0, i8* null, i8* %418)
  br label %if.done60

if.else54:                                        ; preds = %if.done52
  %420 = load %sdl2.Event*, %sdl2.Event** %3, align 8
  %421 = bitcast %sdl2.Event* %420 to %sdl2.MouseButtonEvent*
  %422 = getelementptr inbounds %sdl2.MouseButtonEvent, %sdl2.MouseButtonEvent* %421, i32 0, i32 4
  %423 = load i8, i8* %422, align 1
  %424 = icmp eq i8 %423, 2
  %425 = zext i1 %424 to i8
  %426 = trunc i8 %425 to i1
  br i1 %426, label %if.then55, label %if.else56

if.then55:                                        ; preds = %if.else54
  %427 = load %src.Window*, %src.Window** %2, align 8
  %428 = bitcast %runtime.Context* %31 to i8*
  %429 = call i8 @src.window_input_event(%src.Window* %427, i64 19, i64 0, i8* null, i8* %428)
  br label %if.done59

if.else56:                                        ; preds = %if.else54
  %430 = load %sdl2.Event*, %sdl2.Event** %3, align 8
  %431 = bitcast %sdl2.Event* %430 to %sdl2.MouseButtonEvent*
  %432 = getelementptr inbounds %sdl2.MouseButtonEvent, %sdl2.MouseButtonEvent* %431, i32 0, i32 4
  %433 = load i8, i8* %432, align 1
  %434 = icmp eq i8 %433, 3
  %435 = zext i1 %434 to i8
  %436 = trunc i8 %435 to i1
  br i1 %436, label %if.then57, label %if.done58

if.then57:                                        ; preds = %if.else56
  %437 = load %src.Window*, %src.Window** %2, align 8
  %438 = bitcast %runtime.Context* %31 to i8*
  %439 = call i8 @src.window_input_event(%src.Window* %437, i64 21, i64 0, i8* null, i8* %438)
  br label %if.done58

if.done58:                                        ; preds = %if.then57, %if.else56
  br label %if.done59

if.done59:                                        ; preds = %if.done58, %if.then55
  br label %if.done60

if.done60:                                        ; preds = %if.done59, %if.then53
  br label %switch.done72

switch.case.body61:                               ; preds = %entry, %entry, %entry, %entry
  %440 = load %sdl2.Event*, %sdl2.Event** %3, align 8
  %441 = bitcast %sdl2.Event* %440 to %sdl2.DropEvent*
  %442 = getelementptr inbounds %sdl2.DropEvent, %sdl2.DropEvent* %441, i32 0, i32 3
  %443 = load i32, i32* %442, align 4
  %444 = load %src.Window*, %src.Window** %2, align 8
  %445 = getelementptr inbounds %src.Window, %src.Window* %444, i32 0, i32 26
  %446 = load i32, i32* %445, align 4
  %447 = icmp ne i32 %443, %446
  %448 = zext i1 %447 to i8
  %449 = trunc i8 %448 to i1
  br i1 %449, label %if.then62, label %if.done63

if.then62:                                        ; preds = %switch.case.body61
  ret void

if.done63:                                        ; preds = %switch.case.body61
  %450 = load %src.Window*, %src.Window** %2, align 8
  %451 = getelementptr inbounds %src.Window, %src.Window* %450, i32 0, i32 47
  store %strings.Builder* %451, %strings.Builder** %26, align 8
  %452 = load %src.Window*, %src.Window** %2, align 8
  %453 = getelementptr inbounds %src.Window, %src.Window* %452, i32 0, i32 46
  store { i64*, i64, i64, %runtime.Allocator }* %453, { i64*, i64, i64, %runtime.Allocator }** %27, align 8
  %454 = load %sdl2.Event*, %sdl2.Event** %3, align 8
  %455 = bitcast %sdl2.Event* %454 to i32*
  %456 = load i32, i32* %455, align 4
  %457 = icmp eq i32 %456, 4098
  %458 = zext i1 %457 to i8
  %459 = trunc i8 %458 to i1
  br i1 %459, label %if.then64, label %if.else65

if.then64:                                        ; preds = %if.done63
  %460 = load { i64*, i64, i64, %runtime.Allocator }*, { i64*, i64, i64, %runtime.Allocator }** %27, align 8
  call void @runtime.clear_dynamic_array-49719({ i64*, i64, i64, %runtime.Allocator }* %460)
  %461 = load %strings.Builder*, %strings.Builder** %26, align 8
  %462 = getelementptr inbounds %strings.Builder, %strings.Builder* %461, i32 0, i32 0
  call void @runtime.clear_dynamic_array-49738({ i8*, i64, i64, %runtime.Allocator }* %462)
  br label %if.done71

if.else65:                                        ; preds = %if.done63
  %463 = load %sdl2.Event*, %sdl2.Event** %3, align 8
  %464 = bitcast %sdl2.Event* %463 to i32*
  %465 = load i32, i32* %464, align 4
  %466 = icmp eq i32 %465, 4099
  %467 = zext i1 %466 to i8
  %468 = trunc i8 %467 to i1
  br i1 %468, label %if.then66, label %if.else67

if.then66:                                        ; preds = %if.else65
  %469 = load %src.Window*, %src.Window** %2, align 8
  %470 = bitcast %runtime.Context* %31 to i8*
  %471 = call i8 @src.window_input_event(%src.Window* %469, i64 26, i64 0, i8* null, i8* %470)
  br label %if.done70

if.else67:                                        ; preds = %if.else65
  %472 = load %sdl2.Event*, %sdl2.Event** %3, align 8
  %473 = bitcast %sdl2.Event* %472 to i32*
  %474 = load i32, i32* %473, align 4
  %475 = icmp eq i32 %474, 4096
  %476 = zext i1 %475 to i8
  %477 = trunc i8 %476 to i1
  br i1 %477, label %if.then68, label %if.done69

if.then68:                                        ; preds = %if.else67
  %478 = load %sdl2.Event*, %sdl2.Event** %3, align 8
  %479 = bitcast %sdl2.Event* %478 to %sdl2.DropEvent*
  %480 = getelementptr inbounds %sdl2.DropEvent, %sdl2.DropEvent* %479, i32 0, i32 2
  %481 = load i8*, i8** %480, align 8
  %482 = call { i64, i64 } @runtime.cstring_to_string(i8* %481)
  %483 = bitcast %..string* %29 to { i64, i64 }*
  store { i64, i64 } %482, { i64, i64 }* %483, align 8
  %484 = load %..string, %..string* %29, align 8
  store %..string %484, %..string* %28, align 8
  %485 = load %strings.Builder*, %strings.Builder** %26, align 8
  %486 = load %..string, %..string* %28, align 8
  %487 = bitcast %..string* %28 to { i64, i64 }*
  %488 = load { i64, i64 }, { i64, i64 }* %487, align 8
  %489 = bitcast %runtime.Context* %31 to i8*
  %490 = call i64 @strings.write_string(%strings.Builder* %485, { i64, i64 } %488, i8* %489)
  %491 = load { i64*, i64, i64, %runtime.Allocator }*, { i64*, i64, i64, %runtime.Allocator }** %27, align 8
  %492 = load %strings.Builder*, %strings.Builder** %26, align 8
  %493 = getelementptr inbounds %strings.Builder, %strings.Builder* %492, i32 0, i32 0
  %494 = load { i8*, i64, i64, %runtime.Allocator }, { i8*, i64, i64, %runtime.Allocator }* %493, align 8
  %495 = getelementptr inbounds { i8*, i64, i64, %runtime.Allocator }, { i8*, i64, i64, %runtime.Allocator }* %493, i32 0, i32 1
  %496 = load i64, i64* %495, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([57 x i8], [57 x i8]* @"csbs$19a", i64 0, i64 0), i64 56 }, i32 940, i32 5, %..string { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @"csbs$32d", i64 0, i64 0), i64 19 } }, %runtime.Source_Code_Location* %30, align 8
  %497 = bitcast %runtime.Context* %31 to i8*
  call void @runtime.append_elem-49762({ i64*, i64, i64, %runtime.Allocator }* %491, i64 %496, %runtime.Source_Code_Location* %30, i8* %497)
  br label %if.done69

if.done69:                                        ; preds = %if.then68, %if.else67
  br label %if.done70

if.done70:                                        ; preds = %if.done69, %if.then66
  br label %if.done71

if.done71:                                        ; preds = %if.done70, %if.then64
  br label %switch.done72

switch.done72:                                    ; preds = %if.done71, %if.done60, %if.done49, %if.done39, %if.done36, %for.interval.done, %if.done20, %for.index.done, %switch.done, %entry
  ret void
}

define internal void @src.gs_init(i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %0 = alloca { i64, i64 }, align 8
  %1 = alloca %runtime.Logger, align 8
  %2 = alloca %runtime.Context, align 8
  %3 = alloca %runtime.Source_Code_Location, align 8
  %4 = alloca { { %src.Window**, i64, i64, %runtime.Allocator }, i8 }, align 8
  %5 = alloca i32, align 4
  %6 = alloca %..any, align 8
  %7 = alloca { %..any*, i64 }, align 8
  %8 = alloca [1 x %..any], align 8
  %9 = alloca { i64, i64 }, align 8
  %10 = alloca %runtime.Source_Code_Location, align 8
  %11 = alloca i8*, align 8
  %12 = alloca %runtime.Source_Code_Location, align 8
  %13 = alloca %..string, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca %..string, align 8
  %17 = alloca %..any, align 8
  %18 = alloca { %..any*, i64 }, align 8
  %19 = alloca [1 x %..any], align 8
  %20 = alloca %runtime.Source_Code_Location, align 8
  %21 = alloca %..string, align 8
  %22 = alloca %..any, align 8
  %23 = alloca { %..any*, i64 }, align 8
  %24 = alloca [1 x %..any], align 8
  %25 = alloca %runtime.Source_Code_Location, align 8
  %26 = alloca [4 x %sdl2_mixer.Chunk*], align 8
  %27 = alloca %"src.ease.Flux_Map(f32)-17572", align 8
  br label %entry

entry:                                            ; preds = %decls
  %28 = bitcast i8* %__.context_ptr to %runtime.Context*
  %29 = bitcast { i64, i64 }* %0 to %..string*
  store %..string zeroinitializer, %..string* %29, align 8
  %30 = load { i64, i64 }, { i64, i64 }* %0, align 8
  %31 = bitcast %runtime.Logger* %1 to i8*
  call void @llvm.memset.p0i8.i64(i8* %31, i8 0, i64 32, i1 false)
  %32 = bitcast %runtime.Context* %28 to i8*
  call void @log.create_console_logger(%runtime.Logger* sret %1, i64 0, i16 239, { i64, i64 } %30, i8* %32)
  %33 = load %runtime.Logger, %runtime.Logger* %1, align 8
  store %runtime.Logger %33, %runtime.Logger* getelementptr inbounds (%src.Global_State, %src.Global_State* @src.gs, i64 0, i32 1), align 8
  %34 = load %runtime.Logger, %runtime.Logger* getelementptr inbounds (%src.Global_State, %src.Global_State* @src.gs, i64 0, i32 1), align 8
  %35 = load %runtime.Context, %runtime.Context* %28, align 8
  %36 = bitcast %runtime.Context* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* %36, i8 0, i64 96, i1 false)
  %37 = bitcast %runtime.Context* %2 to i8*
  %38 = bitcast %runtime.Context* %28 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %37, i8* align 1 %38, i64 96, i1 false)
  %39 = getelementptr inbounds %runtime.Context, %runtime.Context* %2, i32 0, i32 3
  store %runtime.Logger %34, %runtime.Logger* %39, align 8
  %40 = getelementptr inbounds %runtime.Context, %runtime.Context* %2, i32 0, i32 0
  %41 = load %runtime.Allocator, %runtime.Allocator* %40, align 8
  %42 = bitcast %runtime.Allocator* %40 to { i64, i64 }*
  %43 = load { i64, i64 }, { i64, i64 }* %42, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([57 x i8], [57 x i8]* @"csbs$19a", i64 0, i64 0), i64 56 }, i32 950, i32 12, %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$32e", i64 0, i64 0), i64 7 } }, %runtime.Source_Code_Location* %3, align 8
  %44 = bitcast { { %src.Window**, i64, i64, %runtime.Allocator }, i8 }* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* %44, i8 0, i64 48, i1 false)
  %45 = bitcast %runtime.Context* %2 to i8*
  call void @runtime.make_dynamic_array_len_cap-49841({ { %src.Window**, i64, i64, %runtime.Allocator }, i8 }* sret %4, i64 0, i64 8, { i64, i64 } %43, %runtime.Source_Code_Location* %3, i8* %45)
  %46 = load { { %src.Window**, i64, i64, %runtime.Allocator }, i8 }, { { %src.Window**, i64, i64, %runtime.Allocator }, i8 }* %4, align 8
  %47 = getelementptr inbounds { { %src.Window**, i64, i64, %runtime.Allocator }, i8 }, { { %src.Window**, i64, i64, %runtime.Allocator }, i8 }* %4, i32 0, i32 0
  %48 = load { %src.Window**, i64, i64, %runtime.Allocator }, { %src.Window**, i64, i64, %runtime.Allocator }* %47, align 8
  store { %src.Window**, i64, i64, %runtime.Allocator } %48, { %src.Window**, i64, i64, %runtime.Allocator }* getelementptr inbounds (%src.Global_State, %src.Global_State* @src.gs, i64 0, i32 0), align 8
  store i8 1, i8* getelementptr inbounds (%src.Global_State, %src.Global_State* @src.gs, i64 0, i32 2), align 1
  %49 = call i32 @SDL_Init(i32 16432)
  store i32 %49, i32* %5, align 4
  %50 = load i32, i32* %5, align 4
  %51 = icmp ne i32 %50, 0
  %52 = zext i1 %51 to i8
  %53 = trunc i8 %52 to i1
  br i1 %53, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  %54 = load i32, i32* %5, align 4
  %55 = bitcast %..any* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* %55, i8 0, i64 16, i1 false)
  %56 = bitcast i32* %5 to i8*
  %57 = getelementptr inbounds %..any, %..any* %6, i32 0, i32 0
  %58 = getelementptr inbounds %..any, %..any* %6, i32 0, i32 1
  store i8* %56, i8** %57, align 8
  store i64 4683743612465315870, i64* %58, align 8
  %59 = load %..any, %..any* %6, align 8
  %60 = bitcast { %..any*, i64 }* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* %60, i8 0, i64 16, i1 false)
  %61 = bitcast [1 x %..any]* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* %61, i8 0, i64 16, i1 false)
  %62 = getelementptr [1 x %..any], [1 x %..any]* %8, i64 0, i64 0
  store %..any %59, %..any* %62, align 8
  %63 = getelementptr [1 x %..any], [1 x %..any]* %8, i64 0, i64 0
  %64 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %7, i32 0, i32 0
  store %..any* %63, %..any** %64, align 8
  %65 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %7, i32 0, i32 1
  store i64 1, i64* %65, align 8
  %66 = load { %..any*, i64 }, { %..any*, i64 }* %7, align 8
  %67 = bitcast { i64, i64 }* %9 to %..string*
  store %..string { i8* getelementptr inbounds ([30 x i8], [30 x i8]* @"csbs$32f", i64 0, i64 0), i64 29 }, %..string* %67, align 8
  %68 = load { i64, i64 }, { i64, i64 }* %9, align 8
  %69 = bitcast { %..any*, i64 }* %7 to { i64, i64 }*
  %70 = load { i64, i64 }, { i64, i64 }* %69, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([57 x i8], [57 x i8]* @"csbs$19a", i64 0, i64 0), i64 56 }, i32 955, i32 7, %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$32e", i64 0, i64 0), i64 7 } }, %runtime.Source_Code_Location* %10, align 8
  %71 = bitcast %runtime.Context* %2 to i8*
  call void @log.panicf({ i64, i64 } %68, { i64, i64 } %70, %runtime.Source_Code_Location* %10, i8* %71)
  unreachable

if.done:                                          ; preds = %entry
  call void @SDL_StartTextInput()
  call void @SDL_EnableScreenSaver()
  %72 = call i32 @SDL_SetHint(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @"csbs$330", i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$331", i64 0, i64 0))
  %73 = call %sdl2.Cursor* @SDL_CreateSystemCursor(i32 0)
  store %sdl2.Cursor* %73, %sdl2.Cursor** getelementptr inbounds (%src.Global_State, %src.Global_State* @src.gs, i64 0, i32 4, i64 0), align 8
  %74 = call %sdl2.Cursor* @SDL_CreateSystemCursor(i32 1)
  store %sdl2.Cursor* %74, %sdl2.Cursor** getelementptr inbounds (%src.Global_State, %src.Global_State* @src.gs, i64 0, i32 4, i64 1), align 8
  %75 = call %sdl2.Cursor* @SDL_CreateSystemCursor(i32 11)
  store %sdl2.Cursor* %75, %sdl2.Cursor** getelementptr inbounds (%src.Global_State, %src.Global_State* @src.gs, i64 0, i32 4, i64 2), align 8
  %76 = call %sdl2.Cursor* @SDL_CreateSystemCursor(i32 7)
  store %sdl2.Cursor* %76, %sdl2.Cursor** getelementptr inbounds (%src.Global_State, %src.Global_State* @src.gs, i64 0, i32 4, i64 4), align 8
  %77 = call %sdl2.Cursor* @SDL_CreateSystemCursor(i32 8)
  store %sdl2.Cursor* %77, %sdl2.Cursor** getelementptr inbounds (%src.Global_State, %src.Global_State* @src.gs, i64 0, i32 4, i64 3), align 8
  %78 = call %sdl2.Cursor* @SDL_CreateSystemCursor(i32 3)
  store %sdl2.Cursor* %78, %sdl2.Cursor** getelementptr inbounds (%src.Global_State, %src.Global_State* @src.gs, i64 0, i32 4, i64 5), align 8
  %79 = bitcast %runtime.Context* %2 to i8*
  call void @fontstash.init(i64 1000, i64 1000, i8* %79)
  %80 = bitcast %runtime.Context* %2 to i8*
  call void @src.fonts_init(i8* %80)
  %81 = call i8* @SDL_GetPrefPath(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$332", i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$333", i64 0, i64 0))
  store i8* %81, i8** %11, align 8
  %82 = load i8*, i8** %11, align 8
  %83 = icmp ne i8* %82, null
  %84 = zext i1 %83 to i8
  %85 = trunc i8 %84 to i1
  br i1 %85, label %if.then1, label %if.else

if.then1:                                         ; preds = %if.done
  %86 = load i8*, i8** %11, align 8
  %87 = getelementptr inbounds %runtime.Context, %runtime.Context* %2, i32 0, i32 0
  %88 = load %runtime.Allocator, %runtime.Allocator* %87, align 8
  %89 = bitcast %runtime.Allocator* %87 to { i64, i64 }*
  %90 = load { i64, i64 }, { i64, i64 }* %89, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([57 x i8], [57 x i8]* @"csbs$19a", i64 0, i64 0), i64 56 }, i32 976, i32 31, %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$32e", i64 0, i64 0), i64 7 } }, %runtime.Source_Code_Location* %12, align 8
  %91 = bitcast %runtime.Context* %2 to i8*
  %92 = call { i64, i64 } @strings.clone_from_cstring(i8* %86, { i64, i64 } %90, %runtime.Source_Code_Location* %12, i8* %91)
  %93 = bitcast %..string* %13 to { i64, i64 }*
  store { i64, i64 } %92, { i64, i64 }* %93, align 8
  %94 = load %..string, %..string* %13, align 8
  store %..string %94, %..string* @src.default_base_path, align 8
  %95 = load i8*, i8** %11, align 8
  call void @SDL_free(i8* %95)
  br label %if.done2

if.else:                                          ; preds = %if.done
  store %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$334", i64 0, i64 0), i64 2 }, %..string* @src.default_base_path, align 8
  br label %if.done2

if.done2:                                         ; preds = %if.else, %if.then1
  store i32 0, i32* %14, align 4
  %96 = load i32, i32* %14, align 4
  %97 = call i32 @Mix_Init(i32 %96)
  store i32 %97, i32* %15, align 4
  %98 = load i32, i32* %14, align 4
  %99 = load i32, i32* %15, align 4
  %100 = icmp ne i32 %98, %99
  %101 = zext i1 %100 to i8
  %102 = trunc i8 %101 to i1
  br i1 %102, label %if.then3, label %if.done4

if.then3:                                         ; preds = %if.done2
  store %..string { i8* getelementptr inbounds ([33 x i8], [33 x i8]* @"csbs$335", i64 0, i64 0), i64 32 }, %..string* %16, align 8
  %103 = bitcast %..string* %16 to i8*
  %104 = getelementptr inbounds %..any, %..any* %17, i32 0, i32 0
  %105 = getelementptr inbounds %..any, %..any* %17, i32 0, i32 1
  store i8* %103, i8** %104, align 8
  store i64 432345564227567633, i64* %105, align 8
  %106 = load %..any, %..any* %17, align 8
  %107 = bitcast { %..any*, i64 }* %18 to i8*
  call void @llvm.memset.p0i8.i64(i8* %107, i8 0, i64 16, i1 false)
  %108 = bitcast [1 x %..any]* %19 to i8*
  call void @llvm.memset.p0i8.i64(i8* %108, i8 0, i64 16, i1 false)
  %109 = getelementptr [1 x %..any], [1 x %..any]* %19, i64 0, i64 0
  store %..any %106, %..any* %109, align 8
  %110 = getelementptr [1 x %..any], [1 x %..any]* %19, i64 0, i64 0
  %111 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %18, i32 0, i32 0
  store %..any* %110, %..any** %111, align 8
  %112 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %18, i32 0, i32 1
  store i64 1, i64* %112, align 8
  %113 = load { %..any*, i64 }, { %..any*, i64 }* %18, align 8
  %114 = bitcast { %..any*, i64 }* %18 to { i64, i64 }*
  %115 = load { i64, i64 }, { i64, i64 }* %114, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([57 x i8], [57 x i8]* @"csbs$19a", i64 0, i64 0), i64 56 }, i32 994, i32 8, %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$32e", i64 0, i64 0), i64 7 } }, %runtime.Source_Code_Location* %20, align 8
  %116 = bitcast %runtime.Context* %2 to i8*
  call void @log.panic({ i64, i64 } %115, %runtime.Source_Code_Location* %20, i8* %116)
  unreachable

if.done4:                                         ; preds = %if.done2
  %117 = call i32 @Mix_OpenAudio(i32 44100, i16 -32752, i32 2, i32 1024)
  %118 = icmp eq i32 %117, -1
  %119 = zext i1 %118 to i8
  %120 = trunc i8 %119 to i1
  br i1 %120, label %if.then5, label %if.done6

if.then5:                                         ; preds = %if.done4
  store %..string { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @"csbs$336", i64 0, i64 0), i64 21 }, %..string* %21, align 8
  %121 = bitcast %..string* %21 to i8*
  %122 = getelementptr inbounds %..any, %..any* %22, i32 0, i32 0
  %123 = getelementptr inbounds %..any, %..any* %22, i32 0, i32 1
  store i8* %121, i8** %122, align 8
  store i64 432345564227567633, i64* %123, align 8
  %124 = load %..any, %..any* %22, align 8
  %125 = bitcast { %..any*, i64 }* %23 to i8*
  call void @llvm.memset.p0i8.i64(i8* %125, i8 0, i64 16, i1 false)
  %126 = bitcast [1 x %..any]* %24 to i8*
  call void @llvm.memset.p0i8.i64(i8* %126, i8 0, i64 16, i1 false)
  %127 = getelementptr [1 x %..any], [1 x %..any]* %24, i64 0, i64 0
  store %..any %124, %..any* %127, align 8
  %128 = getelementptr [1 x %..any], [1 x %..any]* %24, i64 0, i64 0
  %129 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %23, i32 0, i32 0
  store %..any* %128, %..any** %129, align 8
  %130 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %23, i32 0, i32 1
  store i64 1, i64* %130, align 8
  %131 = load { %..any*, i64 }, { %..any*, i64 }* %23, align 8
  %132 = bitcast { %..any*, i64 }* %23 to { i64, i64 }*
  %133 = load { i64, i64 }, { i64, i64 }* %132, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([57 x i8], [57 x i8]* @"csbs$19a", i64 0, i64 0), i64 56 }, i32 998, i32 8, %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$32e", i64 0, i64 0), i64 7 } }, %runtime.Source_Code_Location* %25, align 8
  %134 = bitcast %runtime.Context* %2 to i8*
  call void @log.panic({ i64, i64 } %133, %runtime.Source_Code_Location* %25, i8* %134)
  unreachable

if.done6:                                         ; preds = %if.done4
  %135 = bitcast [4 x %sdl2_mixer.Chunk*]* %26 to i8*
  call void @llvm.memset.p0i8.i64(i8* %135, i8 0, i64 32, i1 false)
  store [4 x %sdl2_mixer.Chunk*] zeroinitializer, [4 x %sdl2_mixer.Chunk*]* %26, align 8
  %136 = call %sdl2_mixer.Chunk* @sdl2_mixer.LoadWAV(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @"csbs$337", i64 0, i64 0))
  %137 = call %sdl2_mixer.Chunk* @sdl2_mixer.LoadWAV(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @"csbs$338", i64 0, i64 0))
  %138 = call %sdl2_mixer.Chunk* @sdl2_mixer.LoadWAV(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @"csbs$339", i64 0, i64 0))
  %139 = call %sdl2_mixer.Chunk* @sdl2_mixer.LoadWAV(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @"csbs$33a", i64 0, i64 0))
  %140 = getelementptr [4 x %sdl2_mixer.Chunk*], [4 x %sdl2_mixer.Chunk*]* %26, i64 0, i64 0
  %141 = getelementptr [4 x %sdl2_mixer.Chunk*], [4 x %sdl2_mixer.Chunk*]* %26, i64 0, i64 1
  %142 = getelementptr [4 x %sdl2_mixer.Chunk*], [4 x %sdl2_mixer.Chunk*]* %26, i64 0, i64 2
  %143 = getelementptr [4 x %sdl2_mixer.Chunk*], [4 x %sdl2_mixer.Chunk*]* %26, i64 0, i64 3
  store %sdl2_mixer.Chunk* %136, %sdl2_mixer.Chunk** %140, align 8
  store %sdl2_mixer.Chunk* %137, %sdl2_mixer.Chunk** %141, align 8
  store %sdl2_mixer.Chunk* %138, %sdl2_mixer.Chunk** %142, align 8
  store %sdl2_mixer.Chunk* %139, %sdl2_mixer.Chunk** %143, align 8
  %144 = load [4 x %sdl2_mixer.Chunk*], [4 x %sdl2_mixer.Chunk*]* %26, align 8
  store [4 x %sdl2_mixer.Chunk*] %144, [4 x %sdl2_mixer.Chunk*]* getelementptr inbounds (%src.Global_State, %src.Global_State* @src.gs, i64 0, i32 11), align 8
  %145 = bitcast %"src.ease.Flux_Map(f32)-17572"* %27 to i8*
  call void @llvm.memset.p0i8.i64(i8* %145, i8 0, i64 96, i1 false)
  %146 = bitcast %runtime.Context* %2 to i8*
  call void @ease.flux_init-49874(%"src.ease.Flux_Map(f32)-17572"* sret %27, i64 128, i8* %146)
  %147 = load %"src.ease.Flux_Map(f32)-17572", %"src.ease.Flux_Map(f32)-17572"* %27, align 8
  %148 = bitcast %"src.ease.Flux_Map(f32)-17572"* %27 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 bitcast (%"src.ease.Flux_Map(f32)-17572"* getelementptr inbounds (%src.Global_State, %src.Global_State* @src.gs, i64 0, i32 12) to i8*), i8* align 8 %148, i64 96, i1 false)
  ret void
}

define internal void @src.gs_destroy(i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %0 = alloca %sdl2.Cursor*, align 8
  %1 = alloca i64, align 8
  %2 = alloca i64, align 8
  %3 = alloca %sdl2.Cursor*, align 8
  %4 = alloca %src.Window*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %src.Window*, align 8
  %7 = alloca %runtime.Source_Code_Location, align 8
  br label %entry

entry:                                            ; preds = %decls
  %8 = bitcast i8* %__.context_ptr to %runtime.Context*
  %9 = load %"src.ease.Flux_Map(f32)-17572", %"src.ease.Flux_Map(f32)-17572"* getelementptr inbounds (%src.Global_State, %src.Global_State* @src.gs, i64 0, i32 12), align 8
  %10 = bitcast %runtime.Context* %8 to i8*
  call void @ease.flux_destroy-49893(%"src.ease.Flux_Map(f32)-17572"* getelementptr inbounds (%src.Global_State, %src.Global_State* @src.gs, i64 0, i32 12), i8* %10)
  %11 = bitcast %runtime.Context* %8 to i8*
  call void @fontstash.destroy(i8* %11)
  %12 = bitcast %runtime.Context* %8 to i8*
  call void @src.fonts_destroy(i8* %12)
  store %sdl2.Cursor* null, %sdl2.Cursor** %0, align 8
  store i64 6, i64* %1, align 8
  store i64 -1, i64* %2, align 8
  br label %for.index.loop

for.index.loop:                                   ; preds = %for.index.body, %entry
  %13 = load i64, i64* %2, align 8
  %14 = add i64 %13, 1
  store i64 %14, i64* %2, align 8
  %15 = load i64, i64* %1, align 8
  %16 = icmp slt i64 %14, %15
  br i1 %16, label %for.index.body, label %for.index.done

for.index.body:                                   ; preds = %for.index.loop
  %17 = load i64, i64* %2, align 8
  %18 = getelementptr [6 x %sdl2.Cursor*], [6 x %sdl2.Cursor*]* getelementptr inbounds (%src.Global_State, %src.Global_State* @src.gs, i64 0, i32 4), i64 0, i64 %17
  %19 = load %sdl2.Cursor*, %sdl2.Cursor** %18, align 8
  store %sdl2.Cursor* %19, %sdl2.Cursor** %3, align 8
  %20 = load %sdl2.Cursor*, %sdl2.Cursor** %3, align 8
  call void @SDL_FreeCursor(%sdl2.Cursor* %20)
  br label %for.index.loop

for.index.done:                                   ; preds = %for.index.loop
  store %src.Window* null, %src.Window** %4, align 8
  store i64 -1, i64* %5, align 8
  br label %for.index.loop1

for.index.loop1:                                  ; preds = %for.index.body2, %for.index.done
  %21 = load i64, i64* %5, align 8
  %22 = add i64 %21, 1
  store i64 %22, i64* %5, align 8
  %23 = load i64, i64* getelementptr inbounds (%src.Global_State, %src.Global_State* @src.gs, i64 0, i32 0, i32 1), align 8
  %24 = icmp slt i64 %22, %23
  br i1 %24, label %for.index.body2, label %for.index.done3

for.index.body2:                                  ; preds = %for.index.loop1
  %25 = load i64, i64* %5, align 8
  %26 = load %src.Window**, %src.Window*** getelementptr inbounds (%src.Global_State, %src.Global_State* @src.gs, i64 0, i32 0, i32 0), align 8
  %27 = getelementptr %src.Window*, %src.Window** %26, i64 %25
  %28 = load %src.Window*, %src.Window** %27, align 8
  store %src.Window* %28, %src.Window** %6, align 8
  %29 = load %src.Window*, %src.Window** %6, align 8
  %30 = bitcast %runtime.Context* %8 to i8*
  call void @src.window_destroy(%src.Window* %29, i8* %30)
  br label %for.index.loop1

for.index.done3:                                  ; preds = %for.index.loop1
  %31 = load { %src.Window**, i64, i64, %runtime.Allocator }, { %src.Window**, i64, i64, %runtime.Allocator }* getelementptr inbounds (%src.Global_State, %src.Global_State* @src.gs, i64 0, i32 0), align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([57 x i8], [57 x i8]* @"csbs$19a", i64 0, i64 0), i64 56 }, i32 1028, i32 2, %..string { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"csbs$33b", i64 0, i64 0), i64 10 } }, %runtime.Source_Code_Location* %7, align 8
  %32 = bitcast %runtime.Context* %8 to i8*
  %33 = call i8 @runtime.delete_dynamic_array-49906({ %src.Window**, i64, i64, %runtime.Allocator }* getelementptr inbounds (%src.Global_State, %src.Global_State* @src.gs, i64 0, i32 0), %runtime.Source_Code_Location* %7, i8* %32)
  call void @SDL_Quit()
  ret void
}

define internal void @src.window_flush_mouse_state(%src.Window* %0, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %1 = alloca %src.Window*, align 8
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Window* %0, %src.Window** %1, align 8
  %6 = bitcast i8* %__.context_ptr to %runtime.Context*
  store i64 0, i64* %2, align 8
  store i64 1, i64* %3, align 8
  store i64 0, i64* %4, align 8
  br label %for.interval.loop

for.interval.loop:                                ; preds = %for.interval.post, %entry
  %7 = load i64, i64* %3, align 8
  %8 = icmp slt i64 %7, 4
  br i1 %8, label %for.interval.body, label %for.interval.done

for.interval.body:                                ; preds = %for.interval.loop
  %9 = load i64, i64* %3, align 8
  %10 = load i64, i64* %4, align 8
  store i64 %9, i64* %5, align 8
  %11 = load %src.Window*, %src.Window** %1, align 8
  %12 = load i64, i64* %5, align 8
  %13 = bitcast %runtime.Context* %6 to i8*
  call void @src.window_set_pressed(%src.Window* %11, %src.Element* null, i64 %12, i8* %13)
  br label %for.interval.post

for.interval.post:                                ; preds = %for.interval.body
  %14 = load i64, i64* %3, align 8
  %15 = add i64 %14, 1
  store i64 %15, i64* %3, align 8
  %16 = load i64, i64* %4, align 8
  %17 = add i64 %16, 1
  store i64 %17, i64* %4, align 8
  br label %for.interval.loop

for.interval.done:                                ; preds = %for.interval.loop
  ret void
}

define internal void @src.gs_process_events(i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %0 = alloca i8, align 1
  %1 = alloca i8, align 1
  %2 = alloca i8, align 1
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  %5 = alloca %src.Window*, align 8
  %6 = alloca { %src.Window**, i64, i64, %runtime.Allocator }*, align 8
  %7 = alloca i64, align 8
  %8 = alloca %sdl2.Event, align 8
  %9 = alloca %src.Window*, align 8
  %10 = alloca { %src.Window**, i64, i64, %runtime.Allocator }*, align 8
  %11 = alloca i64, align 8
  br label %entry

entry:                                            ; preds = %decls
  %12 = bitcast i8* %__.context_ptr to %runtime.Context*
  store i8 0, i8* %0, align 1
  store i8 0, i8* %1, align 1
  store i8 0, i8* %2, align 1
  store i32 0, i32* %3, align 4
  store i32 0, i32* %3, align 4
  %13 = call i8* @SDL_GetKeyboardState(i32* %3)
  store i8* %13, i8** %4, align 8
  %14 = load i8*, i8** %4, align 8
  %foo = getelementptr i8, i8* %14, i32 225
  %15 = load i8, i8* %foo, align 1
  %16 = icmp eq i8 %15, 1
  %17 = zext i1 %16 to i8
  %18 = trunc i8 %17 to i1
  br i1 %18, label %logical.cmp.done, label %logical.cmp.rhs

logical.cmp.rhs:                                  ; preds = %entry
  %19 = load i8*, i8** %4, align 8
  %foo1 = getelementptr i8, i8* %19, i32 229
  %20 = load i8, i8* %foo1, align 1
  %21 = icmp eq i8 %20, 1
  %22 = zext i1 %21 to i8
  br label %logical.cmp.done

logical.cmp.done:                                 ; preds = %logical.cmp.rhs, %entry
  %23 = phi i8 [ 1, %entry ], [ %22, %logical.cmp.rhs ]
  store i8 %23, i8* %1, align 1
  %24 = load i8*, i8** %4, align 8
  %foo2 = getelementptr i8, i8* %24, i32 224
  %25 = load i8, i8* %foo2, align 1
  %26 = icmp eq i8 %25, 1
  %27 = zext i1 %26 to i8
  %28 = trunc i8 %27 to i1
  br i1 %28, label %logical.cmp.done5, label %logical.cmp.rhs3

logical.cmp.rhs3:                                 ; preds = %logical.cmp.done
  %29 = load i8*, i8** %4, align 8
  %foo4 = getelementptr i8, i8* %29, i32 228
  %30 = load i8, i8* %foo4, align 1
  %31 = icmp eq i8 %30, 1
  %32 = zext i1 %31 to i8
  br label %logical.cmp.done5

logical.cmp.done5:                                ; preds = %logical.cmp.rhs3, %logical.cmp.done
  %33 = phi i8 [ 1, %logical.cmp.done ], [ %32, %logical.cmp.rhs3 ]
  store i8 %33, i8* %0, align 1
  %34 = load i8*, i8** %4, align 8
  %foo6 = getelementptr i8, i8* %34, i32 226
  %35 = load i8, i8* %foo6, align 1
  %36 = icmp eq i8 %35, 1
  %37 = zext i1 %36 to i8
  %38 = trunc i8 %37 to i1
  br i1 %38, label %logical.cmp.done9, label %logical.cmp.rhs7

logical.cmp.rhs7:                                 ; preds = %logical.cmp.done5
  %39 = load i8*, i8** %4, align 8
  %foo8 = getelementptr i8, i8* %39, i32 230
  %40 = load i8, i8* %foo8, align 1
  %41 = icmp eq i8 %40, 1
  %42 = zext i1 %41 to i8
  br label %logical.cmp.done9

logical.cmp.done9:                                ; preds = %logical.cmp.rhs7, %logical.cmp.done5
  %43 = phi i8 [ 1, %logical.cmp.done5 ], [ %42, %logical.cmp.rhs7 ]
  store i8 %43, i8* %2, align 1
  store %src.Window* null, %src.Window** %5, align 8
  store { %src.Window**, i64, i64, %runtime.Allocator }* getelementptr inbounds (%src.Global_State, %src.Global_State* @src.gs, i64 0, i32 0), { %src.Window**, i64, i64, %runtime.Allocator }** %6, align 8
  %44 = load { %src.Window**, i64, i64, %runtime.Allocator }*, { %src.Window**, i64, i64, %runtime.Allocator }** %6, align 8
  %45 = getelementptr inbounds { %src.Window**, i64, i64, %runtime.Allocator }, { %src.Window**, i64, i64, %runtime.Allocator }* %44, i32 0, i32 1
  store i64 -1, i64* %7, align 8
  br label %for.index.loop

for.index.loop:                                   ; preds = %for.index.body, %logical.cmp.done9
  %46 = load i64, i64* %7, align 8
  %47 = add i64 %46, 1
  store i64 %47, i64* %7, align 8
  %48 = load i64, i64* %45, align 8
  %49 = icmp slt i64 %47, %48
  br i1 %49, label %for.index.body, label %for.index.done

for.index.body:                                   ; preds = %for.index.loop
  %50 = load i64, i64* %7, align 8
  %51 = getelementptr inbounds { %src.Window**, i64, i64, %runtime.Allocator }, { %src.Window**, i64, i64, %runtime.Allocator }* %44, i32 0, i32 0
  %52 = load %src.Window**, %src.Window*** %51, align 8
  %53 = getelementptr %src.Window*, %src.Window** %52, i64 %50
  %54 = load %src.Window*, %src.Window** %53, align 8
  %55 = load %src.Window*, %src.Window** %53, align 8
  %56 = getelementptr inbounds %src.Window, %src.Window* %55, i32 0, i32 33
  %57 = load i8, i8* %0, align 1
  store i8 %57, i8* %56, align 1
  %58 = load %src.Window*, %src.Window** %53, align 8
  %59 = getelementptr inbounds %src.Window, %src.Window* %58, i32 0, i32 34
  %60 = load i8, i8* %1, align 1
  store i8 %60, i8* %59, align 1
  %61 = load %src.Window*, %src.Window** %53, align 8
  %62 = getelementptr inbounds %src.Window, %src.Window* %61, i32 0, i32 35
  %63 = load i8, i8* %2, align 1
  store i8 %63, i8* %62, align 1
  %64 = load %src.Window*, %src.Window** %53, align 8
  %65 = getelementptr inbounds %src.Window, %src.Window* %64, i32 0, i32 32
  store i8 0, i8* %65, align 1
  br label %for.index.loop

for.index.done:                                   ; preds = %for.index.loop
  %66 = bitcast %sdl2.Event* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* %66, i8 0, i64 56, i1 false)
  br label %for.loop

for.loop:                                         ; preds = %for.index.done12, %for.index.done
  %67 = call i32 @SDL_PollEvent(%sdl2.Event* %8)
  %68 = trunc i32 %67 to i1
  br i1 %68, label %for.body, label %for.done

for.body:                                         ; preds = %for.loop
  store %src.Window* null, %src.Window** %9, align 8
  store { %src.Window**, i64, i64, %runtime.Allocator }* getelementptr inbounds (%src.Global_State, %src.Global_State* @src.gs, i64 0, i32 0), { %src.Window**, i64, i64, %runtime.Allocator }** %10, align 8
  %69 = load { %src.Window**, i64, i64, %runtime.Allocator }*, { %src.Window**, i64, i64, %runtime.Allocator }** %10, align 8
  %70 = getelementptr inbounds { %src.Window**, i64, i64, %runtime.Allocator }, { %src.Window**, i64, i64, %runtime.Allocator }* %69, i32 0, i32 1
  store i64 -1, i64* %11, align 8
  br label %for.index.loop10

for.index.loop10:                                 ; preds = %for.index.body11, %for.body
  %71 = load i64, i64* %11, align 8
  %72 = add i64 %71, 1
  store i64 %72, i64* %11, align 8
  %73 = load i64, i64* %70, align 8
  %74 = icmp slt i64 %72, %73
  br i1 %74, label %for.index.body11, label %for.index.done12

for.index.body11:                                 ; preds = %for.index.loop10
  %75 = load i64, i64* %11, align 8
  %76 = getelementptr inbounds { %src.Window**, i64, i64, %runtime.Allocator }, { %src.Window**, i64, i64, %runtime.Allocator }* %69, i32 0, i32 0
  %77 = load %src.Window**, %src.Window*** %76, align 8
  %78 = getelementptr %src.Window*, %src.Window** %77, i64 %75
  %79 = load %src.Window*, %src.Window** %78, align 8
  %80 = load %src.Window*, %src.Window** %78, align 8
  %81 = bitcast %runtime.Context* %12 to i8*
  call void @src.window_handle_event(%src.Window* %80, %sdl2.Event* %8, i8* %81)
  br label %for.index.loop10

for.index.done12:                                 ; preds = %for.index.loop10
  br label %for.loop

for.done:                                         ; preds = %for.loop
  ret void
}

define internal void @src.gs_message_loop(i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %0 = alloca %runtime.Context, align 8
  %1 = alloca %src.Window*, align 8
  %2 = alloca i64, align 8
  %3 = alloca %src.Window*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i64, align 8
  %6 = alloca double, align 8
  br label %entry

entry:                                            ; preds = %decls
  %7 = bitcast i8* %__.context_ptr to %runtime.Context*
  %8 = load %runtime.Logger, %runtime.Logger* getelementptr inbounds (%src.Global_State, %src.Global_State* @src.gs, i64 0, i32 1), align 8
  %9 = load %runtime.Context, %runtime.Context* %7, align 8
  %10 = bitcast %runtime.Context* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* %10, i8 0, i64 96, i1 false)
  %11 = bitcast %runtime.Context* %0 to i8*
  %12 = bitcast %runtime.Context* %7 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %11, i8* align 1 %12, i64 96, i1 false)
  %13 = getelementptr inbounds %runtime.Context, %runtime.Context* %0, i32 0, i32 3
  store %runtime.Logger %8, %runtime.Logger* %13, align 8
  br label %for.loop

for.loop:                                         ; preds = %if.done4, %entry
  %14 = load i8, i8* getelementptr inbounds (%src.Global_State, %src.Global_State* @src.gs, i64 0, i32 2), align 1
  %15 = trunc i8 %14 to i1
  br i1 %15, label %for.body, label %for.done

for.body:                                         ; preds = %for.loop
  %16 = load { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* getelementptr inbounds (%src.Global_State, %src.Global_State* @src.gs, i64 0, i32 8), align 8
  %17 = load i64, i64* getelementptr inbounds (%src.Global_State, %src.Global_State* @src.gs, i64 0, i32 8, i32 1), align 8
  %18 = icmp ne i64 %17, 0
  %19 = zext i1 %18 to i8
  %20 = trunc i8 %19 to i1
  br i1 %20, label %if.then, label %cmp.or

cmp.or:                                           ; preds = %for.body
  %21 = load { { i64*, i64 }, { i8*, i64, i64, %runtime.Allocator } }, { { i64*, i64 }, { i8*, i64, i64, %runtime.Allocator } }* getelementptr inbounds (%src.Global_State, %src.Global_State* @src.gs, i64 0, i32 12, i32 0), align 8
  %22 = load { { i64, i64, float*, %"src.Flux_Tween(T)-17575" }*, i64, i64, %runtime.Allocator }, { { i64, i64, float*, %"src.Flux_Tween(T)-17575" }*, i64, i64, %runtime.Allocator }* getelementptr ({ { i64*, i64 }, { { i64, i64, float*, %"src.Flux_Tween(T)-17575" }*, i64, i64, %runtime.Allocator } }, { { i64*, i64 }, { { i64, i64, float*, %"src.Flux_Tween(T)-17575" }*, i64, i64, %runtime.Allocator } }* bitcast ({ { i64*, i64 }, { i8*, i64, i64, %runtime.Allocator } }* getelementptr inbounds (%src.Global_State, %src.Global_State* @src.gs, i64 0, i32 12, i32 0) to { { i64*, i64 }, { { i64, i64, float*, %"src.Flux_Tween(T)-17575" }*, i64, i64, %runtime.Allocator } }*), i64 0, i32 1), align 8
  %23 = load i64, i64* getelementptr ({ { i64*, i64 }, { { i64, i64, float*, %"src.Flux_Tween(T)-17575" }*, i64, i64, %runtime.Allocator } }, { { i64*, i64 }, { { i64, i64, float*, %"src.Flux_Tween(T)-17575" }*, i64, i64, %runtime.Allocator } }* bitcast ({ { i64*, i64 }, { i8*, i64, i64, %runtime.Allocator } }* getelementptr inbounds (%src.Global_State, %src.Global_State* @src.gs, i64 0, i32 12, i32 0) to { { i64*, i64 }, { { i64, i64, float*, %"src.Flux_Tween(T)-17575" }*, i64, i64, %runtime.Allocator } }*), i64 0, i32 1, i32 1), align 8
  %24 = icmp ne i64 %23, 0
  %25 = zext i1 %24 to i8
  %26 = trunc i8 %25 to i1
  br i1 %26, label %if.then, label %if.else

if.then:                                          ; preds = %cmp.or, %for.body
  %27 = call i64 @SDL_GetPerformanceCounter()
  store i64 %27, i64* getelementptr inbounds (%src.Global_State, %src.Global_State* @src.gs, i64 0, i32 5), align 8
  %28 = bitcast %runtime.Context* %0 to i8*
  call void @src.gs_process_animations(i8* %28)
  %29 = bitcast %runtime.Context* %0 to i8*
  call void @src.gs_process_events(i8* %29)
  %30 = load { { i64*, i64 }, { i8*, i64, i64, %runtime.Allocator } }, { { i64*, i64 }, { i8*, i64, i64, %runtime.Allocator } }* getelementptr inbounds (%src.Global_State, %src.Global_State* @src.gs, i64 0, i32 12, i32 0), align 8
  %31 = load { { i64, i64, float*, %"src.Flux_Tween(T)-17575" }*, i64, i64, %runtime.Allocator }, { { i64, i64, float*, %"src.Flux_Tween(T)-17575" }*, i64, i64, %runtime.Allocator }* getelementptr ({ { i64*, i64 }, { { i64, i64, float*, %"src.Flux_Tween(T)-17575" }*, i64, i64, %runtime.Allocator } }, { { i64*, i64 }, { { i64, i64, float*, %"src.Flux_Tween(T)-17575" }*, i64, i64, %runtime.Allocator } }* bitcast ({ { i64*, i64 }, { i8*, i64, i64, %runtime.Allocator } }* getelementptr inbounds (%src.Global_State, %src.Global_State* @src.gs, i64 0, i32 12, i32 0) to { { i64*, i64 }, { { i64, i64, float*, %"src.Flux_Tween(T)-17575" }*, i64, i64, %runtime.Allocator } }*), i64 0, i32 1), align 8
  %32 = load i64, i64* getelementptr ({ { i64*, i64 }, { { i64, i64, float*, %"src.Flux_Tween(T)-17575" }*, i64, i64, %runtime.Allocator } }, { { i64*, i64 }, { { i64, i64, float*, %"src.Flux_Tween(T)-17575" }*, i64, i64, %runtime.Allocator } }* bitcast ({ { i64*, i64 }, { i8*, i64, i64, %runtime.Allocator } }* getelementptr inbounds (%src.Global_State, %src.Global_State* @src.gs, i64 0, i32 12, i32 0) to { { i64*, i64 }, { { i64, i64, float*, %"src.Flux_Tween(T)-17575" }*, i64, i64, %runtime.Allocator } }*), i64 0, i32 1, i32 1), align 8
  %33 = icmp ne i64 %32, 0
  %34 = zext i1 %33 to i8
  %35 = trunc i8 %34 to i1
  br i1 %35, label %if.then1, label %if.done

if.then1:                                         ; preds = %if.then
  store %src.Window* null, %src.Window** %1, align 8
  store i64 -1, i64* %2, align 8
  br label %for.index.loop

for.index.loop:                                   ; preds = %for.index.body, %if.then1
  %36 = load i64, i64* %2, align 8
  %37 = add i64 %36, 1
  store i64 %37, i64* %2, align 8
  %38 = load i64, i64* getelementptr inbounds (%src.Global_State, %src.Global_State* @src.gs, i64 0, i32 0, i32 1), align 8
  %39 = icmp slt i64 %37, %38
  br i1 %39, label %for.index.body, label %for.index.done

for.index.body:                                   ; preds = %for.index.loop
  %40 = load i64, i64* %2, align 8
  %41 = load %src.Window**, %src.Window*** getelementptr inbounds (%src.Global_State, %src.Global_State* @src.gs, i64 0, i32 0, i32 0), align 8
  %42 = getelementptr %src.Window*, %src.Window** %41, i64 %40
  %43 = load %src.Window*, %src.Window** %42, align 8
  store %src.Window* %43, %src.Window** %3, align 8
  %44 = load %src.Window*, %src.Window** %3, align 8
  %45 = getelementptr inbounds %src.Window, %src.Window* %44, i32 0, i32 22
  store i8 1, i8* %45, align 1
  br label %for.index.loop

for.index.done:                                   ; preds = %for.index.loop
  br label %if.done

if.done:                                          ; preds = %for.index.done, %if.then
  br label %if.done2

if.else:                                          ; preds = %cmp.or
  %46 = call i32 @SDL_WaitEvent(%sdl2.Event* null)
  store i32 %46, i32* %4, align 4
  %47 = call i64 @SDL_GetPerformanceCounter()
  store i64 %47, i64* getelementptr inbounds (%src.Global_State, %src.Global_State* @src.gs, i64 0, i32 5), align 8
  %48 = bitcast %runtime.Context* %0 to i8*
  call void @src.gs_process_events(i8* %48)
  br label %if.done2

if.done2:                                         ; preds = %if.else, %if.done
  %49 = bitcast %runtime.Context* %0 to i8*
  call void @src.gs_draw_and_cleanup(i8* %49)
  %50 = call i64 @SDL_GetPerformanceCounter()
  store i64 %50, i64* %5, align 8
  %51 = load i64, i64* %5, align 8
  %52 = load i64, i64* getelementptr inbounds (%src.Global_State, %src.Global_State* @src.gs, i64 0, i32 5), align 8
  %53 = sub i64 %51, %52
  %54 = uitofp i64 %53 to double
  %55 = call i64 @SDL_GetPerformanceFrequency()
  %56 = uitofp i64 %55 to double
  %57 = fdiv double %54, %56
  store double %57, double* %6, align 8
  %58 = load double, double* %6, align 8
  %59 = fptrunc double %58 to float
  store float %59, float* getelementptr inbounds (%src.Global_State, %src.Global_State* @src.gs, i64 0, i32 6), align 4
  %60 = load { { i64*, i64 }, { i8*, i64, i64, %runtime.Allocator } }, { { i64*, i64 }, { i8*, i64, i64, %runtime.Allocator } }* getelementptr inbounds (%src.Global_State, %src.Global_State* @src.gs, i64 0, i32 12, i32 0), align 8
  %61 = load { { i64, i64, float*, %"src.Flux_Tween(T)-17575" }*, i64, i64, %runtime.Allocator }, { { i64, i64, float*, %"src.Flux_Tween(T)-17575" }*, i64, i64, %runtime.Allocator }* getelementptr ({ { i64*, i64 }, { { i64, i64, float*, %"src.Flux_Tween(T)-17575" }*, i64, i64, %runtime.Allocator } }, { { i64*, i64 }, { { i64, i64, float*, %"src.Flux_Tween(T)-17575" }*, i64, i64, %runtime.Allocator } }* bitcast ({ { i64*, i64 }, { i8*, i64, i64, %runtime.Allocator } }* getelementptr inbounds (%src.Global_State, %src.Global_State* @src.gs, i64 0, i32 12, i32 0) to { { i64*, i64 }, { { i64, i64, float*, %"src.Flux_Tween(T)-17575" }*, i64, i64, %runtime.Allocator } }*), i64 0, i32 1), align 8
  %62 = load i64, i64* getelementptr ({ { i64*, i64 }, { { i64, i64, float*, %"src.Flux_Tween(T)-17575" }*, i64, i64, %runtime.Allocator } }, { { i64*, i64 }, { { i64, i64, float*, %"src.Flux_Tween(T)-17575" }*, i64, i64, %runtime.Allocator } }* bitcast ({ { i64*, i64 }, { i8*, i64, i64, %runtime.Allocator } }* getelementptr inbounds (%src.Global_State, %src.Global_State* @src.gs, i64 0, i32 12, i32 0) to { { i64*, i64 }, { { i64, i64, float*, %"src.Flux_Tween(T)-17575" }*, i64, i64, %runtime.Allocator } }*), i64 0, i32 1, i32 1), align 8
  %63 = icmp ne i64 %62, 0
  %64 = zext i1 %63 to i8
  %65 = trunc i8 %64 to i1
  br i1 %65, label %if.then3, label %if.done4

if.then3:                                         ; preds = %if.done2
  %66 = load float, float* getelementptr inbounds (%src.Global_State, %src.Global_State* @src.gs, i64 0, i32 6), align 4
  %67 = fpext float %66 to double
  %68 = bitcast %runtime.Context* %0 to i8*
  call void @ease.flux_update-49950(%"src.ease.Flux_Map(f32)-17572"* getelementptr inbounds (%src.Global_State, %src.Global_State* @src.gs, i64 0, i32 12), double %67, i8* %68)
  br label %if.done4

if.done4:                                         ; preds = %if.then3, %if.done2
  br label %for.loop

for.done:                                         ; preds = %for.loop
  %69 = bitcast %runtime.Context* %0 to i8*
  call void @src.gs_destroy(i8* %69)
  ret void
}

define internal void @src.gs_update_all_windows(i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %0 = alloca %src.Window*, align 8
  %1 = alloca { %src.Window**, i64, i64, %runtime.Allocator }*, align 8
  %2 = alloca i64, align 8
  br label %entry

entry:                                            ; preds = %decls
  %3 = bitcast i8* %__.context_ptr to %runtime.Context*
  store %src.Window* null, %src.Window** %0, align 8
  store { %src.Window**, i64, i64, %runtime.Allocator }* getelementptr inbounds (%src.Global_State, %src.Global_State* @src.gs, i64 0, i32 0), { %src.Window**, i64, i64, %runtime.Allocator }** %1, align 8
  %4 = load { %src.Window**, i64, i64, %runtime.Allocator }*, { %src.Window**, i64, i64, %runtime.Allocator }** %1, align 8
  %5 = getelementptr inbounds { %src.Window**, i64, i64, %runtime.Allocator }, { %src.Window**, i64, i64, %runtime.Allocator }* %4, i32 0, i32 1
  store i64 -1, i64* %2, align 8
  br label %for.index.loop

for.index.loop:                                   ; preds = %for.index.body, %entry
  %6 = load i64, i64* %2, align 8
  %7 = add i64 %6, 1
  store i64 %7, i64* %2, align 8
  %8 = load i64, i64* %5, align 8
  %9 = icmp slt i64 %7, %8
  br i1 %9, label %for.index.body, label %for.index.done

for.index.body:                                   ; preds = %for.index.loop
  %10 = load i64, i64* %2, align 8
  %11 = getelementptr inbounds { %src.Window**, i64, i64, %runtime.Allocator }, { %src.Window**, i64, i64, %runtime.Allocator }* %4, i32 0, i32 0
  %12 = load %src.Window**, %src.Window*** %11, align 8
  %13 = getelementptr %src.Window*, %src.Window** %12, i64 %10
  %14 = load %src.Window*, %src.Window** %13, align 8
  %15 = load %src.Window*, %src.Window** %13, align 8
  %16 = getelementptr inbounds %src.Window, %src.Window* %15, i32 0, i32 22
  store i8 1, i8* %16, align 1
  br label %for.index.loop

for.index.done:                                   ; preds = %for.index.loop
  ret void
}

define internal void @src.gs_process_animations(i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %0 = alloca %src.Element*, align 8
  %1 = alloca i64, align 8
  %2 = alloca %src.Element*, align 8
  br label %entry

entry:                                            ; preds = %decls
  %3 = bitcast i8* %__.context_ptr to %runtime.Context*
  store %src.Element* null, %src.Element** %0, align 8
  store i64 -1, i64* %1, align 8
  br label %for.index.loop

for.index.loop:                                   ; preds = %if.done, %entry
  %4 = load i64, i64* %1, align 8
  %5 = add i64 %4, 1
  store i64 %5, i64* %1, align 8
  %6 = load i64, i64* getelementptr inbounds (%src.Global_State, %src.Global_State* @src.gs, i64 0, i32 8, i32 1), align 8
  %7 = icmp slt i64 %5, %6
  br i1 %7, label %for.index.body, label %for.index.done

for.index.body:                                   ; preds = %for.index.loop
  %8 = load i64, i64* %1, align 8
  %9 = load %src.Element**, %src.Element*** getelementptr inbounds (%src.Global_State, %src.Global_State* @src.gs, i64 0, i32 8, i32 0), align 8
  %10 = getelementptr %src.Element*, %src.Element** %9, i64 %8
  %11 = load %src.Element*, %src.Element** %10, align 8
  store %src.Element* %11, %src.Element** %2, align 8
  %12 = load %src.Element*, %src.Element** %2, align 8
  %13 = bitcast %runtime.Context* %3 to i8*
  %14 = call i64 @src.element_message(%src.Element* %12, i64 7, i64 0, i8* null, i8* %13)
  %15 = icmp eq i64 %14, 0
  %16 = zext i1 %15 to i8
  %17 = trunc i8 %16 to i1
  br i1 %17, label %if.then, label %if.done

if.then:                                          ; preds = %for.index.body
  %18 = load %src.Element*, %src.Element** %2, align 8
  %19 = bitcast %runtime.Context* %3 to i8*
  %20 = call i8 @src.element_animation_stop(%src.Element* %18, i8* %19)
  br label %if.done

if.done:                                          ; preds = %if.then, %for.index.body
  %21 = load %src.Element*, %src.Element** %2, align 8
  %22 = bitcast %runtime.Context* %3 to i8*
  call void @src.element_repaint(%src.Element* %21, i8* %22)
  br label %for.index.loop

for.index.done:                                   ; preds = %for.index.loop
  ret void
}

define internal void @src.gs_draw_and_cleanup(i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %0 = alloca %runtime.Context, align 8
  %1 = alloca i64, align 8
  %2 = alloca %src.Window*, align 8
  %3 = alloca { i64, i64 }, align 8
  %4 = alloca %runtime.Source_Code_Location, align 8
  %5 = alloca i64, align 8
  br label %entry

entry:                                            ; preds = %decls
  %6 = bitcast i8* %__.context_ptr to %runtime.Context*
  %7 = load %runtime.Logger, %runtime.Logger* getelementptr inbounds (%src.Global_State, %src.Global_State* @src.gs, i64 0, i32 1), align 8
  %8 = load %runtime.Context, %runtime.Context* %6, align 8
  %9 = bitcast %runtime.Context* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* %9, i8 0, i64 96, i1 false)
  %10 = bitcast %runtime.Context* %0 to i8*
  %11 = bitcast %runtime.Context* %6 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %10, i8* align 1 %11, i64 96, i1 false)
  %12 = getelementptr inbounds %runtime.Context, %runtime.Context* %0, i32 0, i32 3
  store %runtime.Logger %7, %runtime.Logger* %12, align 8
  br label %for.init

for.init:                                         ; preds = %entry
  %13 = load { %src.Window**, i64, i64, %runtime.Allocator }, { %src.Window**, i64, i64, %runtime.Allocator }* getelementptr inbounds (%src.Global_State, %src.Global_State* @src.gs, i64 0, i32 0), align 8
  %14 = load i64, i64* getelementptr inbounds (%src.Global_State, %src.Global_State* @src.gs, i64 0, i32 0, i32 1), align 8
  %15 = sub i64 %14, 1
  store i64 %15, i64* %1, align 8
  br label %for.loop

for.loop:                                         ; preds = %for.post, %for.init
  %16 = load i64, i64* %1, align 8
  %17 = icmp sge i64 %16, 0
  %18 = zext i1 %17 to i8
  %19 = trunc i8 %18 to i1
  br i1 %19, label %for.body, label %for.done

for.body:                                         ; preds = %for.loop
  %20 = load { %src.Window**, i64, i64, %runtime.Allocator }, { %src.Window**, i64, i64, %runtime.Allocator }* getelementptr inbounds (%src.Global_State, %src.Global_State* @src.gs, i64 0, i32 0), align 8
  %21 = load %src.Window**, %src.Window*** getelementptr inbounds (%src.Global_State, %src.Global_State* @src.gs, i64 0, i32 0, i32 0), align 8
  %22 = load i64, i64* getelementptr inbounds (%src.Global_State, %src.Global_State* @src.gs, i64 0, i32 0, i32 1), align 8
  %23 = load i64, i64* %1, align 8
  %24 = bitcast { i64, i64 }* %3 to %..string*
  store %..string { i8* getelementptr inbounds ([57 x i8], [57 x i8]* @"csbs$19a", i64 0, i64 0), i64 56 }, %..string* %24, align 8
  %25 = load { i64, i64 }, { i64, i64 }* %3, align 8
  call void @runtime.bounds_check_error({ i64, i64 } %25, i32 1138, i32 24, i64 %23, i64 %22)
  %26 = getelementptr %src.Window*, %src.Window** %21, i64 %23
  %27 = load %src.Window*, %src.Window** %26, align 8
  store %src.Window* %27, %src.Window** %2, align 8
  %28 = load %src.Window*, %src.Window** %2, align 8
  %29 = getelementptr inbounds %src.Window, %src.Window* %28, i32 0, i32 0
  %30 = bitcast %runtime.Context* %0 to i8*
  %31 = call i8 @src.element_deallocate(%src.Element* %29, i8* %30)
  %32 = trunc i8 %31 to i1
  br i1 %32, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %33 = load i64, i64* %1, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([57 x i8], [57 x i8]* @"csbs$19a", i64 0, i64 0), i64 56 }, i32 1142, i32 4, %..string { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @"csbs$33c", i64 0, i64 0), i64 19 } }, %runtime.Source_Code_Location* %4, align 8
  %34 = bitcast %runtime.Context* %0 to i8*
  call void @runtime.unordered_remove-49965({ %src.Window**, i64, i64, %runtime.Allocator }* getelementptr inbounds (%src.Global_State, %src.Global_State* @src.gs, i64 0, i32 0), i64 %33, %runtime.Source_Code_Location* %4, i8* %34)
  br label %if.done8

if.else:                                          ; preds = %for.body
  %35 = load %src.Window*, %src.Window** %2, align 8
  %36 = getelementptr inbounds %src.Window, %src.Window* %35, i32 0, i32 22
  %37 = load i8, i8* %36, align 1
  %38 = trunc i8 %37 to i1
  br i1 %38, label %if.then1, label %if.done7

if.then1:                                         ; preds = %if.else
  %39 = load %src.Window*, %src.Window** %2, align 8
  %40 = getelementptr inbounds %src.Window, %src.Window* %39, i32 0, i32 4
  %41 = load %src.Element*, %src.Element** %40, align 8
  %42 = icmp ne %src.Element* %41, null
  %43 = zext i1 %42 to i8
  %44 = trunc i8 %43 to i1
  br i1 %44, label %if.then2, label %if.done4

if.then2:                                         ; preds = %if.then1
  %45 = load %src.Window*, %src.Window** %2, align 8
  %46 = bitcast %runtime.Context* %0 to i8*
  %47 = call i8 @src.window_focused_shown(%src.Window* %45, i8* %46)
  %48 = trunc i8 %47 to i1
  br i1 %48, label %if.done, label %if.then3

if.then3:                                         ; preds = %if.then2
  %49 = load %src.Window*, %src.Window** %2, align 8
  %50 = getelementptr inbounds %src.Window, %src.Window* %49, i32 0, i32 4
  store %src.Element* null, %src.Element** %50, align 8
  br label %if.done

if.done:                                          ; preds = %if.then3, %if.then2
  br label %if.done4

if.done4:                                         ; preds = %if.done, %if.then1
  %51 = load %src.Window*, %src.Window** %2, align 8
  %52 = getelementptr inbounds %src.Window, %src.Window* %51, i32 0, i32 42
  %53 = load i8*, i8** %52, align 8
  %54 = icmp ne i8* %53, null
  %55 = zext i1 %54 to i8
  %56 = trunc i8 %55 to i1
  br i1 %56, label %if.then5, label %if.done6

if.then5:                                         ; preds = %if.done4
  %57 = load %src.Window*, %src.Window** %2, align 8
  %58 = getelementptr inbounds %src.Window, %src.Window* %57, i32 0, i32 42
  %59 = load i8*, i8** %58, align 8
  %60 = load %src.Window*, %src.Window** %2, align 8
  %61 = bitcast %runtime.Context* %0 to i8*
  %62 = bitcast i8* %59 to void (%src.Window*, i8*)*
  call void %62(%src.Window* %60, i8* %61)
  br label %if.done6

if.done6:                                         ; preds = %if.then5, %if.done4
  %63 = load %src.Window*, %src.Window** %2, align 8
  %64 = getelementptr inbounds %src.Window, %src.Window* %63, i32 0, i32 24
  %65 = load %src.Render_Target*, %src.Render_Target** %64, align 8
  %66 = load [4 x i8], [4 x i8]* getelementptr inbounds (%src.Theme, %src.Theme* @src.theme, i64 0, i32 6), align 1
  %67 = bitcast i64* %5 to [4 x i8]*
  store [4 x i8] %66, [4 x i8]* %67, align 1
  %68 = load i64, i64* %5, align 8
  %69 = bitcast %runtime.Context* %0 to i8*
  call void @src.render_target_begin(%src.Render_Target* %65, i64 %68, i8* %69)
  %70 = load %src.Window*, %src.Window** %2, align 8
  %71 = getelementptr inbounds %src.Window, %src.Window* %70, i32 0, i32 0
  %72 = bitcast %runtime.Context* %0 to i8*
  %73 = call i64 @src.element_message(%src.Element* %71, i64 3, i64 0, i8* null, i8* %72)
  %74 = load %src.Window*, %src.Window** %2, align 8
  %75 = getelementptr inbounds %src.Window, %src.Window* %74, i32 0, i32 24
  %76 = load %src.Render_Target*, %src.Render_Target** %75, align 8
  %77 = load %src.Window*, %src.Window** %2, align 8
  %78 = getelementptr inbounds %src.Window, %src.Window* %77, i32 0, i32 0
  %79 = bitcast %runtime.Context* %0 to i8*
  call void @src.render_element_clipped(%src.Render_Target* %76, %src.Element* %78, i8* %79)
  %80 = load %src.Window*, %src.Window** %2, align 8
  %81 = getelementptr inbounds %src.Window, %src.Window* %80, i32 0, i32 24
  %82 = load %src.Render_Target*, %src.Render_Target** %81, align 8
  %83 = load %src.Window*, %src.Window** %2, align 8
  %84 = getelementptr inbounds %src.Window, %src.Window* %83, i32 0, i32 25
  %85 = load %sdl2.Window*, %sdl2.Window** %84, align 8
  %86 = load %src.Window*, %src.Window** %2, align 8
  %87 = getelementptr inbounds %src.Window, %src.Window* %86, i32 0, i32 18
  %88 = load i64, i64* %87, align 8
  %89 = load %src.Window*, %src.Window** %2, align 8
  %90 = getelementptr inbounds %src.Window, %src.Window* %89, i32 0, i32 19
  %91 = load i64, i64* %90, align 8
  %92 = bitcast %runtime.Context* %0 to i8*
  call void @src.render_target_end(%src.Render_Target* %82, %sdl2.Window* %85, i64 %88, i64 %91, i8* %92)
  %93 = load %src.Window*, %src.Window** %2, align 8
  %94 = getelementptr inbounds %src.Window, %src.Window* %93, i32 0, i32 22
  store i8 0, i8* %94, align 1
  br label %if.done7

if.done7:                                         ; preds = %if.done6, %if.else
  br label %if.done8

if.done8:                                         ; preds = %if.done7, %if.then
  br label %for.post

for.post:                                         ; preds = %if.done8
  %95 = load i64, i64* %1, align 8
  %96 = sub i64 %95, 1
  store i64 %96, i64* %1, align 8
  br label %for.loop

for.done:                                         ; preds = %for.loop
  ret void
}

define internal i64 @src.dialog_message(%src.Element* %0, i64 %1, i64 %2, i8* %3, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %4 = alloca %src.Element*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i8*, align 8
  %8 = alloca %src.Window*, align 8
  %9 = alloca { i64, i64 }, align 8
  %10 = alloca %runtime.Source_Code_Location, align 8
  %11 = alloca %src.Panel*, align 8
  %12 = alloca { i64, i64 }, align 8
  %13 = alloca float, align 4
  %14 = alloca float, align 4
  %15 = alloca float, align 4
  %16 = alloca float, align 4
  %17 = alloca %src.Rect, align 8
  %18 = alloca %src.Rect, align 4
  %19 = alloca %src.Element*, align 8
  %20 = alloca { i64, i64 }, align 8
  %21 = alloca %..string, align 8
  %22 = alloca %src.Window*, align 8
  %23 = alloca %strings.Builder*, align 8
  %24 = alloca { i64, i64 }, align 8
  %25 = alloca { i64, i64 }, align 8
  %26 = alloca { i64, i64 }, align 8
  %27 = alloca { i64, i64 }, align 8
  %28 = alloca i32, align 4
  %29 = alloca %src.Element*, align 8
  %30 = alloca { i64, i64 }, align 8
  %31 = alloca i8, align 1
  %32 = alloca %src.Element*, align 8
  %33 = alloca i64, align 8
  %34 = alloca i64, align 8
  %35 = alloca i64, align 8
  %36 = alloca i64, align 8
  %37 = alloca %src.Element*, align 8
  %38 = alloca { i64, i64 }, align 8
  %39 = alloca i64, align 8
  %40 = alloca i64, align 8
  %41 = alloca i64, align 8
  %42 = alloca i64, align 8
  %43 = alloca %src.Element*, align 8
  %44 = alloca { i64, i64 }, align 8
  %45 = alloca %src.Button*, align 8
  %46 = alloca %..string, align 8
  %47 = alloca %..string, align 8
  %48 = alloca i32, align 4
  %49 = alloca { i64, i64 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Element* %0, %src.Element** %4, align 8
  store i64 %1, i64* %5, align 8
  store i64 %2, i64* %6, align 8
  store i8* %3, i8** %7, align 8
  %50 = bitcast i8* %__.context_ptr to %runtime.Context*
  %51 = load i64, i64* %5, align 8
  switch i64 %51, label %switch.done [
    i64 3, label %switch.case.body
    i64 1, label %switch.case.body1
    i64 27, label %switch.case.body2
    i64 28, label %switch.case.body5
  ]

switch.case.body:                                 ; preds = %entry
  %52 = load %src.Element*, %src.Element** %4, align 8
  %53 = getelementptr inbounds %src.Element, %src.Element* %52, i32 0, i32 4
  %54 = load %src.Window*, %src.Window** %53, align 8
  store %src.Window* %54, %src.Window** %8, align 8
  %55 = load %src.Element*, %src.Element** %4, align 8
  %56 = getelementptr inbounds %src.Element, %src.Element* %55, i32 0, i32 3
  %57 = load { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %56, align 8
  %58 = getelementptr inbounds { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %56, i32 0, i32 1
  %59 = load i64, i64* %58, align 8
  %60 = icmp ne i64 %59, 0
  %61 = zext i1 %60 to i8
  %62 = icmp ne i8 %61, 0
  %63 = bitcast { i64, i64 }* %9 to %..string*
  store %..string zeroinitializer, %..string* %63, align 8
  %64 = load { i64, i64 }, { i64, i64 }* %9, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([57 x i8], [57 x i8]* @"csbs$19a", i64 0, i64 0), i64 56 }, i32 1175, i32 4, %..string { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"csbs$33d", i64 0, i64 0), i64 14 } }, %runtime.Source_Code_Location* %10, align 8
  %65 = bitcast %runtime.Context* %50 to i8*
  call void @runtime.assert(i1 %62, { i64, i64 } %64, %runtime.Source_Code_Location* %10, i8* %65)
  %66 = load %src.Element*, %src.Element** %4, align 8
  %67 = getelementptr inbounds %src.Element, %src.Element* %66, i32 0, i32 3
  %68 = load { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %67, align 8
  %69 = getelementptr inbounds { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %67, i32 0, i32 0
  %70 = load %src.Element**, %src.Element*** %69, align 8
  %71 = getelementptr inbounds { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %67, i32 0, i32 1
  %72 = load i64, i64* %71, align 8
  %73 = bitcast { i64, i64 }* %12 to %..string*
  store %..string { i8* getelementptr inbounds ([57 x i8], [57 x i8]* @"csbs$19a", i64 0, i64 0), i64 56 }, %..string* %73, align 8
  %74 = load { i64, i64 }, { i64, i64 }* %12, align 8
  call void @runtime.bounds_check_error({ i64, i64 } %74, i32 1177, i32 43, i64 0, i64 %72)
  %75 = getelementptr %src.Element*, %src.Element** %70, i64 0
  %76 = load %src.Element*, %src.Element** %75, align 8
  %77 = bitcast %src.Element* %76 to %src.Panel*
  store %src.Panel* %77, %src.Panel** %11, align 8
  %78 = load %src.Panel*, %src.Panel** %11, align 8
  %79 = getelementptr inbounds %src.Panel, %src.Panel* %78, i32 0, i32 0
  %80 = bitcast %runtime.Context* %50 to i8*
  %81 = call i64 @src.element_message(%src.Element* %79, i64 9, i64 0, i8* null, i8* %80)
  %82 = sitofp i64 %81 to float
  store float %82, float* %13, align 4
  %83 = load %src.Panel*, %src.Panel** %11, align 8
  %84 = getelementptr inbounds %src.Panel, %src.Panel* %83, i32 0, i32 0
  %85 = bitcast %runtime.Context* %50 to i8*
  %86 = call i64 @src.element_message(%src.Element* %84, i64 10, i64 0, i8* null, i8* %85)
  %87 = sitofp i64 %86 to float
  store float %87, float* %14, align 4
  %88 = load %src.Element*, %src.Element** %4, align 8
  %89 = getelementptr inbounds %src.Element, %src.Element* %88, i32 0, i32 5
  %90 = getelementptr inbounds %src.Rect, %src.Rect* %89, i32 0, i32 0
  %91 = load float, float* %90, align 4
  %92 = load %src.Element*, %src.Element** %4, align 8
  %93 = getelementptr inbounds %src.Element, %src.Element* %92, i32 0, i32 5
  %94 = getelementptr inbounds %src.Rect, %src.Rect* %93, i32 0, i32 1
  %95 = load float, float* %94, align 4
  %96 = fadd float %91, %95
  %97 = fdiv float %96, 2.000000e+00
  store float %97, float* %15, align 4
  %98 = load %src.Element*, %src.Element** %4, align 8
  %99 = getelementptr inbounds %src.Element, %src.Element* %98, i32 0, i32 5
  %100 = getelementptr inbounds %src.Rect, %src.Rect* %99, i32 0, i32 2
  %101 = load float, float* %100, align 4
  %102 = load %src.Element*, %src.Element** %4, align 8
  %103 = getelementptr inbounds %src.Element, %src.Element* %102, i32 0, i32 5
  %104 = getelementptr inbounds %src.Rect, %src.Rect* %103, i32 0, i32 3
  %105 = load float, float* %104, align 4
  %106 = fadd float %101, %105
  %107 = fdiv float %106, 2.000000e+00
  store float %107, float* %16, align 4
  %108 = bitcast %src.Rect* %18 to i8*
  call void @llvm.memset.p0i8.i64(i8* %108, i8 0, i64 16, i1 false)
  store %src.Rect zeroinitializer, %src.Rect* %18, align 4
  %109 = load float, float* %15, align 4
  %110 = load float, float* %13, align 4
  %111 = fadd float %110, 1.000000e+00
  %112 = fdiv float %111, 2.000000e+00
  %113 = fsub float %109, %112
  %114 = getelementptr inbounds %src.Rect, %src.Rect* %18, i32 0, i32 0
  store float %113, float* %114, align 4
  %115 = load float, float* %15, align 4
  %116 = load float, float* %13, align 4
  %117 = fdiv float %116, 2.000000e+00
  %118 = fadd float %115, %117
  %119 = getelementptr inbounds %src.Rect, %src.Rect* %18, i32 0, i32 1
  store float %118, float* %119, align 4
  %120 = load float, float* %16, align 4
  %121 = load float, float* %14, align 4
  %122 = fadd float %121, 1.000000e+00
  %123 = fsub float %120, %122
  %124 = getelementptr inbounds %src.Rect, %src.Rect* %18, i32 0, i32 2
  store float %123, float* %124, align 4
  %125 = load float, float* %16, align 4
  %126 = load float, float* %14, align 4
  %127 = fdiv float %126, 2.000000e+00
  %128 = fadd float %125, %127
  %129 = getelementptr inbounds %src.Rect, %src.Rect* %18, i32 0, i32 3
  store float %128, float* %129, align 4
  %130 = load %src.Rect, %src.Rect* %18, align 4
  store %src.Rect %130, %src.Rect* %17, align 4
  %131 = load %src.Panel*, %src.Panel** %11, align 8
  %132 = load %src.Rect, %src.Rect* %17, align 4
  %133 = getelementptr inbounds %src.Panel, %src.Panel* %131, i32 0, i32 0
  %134 = bitcast %src.Rect* %17 to { <2 x float>, <2 x float> }*
  %135 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %134, align 8
  %136 = bitcast %runtime.Context* %50 to i8*
  call void @src.element_move(%src.Element* %133, { <2 x float>, <2 x float> } %135, i8* %136)
  br label %switch.done

switch.case.body1:                                ; preds = %entry
  %137 = load %src.Element*, %src.Element** %4, align 8
  %138 = getelementptr inbounds %src.Element, %src.Element* %137, i32 0, i32 3
  %139 = load { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %138, align 8
  %140 = getelementptr inbounds { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %138, i32 0, i32 0
  %141 = load %src.Element**, %src.Element*** %140, align 8
  %142 = getelementptr inbounds { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %138, i32 0, i32 1
  %143 = load i64, i64* %142, align 8
  %144 = bitcast { i64, i64 }* %20 to %..string*
  store %..string { i8* getelementptr inbounds ([57 x i8], [57 x i8]* @"csbs$19a", i64 0, i64 0), i64 56 }, %..string* %144, align 8
  %145 = load { i64, i64 }, { i64, i64 }* %20, align 8
  call void @runtime.bounds_check_error({ i64, i64 } %145, i32 1192, i32 30, i64 0, i64 %143)
  %146 = getelementptr %src.Element*, %src.Element** %141, i64 0
  %147 = load %src.Element*, %src.Element** %146, align 8
  store %src.Element* %147, %src.Element** %19, align 8
  %148 = load %src.Element*, %src.Element** %19, align 8
  %149 = load i64, i64* %6, align 8
  %150 = load i8*, i8** %7, align 8
  %151 = bitcast %runtime.Context* %50 to i8*
  %152 = call i64 @src.element_message(%src.Element* %148, i64 1, i64 %149, i8* %150, i8* %151)
  br label %switch.done

switch.case.body2:                                ; preds = %entry
  %153 = load i8*, i8** %7, align 8
  %154 = bitcast i8* %153 to %..string*
  %155 = load %..string, %..string* %154, align 8
  store %..string %155, %..string* %21, align 8
  %156 = load %src.Element*, %src.Element** %4, align 8
  %157 = getelementptr inbounds %src.Element, %src.Element* %156, i32 0, i32 4
  %158 = load %src.Window*, %src.Window** %157, align 8
  store %src.Window* %158, %src.Window** %22, align 8
  %159 = load %src.Window*, %src.Window** %22, align 8
  %160 = getelementptr inbounds %src.Window, %src.Window* %159, i32 0, i32 41
  store %strings.Builder* %160, %strings.Builder** %23, align 8
  %161 = load %..string, %..string* %21, align 8
  %162 = bitcast %..string* %21 to { i64, i64 }*
  %163 = load { i64, i64 }, { i64, i64 }* %162, align 8
  %164 = bitcast { i64, i64 }* %24 to %..string*
  store %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$33e", i64 0, i64 0), i64 6 }, %..string* %164, align 8
  %165 = load { i64, i64 }, { i64, i64 }* %24, align 8
  %166 = call i8 @runtime.string_eq({ i64, i64 } %163, { i64, i64 } %165)
  %167 = trunc i8 %166 to i1
  br i1 %167, label %if.then, label %if.else

if.then:                                          ; preds = %switch.case.body2
  %168 = load %strings.Builder*, %strings.Builder** %23, align 8
  %169 = bitcast %runtime.Context* %50 to i8*
  call void @strings.builder_reset(%strings.Builder* %168, i8* %169)
  %170 = load %strings.Builder*, %strings.Builder** %23, align 8
  %171 = bitcast { i64, i64 }* %25 to %..string*
  store %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$33f", i64 0, i64 0), i64 2 }, %..string* %171, align 8
  %172 = load { i64, i64 }, { i64, i64 }* %25, align 8
  %173 = bitcast %runtime.Context* %50 to i8*
  %174 = call i64 @strings.write_string(%strings.Builder* %170, { i64, i64 } %172, i8* %173)
  %175 = load %src.Window*, %src.Window** %22, align 8
  %176 = getelementptr inbounds %src.Window, %src.Window* %175, i32 0, i32 39
  store i8 1, i8* %176, align 1
  ret i64 1

if.else:                                          ; preds = %switch.case.body2
  %177 = load %..string, %..string* %21, align 8
  %178 = bitcast %..string* %21 to { i64, i64 }*
  %179 = load { i64, i64 }, { i64, i64 }* %178, align 8
  %180 = bitcast { i64, i64 }* %26 to %..string*
  store %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$313", i64 0, i64 0), i64 6 }, %..string* %180, align 8
  %181 = load { i64, i64 }, { i64, i64 }* %26, align 8
  %182 = call i8 @runtime.string_eq({ i64, i64 } %179, { i64, i64 } %181)
  %183 = trunc i8 %182 to i1
  br i1 %183, label %if.then3, label %if.done

if.then3:                                         ; preds = %if.else
  %184 = load %strings.Builder*, %strings.Builder** %23, align 8
  %185 = bitcast %runtime.Context* %50 to i8*
  call void @strings.builder_reset(%strings.Builder* %184, i8* %185)
  %186 = load %strings.Builder*, %strings.Builder** %23, align 8
  %187 = bitcast { i64, i64 }* %27 to %..string*
  store %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$340", i64 0, i64 0), i64 2 }, %..string* %187, align 8
  %188 = load { i64, i64 }, { i64, i64 }* %27, align 8
  %189 = bitcast %runtime.Context* %50 to i8*
  %190 = call i64 @strings.write_string(%strings.Builder* %186, { i64, i64 } %188, i8* %189)
  %191 = load %src.Window*, %src.Window** %22, align 8
  %192 = getelementptr inbounds %src.Window, %src.Window* %191, i32 0, i32 39
  store i8 1, i8* %192, align 1
  ret i64 1

if.done:                                          ; preds = %if.else
  br label %if.done4

if.done4:                                         ; preds = %if.done
  br label %switch.done

switch.case.body5:                                ; preds = %entry
  %193 = load i8*, i8** %7, align 8
  %194 = bitcast i8* %193 to i32*
  %195 = load i32, i32* %194, align 4
  store i32 %195, i32* %28, align 4
  %196 = load i32, i32* %28, align 4
  %197 = bitcast %runtime.Context* %50 to i8*
  %198 = call i32 @unicode.to_upper(i32 %196, i8* %197)
  store i32 %198, i32* %28, align 4
  %199 = load %src.Element*, %src.Element** %4, align 8
  %200 = getelementptr inbounds %src.Element, %src.Element* %199, i32 0, i32 3
  %201 = load { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %200, align 8
  %202 = getelementptr inbounds { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %200, i32 0, i32 0
  %203 = load %src.Element**, %src.Element*** %202, align 8
  %204 = getelementptr inbounds { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %200, i32 0, i32 1
  %205 = load i64, i64* %204, align 8
  %206 = bitcast { i64, i64 }* %30 to %..string*
  store %..string { i8* getelementptr inbounds ([57 x i8], [57 x i8]* @"csbs$19a", i64 0, i64 0), i64 56 }, %..string* %206, align 8
  %207 = load { i64, i64 }, { i64, i64 }* %30, align 8
  call void @runtime.bounds_check_error({ i64, i64 } %207, i32 1220, i32 38, i64 0, i64 %205)
  %208 = getelementptr %src.Element*, %src.Element** %203, i64 0
  %209 = load %src.Element*, %src.Element** %208, align 8
  store %src.Element* %209, %src.Element** %29, align 8
  store i8 0, i8* %31, align 1
  store %src.Element* null, %src.Element** %32, align 8
  store i64 0, i64* %33, align 8
  store i64 0, i64* %34, align 8
  store i64 0, i64* %35, align 8
  br label %for.interval.loop

for.interval.loop:                                ; preds = %for.interval.post15, %switch.case.body5
  %210 = load %src.Element*, %src.Element** %29, align 8
  %211 = getelementptr inbounds %src.Element, %src.Element* %210, i32 0, i32 3
  %212 = load { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %211, align 8
  %213 = getelementptr inbounds { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %211, i32 0, i32 1
  %214 = load i64, i64* %213, align 8
  %215 = load i64, i64* %34, align 8
  %216 = icmp slt i64 %215, %214
  br i1 %216, label %for.interval.body, label %for.interval.done16

for.interval.body:                                ; preds = %for.interval.loop
  %217 = load i64, i64* %34, align 8
  %218 = load i64, i64* %35, align 8
  store i64 %217, i64* %36, align 8
  %219 = load %src.Element*, %src.Element** %29, align 8
  %220 = getelementptr inbounds %src.Element, %src.Element* %219, i32 0, i32 3
  %221 = load { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %220, align 8
  %222 = getelementptr inbounds { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %220, i32 0, i32 0
  %223 = load %src.Element**, %src.Element*** %222, align 8
  %224 = getelementptr inbounds { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %220, i32 0, i32 1
  %225 = load i64, i64* %224, align 8
  %226 = load i64, i64* %36, align 8
  %227 = bitcast { i64, i64 }* %38 to %..string*
  store %..string { i8* getelementptr inbounds ([57 x i8], [57 x i8]* @"csbs$19a", i64 0, i64 0), i64 56 }, %..string* %227, align 8
  %228 = load { i64, i64 }, { i64, i64 }* %38, align 8
  call void @runtime.bounds_check_error({ i64, i64 } %228, i32 1225, i32 35, i64 %226, i64 %225)
  %229 = getelementptr %src.Element*, %src.Element** %223, i64 %226
  %230 = load %src.Element*, %src.Element** %229, align 8
  store %src.Element* %230, %src.Element** %37, align 8
  store i64 0, i64* %39, align 8
  store i64 0, i64* %40, align 8
  store i64 0, i64* %41, align 8
  br label %for.interval.loop6

for.interval.loop6:                               ; preds = %for.interval.post, %for.interval.body
  %231 = load %src.Element*, %src.Element** %37, align 8
  %232 = getelementptr inbounds %src.Element, %src.Element* %231, i32 0, i32 3
  %233 = load { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %232, align 8
  %234 = getelementptr inbounds { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %232, i32 0, i32 1
  %235 = load i64, i64* %234, align 8
  %236 = load i64, i64* %40, align 8
  %237 = icmp slt i64 %236, %235
  br i1 %237, label %for.interval.body7, label %for.interval.done

for.interval.body7:                               ; preds = %for.interval.loop6
  %238 = load i64, i64* %40, align 8
  %239 = load i64, i64* %41, align 8
  store i64 %238, i64* %42, align 8
  %240 = load %src.Element*, %src.Element** %37, align 8
  %241 = getelementptr inbounds %src.Element, %src.Element* %240, i32 0, i32 3
  %242 = load { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %241, align 8
  %243 = getelementptr inbounds { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %241, i32 0, i32 0
  %244 = load %src.Element**, %src.Element*** %243, align 8
  %245 = getelementptr inbounds { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %241, i32 0, i32 1
  %246 = load i64, i64* %245, align 8
  %247 = load i64, i64* %42, align 8
  %248 = bitcast { i64, i64 }* %44 to %..string*
  store %..string { i8* getelementptr inbounds ([57 x i8], [57 x i8]* @"csbs$19a", i64 0, i64 0), i64 56 }, %..string* %248, align 8
  %249 = load { i64, i64 }, { i64, i64 }* %44, align 8
  call void @runtime.bounds_check_error({ i64, i64 } %249, i32 1228, i32 27, i64 %247, i64 %246)
  %250 = getelementptr %src.Element*, %src.Element** %244, i64 %247
  %251 = load %src.Element*, %src.Element** %250, align 8
  store %src.Element* %251, %src.Element** %43, align 8
  %252 = load %src.Element*, %src.Element** %43, align 8
  %253 = getelementptr inbounds %src.Element, %src.Element* %252, i32 0, i32 7
  %254 = load i8*, i8** %253, align 8
  %255 = icmp eq i8* %254, bitcast (i64 (%src.Element*, i64, i64, i8*, i8*)* @src.button_message to i8*)
  %256 = zext i1 %255 to i8
  %257 = trunc i8 %256 to i1
  br i1 %257, label %if.then8, label %if.done14

if.then8:                                         ; preds = %for.interval.body7
  %258 = load %src.Element*, %src.Element** %43, align 8
  %259 = bitcast %src.Element* %258 to %src.Button*
  store %src.Button* %259, %src.Button** %45, align 8
  %260 = load %src.Button*, %src.Button** %45, align 8
  %261 = getelementptr inbounds %src.Button, %src.Button* %260, i32 0, i32 1
  %262 = load %strings.Builder, %strings.Builder* %261, align 8
  %263 = bitcast %runtime.Context* %50 to i8*
  %264 = call { i64, i64 } @strings.to_string(%strings.Builder* %261, i8* %263)
  %265 = bitcast %..string* %47 to { i64, i64 }*
  store { i64, i64 } %264, { i64, i64 }* %265, align 8
  %266 = load %..string, %..string* %47, align 8
  store %..string %266, %..string* %46, align 8
  %267 = load %..string, %..string* %46, align 8
  %268 = getelementptr inbounds %..string, %..string* %46, i32 0, i32 0
  %269 = load i8*, i8** %268, align 8
  %270 = getelementptr inbounds %..string, %..string* %46, i32 0, i32 1
  %271 = load i64, i64* %270, align 8
  %272 = bitcast { i64, i64 }* %49 to %..string*
  store %..string { i8* getelementptr inbounds ([57 x i8], [57 x i8]* @"csbs$19a", i64 0, i64 0), i64 56 }, %..string* %272, align 8
  %273 = load { i64, i64 }, { i64, i64 }* %49, align 8
  call void @runtime.bounds_check_error({ i64, i64 } %273, i32 1235, i32 26, i64 0, i64 %271)
  %274 = getelementptr i8, i8* %269, i64 0
  %275 = load i8, i8* %274, align 1
  %276 = zext i8 %275 to i32
  store i32 %276, i32* %48, align 4
  %277 = load i32, i32* %48, align 4
  %278 = load i32, i32* %28, align 4
  %279 = icmp eq i32 %277, %278
  %280 = zext i1 %279 to i8
  %281 = trunc i8 %280 to i1
  br i1 %281, label %if.then9, label %if.done13

if.then9:                                         ; preds = %if.then8
  %282 = load %src.Element*, %src.Element** %32, align 8
  %283 = icmp eq %src.Element* %282, null
  %284 = zext i1 %283 to i8
  %285 = trunc i8 %284 to i1
  br i1 %285, label %if.then10, label %if.else11

if.then10:                                        ; preds = %if.then9
  %286 = load %src.Element*, %src.Element** %43, align 8
  store %src.Element* %286, %src.Element** %32, align 8
  br label %if.done12

if.else11:                                        ; preds = %if.then9
  store i8 1, i8* %31, align 1
  br label %if.done12

if.done12:                                        ; preds = %if.else11, %if.then10
  br label %if.done13

if.done13:                                        ; preds = %if.done12, %if.then8
  br label %if.done14

if.done14:                                        ; preds = %if.done13, %for.interval.body7
  br label %for.interval.post

for.interval.post:                                ; preds = %if.done14
  %287 = load i64, i64* %40, align 8
  %288 = add i64 %287, 1
  store i64 %288, i64* %40, align 8
  %289 = load i64, i64* %41, align 8
  %290 = add i64 %289, 1
  store i64 %290, i64* %41, align 8
  br label %for.interval.loop6

for.interval.done:                                ; preds = %for.interval.loop6
  br label %for.interval.post15

for.interval.post15:                              ; preds = %for.interval.done
  %291 = load i64, i64* %34, align 8
  %292 = add i64 %291, 1
  store i64 %292, i64* %34, align 8
  %293 = load i64, i64* %35, align 8
  %294 = add i64 %293, 1
  store i64 %294, i64* %35, align 8
  br label %for.interval.loop

for.interval.done16:                              ; preds = %for.interval.loop
  %295 = load %src.Element*, %src.Element** %32, align 8
  %296 = icmp ne %src.Element* %295, null
  %297 = zext i1 %296 to i8
  %298 = trunc i8 %297 to i1
  br i1 %298, label %if.then17, label %if.done21

if.then17:                                        ; preds = %for.interval.done16
  %299 = load i8, i8* %31, align 1
  %300 = trunc i8 %299 to i1
  br i1 %300, label %if.then18, label %if.else19

if.then18:                                        ; preds = %if.then17
  %301 = load %src.Element*, %src.Element** %32, align 8
  %302 = bitcast %runtime.Context* %50 to i8*
  %303 = call i8 @src.element_focus(%src.Element* %301, i8* %302)
  br label %if.done20

if.else19:                                        ; preds = %if.then17
  %304 = load %src.Element*, %src.Element** %32, align 8
  %305 = bitcast %runtime.Context* %50 to i8*
  %306 = call i64 @src.element_message(%src.Element* %304, i64 22, i64 0, i8* null, i8* %305)
  br label %if.done20

if.done20:                                        ; preds = %if.else19, %if.then18
  br label %if.done21

if.done21:                                        ; preds = %if.done20, %for.interval.done16
  br label %switch.done

switch.done:                                      ; preds = %if.done21, %if.done4, %switch.case.body1, %switch.case.body, %entry
  ret i64 0
}

define internal i64 @src.dialog_button_message(%src.Element* %0, i64 %1, i64 %2, i8* %3, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %4 = alloca %src.Element*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i8*, align 8
  %8 = alloca %src.Button*, align 8
  %9 = alloca %src.Window*, align 8
  %10 = alloca %strings.Builder*, align 8
  %11 = alloca %..string, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Element* %0, %src.Element** %4, align 8
  store i64 %1, i64* %5, align 8
  store i64 %2, i64* %6, align 8
  store i8* %3, i8** %7, align 8
  %12 = bitcast i8* %__.context_ptr to %runtime.Context*
  %13 = load %src.Element*, %src.Element** %4, align 8
  %14 = bitcast %src.Element* %13 to %src.Button*
  store %src.Button* %14, %src.Button** %8, align 8
  %15 = load i64, i64* %5, align 8
  %16 = icmp eq i64 %15, 22
  %17 = zext i1 %16 to i8
  %18 = trunc i8 %17 to i1
  br i1 %18, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  %19 = load %src.Element*, %src.Element** %4, align 8
  %20 = getelementptr inbounds %src.Element, %src.Element* %19, i32 0, i32 4
  %21 = load %src.Window*, %src.Window** %20, align 8
  store %src.Window* %21, %src.Window** %9, align 8
  %22 = load %src.Window*, %src.Window** %9, align 8
  %23 = getelementptr inbounds %src.Window, %src.Window* %22, i32 0, i32 41
  store %strings.Builder* %23, %strings.Builder** %10, align 8
  %24 = load %strings.Builder*, %strings.Builder** %10, align 8
  %25 = bitcast %runtime.Context* %12 to i8*
  call void @strings.builder_reset(%strings.Builder* %24, i8* %25)
  %26 = load %strings.Builder*, %strings.Builder** %10, align 8
  %27 = load %src.Button*, %src.Button** %8, align 8
  %28 = getelementptr inbounds %src.Button, %src.Button* %27, i32 0, i32 1
  %29 = load %strings.Builder, %strings.Builder* %28, align 8
  %30 = bitcast %runtime.Context* %12 to i8*
  %31 = call { i64, i64 } @strings.to_string(%strings.Builder* %28, i8* %30)
  %32 = bitcast %..string* %11 to { i64, i64 }*
  store { i64, i64 } %31, { i64, i64 }* %32, align 8
  %33 = load %..string, %..string* %11, align 8
  %34 = bitcast %..string* %11 to { i64, i64 }*
  %35 = load { i64, i64 }, { i64, i64 }* %34, align 8
  %36 = bitcast %runtime.Context* %12 to i8*
  %37 = call i64 @strings.write_string(%strings.Builder* %26, { i64, i64 } %35, i8* %36)
  %38 = load %src.Window*, %src.Window** %9, align 8
  %39 = getelementptr inbounds %src.Window, %src.Window* %38, i32 0, i32 39
  store i8 1, i8* %39, align 1
  br label %if.done

if.done:                                          ; preds = %if.then, %entry
  ret i64 0
}

define internal { i64, i64 } @src.dialog_spawn(%src.Window* %0, { i64, i64 } %1, { i64, i64 } %2, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %3 = alloca %src.Window*, align 8
  %4 = alloca %..string, align 8
  %5 = alloca { %..string*, i64 }, align 8
  %6 = alloca { i64, i64 }, align 8
  %7 = alloca %src.Panel*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %src.Element*, align 8
  %10 = alloca %src.Button*, align 8
  %11 = alloca %src.Button*, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca %src.Panel*, align 8
  %15 = alloca %cutf8.Decode_State, align 8
  %16 = alloca i32, align 4
  %17 = alloca i64, align 8
  %18 = alloca { i32, i64, i8 }, align 8
  %19 = alloca i32, align 4
  %20 = alloca i64, align 8
  %21 = alloca i32, align 4
  %22 = alloca i64, align 8
  %23 = alloca i64, align 8
  %24 = alloca { i32, i64, i8 }, align 8
  %25 = alloca %..string, align 8
  %26 = alloca { i64, i64 }, align 8
  %27 = alloca %src.Button*, align 8
  %28 = alloca %..string, align 8
  %29 = alloca { i64, i64 }, align 8
  %30 = alloca i64, align 8
  %31 = alloca i64, align 8
  %32 = alloca i8, align 1
  %33 = alloca i32, align 4
  %34 = alloca { i32, i64, i8 }, align 8
  %35 = alloca i32, align 4
  %36 = alloca %..string, align 8
  %37 = alloca { i64, i64 }, align 8
  %38 = alloca %..string, align 8
  %39 = alloca i64, align 8
  %40 = alloca %src.Element*, align 8
  %41 = alloca %src.Element*, align 8
  %42 = alloca i64, align 8
  %43 = alloca %src.Element*, align 8
  %44 = alloca i32, align 4
  %45 = alloca %..string, align 8
  %46 = alloca %..string, align 8
  %47 = alloca { i64, i64 }, align 8
  %48 = alloca %..string, align 8
  %49 = alloca { i64, i64 }, align 8
  %50 = alloca %..string, align 8
  %51 = alloca %src.Element*, align 8
  %52 = alloca i64, align 8
  %53 = alloca %src.Element*, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Window* %0, %src.Window** %3, align 8
  %54 = bitcast %..string* %4 to { i64, i64 }*
  store { i64, i64 } %1, { i64, i64 }* %54, align 8
  %55 = load %..string, %..string* %4, align 8
  %56 = bitcast { %..string*, i64 }* %5 to { i64, i64 }*
  store { i64, i64 } %2, { i64, i64 }* %56, align 8
  %57 = load { %..string*, i64 }, { %..string*, i64 }* %5, align 8
  %58 = bitcast i8* %__.context_ptr to %runtime.Context*
  %59 = load %src.Window*, %src.Window** %3, align 8
  %60 = getelementptr inbounds %src.Window, %src.Window* %59, i32 0, i32 38
  %61 = load %src.Element*, %src.Element** %60, align 8
  %62 = icmp ne %src.Element* %61, null
  %63 = zext i1 %62 to i8
  %64 = trunc i8 %63 to i1
  br i1 %64, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  %65 = bitcast { i64, i64 }* %6 to %..string*
  store %..string zeroinitializer, %..string* %65, align 8
  %66 = load { i64, i64 }, { i64, i64 }* %6, align 8
  ret { i64, i64 } %66

if.done:                                          ; preds = %entry
  %67 = load %src.Window*, %src.Window** %3, align 8
  %68 = getelementptr inbounds %src.Window, %src.Window* %67, i32 0, i32 38
  %69 = load %src.Window*, %src.Window** %3, align 8
  %70 = getelementptr inbounds %src.Window, %src.Window* %69, i32 0, i32 0
  %71 = getelementptr inbounds %runtime.Context, %runtime.Context* %58, i32 0, i32 0
  %72 = load %runtime.Allocator, %runtime.Allocator* %71, align 8
  %73 = bitcast %runtime.Allocator* %71 to { i64, i64 }*
  %74 = load { i64, i64 }, { i64, i64 }* %73, align 8
  %75 = bitcast %runtime.Context* %58 to i8*
  %76 = call %src.Element* @src.element_init-48739(%src.Element* %70, i32 0, i8* bitcast (i64 (%src.Element*, i64, i64, i8*, i8*)* @src.dialog_message to i8*), i64 -1, { i64, i64 } %74, i8* %75)
  store %src.Element* %76, %src.Element** %68, align 8
  %77 = load %src.Window*, %src.Window** %3, align 8
  %78 = getelementptr inbounds %src.Window, %src.Window* %77, i32 0, i32 38
  %79 = load %src.Element*, %src.Element** %78, align 8
  %80 = bitcast i64* %8 to [4 x i8]*
  store [4 x i8] zeroinitializer, [4 x i8]* %80, align 1
  %81 = load i64, i64* %8, align 8
  %82 = bitcast %runtime.Context* %58 to i8*
  %83 = call %src.Panel* @src.panel_init(%src.Element* %79, i32 66048, float 5.000000e+00, float 5.000000e+00, i64 %81, i8* %82)
  store %src.Panel* %83, %src.Panel** %7, align 8
  %84 = load %src.Panel*, %src.Panel** %7, align 8
  %85 = getelementptr inbounds %src.Panel, %src.Panel* %84, i32 0, i32 12
  store i64 2, i64* %85, align 8
  %86 = load %src.Panel*, %src.Panel** %7, align 8
  %87 = getelementptr inbounds %src.Panel, %src.Panel* %86, i32 0, i32 8
  store i8 1, i8* %87, align 1
  %88 = load %src.Panel*, %src.Panel** %7, align 8
  %89 = getelementptr inbounds %src.Panel, %src.Panel* %88, i32 0, i32 9
  store i8 1, i8* %89, align 1
  %90 = load %src.Window*, %src.Window** %3, align 8
  %91 = getelementptr inbounds %src.Window, %src.Window* %90, i32 0, i32 38
  %92 = load %src.Element*, %src.Element** %91, align 8
  %93 = getelementptr inbounds %src.Element, %src.Element* %92, i32 0, i32 9
  store i64 255, i64* %93, align 8
  store %src.Element* null, %src.Element** %9, align 8
  store %src.Button* null, %src.Button** %10, align 8
  store %src.Button* null, %src.Button** %11, align 8
  store i64 0, i64* %12, align 8
  store i64 0, i64* %13, align 8
  store %src.Panel* null, %src.Panel** %14, align 8
  %94 = bitcast %cutf8.Decode_State* %15 to i8*
  call void @llvm.memset.p0i8.i64(i8* %94, i8 0, i64 32, i1 false)
  store i32 0, i32* %16, align 4
  store i64 0, i64* %17, align 8
  br label %for.tuple.loop

for.tuple.loop:                                   ; preds = %if.done27, %if.then4, %if.done
  %95 = load %..string, %..string* %4, align 8
  %96 = bitcast %..string* %4 to { i64, i64 }*
  %97 = load { i64, i64 }, { i64, i64 }* %96, align 8
  %98 = bitcast { i32, i64, i8 }* %18 to i8*
  call void @llvm.memset.p0i8.i64(i8* %98, i8 0, i64 24, i1 false)
  %99 = bitcast %runtime.Context* %58 to i8*
  call void @cutf8.ds_iter({ i32, i64, i8 }* sret %18, %cutf8.Decode_State* %15, { i64, i64 } %97, i8* %99)
  %100 = load { i32, i64, i8 }, { i32, i64, i8 }* %18, align 8
  %101 = getelementptr inbounds { i32, i64, i8 }, { i32, i64, i8 }* %18, i32 0, i32 2
  %102 = load i8, i8* %101, align 1
  %103 = trunc i8 %102 to i1
  br i1 %103, label %for.tuple.body, label %for.tuple.done28

for.tuple.body:                                   ; preds = %for.tuple.loop
  %104 = getelementptr inbounds { i32, i64, i8 }, { i32, i64, i8 }* %18, i32 0, i32 0
  %105 = load i32, i32* %104, align 4
  %106 = getelementptr inbounds { i32, i64, i8 }, { i32, i64, i8 }* %18, i32 0, i32 1
  %107 = load i64, i64* %106, align 8
  store i32 %105, i32* %19, align 4
  store i64 %107, i64* %20, align 8
  %108 = load i32, i32* %19, align 4
  store i32 %108, i32* %21, align 4
  %109 = load i64, i64* %20, align 8
  store i64 %109, i64* %22, align 8
  %110 = load i64, i64* %22, align 8
  %111 = icmp eq i64 %110, 0
  %112 = zext i1 %111 to i8
  %113 = trunc i8 %112 to i1
  br i1 %113, label %if.then1, label %cmp.or

cmp.or:                                           ; preds = %for.tuple.body
  %114 = load i32, i32* %21, align 4
  %115 = icmp eq i32 %114, 10
  %116 = zext i1 %115 to i8
  %117 = trunc i8 %116 to i1
  br i1 %117, label %if.then1, label %if.done2

if.then1:                                         ; preds = %cmp.or, %for.tuple.body
  %118 = load %src.Panel*, %src.Panel** %7, align 8
  %119 = getelementptr inbounds %src.Panel, %src.Panel* %118, i32 0, i32 0
  %120 = bitcast i64* %23 to [4 x i8]*
  store [4 x i8] zeroinitializer, [4 x i8]* %120, align 1
  %121 = load i64, i64* %23, align 8
  %122 = bitcast %runtime.Context* %58 to i8*
  %123 = call %src.Panel* @src.panel_init(%src.Element* %119, i32 8320, float 0.000000e+00, float 5.000000e+00, i64 %121, i8* %122)
  store %src.Panel* %123, %src.Panel** %14, align 8
  br label %if.done2

if.done2:                                         ; preds = %if.then1, %cmp.or
  %124 = load i32, i32* %21, align 4
  %125 = icmp eq i32 %124, 32
  %126 = zext i1 %125 to i8
  %127 = trunc i8 %126 to i1
  br i1 %127, label %if.then4, label %cmp.or3

cmp.or3:                                          ; preds = %if.done2
  %128 = load i32, i32* %21, align 4
  %129 = icmp eq i32 %128, 10
  %130 = zext i1 %129 to i8
  %131 = trunc i8 %130 to i1
  br i1 %131, label %if.then4, label %if.done5

if.then4:                                         ; preds = %cmp.or3, %if.done2
  br label %for.tuple.loop

unreachable:                                      ; No predecessors!
  br label %if.done5

if.done5:                                         ; preds = %unreachable, %cmp.or3
  %132 = load i32, i32* %21, align 4
  %133 = icmp eq i32 %132, 37
  %134 = zext i1 %133 to i8
  %135 = trunc i8 %134 to i1
  br i1 %135, label %if.then6, label %if.else

if.then6:                                         ; preds = %if.done5
  %136 = load %..string, %..string* %4, align 8
  %137 = bitcast %..string* %4 to { i64, i64 }*
  %138 = load { i64, i64 }, { i64, i64 }* %137, align 8
  %139 = bitcast { i32, i64, i8 }* %24 to i8*
  call void @llvm.memset.p0i8.i64(i8* %139, i8 0, i64 24, i1 false)
  %140 = bitcast %runtime.Context* %58 to i8*
  call void @cutf8.ds_iter({ i32, i64, i8 }* sret %24, %cutf8.Decode_State* %15, { i64, i64 } %138, i8* %140)
  %141 = load { i32, i64, i8 }, { i32, i64, i8 }* %24, align 8
  %142 = getelementptr inbounds { i32, i64, i8 }, { i32, i64, i8 }* %24, i32 0, i32 0
  %143 = load i32, i32* %142, align 4
  %144 = getelementptr inbounds { i32, i64, i8 }, { i32, i64, i8 }* %24, i32 0, i32 1
  %145 = load i64, i64* %144, align 8
  %146 = getelementptr inbounds { i32, i64, i8 }, { i32, i64, i8 }* %24, i32 0, i32 2
  %147 = load i8, i8* %146, align 1
  store i32 %143, i32* %21, align 4
  store i64 %145, i64* %22, align 8
  %148 = load i32, i32* %21, align 4
  switch i32 %148, label %switch.done [
    i32 98, label %switch.case.body
    i32 66, label %switch.case.body
    i32 67, label %switch.case.body
    i32 102, label %switch.case.body13
    i32 108, label %switch.case.body14
    i32 115, label %switch.case.body15
  ]

switch.case.body:                                 ; preds = %if.then6, %if.then6, %if.then6
  %149 = load { %..string*, i64 }, { %..string*, i64 }* %5, align 8
  %150 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %5, i32 0, i32 0
  %151 = load %..string*, %..string** %150, align 8
  %152 = load i64, i64* %13, align 8
  %153 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %5, i32 0, i32 1
  %154 = load i64, i64* %153, align 8
  %155 = bitcast { i64, i64 }* %26 to %..string*
  store %..string { i8* getelementptr inbounds ([57 x i8], [57 x i8]* @"csbs$19a", i64 0, i64 0), i64 56 }, %..string* %155, align 8
  %156 = load { i64, i64 }, { i64, i64 }* %26, align 8
  call void @runtime.bounds_check_error({ i64, i64 } %156, i32 1319, i32 19, i64 %152, i64 %154)
  %157 = getelementptr %..string, %..string* %151, i64 %152
  %158 = load %..string, %..string* %157, align 8
  store %..string %158, %..string* %25, align 8
  %159 = load i64, i64* %13, align 8
  %160 = add i64 %159, 1
  store i64 %160, i64* %13, align 8
  %161 = load %src.Panel*, %src.Panel** %14, align 8
  %162 = load %..string, %..string* %25, align 8
  %163 = getelementptr inbounds %src.Panel, %src.Panel* %161, i32 0, i32 0
  %164 = bitcast %..string* %25 to { i64, i64 }*
  %165 = load { i64, i64 }, { i64, i64 }* %164, align 8
  %166 = bitcast %runtime.Context* %58 to i8*
  %167 = call %src.Button* @src.button_init(%src.Element* %163, i32 0, { i64, i64 } %165, i8* null, i8* %166)
  store %src.Button* %167, %src.Button** %27, align 8
  %168 = load %src.Button*, %src.Button** %27, align 8
  %169 = getelementptr inbounds %src.Button, %src.Button* %168, i32 0, i32 0
  %170 = getelementptr inbounds %src.Element, %src.Element* %169, i32 0, i32 8
  store i8* bitcast (i64 (%src.Element*, i64, i64, i8*, i8*)* @src.dialog_button_message to i8*), i8** %170, align 8
  %171 = load i32, i32* %21, align 4
  %172 = icmp eq i32 %171, 66
  %173 = zext i1 %172 to i8
  %174 = trunc i8 %173 to i1
  br i1 %174, label %if.then7, label %if.done8

if.then7:                                         ; preds = %switch.case.body
  %175 = load %src.Button*, %src.Button** %27, align 8
  store %src.Button* %175, %src.Button** %11, align 8
  br label %if.done8

if.done8:                                         ; preds = %if.then7, %switch.case.body
  %176 = load i32, i32* %21, align 4
  %177 = icmp eq i32 %176, 67
  %178 = zext i1 %177 to i8
  %179 = trunc i8 %178 to i1
  br i1 %179, label %if.then9, label %if.done10

if.then9:                                         ; preds = %if.done8
  %180 = load %src.Button*, %src.Button** %27, align 8
  store %src.Button* %180, %src.Button** %10, align 8
  br label %if.done10

if.done10:                                        ; preds = %if.then9, %if.done8
  %181 = load %src.Element*, %src.Element** %9, align 8
  %182 = icmp eq %src.Element* %181, null
  %183 = zext i1 %182 to i8
  %184 = trunc i8 %183 to i1
  br i1 %184, label %if.then11, label %if.done12

if.then11:                                        ; preds = %if.done10
  %185 = load %src.Button*, %src.Button** %27, align 8
  %186 = getelementptr inbounds %src.Button, %src.Button* %185, i32 0, i32 0
  store %src.Element* %186, %src.Element** %9, align 8
  br label %if.done12

if.done12:                                        ; preds = %if.then11, %if.done10
  %187 = load i64, i64* %12, align 8
  %188 = add i64 %187, 1
  store i64 %188, i64* %12, align 8
  br label %switch.done

switch.case.body13:                               ; preds = %if.then6
  %189 = load %src.Panel*, %src.Panel** %14, align 8
  %190 = load float, float* @src.LINE_WIDTH, align 4
  %191 = getelementptr inbounds %src.Panel, %src.Panel* %189, i32 0, i32 0
  %192 = bitcast %runtime.Context* %58 to i8*
  %193 = call %src.Spacer* @src.spacer_init(%src.Element* %191, i32 128, float 0.000000e+00, float %190, i64 0, i1 false, i8* %192)
  br label %switch.done

switch.case.body14:                               ; preds = %if.then6
  %194 = load %src.Panel*, %src.Panel** %14, align 8
  %195 = load float, float* @src.LINE_WIDTH, align 4
  %196 = getelementptr inbounds %src.Panel, %src.Panel* %194, i32 0, i32 0
  %197 = bitcast %runtime.Context* %58 to i8*
  %198 = call %src.Spacer* @src.spacer_init(%src.Element* %196, i32 128, float 0.000000e+00, float %195, i64 1, i1 false, i8* %197)
  br label %switch.done

switch.case.body15:                               ; preds = %if.then6
  %199 = load { %..string*, i64 }, { %..string*, i64 }* %5, align 8
  %200 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %5, i32 0, i32 0
  %201 = load %..string*, %..string** %200, align 8
  %202 = load i64, i64* %13, align 8
  %203 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %5, i32 0, i32 1
  %204 = load i64, i64* %203, align 8
  %205 = bitcast { i64, i64 }* %29 to %..string*
  store %..string { i8* getelementptr inbounds ([57 x i8], [57 x i8]* @"csbs$19a", i64 0, i64 0), i64 56 }, %..string* %205, align 8
  %206 = load { i64, i64 }, { i64, i64 }* %29, align 8
  call void @runtime.bounds_check_error({ i64, i64 } %206, i32 1351, i32 19, i64 %202, i64 %204)
  %207 = getelementptr %..string, %..string* %201, i64 %202
  %208 = load %..string, %..string* %207, align 8
  store %..string %208, %..string* %28, align 8
  %209 = load i64, i64* %13, align 8
  %210 = add i64 %209, 1
  store i64 %210, i64* %13, align 8
  %211 = load %src.Panel*, %src.Panel** %14, align 8
  %212 = load %..string, %..string* %28, align 8
  %213 = getelementptr inbounds %src.Panel, %src.Panel* %211, i32 0, i32 0
  %214 = bitcast %..string* %28 to { i64, i64 }*
  %215 = load { i64, i64 }, { i64, i64 }* %214, align 8
  %216 = bitcast %runtime.Context* %58 to i8*
  %217 = call %src.Label* @src.label_init(%src.Element* %213, i32 0, { i64, i64 } %215, float -1.000000e+00, i8* %216)
  br label %switch.done

switch.done:                                      ; preds = %switch.case.body15, %switch.case.body14, %switch.case.body13, %if.done12, %if.then6
  br label %if.done27

if.else:                                          ; preds = %if.done5
  %218 = getelementptr inbounds %cutf8.Decode_State, %cutf8.Decode_State* %15, i32 0, i32 3
  %219 = load i64, i64* %218, align 8
  store i64 %219, i64* %30, align 8
  %220 = getelementptr inbounds %cutf8.Decode_State, %cutf8.Decode_State* %15, i32 0, i32 2
  %221 = load i64, i64* %220, align 8
  store i64 %221, i64* %31, align 8
  store i8 0, i8* %32, align 1
  store i32 0, i32* %33, align 4
  br label %for.tuple.loop16

for.tuple.loop16:                                 ; preds = %if.done21, %if.else
  %222 = load %..string, %..string* %4, align 8
  %223 = bitcast %..string* %4 to { i64, i64 }*
  %224 = load { i64, i64 }, { i64, i64 }* %223, align 8
  %225 = bitcast { i32, i64, i8 }* %34 to i8*
  call void @llvm.memset.p0i8.i64(i8* %225, i8 0, i64 24, i1 false)
  %226 = bitcast %runtime.Context* %58 to i8*
  call void @cutf8.ds_iter({ i32, i64, i8 }* sret %34, %cutf8.Decode_State* %15, { i64, i64 } %224, i8* %226)
  %227 = load { i32, i64, i8 }, { i32, i64, i8 }* %34, align 8
  %228 = getelementptr inbounds { i32, i64, i8 }, { i32, i64, i8 }* %34, i32 0, i32 2
  %229 = load i8, i8* %228, align 1
  %230 = trunc i8 %229 to i1
  br i1 %230, label %for.tuple.body17, label %for.tuple.done

for.tuple.body17:                                 ; preds = %for.tuple.loop16
  %231 = getelementptr inbounds { i32, i64, i8 }, { i32, i64, i8 }* %34, i32 0, i32 0
  %232 = load i32, i32* %231, align 4
  %233 = getelementptr inbounds { i32, i64, i8 }, { i32, i64, i8 }* %34, i32 0, i32 1
  %234 = load i64, i64* %233, align 8
  store i32 %232, i32* %35, align 4
  %235 = getelementptr inbounds %cutf8.Decode_State, %cutf8.Decode_State* %15, i32 0, i32 2
  %236 = load i64, i64* %235, align 8
  store i64 %236, i64* %31, align 8
  %237 = load i32, i32* %35, align 4
  %238 = icmp eq i32 %237, 37
  %239 = zext i1 %238 to i8
  %240 = trunc i8 %239 to i1
  br i1 %240, label %if.then19, label %cmp.or18

cmp.or18:                                         ; preds = %for.tuple.body17
  %241 = load i32, i32* %35, align 4
  %242 = icmp eq i32 %241, 10
  %243 = zext i1 %242 to i8
  %244 = trunc i8 %243 to i1
  br i1 %244, label %if.then19, label %if.done21

if.then19:                                        ; preds = %cmp.or18, %for.tuple.body17
  store i8 1, i8* %32, align 1
  br label %for.tuple.done

unreachable20:                                    ; No predecessors!
  br label %if.done21

if.done21:                                        ; preds = %unreachable20, %cmp.or18
  br label %for.tuple.loop16

for.tuple.done:                                   ; preds = %if.then19, %for.tuple.loop16
  %245 = load i64, i64* %30, align 8
  %246 = load i64, i64* %31, align 8
  %247 = load i8, i8* %32, align 1
  %248 = trunc i8 %247 to i1
  br i1 %248, label %if.then22, label %if.else23

if.then22:                                        ; preds = %for.tuple.done
  br label %if.done24

if.else23:                                        ; preds = %for.tuple.done
  br label %if.done24

if.done24:                                        ; preds = %if.else23, %if.then22
  %249 = phi i64 [ 1, %if.then22 ], [ 0, %if.else23 ]
  %250 = sub i64 %246, %249
  %251 = load %..string, %..string* %4, align 8
  %252 = getelementptr inbounds %..string, %..string* %4, i32 0, i32 1
  %253 = load i64, i64* %252, align 8
  %254 = bitcast { i64, i64 }* %37 to %..string*
  store %..string { i8* getelementptr inbounds ([57 x i8], [57 x i8]* @"csbs$19a", i64 0, i64 0), i64 56 }, %..string* %254, align 8
  %255 = load { i64, i64 }, { i64, i64 }* %37, align 8
  call void @runtime.slice_expr_error_lo_hi({ i64, i64 } %255, i32 1371, i32 18, i64 %245, i64 %250, i64 %253)
  %256 = getelementptr inbounds %..string, %..string* %4, i32 0, i32 0
  %257 = load i8*, i8** %256, align 8
  %258 = getelementptr i8, i8* %257, i64 %245
  %259 = sub i64 %250, %245
  %260 = getelementptr inbounds %..string, %..string* %38, i32 0, i32 0
  store i8* %258, i8** %260, align 8
  %261 = getelementptr inbounds %..string, %..string* %38, i32 0, i32 1
  store i64 %259, i64* %261, align 8
  %262 = load %..string, %..string* %38, align 8
  store %..string %262, %..string* %36, align 8
  %263 = load %src.Panel*, %src.Panel** %14, align 8
  %264 = load %..string, %..string* %36, align 8
  %265 = getelementptr inbounds %src.Panel, %src.Panel* %263, i32 0, i32 0
  %266 = bitcast %..string* %36 to { i64, i64 }*
  %267 = load { i64, i64 }, { i64, i64 }* %266, align 8
  %268 = bitcast %runtime.Context* %58 to i8*
  %269 = call %src.Label* @src.label_init(%src.Element* %265, i32 2176, { i64, i64 } %267, float -1.000000e+00, i8* %268)
  %270 = load i8, i8* %32, align 1
  %271 = trunc i8 %270 to i1
  br i1 %271, label %if.then25, label %if.done26

if.then25:                                        ; preds = %if.done24
  %272 = load %src.Panel*, %src.Panel** %7, align 8
  %273 = getelementptr inbounds %src.Panel, %src.Panel* %272, i32 0, i32 0
  %274 = bitcast i64* %39 to [4 x i8]*
  store [4 x i8] zeroinitializer, [4 x i8]* %274, align 1
  %275 = load i64, i64* %39, align 8
  %276 = bitcast %runtime.Context* %58 to i8*
  %277 = call %src.Panel* @src.panel_init(%src.Element* %273, i32 8320, float 0.000000e+00, float 5.000000e+00, i64 %275, i8* %276)
  store %src.Panel* %277, %src.Panel** %14, align 8
  br label %if.done26

if.done26:                                        ; preds = %if.then25, %if.done24
  br label %if.done27

if.done27:                                        ; preds = %if.done26, %switch.done
  br label %for.tuple.loop

for.tuple.done28:                                 ; preds = %for.tuple.loop
  %278 = load %src.Window*, %src.Window** %3, align 8
  %279 = getelementptr inbounds %src.Window, %src.Window* %278, i32 0, i32 39
  store i8 0, i8* %279, align 1
  %280 = load %src.Window*, %src.Window** %3, align 8
  %281 = getelementptr inbounds %src.Window, %src.Window* %280, i32 0, i32 4
  %282 = load %src.Element*, %src.Element** %281, align 8
  store %src.Element* %282, %src.Element** %40, align 8
  %283 = load %src.Element*, %src.Element** %9, align 8
  %284 = icmp eq %src.Element* %283, null
  %285 = zext i1 %284 to i8
  %286 = trunc i8 %285 to i1
  br i1 %286, label %if.then29, label %if.else30

if.then29:                                        ; preds = %for.tuple.done28
  %287 = load %src.Window*, %src.Window** %3, align 8
  %288 = getelementptr inbounds %src.Window, %src.Window* %287, i32 0, i32 38
  %289 = load %src.Element*, %src.Element** %288, align 8
  br label %if.done31

if.else30:                                        ; preds = %for.tuple.done28
  %290 = load %src.Element*, %src.Element** %9, align 8
  br label %if.done31

if.done31:                                        ; preds = %if.else30, %if.then29
  %291 = phi %src.Element* [ %289, %if.then29 ], [ %290, %if.else30 ]
  %292 = bitcast %runtime.Context* %58 to i8*
  %293 = call i8 @src.element_focus(%src.Element* %291, i8* %292)
  store %src.Element* null, %src.Element** %41, align 8
  %294 = load %src.Window*, %src.Window** %3, align 8
  %295 = getelementptr inbounds %src.Window, %src.Window* %294, i32 0, i32 0
  %296 = getelementptr inbounds %src.Element, %src.Element* %295, i32 0, i32 3
  %297 = getelementptr inbounds { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %296, i32 0, i32 1
  store i64 -1, i64* %42, align 8
  br label %for.index.loop

for.index.loop:                                   ; preds = %if.done33, %if.done31
  %298 = load i64, i64* %42, align 8
  %299 = add i64 %298, 1
  store i64 %299, i64* %42, align 8
  %300 = load i64, i64* %297, align 8
  %301 = icmp slt i64 %299, %300
  br i1 %301, label %for.index.body, label %for.index.done

for.index.body:                                   ; preds = %for.index.loop
  %302 = load i64, i64* %42, align 8
  %303 = getelementptr inbounds { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %296, i32 0, i32 0
  %304 = load %src.Element**, %src.Element*** %303, align 8
  %305 = getelementptr %src.Element*, %src.Element** %304, i64 %302
  %306 = load %src.Element*, %src.Element** %305, align 8
  store %src.Element* %306, %src.Element** %43, align 8
  %307 = load %src.Element*, %src.Element** %43, align 8
  %308 = load %src.Window*, %src.Window** %3, align 8
  %309 = getelementptr inbounds %src.Window, %src.Window* %308, i32 0, i32 38
  %310 = load %src.Element*, %src.Element** %309, align 8
  %311 = icmp ne %src.Element* %307, %310
  %312 = zext i1 %311 to i8
  %313 = trunc i8 %312 to i1
  br i1 %313, label %if.then32, label %if.done33

if.then32:                                        ; preds = %for.index.body
  %314 = load %src.Element*, %src.Element** %43, align 8
  %315 = getelementptr inbounds %src.Element, %src.Element* %314, i32 0, i32 0
  %316 = bitcast %runtime.Context* %58 to i8*
  call void @runtime.incl_elem-48009(i32* %315, i64 4, i8* %316)
  br label %if.done33

if.done33:                                        ; preds = %if.then32, %for.index.body
  br label %for.index.loop

for.index.done:                                   ; preds = %for.index.loop
  %317 = load %src.Window*, %src.Window** %3, align 8
  %318 = bitcast %runtime.Context* %58 to i8*
  call void @src.window_flush_mouse_state(%src.Window* %317, i8* %318)
  %319 = load %src.Window*, %src.Window** %3, align 8
  %320 = getelementptr inbounds %src.Window, %src.Window* %319, i32 0, i32 2
  store %src.Element* null, %src.Element** %320, align 8
  %321 = load %src.Window*, %src.Window** %3, align 8
  %322 = getelementptr inbounds %src.Window, %src.Window* %321, i32 0, i32 1
  store %src.Element* null, %src.Element** %322, align 8
  %323 = load %src.Window*, %src.Window** %3, align 8
  %324 = getelementptr inbounds %src.Window, %src.Window* %323, i32 0, i32 22
  store i8 1, i8* %324, align 1
  %325 = bitcast %runtime.Context* %58 to i8*
  call void @src.gs_draw_and_cleanup(i8* %325)
  br label %for.loop

for.loop:                                         ; preds = %for.body, %for.index.done
  %326 = load %src.Window*, %src.Window** %3, align 8
  %327 = getelementptr inbounds %src.Window, %src.Window* %326, i32 0, i32 39
  %328 = load i8, i8* %327, align 1
  %329 = trunc i8 %328 to i1
  br i1 %329, label %for.done, label %for.body

for.body:                                         ; preds = %for.loop
  %330 = call i32 @SDL_WaitEvent(%sdl2.Event* null)
  store i32 %330, i32* %44, align 4
  %331 = bitcast %runtime.Context* %58 to i8*
  call void @src.gs_process_events(i8* %331)
  %332 = bitcast %runtime.Context* %58 to i8*
  call void @src.gs_draw_and_cleanup(i8* %332)
  br label %for.loop

for.done:                                         ; preds = %for.loop
  %333 = load %src.Window*, %src.Window** %3, align 8
  %334 = getelementptr inbounds %src.Window, %src.Window* %333, i32 0, i32 41
  %335 = load %strings.Builder, %strings.Builder* %334, align 8
  %336 = bitcast %runtime.Context* %58 to i8*
  %337 = call { i64, i64 } @strings.to_string(%strings.Builder* %334, i8* %336)
  %338 = bitcast %..string* %46 to { i64, i64 }*
  store { i64, i64 } %337, { i64, i64 }* %338, align 8
  %339 = load %..string, %..string* %46, align 8
  store %..string %339, %..string* %45, align 8
  %340 = load i64, i64* %12, align 8
  %341 = icmp eq i64 %340, 1
  %342 = zext i1 %341 to i8
  %343 = trunc i8 %342 to i1
  br i1 %343, label %cmp.and, label %if.done36

cmp.and:                                          ; preds = %for.done
  %344 = load %src.Button*, %src.Button** %11, align 8
  %345 = icmp ne %src.Button* %344, null
  %346 = zext i1 %345 to i8
  %347 = trunc i8 %346 to i1
  br i1 %347, label %cmp.and34, label %if.done36

cmp.and34:                                        ; preds = %cmp.and
  %348 = load %src.Button*, %src.Button** %10, align 8
  %349 = icmp eq %src.Button* %348, null
  %350 = zext i1 %349 to i8
  %351 = trunc i8 %350 to i1
  br i1 %351, label %if.then35, label %if.done36

if.then35:                                        ; preds = %cmp.and34
  %352 = load %src.Button*, %src.Button** %11, align 8
  store %src.Button* %352, %src.Button** %10, align 8
  br label %if.done36

if.done36:                                        ; preds = %if.then35, %cmp.and34, %cmp.and, %for.done
  %353 = load %..string, %..string* %45, align 8
  %354 = bitcast %..string* %45 to { i64, i64 }*
  %355 = load { i64, i64 }, { i64, i64 }* %354, align 8
  %356 = bitcast { i64, i64 }* %47 to %..string*
  store %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$33f", i64 0, i64 0), i64 2 }, %..string* %356, align 8
  %357 = load { i64, i64 }, { i64, i64 }* %47, align 8
  %358 = call i8 @runtime.string_eq({ i64, i64 } %355, { i64, i64 } %357)
  %359 = trunc i8 %358 to i1
  br i1 %359, label %cmp.and37, label %if.done39

cmp.and37:                                        ; preds = %if.done36
  %360 = load %src.Button*, %src.Button** %10, align 8
  %361 = icmp ne %src.Button* %360, null
  %362 = zext i1 %361 to i8
  %363 = trunc i8 %362 to i1
  br i1 %363, label %if.then38, label %if.done39

if.then38:                                        ; preds = %cmp.and37
  %364 = load %src.Button*, %src.Button** %10, align 8
  %365 = getelementptr inbounds %src.Button, %src.Button* %364, i32 0, i32 0
  %366 = bitcast %runtime.Context* %58 to i8*
  %367 = call i64 @src.element_message(%src.Element* %365, i64 22, i64 0, i8* null, i8* %366)
  %368 = load %src.Window*, %src.Window** %3, align 8
  %369 = getelementptr inbounds %src.Window, %src.Window* %368, i32 0, i32 41
  %370 = load %strings.Builder, %strings.Builder* %369, align 8
  %371 = bitcast %runtime.Context* %58 to i8*
  %372 = call { i64, i64 } @strings.to_string(%strings.Builder* %369, i8* %371)
  %373 = bitcast %..string* %48 to { i64, i64 }*
  store { i64, i64 } %372, { i64, i64 }* %373, align 8
  %374 = load %..string, %..string* %48, align 8
  store %..string %374, %..string* %45, align 8
  br label %if.done39

if.done39:                                        ; preds = %if.then38, %cmp.and37, %if.done36
  %375 = load %..string, %..string* %45, align 8
  %376 = bitcast %..string* %45 to { i64, i64 }*
  %377 = load { i64, i64 }, { i64, i64 }* %376, align 8
  %378 = bitcast { i64, i64 }* %49 to %..string*
  store %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$340", i64 0, i64 0), i64 2 }, %..string* %378, align 8
  %379 = load { i64, i64 }, { i64, i64 }* %49, align 8
  %380 = call i8 @runtime.string_eq({ i64, i64 } %377, { i64, i64 } %379)
  %381 = trunc i8 %380 to i1
  br i1 %381, label %cmp.and40, label %if.done42

cmp.and40:                                        ; preds = %if.done39
  %382 = load %src.Button*, %src.Button** %11, align 8
  %383 = icmp ne %src.Button* %382, null
  %384 = zext i1 %383 to i8
  %385 = trunc i8 %384 to i1
  br i1 %385, label %if.then41, label %if.done42

if.then41:                                        ; preds = %cmp.and40
  %386 = load %src.Button*, %src.Button** %11, align 8
  %387 = getelementptr inbounds %src.Button, %src.Button* %386, i32 0, i32 0
  %388 = bitcast %runtime.Context* %58 to i8*
  %389 = call i64 @src.element_message(%src.Element* %387, i64 22, i64 0, i8* null, i8* %388)
  %390 = load %src.Window*, %src.Window** %3, align 8
  %391 = getelementptr inbounds %src.Window, %src.Window* %390, i32 0, i32 41
  %392 = load %strings.Builder, %strings.Builder* %391, align 8
  %393 = bitcast %runtime.Context* %58 to i8*
  %394 = call { i64, i64 } @strings.to_string(%strings.Builder* %391, i8* %393)
  %395 = bitcast %..string* %50 to { i64, i64 }*
  store { i64, i64 } %394, { i64, i64 }* %395, align 8
  %396 = load %..string, %..string* %50, align 8
  store %..string %396, %..string* %45, align 8
  br label %if.done42

if.done42:                                        ; preds = %if.then41, %cmp.and40, %if.done39
  %397 = load %src.Window*, %src.Window** %3, align 8
  %398 = bitcast %runtime.Context* %58 to i8*
  call void @src.window_flush_mouse_state(%src.Window* %397, i8* %398)
  %399 = load %src.Window*, %src.Window** %3, align 8
  %400 = getelementptr inbounds %src.Window, %src.Window* %399, i32 0, i32 2
  store %src.Element* null, %src.Element** %400, align 8
  %401 = load %src.Window*, %src.Window** %3, align 8
  %402 = getelementptr inbounds %src.Window, %src.Window* %401, i32 0, i32 1
  store %src.Element* null, %src.Element** %402, align 8
  store %src.Element* null, %src.Element** %51, align 8
  %403 = load %src.Window*, %src.Window** %3, align 8
  %404 = getelementptr inbounds %src.Window, %src.Window* %403, i32 0, i32 0
  %405 = getelementptr inbounds %src.Element, %src.Element* %404, i32 0, i32 3
  %406 = getelementptr inbounds { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %405, i32 0, i32 1
  store i64 -1, i64* %52, align 8
  br label %for.index.loop43

for.index.loop43:                                 ; preds = %for.index.body44, %if.done42
  %407 = load i64, i64* %52, align 8
  %408 = add i64 %407, 1
  store i64 %408, i64* %52, align 8
  %409 = load i64, i64* %406, align 8
  %410 = icmp slt i64 %408, %409
  br i1 %410, label %for.index.body44, label %for.index.done45

for.index.body44:                                 ; preds = %for.index.loop43
  %411 = load i64, i64* %52, align 8
  %412 = getelementptr inbounds { %src.Element**, i64, i64, %runtime.Allocator }, { %src.Element**, i64, i64, %runtime.Allocator }* %405, i32 0, i32 0
  %413 = load %src.Element**, %src.Element*** %412, align 8
  %414 = getelementptr %src.Element*, %src.Element** %413, i64 %411
  %415 = load %src.Element*, %src.Element** %414, align 8
  store %src.Element* %415, %src.Element** %53, align 8
  %416 = load %src.Element*, %src.Element** %53, align 8
  %417 = getelementptr inbounds %src.Element, %src.Element* %416, i32 0, i32 0
  %418 = bitcast %runtime.Context* %58 to i8*
  call void @runtime.excl_elem-48031(i32* %417, i64 4, i8* %418)
  br label %for.index.loop43

for.index.done45:                                 ; preds = %for.index.loop43
  %419 = load %src.Window*, %src.Window** %3, align 8
  %420 = getelementptr inbounds %src.Window, %src.Window* %419, i32 0, i32 38
  %421 = load %src.Element*, %src.Element** %420, align 8
  %422 = bitcast %runtime.Context* %58 to i8*
  call void @src.element_destroy(%src.Element* %421, i8* %422)
  %423 = load %src.Window*, %src.Window** %3, align 8
  %424 = getelementptr inbounds %src.Window, %src.Window* %423, i32 0, i32 38
  store %src.Element* null, %src.Element** %424, align 8
  %425 = load %..string, %..string* %45, align 8
  %426 = bitcast %..string* %45 to { i64, i64 }*
  %427 = load { i64, i64 }, { i64, i64 }* %426, align 8
  br label %defer

defer:                                            ; preds = %for.index.done45
  %428 = load %src.Element*, %src.Element** %40, align 8
  %429 = icmp ne %src.Element* %428, null
  %430 = zext i1 %429 to i8
  %431 = trunc i8 %430 to i1
  br i1 %431, label %if.then46, label %if.done47

if.then46:                                        ; preds = %defer
  %432 = load %src.Element*, %src.Element** %40, align 8
  %433 = bitcast %runtime.Context* %58 to i8*
  %434 = call i8 @src.element_focus(%src.Element* %432, i8* %433)
  br label %if.done47

if.done47:                                        ; preds = %if.then46, %defer
  ret { i64, i64 } %427
}

define internal { i64, i64 } @src.clipboard_get_string({ i64, i64 } %0, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %1 = alloca %runtime.Allocator, align 8
  %2 = alloca i8*, align 8
  %3 = alloca %..string, align 8
  %4 = alloca %..string, align 8
  %5 = alloca %runtime.Source_Code_Location, align 8
  %6 = alloca %..string, align 8
  br label %entry

entry:                                            ; preds = %decls
  %7 = bitcast %runtime.Allocator* %1 to { i64, i64 }*
  store { i64, i64 } %0, { i64, i64 }* %7, align 8
  %8 = load %runtime.Allocator, %runtime.Allocator* %1, align 8
  %9 = bitcast i8* %__.context_ptr to %runtime.Context*
  %10 = call i8* @SDL_GetClipboardText()
  store i8* %10, i8** %2, align 8
  %11 = load i8*, i8** %2, align 8
  %12 = call { i64, i64 } @runtime.cstring_to_string(i8* %11)
  %13 = bitcast %..string* %4 to { i64, i64 }*
  store { i64, i64 } %12, { i64, i64 }* %13, align 8
  %14 = load %..string, %..string* %4, align 8
  %15 = load %runtime.Allocator, %runtime.Allocator* %1, align 8
  %16 = bitcast %..string* %4 to { i64, i64 }*
  %17 = load { i64, i64 }, { i64, i64 }* %16, align 8
  %18 = bitcast %runtime.Allocator* %1 to { i64, i64 }*
  %19 = load { i64, i64 }, { i64, i64 }* %18, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([57 x i8], [57 x i8]* @"csbs$19a", i64 0, i64 0), i64 56 }, i32 1455, i32 20, %..string { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @"csbs$341", i64 0, i64 0), i64 20 } }, %runtime.Source_Code_Location* %5, align 8
  %20 = bitcast %runtime.Context* %9 to i8*
  %21 = call { i64, i64 } @strings.clone({ i64, i64 } %17, { i64, i64 } %19, %runtime.Source_Code_Location* %5, i8* %20)
  %22 = bitcast %..string* %6 to { i64, i64 }*
  store { i64, i64 } %21, { i64, i64 }* %22, align 8
  %23 = load %..string, %..string* %6, align 8
  store %..string %23, %..string* %3, align 8
  %24 = load i8*, i8** %2, align 8
  call void @SDL_free(i8* %24)
  %25 = load %..string, %..string* %3, align 8
  %26 = bitcast %..string* %3 to { i64, i64 }*
  %27 = load { i64, i64 }, { i64, i64 }* %26, align 8
  ret { i64, i64 } %27
}

define internal i32 @src.clipboard_set_with_builder(%strings.Builder* %0, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %1 = alloca %strings.Builder*, align 8
  %2 = alloca i8*, align 8
  %3 = alloca %..string, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %strings.Builder* %0, %strings.Builder** %1, align 8
  %4 = bitcast i8* %__.context_ptr to %runtime.Context*
  %5 = load %strings.Builder*, %strings.Builder** %1, align 8
  %6 = bitcast %runtime.Context* %4 to i8*
  %7 = call i64 @strings.write_byte(%strings.Builder* %5, i8 0, i8* %6)
  %8 = load %strings.Builder*, %strings.Builder** %1, align 8
  %9 = load %strings.Builder, %strings.Builder* %8, align 8
  %10 = bitcast %runtime.Context* %4 to i8*
  %11 = call { i64, i64 } @strings.to_string(%strings.Builder* %8, i8* %10)
  %12 = bitcast %..string* %3 to { i64, i64 }*
  store { i64, i64 } %11, { i64, i64 }* %12, align 8
  %13 = load %..string, %..string* %3, align 8
  %14 = bitcast %..string* %3 to { i64, i64 }*
  %15 = load { i64, i64 }, { i64, i64 }* %14, align 8
  %16 = bitcast %runtime.Context* %4 to i8*
  %17 = call i8* @strings.unsafe_string_to_cstring({ i64, i64 } %15, i8* %16)
  store i8* %17, i8** %2, align 8
  %18 = load i8*, i8** %2, align 8
  %19 = call i32 @SDL_SetClipboardText(i8* %18)
  ret i32 %19
}

; Function Attrs: alwaysinline
define internal void @src.sdl_push_empty_event(i8* noalias nocapture nonnull %__.context_ptr) #4 {
decls:
  %0 = alloca %sdl2.Event, align 8
  br label %entry

entry:                                            ; preds = %decls
  %1 = bitcast i8* %__.context_ptr to %runtime.Context*
  %2 = bitcast %sdl2.Event* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* %2, i8 0, i64 56, i1 false)
  %3 = call i32 @SDL_PushEvent(%sdl2.Event* %0) #4
  ret void
}

define internal { i64, i64 } @src.bpath_temp({ i64, i64 } %0, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %1 = alloca %..string, align 8
  %2 = alloca %..any, align 8
  %3 = alloca %..any, align 8
  %4 = alloca { %..any*, i64 }, align 8
  %5 = alloca [2 x %..any], align 8
  %6 = alloca { i64, i64 }, align 8
  %7 = alloca %..string, align 8
  br label %entry

entry:                                            ; preds = %decls
  %8 = bitcast %..string* %1 to { i64, i64 }*
  store { i64, i64 } %0, { i64, i64 }* %8, align 8
  %9 = load %..string, %..string* %1, align 8
  %10 = bitcast i8* %__.context_ptr to %runtime.Context*
  %11 = load %..string, %..string* @src.default_base_path, align 8
  %12 = load %..string, %..string* %1, align 8
  %13 = bitcast %..any* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* %13, i8 0, i64 16, i1 false)
  %14 = getelementptr inbounds %..any, %..any* %2, i32 0, i32 0
  %15 = getelementptr inbounds %..any, %..any* %2, i32 0, i32 1
  store i8* bitcast (%..string* @src.default_base_path to i8*), i8** %14, align 8
  store i64 432345564227567633, i64* %15, align 8
  %16 = load %..any, %..any* %2, align 8
  %17 = bitcast %..any* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* %17, i8 0, i64 16, i1 false)
  %18 = bitcast %..string* %1 to i8*
  %19 = getelementptr inbounds %..any, %..any* %3, i32 0, i32 0
  %20 = getelementptr inbounds %..any, %..any* %3, i32 0, i32 1
  store i8* %18, i8** %19, align 8
  store i64 432345564227567633, i64* %20, align 8
  %21 = load %..any, %..any* %3, align 8
  %22 = bitcast { %..any*, i64 }* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* %22, i8 0, i64 16, i1 false)
  %23 = bitcast [2 x %..any]* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* %23, i8 0, i64 32, i1 false)
  %24 = getelementptr [2 x %..any], [2 x %..any]* %5, i64 0, i64 0
  store %..any %16, %..any* %24, align 8
  %25 = getelementptr [2 x %..any], [2 x %..any]* %5, i64 0, i64 1
  store %..any %21, %..any* %25, align 8
  %26 = getelementptr [2 x %..any], [2 x %..any]* %5, i64 0, i64 0
  %27 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %4, i32 0, i32 0
  store %..any* %26, %..any** %27, align 8
  %28 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %4, i32 0, i32 1
  store i64 2, i64* %28, align 8
  %29 = load { %..any*, i64 }, { %..any*, i64 }* %4, align 8
  %30 = bitcast { i64, i64 }* %6 to %..string*
  store %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$342", i64 0, i64 0), i64 4 }, %..string* %30, align 8
  %31 = load { i64, i64 }, { i64, i64 }* %6, align 8
  %32 = bitcast { %..any*, i64 }* %4 to { i64, i64 }*
  %33 = load { i64, i64 }, { i64, i64 }* %32, align 8
  %34 = bitcast %runtime.Context* %10 to i8*
  %35 = call { i64, i64 } @fmt.tprintf({ i64, i64 } %31, { i64, i64 } %33, i8* %34)
  %36 = bitcast %..string* %7 to { i64, i64 }*
  store { i64, i64 } %35, { i64, i64 }* %36, align 8
  %37 = load %..string, %..string* %7, align 8
  %38 = bitcast %..string* %7 to { i64, i64 }*
  %39 = load { i64, i64 }, { i64, i64 }* %38, align 8
  ret { i64, i64 } %39
}

define internal i8 @src.bpath_file_write({ i64, i64 } %0, { i64, i64 } %1, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %2 = alloca %..string, align 8
  %3 = alloca { i8*, i64 }, align 8
  %4 = alloca %..string, align 8
  br label %entry

entry:                                            ; preds = %decls
  %5 = bitcast %..string* %2 to { i64, i64 }*
  store { i64, i64 } %0, { i64, i64 }* %5, align 8
  %6 = load %..string, %..string* %2, align 8
  %7 = bitcast { i8*, i64 }* %3 to { i64, i64 }*
  store { i64, i64 } %1, { i64, i64 }* %7, align 8
  %8 = load { i8*, i64 }, { i8*, i64 }* %3, align 8
  %9 = bitcast i8* %__.context_ptr to %runtime.Context*
  %10 = load %..string, %..string* %2, align 8
  %11 = bitcast %..string* %2 to { i64, i64 }*
  %12 = load { i64, i64 }, { i64, i64 }* %11, align 8
  %13 = bitcast %runtime.Context* %9 to i8*
  %14 = call { i64, i64 } @src.bpath_temp({ i64, i64 } %12, i8* %13)
  %15 = bitcast %..string* %4 to { i64, i64 }*
  store { i64, i64 } %14, { i64, i64 }* %15, align 8
  %16 = load %..string, %..string* %4, align 8
  %17 = load { i8*, i64 }, { i8*, i64 }* %3, align 8
  %18 = bitcast %..string* %4 to { i64, i64 }*
  %19 = load { i64, i64 }, { i64, i64 }* %18, align 8
  %20 = bitcast { i8*, i64 }* %3 to { i64, i64 }*
  %21 = load { i64, i64 }, { i64, i64 }* %20, align 8
  %22 = bitcast %runtime.Context* %9 to i8*
  %23 = call i8 @os.write_entire_file({ i64, i64 } %19, { i64, i64 } %21, i1 true, i8* %22)
  ret i8 %23
}

define internal void @src.bpath_file_read({ { i8*, i64 }, i8 }* noalias sret %agg.result, { i64, i64 } %0, { i64, i64 } %1, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %2 = alloca %..string, align 8
  %3 = alloca %runtime.Allocator, align 8
  %4 = alloca %..string, align 8
  %5 = alloca { { i8*, i64 }, i8 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  %6 = bitcast %..string* %2 to { i64, i64 }*
  store { i64, i64 } %0, { i64, i64 }* %6, align 8
  %7 = load %..string, %..string* %2, align 8
  %8 = bitcast %runtime.Allocator* %3 to { i64, i64 }*
  store { i64, i64 } %1, { i64, i64 }* %8, align 8
  %9 = load %runtime.Allocator, %runtime.Allocator* %3, align 8
  %10 = bitcast i8* %__.context_ptr to %runtime.Context*
  %11 = load %..string, %..string* %2, align 8
  %12 = bitcast %..string* %2 to { i64, i64 }*
  %13 = load { i64, i64 }, { i64, i64 }* %12, align 8
  %14 = bitcast %runtime.Context* %10 to i8*
  %15 = call { i64, i64 } @src.bpath_temp({ i64, i64 } %13, i8* %14)
  %16 = bitcast %..string* %4 to { i64, i64 }*
  store { i64, i64 } %15, { i64, i64 }* %16, align 8
  %17 = load %..string, %..string* %4, align 8
  %18 = load %runtime.Allocator, %runtime.Allocator* %3, align 8
  %19 = bitcast %..string* %4 to { i64, i64 }*
  %20 = load { i64, i64 }, { i64, i64 }* %19, align 8
  %21 = bitcast %runtime.Allocator* %3 to { i64, i64 }*
  %22 = load { i64, i64 }, { i64, i64 }* %21, align 8
  %23 = bitcast { { i8*, i64 }, i8 }* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* %23, i8 0, i64 24, i1 false)
  %24 = bitcast %runtime.Context* %10 to i8*
  call void @os.read_entire_file_from_filename({ { i8*, i64 }, i8 }* sret %5, { i64, i64 } %20, { i64, i64 } %22, i8* %24)
  %25 = load { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %5, align 8
  %26 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %5, i32 0, i32 0
  %27 = load { i8*, i64 }, { i8*, i64 }* %26, align 8
  %28 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %5, i32 0, i32 1
  %29 = load i8, i8* %28, align 1
  %30 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 0
  %31 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 1
  store { i8*, i64 } %27, { i8*, i64 }* %30, align 8
  store i8 %29, i8* %31, align 1
  ret void
}

define internal void @src.main(i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %0 = alloca %runtime.Context, align 8
  %1 = alloca %src.Window*, align 8
  %2 = alloca %src.Panel*, align 8
  %3 = alloca i64, align 8
  %4 = alloca %src.Split_Pane*, align 8
  %5 = alloca { i64, i64 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  %6 = bitcast i8* %__.context_ptr to %runtime.Context*
  %7 = bitcast %runtime.Context* %6 to i8*
  call void @src.gs_init(i8* %7)
  %8 = load %runtime.Logger, %runtime.Logger* getelementptr inbounds (%src.Global_State, %src.Global_State* @src.gs, i64 0, i32 1), align 8
  %9 = load %runtime.Context, %runtime.Context* %6, align 8
  %10 = bitcast %runtime.Context* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* %10, i8 0, i64 96, i1 false)
  %11 = bitcast %runtime.Context* %0 to i8*
  %12 = bitcast %runtime.Context* %6 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %11, i8* align 1 %12, i64 96, i1 false)
  %13 = getelementptr inbounds %runtime.Context, %runtime.Context* %0, i32 0, i32 3
  store %runtime.Logger %8, %runtime.Logger* %13, align 8
  %14 = bitcast %runtime.Context* %0 to i8*
  call void @src.task_data_init(i8* %14)
  %15 = bitcast %runtime.Context* %0 to i8*
  %16 = call %src.Window* @src.window_init(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$343", i64 0, i64 0), i32 900, i32 900, i64 10485760, i8* %15)
  store %src.Window* %16, %src.Window** %1, align 8
  %17 = load %src.Window*, %src.Window** %1, align 8
  store %src.Window* %17, %src.Window** @src.window_main, align 8
  %18 = load %src.Window*, %src.Window** %1, align 8
  %19 = getelementptr inbounds %src.Window, %src.Window* %18, i32 0, i32 0
  %20 = getelementptr inbounds %src.Element, %src.Element* %19, i32 0, i32 8
  store i8* bitcast (i64 (%src.Element*, i64, i64, i8*, i8*)* @"src.main$anon-12" to i8*), i8** %20, align 8
  %21 = load %src.Window*, %src.Window** %1, align 8
  %22 = getelementptr inbounds %src.Window, %src.Window* %21, i32 0, i32 42
  store i8* bitcast (void (%src.Window*, i8*)* @"src.main$anon-13" to i8*), i8** %22, align 8
  %23 = load %src.Window*, %src.Window** %1, align 8
  %24 = bitcast %runtime.Context* %0 to i8*
  call void @src.add_shortcuts(%src.Window* %23, i8* %24)
  %25 = load %src.Window*, %src.Window** %1, align 8
  %26 = getelementptr inbounds %src.Window, %src.Window* %25, i32 0, i32 0
  %27 = bitcast i64* %3 to [4 x i8]*
  store [4 x i8] zeroinitializer, [4 x i8]* %27, align 1
  %28 = load i64, i64* %3, align 8
  %29 = bitcast %runtime.Context* %0 to i8*
  %30 = call %src.Panel* @src.panel_init(%src.Element* %26, i32 8704, float 0.000000e+00, float 0.000000e+00, i64 %28, i8* %29)
  store %src.Panel* %30, %src.Panel** %2, align 8
  %31 = load %src.Panel*, %src.Panel** %2, align 8
  %32 = getelementptr inbounds %src.Panel, %src.Panel* %31, i32 0, i32 0
  %33 = bitcast %runtime.Context* %0 to i8*
  %34 = call %src.Split_Pane* @src.sidebar_init(%src.Element* %32, i8* %33)
  store %src.Split_Pane* %34, %src.Split_Pane** %4, align 8
  %35 = load %src.Split_Pane*, %src.Split_Pane** %4, align 8
  %36 = bitcast %runtime.Context* %0 to i8*
  call void @src.task_panel_init(%src.Split_Pane* %35, i8* %36)
  %37 = load %src.Window*, %src.Window** %1, align 8
  %38 = bitcast %runtime.Context* %0 to i8*
  call void @src.goto_init(%src.Window* %37, i8* %38)
  %39 = load %src.Window*, %src.Window** %1, align 8
  %40 = bitcast %runtime.Context* %0 to i8*
  call void @src.drag_init(%src.Window* %39, i8* %40)
  %41 = bitcast %runtime.Context* %0 to i8*
  call void @src.tasks_load_file(i8* %41)
  %42 = bitcast { i64, i64 }* %5 to %..string*
  store %..string { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"csbs$344", i64 0, i64 0), i64 10 }, %..string* %42, align 8
  %43 = load { i64, i64 }, { i64, i64 }* %5, align 8
  %44 = bitcast %runtime.Context* %0 to i8*
  %45 = call i8 @src.json_load_misc({ i64, i64 } %43, i8* %44)
  %46 = bitcast %runtime.Context* %0 to i8*
  call void @src.gs_message_loop(i8* %46)
  br label %defer

defer:                                            ; preds = %entry
  %47 = bitcast %runtime.Context* %0 to i8*
  call void @src.task_data_destroy(i8* %47)
  ret void
}

define internal void @src.pattern_scanner_init(%src.Pattern_Scanner* noalias sret %agg.result, { i64, i64 } %0, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %1 = alloca %..string, align 8
  br label %entry

entry:                                            ; preds = %decls
  %2 = bitcast %..string* %1 to { i64, i64 }*
  store { i64, i64 } %0, { i64, i64 }* %2, align 8
  %3 = load %..string, %..string* %1, align 8
  %4 = bitcast i8* %__.context_ptr to %runtime.Context*
  %5 = getelementptr inbounds %src.Pattern_Scanner, %src.Pattern_Scanner* %agg.result, i32 0, i32 0
  %6 = load %..string, %..string* %1, align 8
  store %..string %6, %..string* %5, align 8
  %7 = getelementptr inbounds %src.Pattern_Scanner, %src.Pattern_Scanner* %agg.result, i32 0, i32 7
  store i64 -1, i64* %7, align 8
  %8 = getelementptr inbounds %src.Pattern_Scanner, %src.Pattern_Scanner* %agg.result, i32 0, i32 1
  store i32 -2, i32* %8, align 4
  %9 = load %src.Pattern_Scanner, %src.Pattern_Scanner* %agg.result, align 8
  %10 = bitcast %src.Pattern_Scanner* %agg.result to i8*
  %11 = bitcast %src.Pattern_Scanner* %agg.result to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %10, i8* align 1 %11, i64 144, i1 false)
  %12 = bitcast %src.Pattern_Scanner* %agg.result to i8*
  %13 = bitcast %src.Pattern_Scanner* %agg.result to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %12, i8* %13, i64 144, i1 false)
  ret void
}

define internal void @src.pattern_scanner_destroy(%src.Pattern_Scanner* %0, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %1 = alloca %runtime.Source_Code_Location, align 8
  br label %entry

entry:                                            ; preds = %decls
  %2 = bitcast i8* %__.context_ptr to %runtime.Context*
  %3 = getelementptr inbounds %src.Pattern_Scanner, %src.Pattern_Scanner* %0, i32 0, i32 11
  %4 = load { { i64*, i64 }, { i8*, i64, i64, %runtime.Allocator } }, { { i64*, i64 }, { i8*, i64, i64, %runtime.Allocator } }* %3, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([58 x i8], [58 x i8]* @"csbs$345", i64 0, i64 0), i64 57 }, i32 59, i32 2, %..string { i8* getelementptr inbounds ([24 x i8], [24 x i8]* @"csbs$346", i64 0, i64 0), i64 23 } }, %runtime.Source_Code_Location* %1, align 8
  %5 = bitcast %runtime.Context* %2 to i8*
  %6 = call i8 @runtime.delete_map-50115({ { i64*, i64 }, { i8*, i64, i64, %runtime.Allocator } }* %3, %runtime.Source_Code_Location* %1, i8* %5)
  ret void
}

define internal i32 @src.pattern_advance(%src.Pattern_Scanner* %0, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %1 = alloca %src.Pattern_Scanner*, align 8
  %2 = alloca i32, align 4
  %3 = alloca i64, align 8
  %4 = alloca { i64, i64 }, align 8
  %5 = alloca { i64, i64 }, align 8
  %6 = alloca %..string, align 8
  %7 = alloca { i32, i64 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Pattern_Scanner* %0, %src.Pattern_Scanner** %1, align 8
  %8 = bitcast i8* %__.context_ptr to %runtime.Context*
  %9 = load %src.Pattern_Scanner*, %src.Pattern_Scanner** %1, align 8
  %10 = getelementptr inbounds %src.Pattern_Scanner, %src.Pattern_Scanner* %9, i32 0, i32 3
  %11 = load i64, i64* %10, align 8
  %12 = load %src.Pattern_Scanner*, %src.Pattern_Scanner** %1, align 8
  %13 = getelementptr inbounds %src.Pattern_Scanner, %src.Pattern_Scanner* %12, i32 0, i32 0
  %14 = load %..string, %..string* %13, align 8
  %15 = getelementptr inbounds %..string, %..string* %13, i32 0, i32 1
  %16 = load i64, i64* %15, align 8
  %17 = icmp sge i64 %11, %16
  %18 = zext i1 %17 to i8
  %19 = trunc i8 %18 to i1
  br i1 %19, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  %20 = load %src.Pattern_Scanner*, %src.Pattern_Scanner** %1, align 8
  %21 = getelementptr inbounds %src.Pattern_Scanner, %src.Pattern_Scanner* %20, i32 0, i32 5
  store i64 0, i64* %21, align 8
  ret i32 -1

if.done:                                          ; preds = %entry
  %22 = load %src.Pattern_Scanner*, %src.Pattern_Scanner** %1, align 8
  %23 = getelementptr inbounds %src.Pattern_Scanner, %src.Pattern_Scanner* %22, i32 0, i32 0
  %24 = load %..string, %..string* %23, align 8
  %25 = getelementptr inbounds %..string, %..string* %23, i32 0, i32 0
  %26 = load i8*, i8** %25, align 8
  %27 = getelementptr inbounds %..string, %..string* %23, i32 0, i32 1
  %28 = load i64, i64* %27, align 8
  %29 = load %src.Pattern_Scanner*, %src.Pattern_Scanner** %1, align 8
  %30 = getelementptr inbounds %src.Pattern_Scanner, %src.Pattern_Scanner* %29, i32 0, i32 3
  %31 = load i64, i64* %30, align 8
  %32 = bitcast { i64, i64 }* %4 to %..string*
  store %..string { i8* getelementptr inbounds ([58 x i8], [58 x i8]* @"csbs$345", i64 0, i64 0), i64 57 }, %..string* %32, align 8
  %33 = load { i64, i64 }, { i64, i64 }* %4, align 8
  call void @runtime.bounds_check_error({ i64, i64 } %33, i32 67, i32 28, i64 %31, i64 %28)
  %34 = getelementptr i8, i8* %26, i64 %31
  %35 = load i8, i8* %34, align 1
  %36 = zext i8 %35 to i32
  store i32 %36, i32* %2, align 4
  store i64 1, i64* %3, align 8
  %37 = load i32, i32* %2, align 4
  %38 = icmp sge i32 %37, 128
  %39 = zext i1 %38 to i8
  %40 = trunc i8 %39 to i1
  br i1 %40, label %if.then1, label %if.done4

if.then1:                                         ; preds = %if.done
  %41 = load %src.Pattern_Scanner*, %src.Pattern_Scanner** %1, align 8
  %42 = getelementptr inbounds %src.Pattern_Scanner, %src.Pattern_Scanner* %41, i32 0, i32 3
  %43 = load i64, i64* %42, align 8
  %44 = load %src.Pattern_Scanner*, %src.Pattern_Scanner** %1, align 8
  %45 = getelementptr inbounds %src.Pattern_Scanner, %src.Pattern_Scanner* %44, i32 0, i32 0
  %46 = load %..string, %..string* %45, align 8
  %47 = getelementptr inbounds %..string, %..string* %45, i32 0, i32 1
  %48 = load i64, i64* %47, align 8
  %49 = bitcast { i64, i64 }* %5 to %..string*
  store %..string { i8* getelementptr inbounds ([58 x i8], [58 x i8]* @"csbs$345", i64 0, i64 0), i64 57 }, %..string* %49, align 8
  %50 = load { i64, i64 }, { i64, i64 }* %5, align 8
  call void @runtime.slice_expr_error_lo_hi({ i64, i64 } %50, i32 70, i32 47, i64 %43, i64 %48, i64 %48)
  %51 = getelementptr inbounds %..string, %..string* %45, i32 0, i32 0
  %52 = load i8*, i8** %51, align 8
  %53 = getelementptr i8, i8* %52, i64 %43
  %54 = sub i64 %48, %43
  %55 = getelementptr inbounds %..string, %..string* %6, i32 0, i32 0
  store i8* %53, i8** %55, align 8
  %56 = getelementptr inbounds %..string, %..string* %6, i32 0, i32 1
  store i64 %54, i64* %56, align 8
  %57 = load %..string, %..string* %6, align 8
  %58 = bitcast %..string* %6 to { i64, i64 }*
  %59 = load { i64, i64 }, { i64, i64 }* %58, align 8
  %60 = bitcast %runtime.Context* %8 to i8*
  %61 = call { i64, i64 } @utf8.decode_rune_in_string({ i64, i64 } %59, i8* %60)
  %62 = bitcast { i32, i64 }* %7 to { i64, i64 }*
  store { i64, i64 } %61, { i64, i64 }* %62, align 8
  %63 = load { i32, i64 }, { i32, i64 }* %7, align 8
  %64 = getelementptr inbounds { i32, i64 }, { i32, i64 }* %7, i32 0, i32 0
  %65 = load i32, i32* %64, align 4
  %66 = getelementptr inbounds { i32, i64 }, { i32, i64 }* %7, i32 0, i32 1
  %67 = load i64, i64* %66, align 8
  store i32 %65, i32* %2, align 4
  store i64 %67, i64* %3, align 8
  %68 = load i32, i32* %2, align 4
  %69 = icmp eq i32 %68, 65533
  %70 = zext i1 %69 to i8
  %71 = trunc i8 %70 to i1
  br i1 %71, label %cmp.and, label %if.done3

cmp.and:                                          ; preds = %if.then1
  %72 = load i64, i64* %3, align 8
  %73 = icmp eq i64 %72, 1
  %74 = zext i1 %73 to i8
  %75 = trunc i8 %74 to i1
  br i1 %75, label %if.then2, label %if.done3

if.then2:                                         ; preds = %cmp.and
  %76 = load %src.Pattern_Scanner*, %src.Pattern_Scanner** %1, align 8
  %77 = getelementptr inbounds %src.Pattern_Scanner, %src.Pattern_Scanner* %76, i32 0, i32 3
  %78 = load i64, i64* %3, align 8
  %79 = load i64, i64* %77, align 8
  %80 = add i64 %79, %78
  store i64 %80, i64* %77, align 8
  %81 = load %src.Pattern_Scanner*, %src.Pattern_Scanner** %1, align 8
  %82 = getelementptr inbounds %src.Pattern_Scanner, %src.Pattern_Scanner* %81, i32 0, i32 5
  %83 = load i64, i64* %3, align 8
  store i64 %83, i64* %82, align 8
  %84 = load %src.Pattern_Scanner*, %src.Pattern_Scanner** %1, align 8
  %85 = getelementptr inbounds %src.Pattern_Scanner, %src.Pattern_Scanner* %84, i32 0, i32 9
  %86 = load i64, i64* %85, align 8
  %87 = add i64 %86, 1
  store i64 %87, i64* %85, align 8
  %88 = load i32, i32* %2, align 4
  ret i32 %88

if.done3:                                         ; preds = %cmp.and, %if.then1
  br label %if.done4

if.done4:                                         ; preds = %if.done3, %if.done
  %89 = load %src.Pattern_Scanner*, %src.Pattern_Scanner** %1, align 8
  %90 = getelementptr inbounds %src.Pattern_Scanner, %src.Pattern_Scanner* %89, i32 0, i32 3
  %91 = load i64, i64* %3, align 8
  %92 = load i64, i64* %90, align 8
  %93 = add i64 %92, %91
  store i64 %93, i64* %90, align 8
  %94 = load %src.Pattern_Scanner*, %src.Pattern_Scanner** %1, align 8
  %95 = getelementptr inbounds %src.Pattern_Scanner, %src.Pattern_Scanner* %94, i32 0, i32 5
  %96 = load i64, i64* %3, align 8
  store i64 %96, i64* %95, align 8
  %97 = load %src.Pattern_Scanner*, %src.Pattern_Scanner** %1, align 8
  %98 = getelementptr inbounds %src.Pattern_Scanner, %src.Pattern_Scanner* %97, i32 0, i32 9
  %99 = load i64, i64* %98, align 8
  %100 = add i64 %99, 1
  store i64 %100, i64* %98, align 8
  %101 = load i32, i32* %2, align 4
  switch i32 %101, label %switch.done [
    i32 0, label %switch.case.body
    i32 10, label %switch.case.body5
  ]

switch.case.body:                                 ; preds = %if.done4
  br label %switch.done

switch.case.body5:                                ; preds = %if.done4
  %102 = load %src.Pattern_Scanner*, %src.Pattern_Scanner** %1, align 8
  %103 = getelementptr inbounds %src.Pattern_Scanner, %src.Pattern_Scanner* %102, i32 0, i32 10
  %104 = load i64, i64* %103, align 8
  %105 = add i64 %104, 1
  store i64 %105, i64* %103, align 8
  %106 = load %src.Pattern_Scanner*, %src.Pattern_Scanner** %1, align 8
  %107 = getelementptr inbounds %src.Pattern_Scanner, %src.Pattern_Scanner* %106, i32 0, i32 6
  %108 = load %src.Pattern_Scanner*, %src.Pattern_Scanner** %1, align 8
  %109 = getelementptr inbounds %src.Pattern_Scanner, %src.Pattern_Scanner* %108, i32 0, i32 9
  %110 = load i64, i64* %109, align 8
  store i64 %110, i64* %107, align 8
  %111 = load %src.Pattern_Scanner*, %src.Pattern_Scanner** %1, align 8
  %112 = getelementptr inbounds %src.Pattern_Scanner, %src.Pattern_Scanner* %111, i32 0, i32 9
  store i64 0, i64* %112, align 8
  br label %switch.done

switch.done:                                      ; preds = %switch.case.body5, %switch.case.body, %if.done4
  %113 = load i32, i32* %2, align 4
  ret i32 %113
}

define internal i32 @src.pattern_next(%src.Pattern_Scanner* %0, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %1 = alloca %src.Pattern_Scanner*, align 8
  %2 = alloca i32, align 4
  br label %entry

entry:                                            ; preds = %decls
  store %src.Pattern_Scanner* %0, %src.Pattern_Scanner** %1, align 8
  %3 = bitcast i8* %__.context_ptr to %runtime.Context*
  %4 = load %src.Pattern_Scanner*, %src.Pattern_Scanner** %1, align 8
  %5 = getelementptr inbounds %src.Pattern_Scanner, %src.Pattern_Scanner* %4, i32 0, i32 7
  store i64 -1, i64* %5, align 8
  %6 = load %src.Pattern_Scanner*, %src.Pattern_Scanner** %1, align 8
  %7 = bitcast %runtime.Context* %3 to i8*
  %8 = call i32 @src.pattern_peek(%src.Pattern_Scanner* %6, i64 0, i8* %7)
  store i32 %8, i32* %2, align 4
  %9 = load i32, i32* %2, align 4
  %10 = icmp ne i32 %9, -1
  %11 = zext i1 %10 to i8
  %12 = trunc i8 %11 to i1
  br i1 %12, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  %13 = load %src.Pattern_Scanner*, %src.Pattern_Scanner** %1, align 8
  %14 = getelementptr inbounds %src.Pattern_Scanner, %src.Pattern_Scanner* %13, i32 0, i32 1
  %15 = load %src.Pattern_Scanner*, %src.Pattern_Scanner** %1, align 8
  %16 = bitcast %runtime.Context* %3 to i8*
  %17 = call i32 @src.pattern_advance(%src.Pattern_Scanner* %15, i8* %16)
  store i32 %17, i32* %14, align 4
  br label %if.done

if.done:                                          ; preds = %if.then, %entry
  %18 = load i32, i32* %2, align 4
  ret i32 %18
}

define internal i32 @src.pattern_peek(%src.Pattern_Scanner* %0, i64 %1, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %2 = alloca %src.Pattern_Scanner*, align 8
  %3 = alloca i64, align 8
  %4 = alloca i32, align 4
  %5 = alloca %src.Pattern_Scanner, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Pattern_Scanner* %0, %src.Pattern_Scanner** %2, align 8
  store i64 %1, i64* %3, align 8
  store i32 0, i32* %4, align 4
  %8 = bitcast i8* %__.context_ptr to %runtime.Context*
  %9 = load %src.Pattern_Scanner*, %src.Pattern_Scanner** %2, align 8
  %10 = getelementptr inbounds %src.Pattern_Scanner, %src.Pattern_Scanner* %9, i32 0, i32 1
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %11, -2
  %13 = zext i1 %12 to i8
  %14 = trunc i8 %13 to i1
  br i1 %14, label %if.then, label %if.done2

if.then:                                          ; preds = %entry
  %15 = load %src.Pattern_Scanner*, %src.Pattern_Scanner** %2, align 8
  %16 = getelementptr inbounds %src.Pattern_Scanner, %src.Pattern_Scanner* %15, i32 0, i32 1
  %17 = load %src.Pattern_Scanner*, %src.Pattern_Scanner** %2, align 8
  %18 = bitcast %runtime.Context* %8 to i8*
  %19 = call i32 @src.pattern_advance(%src.Pattern_Scanner* %17, i8* %18)
  store i32 %19, i32* %16, align 4
  %20 = load %src.Pattern_Scanner*, %src.Pattern_Scanner** %2, align 8
  %21 = getelementptr inbounds %src.Pattern_Scanner, %src.Pattern_Scanner* %20, i32 0, i32 1
  %22 = load i32, i32* %21, align 4
  %23 = icmp eq i32 %22, 65279
  %24 = zext i1 %23 to i8
  %25 = trunc i8 %24 to i1
  br i1 %25, label %if.then1, label %if.done

if.then1:                                         ; preds = %if.then
  %26 = load %src.Pattern_Scanner*, %src.Pattern_Scanner** %2, align 8
  %27 = getelementptr inbounds %src.Pattern_Scanner, %src.Pattern_Scanner* %26, i32 0, i32 1
  %28 = load %src.Pattern_Scanner*, %src.Pattern_Scanner** %2, align 8
  %29 = bitcast %runtime.Context* %8 to i8*
  %30 = call i32 @src.pattern_advance(%src.Pattern_Scanner* %28, i8* %29)
  store i32 %30, i32* %27, align 4
  br label %if.done

if.done:                                          ; preds = %if.then1, %if.then
  br label %if.done2

if.done2:                                         ; preds = %if.done, %entry
  %31 = load %src.Pattern_Scanner*, %src.Pattern_Scanner** %2, align 8
  %32 = getelementptr inbounds %src.Pattern_Scanner, %src.Pattern_Scanner* %31, i32 0, i32 1
  %33 = load i32, i32* %32, align 4
  store i32 %33, i32* %4, align 4
  %34 = load i64, i64* %3, align 8
  %35 = icmp sgt i64 %34, 0
  %36 = zext i1 %35 to i8
  %37 = trunc i8 %36 to i1
  br i1 %37, label %if.then3, label %if.done4

if.then3:                                         ; preds = %if.done2
  %38 = bitcast %src.Pattern_Scanner* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* %38, i8 0, i64 144, i1 false)
  %39 = load %src.Pattern_Scanner*, %src.Pattern_Scanner** %2, align 8
  %40 = load %src.Pattern_Scanner, %src.Pattern_Scanner* %39, align 8
  %41 = bitcast %src.Pattern_Scanner* %5 to i8*
  %42 = bitcast %src.Pattern_Scanner* %39 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %41, i8* align 8 %42, i64 144, i1 false)
  store i64 0, i64* %6, align 8
  store i64 0, i64* %7, align 8
  br label %for.interval.loop

for.interval.loop:                                ; preds = %for.interval.post, %if.then3
  %43 = load i64, i64* %3, align 8
  %44 = load i64, i64* %6, align 8
  %45 = icmp slt i64 %44, %43
  br i1 %45, label %for.interval.body, label %for.interval.done

for.interval.body:                                ; preds = %for.interval.loop
  %46 = load i64, i64* %6, align 8
  %47 = load i64, i64* %7, align 8
  %48 = load %src.Pattern_Scanner*, %src.Pattern_Scanner** %2, align 8
  %49 = bitcast %runtime.Context* %8 to i8*
  %50 = call i32 @src.pattern_next(%src.Pattern_Scanner* %48, i8* %49)
  br label %for.interval.post

for.interval.post:                                ; preds = %for.interval.body
  %51 = load i64, i64* %6, align 8
  %52 = add i64 %51, 1
  store i64 %52, i64* %6, align 8
  %53 = load i64, i64* %7, align 8
  %54 = add i64 %53, 1
  store i64 %54, i64* %7, align 8
  br label %for.interval.loop

for.interval.done:                                ; preds = %for.interval.loop
  %55 = load %src.Pattern_Scanner*, %src.Pattern_Scanner** %2, align 8
  %56 = getelementptr inbounds %src.Pattern_Scanner, %src.Pattern_Scanner* %55, i32 0, i32 1
  %57 = load i32, i32* %56, align 4
  store i32 %57, i32* %4, align 4
  %58 = load %src.Pattern_Scanner*, %src.Pattern_Scanner** %2, align 8
  %59 = load %src.Pattern_Scanner, %src.Pattern_Scanner* %5, align 8
  %60 = bitcast %src.Pattern_Scanner* %58 to i8*
  %61 = bitcast %src.Pattern_Scanner* %5 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %60, i8* align 8 %61, i64 144, i1 false)
  br label %if.done4

if.done4:                                         ; preds = %for.interval.done, %if.done2
  %62 = load i32, i32* %4, align 4
  store i32 %62, i32* %4, align 4
  ret i32 %62
}

define internal i8 @src.is_ident_rune-1024(%src.Pattern_Scanner* %0, i32 %1, i64 %2, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %3 = alloca %src.Pattern_Scanner*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i64, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Pattern_Scanner* %0, %src.Pattern_Scanner** %3, align 8
  store i32 %1, i32* %4, align 4
  store i64 %2, i64* %5, align 8
  %6 = bitcast i8* %__.context_ptr to %runtime.Context*
  %7 = load i32, i32* %4, align 4
  %8 = icmp eq i32 %7, 95
  %9 = zext i1 %8 to i8
  %10 = trunc i8 %9 to i1
  br i1 %10, label %logical.cmp.done2, label %cmp.or

cmp.or:                                           ; preds = %entry
  %11 = load i32, i32* %4, align 4
  %12 = bitcast %runtime.Context* %6 to i8*
  %13 = call i8 @unicode.is_letter(i32 %11, i8* %12)
  %14 = trunc i8 %13 to i1
  br i1 %14, label %logical.cmp.done2, label %logical.cmp.rhs

logical.cmp.rhs:                                  ; preds = %cmp.or
  %15 = load i32, i32* %4, align 4
  %16 = bitcast %runtime.Context* %6 to i8*
  %17 = call i8 @unicode.is_digit(i32 %15, i8* %16)
  %18 = trunc i8 %17 to i1
  br i1 %18, label %logical.cmp.rhs1, label %logical.cmp.done

logical.cmp.rhs1:                                 ; preds = %logical.cmp.rhs
  %19 = load i64, i64* %5, align 8
  %20 = icmp sgt i64 %19, 0
  %21 = zext i1 %20 to i8
  br label %logical.cmp.done

logical.cmp.done:                                 ; preds = %logical.cmp.rhs1, %logical.cmp.rhs
  %22 = phi i8 [ 0, %logical.cmp.rhs ], [ %21, %logical.cmp.rhs1 ]
  br label %logical.cmp.done2

logical.cmp.done2:                                ; preds = %logical.cmp.done, %cmp.or, %entry
  %23 = phi i8 [ 1, %entry ], [ 1, %cmp.or ], [ %22, %logical.cmp.done ]
  ret i8 %23
}

define internal i32 @src.pattern_scan(%src.Pattern_Scanner* %0, i1 zeroext %1, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %2 = alloca %src.Pattern_Scanner*, align 8
  %3 = alloca i8, align 1
  %4 = alloca i32, align 4
  %5 = alloca { i64, i64 }, align 8
  %6 = alloca %runtime.Source_Code_Location, align 8
  %7 = alloca i32, align 4
  %8 = alloca %..string, align 8
  %9 = alloca %..string, align 8
  %10 = alloca i64, align 8
  %11 = alloca i8, align 1
  %12 = alloca { i64, i8 }, align 8
  %13 = alloca %runtime.Map_Header, align 8
  %14 = alloca %runtime.Map_Hash, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Pattern_Scanner* %0, %src.Pattern_Scanner** %2, align 8
  %15 = zext i1 %1 to i8
  store i8 %15, i8* %3, align 1
  store i32 0, i32* %4, align 4
  %16 = bitcast i8* %__.context_ptr to %runtime.Context*
  %17 = load %src.Pattern_Scanner*, %src.Pattern_Scanner** %2, align 8
  %18 = getelementptr inbounds %src.Pattern_Scanner, %src.Pattern_Scanner* %17, i32 0, i32 11
  %19 = load { { i64*, i64 }, { i8*, i64, i64, %runtime.Allocator } }, { { i64*, i64 }, { i8*, i64, i64, %runtime.Allocator } }* %18, align 8
  %20 = bitcast { { i64*, i64 }, { i8*, i64, i64, %runtime.Allocator } }* %18 to { { i64*, i64 }, { { i64, i64, %..string, i64 }*, i64, i64, %runtime.Allocator } }*
  %21 = getelementptr inbounds { { i64*, i64 }, { { i64, i64, %..string, i64 }*, i64, i64, %runtime.Allocator } }, { { i64*, i64 }, { { i64, i64, %..string, i64 }*, i64, i64, %runtime.Allocator } }* %20, i32 0, i32 0
  %22 = getelementptr inbounds { i64*, i64 }, { i64*, i64 }* %21, i32 0, i32 0
  %23 = load i64*, i64** %22, align 8
  %24 = icmp ne i64* %23, null
  %25 = zext i1 %24 to i8
  %26 = icmp ne i8 %25, 0
  %27 = bitcast { i64, i64 }* %5 to %..string*
  store %..string zeroinitializer, %..string* %27, align 8
  %28 = load { i64, i64 }, { i64, i64 }* %5, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([58 x i8], [58 x i8]* @"csbs$345", i64 0, i64 0), i64 57 }, i32 139, i32 2, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$347", i64 0, i64 0), i64 12 } }, %runtime.Source_Code_Location* %6, align 8
  %29 = bitcast %runtime.Context* %16 to i8*
  call void @runtime.assert(i1 %26, { i64, i64 } %28, %runtime.Source_Code_Location* %6, i8* %29)
  %30 = load %src.Pattern_Scanner*, %src.Pattern_Scanner** %2, align 8
  %31 = bitcast %runtime.Context* %16 to i8*
  %32 = call i32 @src.pattern_peek(%src.Pattern_Scanner* %30, i64 0, i8* %31)
  store i32 %32, i32* %7, align 4
  %33 = load i32, i32* %7, align 4
  %34 = icmp eq i32 %33, -1
  %35 = zext i1 %34 to i8
  %36 = trunc i8 %35 to i1
  br i1 %36, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  %37 = load i32, i32* %7, align 4
  store i32 %37, i32* %4, align 4
  ret i32 %37

if.done:                                          ; preds = %entry
  %38 = load %src.Pattern_Scanner*, %src.Pattern_Scanner** %2, align 8
  %39 = getelementptr inbounds %src.Pattern_Scanner, %src.Pattern_Scanner* %38, i32 0, i32 7
  store i64 -1, i64* %39, align 8
  br label %for.body

for.body:                                         ; preds = %unreachable31, %if.then3, %if.done
  br label %for.loop

for.loop:                                         ; preds = %for.body1, %for.body
  %40 = load i32, i32* %7, align 4
  %41 = icmp slt i32 %40, 128
  %42 = zext i1 %41 to i8
  %43 = trunc i8 %42 to i1
  br i1 %43, label %cmp.and, label %for.done

cmp.and:                                          ; preds = %for.loop
  %44 = load i32, i32* %7, align 4
  %45 = sext i32 %44 to i128
  %46 = sub i128 %45, 0
  %47 = icmp ult i128 %46, 128
  %48 = shl i128 1, %46
  %49 = select i1 %47, i128 %48, i128 0
  %50 = and i128 4294977024, %49
  %51 = icmp ne i128 %50, 0
  %52 = zext i1 %51 to i8
  %53 = trunc i8 %52 to i1
  br i1 %53, label %for.body1, label %for.done

for.body1:                                        ; preds = %cmp.and
  %54 = load %src.Pattern_Scanner*, %src.Pattern_Scanner** %2, align 8
  %55 = bitcast %runtime.Context* %16 to i8*
  %56 = call i32 @src.pattern_advance(%src.Pattern_Scanner* %54, i8* %55)
  store i32 %56, i32* %7, align 4
  br label %for.loop

for.done:                                         ; preds = %cmp.and, %for.loop
  %57 = load %src.Pattern_Scanner*, %src.Pattern_Scanner** %2, align 8
  %58 = getelementptr inbounds %src.Pattern_Scanner, %src.Pattern_Scanner* %57, i32 0, i32 7
  %59 = load %src.Pattern_Scanner*, %src.Pattern_Scanner** %2, align 8
  %60 = getelementptr inbounds %src.Pattern_Scanner, %src.Pattern_Scanner* %59, i32 0, i32 3
  %61 = load i64, i64* %60, align 8
  %62 = load %src.Pattern_Scanner*, %src.Pattern_Scanner** %2, align 8
  %63 = getelementptr inbounds %src.Pattern_Scanner, %src.Pattern_Scanner* %62, i32 0, i32 5
  %64 = load i64, i64* %63, align 8
  %65 = sub i64 %61, %64
  store i64 %65, i64* %58, align 8
  %66 = load i32, i32* %7, align 4
  store i32 %66, i32* %4, align 4
  %67 = load %src.Pattern_Scanner*, %src.Pattern_Scanner** %2, align 8
  %68 = load i32, i32* %7, align 4
  %69 = bitcast %runtime.Context* %16 to i8*
  %70 = call i8 @src.is_ident_rune-1024(%src.Pattern_Scanner* %67, i32 %68, i64 0, i8* %69)
  %71 = trunc i8 %70 to i1
  br i1 %71, label %if.then2, label %if.else

if.then2:                                         ; preds = %for.done
  %72 = load %src.Pattern_Scanner*, %src.Pattern_Scanner** %2, align 8
  %73 = bitcast %runtime.Context* %16 to i8*
  %74 = call i32 @src.pattern_scan_identifier(%src.Pattern_Scanner* %72, i8* %73)
  store i32 %74, i32* %7, align 4
  %75 = load i8, i8* %3, align 1
  %76 = trunc i8 %75 to i1
  br i1 %76, label %if.done4, label %if.then3

if.then3:                                         ; preds = %if.then2
  br label %for.body

unreachable:                                      ; No predecessors!
  br label %if.done4

if.done4:                                         ; preds = %unreachable, %if.then2
  %77 = load %src.Pattern_Scanner*, %src.Pattern_Scanner** %2, align 8
  %78 = getelementptr inbounds %src.Pattern_Scanner, %src.Pattern_Scanner* %77, i32 0, i32 8
  %79 = load %src.Pattern_Scanner*, %src.Pattern_Scanner** %2, align 8
  %80 = getelementptr inbounds %src.Pattern_Scanner, %src.Pattern_Scanner* %79, i32 0, i32 3
  %81 = load i64, i64* %80, align 8
  %82 = load %src.Pattern_Scanner*, %src.Pattern_Scanner** %2, align 8
  %83 = getelementptr inbounds %src.Pattern_Scanner, %src.Pattern_Scanner* %82, i32 0, i32 5
  %84 = load i64, i64* %83, align 8
  %85 = sub i64 %81, %84
  store i64 %85, i64* %78, align 8
  %86 = load %src.Pattern_Scanner*, %src.Pattern_Scanner** %2, align 8
  %87 = bitcast %runtime.Context* %16 to i8*
  %88 = call { i64, i64 } @src.pattern_token_text(%src.Pattern_Scanner* %86, i8* %87)
  %89 = bitcast %..string* %9 to { i64, i64 }*
  store { i64, i64 } %88, { i64, i64 }* %89, align 8
  %90 = load %..string, %..string* %9, align 8
  store %..string %90, %..string* %8, align 8
  br label %if.init

if.init:                                          ; preds = %if.done4
  %91 = load %src.Pattern_Scanner*, %src.Pattern_Scanner** %2, align 8
  %92 = getelementptr inbounds %src.Pattern_Scanner, %src.Pattern_Scanner* %91, i32 0, i32 11
  %93 = load { { i64*, i64 }, { i8*, i64, i64, %runtime.Allocator } }, { { i64*, i64 }, { i8*, i64, i64, %runtime.Allocator } }* %92, align 8
  %94 = load %..string, %..string* %8, align 8
  %95 = bitcast { i64, i8 }* %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* %95, i8 0, i64 16, i1 false)
  store %runtime.Map_Header { %runtime.Raw_Map* null, i8* bitcast (i8 (i8*, i8*)* @"__$equal6" to i8*), i64 40, i64 8, i64 16, i64 16, i64 32, i64 8 }, %runtime.Map_Header* %13, align 8
  %96 = getelementptr inbounds %runtime.Map_Header, %runtime.Map_Header* %13, i32 0, i32 0
  %97 = bitcast { { i64*, i64 }, { i8*, i64, i64, %runtime.Allocator } }* %92 to %runtime.Raw_Map*
  store %runtime.Raw_Map* %97, %runtime.Raw_Map** %96, align 8
  %98 = load %runtime.Map_Header, %runtime.Map_Header* %13, align 8
  %99 = bitcast %runtime.Map_Hash* %14 to i8*
  call void @llvm.memset.p0i8.i64(i8* %99, i8 0, i64 16, i1 false)
  %100 = bitcast %..string* %8 to i8*
  %101 = call i64 @"__$hasher1"(i8* %100, i64 0)
  %102 = getelementptr inbounds %runtime.Map_Hash, %runtime.Map_Hash* %14, i32 0, i32 0
  store i64 %101, i64* %102, align 8
  %103 = getelementptr inbounds %runtime.Map_Hash, %runtime.Map_Hash* %14, i32 0, i32 1
  store i8* %100, i8** %103, align 8
  %104 = load %runtime.Map_Hash, %runtime.Map_Hash* %14, align 8
  %105 = bitcast %runtime.Map_Hash* %14 to { i64, i64 }*
  %106 = load { i64, i64 }, { i64, i64 }* %105, align 8
  %107 = bitcast %runtime.Context* %16 to i8*
  %108 = call i8* @runtime.__dynamic_map_get(%runtime.Map_Header* %13, { i64, i64 } %106, i8* %107)
  %109 = icmp ne i8* %108, null
  %110 = zext i1 %109 to i8
  %111 = getelementptr inbounds { i64, i8 }, { i64, i8 }* %12, i32 0, i32 1
  store i8 %110, i8* %111, align 1
  %112 = trunc i8 %110 to i1
  br i1 %112, label %map.get.then, label %map.get.done

map.get.then:                                     ; preds = %if.init
  %113 = getelementptr inbounds { i64, i8 }, { i64, i8 }* %12, i32 0, i32 0
  %114 = bitcast i8* %108 to i64*
  %115 = load i64, i64* %114, align 8
  store i64 %115, i64* %113, align 8
  br label %map.get.done

map.get.done:                                     ; preds = %map.get.then, %if.init
  %116 = load { i64, i8 }, { i64, i8 }* %12, align 8
  %117 = getelementptr inbounds { i64, i8 }, { i64, i8 }* %12, i32 0, i32 0
  %118 = load i64, i64* %117, align 8
  %119 = getelementptr inbounds { i64, i8 }, { i64, i8 }* %12, i32 0, i32 1
  %120 = load i8, i8* %119, align 1
  store i64 %118, i64* %10, align 8
  store i8 %120, i8* %11, align 1
  %121 = load i8, i8* %11, align 1
  %122 = trunc i8 %121 to i1
  br i1 %122, label %if.then5, label %if.done15

if.then5:                                         ; preds = %map.get.done
  br label %for.loop6

for.loop6:                                        ; preds = %for.body8, %if.then5
  %123 = load i32, i32* %7, align 4
  %124 = icmp slt i32 %123, 128
  %125 = zext i1 %124 to i8
  %126 = trunc i8 %125 to i1
  br i1 %126, label %cmp.and7, label %for.done9

cmp.and7:                                         ; preds = %for.loop6
  %127 = load i32, i32* %7, align 4
  %128 = sext i32 %127 to i128
  %129 = sub i128 %128, 0
  %130 = icmp ult i128 %129, 128
  %131 = shl i128 1, %129
  %132 = select i1 %130, i128 %131, i128 0
  %133 = and i128 4294977024, %132
  %134 = icmp ne i128 %133, 0
  %135 = zext i1 %134 to i8
  %136 = trunc i8 %135 to i1
  br i1 %136, label %for.body8, label %for.done9

for.body8:                                        ; preds = %cmp.and7
  %137 = load %src.Pattern_Scanner*, %src.Pattern_Scanner** %2, align 8
  %138 = bitcast %runtime.Context* %16 to i8*
  %139 = call i32 @src.pattern_advance(%src.Pattern_Scanner* %137, i8* %138)
  store i32 %139, i32* %7, align 4
  br label %for.loop6

for.done9:                                        ; preds = %cmp.and7, %for.loop6
  %140 = load %src.Pattern_Scanner*, %src.Pattern_Scanner** %2, align 8
  %141 = getelementptr inbounds %src.Pattern_Scanner, %src.Pattern_Scanner* %140, i32 0, i32 7
  %142 = load %src.Pattern_Scanner*, %src.Pattern_Scanner** %2, align 8
  %143 = getelementptr inbounds %src.Pattern_Scanner, %src.Pattern_Scanner* %142, i32 0, i32 3
  %144 = load i64, i64* %143, align 8
  %145 = load %src.Pattern_Scanner*, %src.Pattern_Scanner** %2, align 8
  %146 = getelementptr inbounds %src.Pattern_Scanner, %src.Pattern_Scanner* %145, i32 0, i32 5
  %147 = load i64, i64* %146, align 8
  %148 = sub i64 %144, %147
  store i64 %148, i64* %141, align 8
  br label %for.loop10

for.loop10:                                       ; preds = %for.body12, %for.done9
  %149 = load i32, i32* %7, align 4
  %150 = icmp ne i32 %149, 10
  %151 = zext i1 %150 to i8
  %152 = trunc i8 %151 to i1
  br i1 %152, label %cmp.and11, label %for.done13

cmp.and11:                                        ; preds = %for.loop10
  %153 = load i32, i32* %7, align 4
  %154 = icmp sge i32 %153, 0
  %155 = zext i1 %154 to i8
  %156 = trunc i8 %155 to i1
  br i1 %156, label %for.body12, label %for.done13

for.body12:                                       ; preds = %cmp.and11
  %157 = load %src.Pattern_Scanner*, %src.Pattern_Scanner** %2, align 8
  %158 = bitcast %runtime.Context* %16 to i8*
  %159 = call i32 @src.pattern_advance(%src.Pattern_Scanner* %157, i8* %158)
  store i32 %159, i32* %7, align 4
  br label %for.loop10

for.done13:                                       ; preds = %cmp.and11, %for.loop10
  store i32 -6, i32* %4, align 4
  br label %for.done32

unreachable14:                                    ; No predecessors!
  br label %if.done15

if.done15:                                        ; preds = %unreachable14, %map.get.done
  br label %if.done30

if.else:                                          ; preds = %for.done
  %160 = load i32, i32* %7, align 4
  switch i32 %160, label %switch.default.body [
    i32 -1, label %switch.case.body
    i32 42, label %switch.case.body17
    i32 47, label %switch.case.body20
    i32 45, label %switch.case.body26
    i32 35, label %switch.case.body29
  ]

switch.case.body:                                 ; preds = %if.else
  br label %switch.done

unreachable16:                                    ; No predecessors!
  br label %switch.done

switch.case.body17:                               ; preds = %if.else
  %161 = load %src.Pattern_Scanner*, %src.Pattern_Scanner** %2, align 8
  %162 = bitcast %runtime.Context* %16 to i8*
  %163 = call i32 @src.pattern_advance(%src.Pattern_Scanner* %161, i8* %162)
  store i32 %163, i32* %7, align 4
  %164 = load i32, i32* %7, align 4
  %165 = icmp eq i32 %164, 47
  %166 = zext i1 %165 to i8
  %167 = trunc i8 %166 to i1
  br i1 %167, label %if.then18, label %if.done19

if.then18:                                        ; preds = %switch.case.body17
  %168 = load %src.Pattern_Scanner*, %src.Pattern_Scanner** %2, align 8
  %169 = bitcast %runtime.Context* %16 to i8*
  %170 = call i32 @src.pattern_advance(%src.Pattern_Scanner* %168, i8* %169)
  store i32 %170, i32* %7, align 4
  store i32 -4, i32* %4, align 4
  br label %if.done19

if.done19:                                        ; preds = %if.then18, %switch.case.body17
  br label %switch.done

switch.case.body20:                               ; preds = %if.else
  %171 = load %src.Pattern_Scanner*, %src.Pattern_Scanner** %2, align 8
  %172 = bitcast %runtime.Context* %16 to i8*
  %173 = call i32 @src.pattern_advance(%src.Pattern_Scanner* %171, i8* %172)
  store i32 %173, i32* %7, align 4
  %174 = load i32, i32* %7, align 4
  %175 = icmp eq i32 %174, 42
  %176 = zext i1 %175 to i8
  %177 = trunc i8 %176 to i1
  br i1 %177, label %if.then21, label %if.else22

if.then21:                                        ; preds = %switch.case.body20
  %178 = load %src.Pattern_Scanner*, %src.Pattern_Scanner** %2, align 8
  %179 = bitcast %runtime.Context* %16 to i8*
  %180 = call i32 @src.pattern_advance(%src.Pattern_Scanner* %178, i8* %179)
  store i32 %180, i32* %7, align 4
  store i32 -3, i32* %4, align 4
  br label %if.done25

if.else22:                                        ; preds = %switch.case.body20
  %181 = load i32, i32* %7, align 4
  %182 = icmp eq i32 %181, 47
  %183 = zext i1 %182 to i8
  %184 = trunc i8 %183 to i1
  br i1 %184, label %if.then23, label %if.done24

if.then23:                                        ; preds = %if.else22
  %185 = load %src.Pattern_Scanner*, %src.Pattern_Scanner** %2, align 8
  %186 = bitcast %runtime.Context* %16 to i8*
  %187 = call i32 @src.pattern_advance(%src.Pattern_Scanner* %185, i8* %186)
  store i32 %187, i32* %7, align 4
  store i32 -2, i32* %4, align 4
  br label %if.done24

if.done24:                                        ; preds = %if.then23, %if.else22
  br label %if.done25

if.done25:                                        ; preds = %if.done24, %if.then21
  br label %switch.done

switch.case.body26:                               ; preds = %if.else
  %188 = load %src.Pattern_Scanner*, %src.Pattern_Scanner** %2, align 8
  %189 = bitcast %runtime.Context* %16 to i8*
  %190 = call i32 @src.pattern_advance(%src.Pattern_Scanner* %188, i8* %189)
  store i32 %190, i32* %7, align 4
  %191 = load i32, i32* %7, align 4
  %192 = icmp eq i32 %191, 45
  %193 = zext i1 %192 to i8
  %194 = trunc i8 %193 to i1
  br i1 %194, label %if.then27, label %if.done28

if.then27:                                        ; preds = %switch.case.body26
  %195 = load %src.Pattern_Scanner*, %src.Pattern_Scanner** %2, align 8
  %196 = bitcast %runtime.Context* %16 to i8*
  %197 = call i32 @src.pattern_advance(%src.Pattern_Scanner* %195, i8* %196)
  store i32 %197, i32* %7, align 4
  store i32 -2, i32* %4, align 4
  br label %if.done28

if.done28:                                        ; preds = %if.then27, %switch.case.body26
  br label %switch.done

switch.case.body29:                               ; preds = %if.else
  %198 = load %src.Pattern_Scanner*, %src.Pattern_Scanner** %2, align 8
  %199 = bitcast %runtime.Context* %16 to i8*
  %200 = call i32 @src.pattern_advance(%src.Pattern_Scanner* %198, i8* %199)
  store i32 %200, i32* %7, align 4
  store i32 -2, i32* %4, align 4
  br label %switch.done

switch.default.body:                              ; preds = %if.else
  %201 = load %src.Pattern_Scanner*, %src.Pattern_Scanner** %2, align 8
  %202 = bitcast %runtime.Context* %16 to i8*
  %203 = call i32 @src.pattern_advance(%src.Pattern_Scanner* %201, i8* %202)
  store i32 %203, i32* %7, align 4
  br label %switch.done

switch.done:                                      ; preds = %switch.default.body, %switch.case.body29, %if.done28, %if.done25, %if.done19, %unreachable16, %switch.case.body
  br label %if.done30

if.done30:                                        ; preds = %switch.done, %if.done15
  br label %for.done32

unreachable31:                                    ; No predecessors!
  br label %for.body

for.done32:                                       ; preds = %if.done30, %for.done13
  %204 = load %src.Pattern_Scanner*, %src.Pattern_Scanner** %2, align 8
  %205 = getelementptr inbounds %src.Pattern_Scanner, %src.Pattern_Scanner* %204, i32 0, i32 8
  %206 = load %src.Pattern_Scanner*, %src.Pattern_Scanner** %2, align 8
  %207 = getelementptr inbounds %src.Pattern_Scanner, %src.Pattern_Scanner* %206, i32 0, i32 3
  %208 = load i64, i64* %207, align 8
  %209 = load %src.Pattern_Scanner*, %src.Pattern_Scanner** %2, align 8
  %210 = getelementptr inbounds %src.Pattern_Scanner, %src.Pattern_Scanner* %209, i32 0, i32 5
  %211 = load i64, i64* %210, align 8
  %212 = sub i64 %208, %211
  store i64 %212, i64* %205, align 8
  %213 = load %src.Pattern_Scanner*, %src.Pattern_Scanner** %2, align 8
  %214 = getelementptr inbounds %src.Pattern_Scanner, %src.Pattern_Scanner* %213, i32 0, i32 1
  %215 = load i32, i32* %7, align 4
  store i32 %215, i32* %214, align 4
  %216 = load i32, i32* %4, align 4
  store i32 %216, i32* %4, align 4
  ret i32 %216
}

define internal i32 @src.pattern_scan_identifier(%src.Pattern_Scanner* %0, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %1 = alloca %src.Pattern_Scanner*, align 8
  %2 = alloca i32, align 4
  %3 = alloca i64, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Pattern_Scanner* %0, %src.Pattern_Scanner** %1, align 8
  %4 = bitcast i8* %__.context_ptr to %runtime.Context*
  %5 = load %src.Pattern_Scanner*, %src.Pattern_Scanner** %1, align 8
  %6 = bitcast %runtime.Context* %4 to i8*
  %7 = call i32 @src.pattern_advance(%src.Pattern_Scanner* %5, i8* %6)
  store i32 %7, i32* %2, align 4
  br label %for.init

for.init:                                         ; preds = %entry
  store i64 1, i64* %3, align 8
  br label %for.loop

for.loop:                                         ; preds = %for.post, %for.init
  %8 = load %src.Pattern_Scanner*, %src.Pattern_Scanner** %1, align 8
  %9 = load i32, i32* %2, align 4
  %10 = load i64, i64* %3, align 8
  %11 = bitcast %runtime.Context* %4 to i8*
  %12 = call i8 @src.is_ident_rune-1024(%src.Pattern_Scanner* %8, i32 %9, i64 %10, i8* %11)
  %13 = trunc i8 %12 to i1
  br i1 %13, label %for.body, label %for.done

for.body:                                         ; preds = %for.loop
  %14 = load %src.Pattern_Scanner*, %src.Pattern_Scanner** %1, align 8
  %15 = bitcast %runtime.Context* %4 to i8*
  %16 = call i32 @src.pattern_advance(%src.Pattern_Scanner* %14, i8* %15)
  store i32 %16, i32* %2, align 4
  br label %for.post

for.post:                                         ; preds = %for.body
  %17 = load i64, i64* %3, align 8
  %18 = add i64 %17, 1
  store i64 %18, i64* %3, align 8
  br label %for.loop

for.done:                                         ; preds = %for.loop
  %19 = load i32, i32* %2, align 4
  ret i32 %19
}

define internal { i64, i64 } @src.pattern_token_text(%src.Pattern_Scanner* %0, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %1 = alloca %src.Pattern_Scanner*, align 8
  %2 = alloca { i64, i64 }, align 8
  %3 = alloca { i64, i64 }, align 8
  %4 = alloca %..string, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Pattern_Scanner* %0, %src.Pattern_Scanner** %1, align 8
  %5 = bitcast i8* %__.context_ptr to %runtime.Context*
  %6 = load %src.Pattern_Scanner*, %src.Pattern_Scanner** %1, align 8
  %7 = getelementptr inbounds %src.Pattern_Scanner, %src.Pattern_Scanner* %6, i32 0, i32 7
  %8 = load i64, i64* %7, align 8
  %9 = icmp slt i64 %8, 0
  %10 = zext i1 %9 to i8
  %11 = trunc i8 %10 to i1
  br i1 %11, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  %12 = bitcast { i64, i64 }* %2 to %..string*
  store %..string zeroinitializer, %..string* %12, align 8
  %13 = load { i64, i64 }, { i64, i64 }* %2, align 8
  ret { i64, i64 } %13

if.done:                                          ; preds = %entry
  %14 = load %src.Pattern_Scanner*, %src.Pattern_Scanner** %1, align 8
  %15 = getelementptr inbounds %src.Pattern_Scanner, %src.Pattern_Scanner* %14, i32 0, i32 7
  %16 = load i64, i64* %15, align 8
  %17 = load %src.Pattern_Scanner*, %src.Pattern_Scanner** %1, align 8
  %18 = getelementptr inbounds %src.Pattern_Scanner, %src.Pattern_Scanner* %17, i32 0, i32 8
  %19 = load i64, i64* %18, align 8
  %20 = load %src.Pattern_Scanner*, %src.Pattern_Scanner** %1, align 8
  %21 = getelementptr inbounds %src.Pattern_Scanner, %src.Pattern_Scanner* %20, i32 0, i32 0
  %22 = load %..string, %..string* %21, align 8
  %23 = getelementptr inbounds %..string, %..string* %21, i32 0, i32 1
  %24 = load i64, i64* %23, align 8
  %25 = bitcast { i64, i64 }* %3 to %..string*
  store %..string { i8* getelementptr inbounds ([58 x i8], [58 x i8]* @"csbs$345", i64 0, i64 0), i64 57 }, %..string* %25, align 8
  %26 = load { i64, i64 }, { i64, i64 }* %3, align 8
  call void @runtime.slice_expr_error_lo_hi({ i64, i64 } %26, i32 256, i32 21, i64 %16, i64 %19, i64 %24)
  %27 = getelementptr inbounds %..string, %..string* %21, i32 0, i32 0
  %28 = load i8*, i8** %27, align 8
  %29 = getelementptr i8, i8* %28, i64 %16
  %30 = sub i64 %19, %16
  %31 = getelementptr inbounds %..string, %..string* %4, i32 0, i32 0
  store i8* %29, i8** %31, align 8
  %32 = getelementptr inbounds %..string, %..string* %4, i32 0, i32 1
  store i64 %30, i64* %32, align 8
  %33 = load %..string, %..string* %4, align 8
  %34 = bitcast %..string* %4 to { i64, i64 }*
  %35 = load { i64, i64 }, { i64, i64 }* %34, align 8
  ret { i64, i64 } %35
}

define internal void @src.pattern_load_content(%src.Undo_Manager* %0, { i64, i64 } %1, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %2 = alloca %src.Undo_Manager*, align 8
  %3 = alloca %..string, align 8
  %4 = alloca %src.Pattern_Scanner, align 8
  %5 = alloca %src.Pattern_Scanner, align 8
  %6 = alloca { { i64*, i64 }, { i8*, i64, i64, %runtime.Allocator } }, align 8
  %7 = alloca %runtime.Map_Header, align 8
  %8 = alloca %runtime.Source_Code_Location, align 8
  %9 = alloca %runtime.Map_Header, align 8
  %10 = alloca %runtime.Map_Hash, align 8
  %11 = alloca %..string, align 8
  %12 = alloca i64, align 8
  %13 = alloca %runtime.Source_Code_Location, align 8
  %14 = alloca %runtime.Map_Header, align 8
  %15 = alloca %runtime.Map_Hash, align 8
  %16 = alloca %..string, align 8
  %17 = alloca i64, align 8
  %18 = alloca %runtime.Source_Code_Location, align 8
  %19 = alloca i64, align 8
  %20 = alloca i8, align 1
  %21 = alloca i64, align 8
  %22 = alloca i32, align 4
  %23 = alloca %..string, align 8
  %24 = alloca %..string, align 8
  %25 = alloca %src.Task*, align 8
  %26 = alloca { i64, i64 }, align 8
  %27 = alloca i64, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Undo_Manager* %0, %src.Undo_Manager** %2, align 8
  %28 = bitcast %..string* %3 to { i64, i64 }*
  store { i64, i64 } %1, { i64, i64 }* %28, align 8
  %29 = load %..string, %..string* %3, align 8
  %30 = bitcast i8* %__.context_ptr to %runtime.Context*
  %31 = bitcast %src.Pattern_Scanner* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* %31, i8 0, i64 144, i1 false)
  %32 = load %..string, %..string* %3, align 8
  %33 = bitcast %..string* %3 to { i64, i64 }*
  %34 = load { i64, i64 }, { i64, i64 }* %33, align 8
  %35 = bitcast %src.Pattern_Scanner* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* %35, i8 0, i64 144, i1 false)
  %36 = bitcast %runtime.Context* %30 to i8*
  call void @src.pattern_scanner_init(%src.Pattern_Scanner* sret %5, { i64, i64 } %34, i8* %36)
  %37 = load %src.Pattern_Scanner, %src.Pattern_Scanner* %5, align 8
  %38 = bitcast %src.Pattern_Scanner* %4 to i8*
  %39 = bitcast %src.Pattern_Scanner* %5 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %38, i8* align 8 %39, i64 144, i1 false)
  %40 = getelementptr inbounds %src.Pattern_Scanner, %src.Pattern_Scanner* %4, i32 0, i32 11
  %41 = bitcast { { i64*, i64 }, { i8*, i64, i64, %runtime.Allocator } }* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* %41, i8 0, i64 56, i1 false)
  store %runtime.Map_Header { %runtime.Raw_Map* null, i8* bitcast (i8 (i8*, i8*)* @"__$equal6" to i8*), i64 40, i64 8, i64 16, i64 16, i64 32, i64 8 }, %runtime.Map_Header* %7, align 8
  %42 = getelementptr inbounds %runtime.Map_Header, %runtime.Map_Header* %7, i32 0, i32 0
  %43 = bitcast { { i64*, i64 }, { i8*, i64, i64, %runtime.Allocator } }* %6 to %runtime.Raw_Map*
  store %runtime.Raw_Map* %43, %runtime.Raw_Map** %42, align 8
  %44 = load %runtime.Map_Header, %runtime.Map_Header* %7, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([58 x i8], [58 x i8]* @"csbs$345", i64 0, i64 0), i64 57 }, i32 280, i32 17, %..string { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @"csbs$348", i64 0, i64 0), i64 20 } }, %runtime.Source_Code_Location* %8, align 8
  %45 = bitcast %runtime.Context* %30 to i8*
  call void @runtime.__dynamic_map_reserve(%runtime.Map_Header* %7, i64 4, %runtime.Source_Code_Location* %8, i8* %45)
  store %runtime.Map_Header { %runtime.Raw_Map* null, i8* bitcast (i8 (i8*, i8*)* @"__$equal6" to i8*), i64 40, i64 8, i64 16, i64 16, i64 32, i64 8 }, %runtime.Map_Header* %9, align 8
  %46 = getelementptr inbounds %runtime.Map_Header, %runtime.Map_Header* %9, i32 0, i32 0
  %47 = bitcast { { i64*, i64 }, { i8*, i64, i64, %runtime.Allocator } }* %6 to %runtime.Raw_Map*
  store %runtime.Raw_Map* %47, %runtime.Raw_Map** %46, align 8
  %48 = load %runtime.Map_Header, %runtime.Map_Header* %9, align 8
  %49 = bitcast %runtime.Map_Hash* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* %49, i8 0, i64 16, i1 false)
  store %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$349", i64 0, i64 0), i64 4 }, %..string* %11, align 8
  %50 = bitcast %..string* %11 to i8*
  %51 = call i64 @"__$hasher1"(i8* %50, i64 0)
  %52 = getelementptr inbounds %runtime.Map_Hash, %runtime.Map_Hash* %10, i32 0, i32 0
  store i64 %51, i64* %52, align 8
  %53 = getelementptr inbounds %runtime.Map_Hash, %runtime.Map_Hash* %10, i32 0, i32 1
  store i8* %50, i8** %53, align 8
  %54 = load %runtime.Map_Hash, %runtime.Map_Hash* %10, align 8
  store i64 0, i64* %12, align 8
  %55 = bitcast i64* %12 to i8*
  %56 = bitcast %runtime.Map_Hash* %10 to { i64, i64 }*
  %57 = load { i64, i64 }, { i64, i64 }* %56, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([58 x i8], [58 x i8]* @"csbs$345", i64 0, i64 0), i64 57 }, i32 281, i32 10, %..string { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @"csbs$348", i64 0, i64 0), i64 20 } }, %runtime.Source_Code_Location* %13, align 8
  %58 = bitcast %runtime.Context* %30 to i8*
  %59 = call %runtime.Map_Entry_Header* @runtime.__dynamic_map_set(%runtime.Map_Header* %9, { i64, i64 } %57, i8* %55, %runtime.Source_Code_Location* %13, i8* %58)
  store %runtime.Map_Header { %runtime.Raw_Map* null, i8* bitcast (i8 (i8*, i8*)* @"__$equal6" to i8*), i64 40, i64 8, i64 16, i64 16, i64 32, i64 8 }, %runtime.Map_Header* %14, align 8
  %60 = getelementptr inbounds %runtime.Map_Header, %runtime.Map_Header* %14, i32 0, i32 0
  %61 = bitcast { { i64*, i64 }, { i8*, i64, i64, %runtime.Allocator } }* %6 to %runtime.Raw_Map*
  store %runtime.Raw_Map* %61, %runtime.Raw_Map** %60, align 8
  %62 = load %runtime.Map_Header, %runtime.Map_Header* %14, align 8
  %63 = bitcast %runtime.Map_Hash* %15 to i8*
  call void @llvm.memset.p0i8.i64(i8* %63, i8 0, i64 16, i1 false)
  store %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$34a", i64 0, i64 0), i64 4 }, %..string* %16, align 8
  %64 = bitcast %..string* %16 to i8*
  %65 = call i64 @"__$hasher1"(i8* %64, i64 0)
  %66 = getelementptr inbounds %runtime.Map_Hash, %runtime.Map_Hash* %15, i32 0, i32 0
  store i64 %65, i64* %66, align 8
  %67 = getelementptr inbounds %runtime.Map_Hash, %runtime.Map_Hash* %15, i32 0, i32 1
  store i8* %64, i8** %67, align 8
  %68 = load %runtime.Map_Hash, %runtime.Map_Hash* %15, align 8
  store i64 1, i64* %17, align 8
  %69 = bitcast i64* %17 to i8*
  %70 = bitcast %runtime.Map_Hash* %15 to { i64, i64 }*
  %71 = load { i64, i64 }, { i64, i64 }* %70, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([58 x i8], [58 x i8]* @"csbs$345", i64 0, i64 0), i64 57 }, i32 282, i32 10, %..string { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @"csbs$348", i64 0, i64 0), i64 20 } }, %runtime.Source_Code_Location* %18, align 8
  %72 = bitcast %runtime.Context* %30 to i8*
  %73 = call %runtime.Map_Entry_Header* @runtime.__dynamic_map_set(%runtime.Map_Header* %14, { i64, i64 } %71, i8* %69, %runtime.Source_Code_Location* %18, i8* %72)
  %74 = load { { i64*, i64 }, { i8*, i64, i64, %runtime.Allocator } }, { { i64*, i64 }, { i8*, i64, i64, %runtime.Allocator } }* %6, align 8
  store { { i64*, i64 }, { i8*, i64, i64, %runtime.Allocator } } %74, { { i64*, i64 }, { i8*, i64, i64, %runtime.Allocator } }* %40, align 8
  store i64 0, i64* %19, align 8
  store i8 0, i8* %20, align 1
  store i64 0, i64* %21, align 8
  br label %for.body

for.body:                                         ; preds = %logical.cmp.done, %entry
  %75 = load i8, i8* %20, align 1
  %76 = icmp ne i8 %75, 0
  %77 = bitcast %runtime.Context* %30 to i8*
  %78 = call i32 @src.pattern_scan(%src.Pattern_Scanner* %4, i1 %76, i8* %77)
  store i32 %78, i32* %22, align 4
  %79 = load i32, i32* %22, align 4
  %80 = icmp eq i32 %79, -1
  %81 = zext i1 %80 to i8
  %82 = trunc i8 %81 to i1
  br i1 %82, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  br label %for.done

unreachable:                                      ; No predecessors!
  br label %if.done8

if.else:                                          ; preds = %for.body
  %83 = load i32, i32* %22, align 4
  %84 = icmp eq i32 %83, -6
  %85 = zext i1 %84 to i8
  %86 = trunc i8 %85 to i1
  br i1 %86, label %if.then1, label %if.else2

if.then1:                                         ; preds = %if.else
  %87 = bitcast %runtime.Context* %30 to i8*
  %88 = call { i64, i64 } @src.pattern_token_text(%src.Pattern_Scanner* %4, i8* %87)
  %89 = bitcast %..string* %24 to { i64, i64 }*
  store { i64, i64 } %88, { i64, i64 }* %89, align 8
  %90 = load %..string, %..string* %24, align 8
  store %..string %90, %..string* %23, align 8
  %91 = load { %src.Task**, i64, i64, %runtime.Allocator }, { %src.Task**, i64, i64, %runtime.Allocator }* @src.tasks_visible, align 8
  %92 = load %src.Task**, %src.Task*** getelementptr inbounds ({ %src.Task**, i64, i64, %runtime.Allocator }, { %src.Task**, i64, i64, %runtime.Allocator }* @src.tasks_visible, i64 0, i32 0), align 8
  %93 = load i64, i64* getelementptr inbounds ({ %src.Task**, i64, i64, %runtime.Allocator }, { %src.Task**, i64, i64, %runtime.Allocator }* @src.tasks_visible, i64 0, i32 1), align 8
  %94 = load i64, i64* @src.task_head, align 8
  %95 = bitcast { i64, i64 }* %26 to %..string*
  store %..string { i8* getelementptr inbounds ([58 x i8], [58 x i8]* @"csbs$345", i64 0, i64 0), i64 57 }, %..string* %95, align 8
  %96 = load { i64, i64 }, { i64, i64 }* %26, align 8
  call void @runtime.bounds_check_error({ i64, i64 } %96, i32 297, i32 34, i64 %94, i64 %93)
  %97 = getelementptr %src.Task*, %src.Task** %92, i64 %94
  %98 = load %src.Task*, %src.Task** %97, align 8
  store %src.Task* %98, %src.Task** %25, align 8
  %99 = load %src.Task*, %src.Task** %25, align 8
  %100 = getelementptr inbounds %src.Task, %src.Task* %99, i32 0, i32 1
  %101 = load i64, i64* %100, align 8
  %102 = load i64, i64* %21, align 8
  %103 = add i64 %101, %102
  %104 = add i64 %103, 1
  store i64 %104, i64* %27, align 8
  %105 = load %src.Undo_Manager*, %src.Undo_Manager** %2, align 8
  %106 = load %src.Task*, %src.Task** %25, align 8
  %107 = getelementptr inbounds %src.Task, %src.Task* %106, i32 0, i32 8
  %108 = load i64, i64* %107, align 8
  %109 = load %..string, %..string* %23, align 8
  %110 = load i64, i64* %27, align 8
  %111 = bitcast %..string* %23 to { i64, i64 }*
  %112 = load { i64, i64 }, { i64, i64 }* %111, align 8
  %113 = bitcast %runtime.Context* %30 to i8*
  %114 = call %src.Task* @src.task_push_undoable(%src.Undo_Manager* %105, i64 %108, { i64, i64 } %112, i64 %110, i8* %113)
  br label %if.done7

if.else2:                                         ; preds = %if.else
  %115 = load i32, i32* %22, align 4
  %116 = icmp eq i32 %115, -3
  %117 = zext i1 %116 to i8
  %118 = trunc i8 %117 to i1
  br i1 %118, label %if.then3, label %if.else4

if.then3:                                         ; preds = %if.else2
  %119 = load i64, i64* %19, align 8
  %120 = add i64 %119, 1
  store i64 %120, i64* %19, align 8
  br label %if.done6

if.else4:                                         ; preds = %if.else2
  %121 = load i32, i32* %22, align 4
  %122 = icmp eq i32 %121, -4
  %123 = zext i1 %122 to i8
  %124 = trunc i8 %123 to i1
  br i1 %124, label %if.then5, label %if.done

if.then5:                                         ; preds = %if.else4
  %125 = load i64, i64* %19, align 8
  %126 = sub i64 %125, 1
  store i64 %126, i64* %19, align 8
  br label %if.done

if.done:                                          ; preds = %if.then5, %if.else4
  br label %if.done6

if.done6:                                         ; preds = %if.done, %if.then3
  br label %if.done7

if.done7:                                         ; preds = %if.done6, %if.then1
  br label %if.done8

if.done8:                                         ; preds = %if.done7, %unreachable
  %127 = load i32, i32* %22, align 4
  %128 = icmp eq i32 %127, -2
  %129 = zext i1 %128 to i8
  %130 = trunc i8 %129 to i1
  br i1 %130, label %logical.cmp.done, label %logical.cmp.rhs

logical.cmp.rhs:                                  ; preds = %if.done8
  %131 = load i64, i64* %19, align 8
  %132 = icmp ne i64 %131, 0
  %133 = zext i1 %132 to i8
  br label %logical.cmp.done

logical.cmp.done:                                 ; preds = %logical.cmp.rhs, %if.done8
  %134 = phi i8 [ 1, %if.done8 ], [ %133, %logical.cmp.rhs ]
  store i8 %134, i8* %20, align 1
  br label %for.body

for.done:                                         ; preds = %if.then
  br label %defer

defer:                                            ; preds = %for.done
  %135 = load %src.Pattern_Scanner, %src.Pattern_Scanner* %4, align 8
  %136 = bitcast %runtime.Context* %30 to i8*
  call void @src.pattern_scanner_destroy(%src.Pattern_Scanner* %4, i8* %136)
  ret void
}

define internal void @src.pomodoro_init(i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %0 = alloca %runtime.Source_Code_Location, align 8
  %1 = alloca { { %src.Pomodoro_Celebration*, i64 }, i8 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  %2 = bitcast i8* %__.context_ptr to %runtime.Context*
  %3 = call i32 @SDL_AddTimer(i32 500, i8* bitcast (i32 (i32, i8*)* @src.pomodoro_timer_callback to i8*), i8* null)
  store i32 %3, i32* getelementptr inbounds (%src.Pomodoro, %src.Pomodoro* @src.pomodoro, i64 0, i32 1), align 4
  %4 = getelementptr inbounds %runtime.Context, %runtime.Context* %2, i32 0, i32 0
  %5 = load %runtime.Allocator, %runtime.Allocator* %4, align 8
  %6 = bitcast %runtime.Allocator* %4 to { i64, i64 }*
  %7 = load { i64, i64 }, { i64, i64 }* %6, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([59 x i8], [59 x i8]* @"csbs$34b", i64 0, i64 0), i64 58 }, i32 31, i32 25, %..string { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @"csbs$34c", i64 0, i64 0), i64 13 } }, %runtime.Source_Code_Location* %0, align 8
  %8 = bitcast { { %src.Pomodoro_Celebration*, i64 }, i8 }* %1 to i8*
  call void @llvm.memset.p0i8.i64(i8* %8, i8 0, i64 24, i1 false)
  %9 = bitcast %runtime.Context* %2 to i8*
  call void @runtime.make_slice-50151({ { %src.Pomodoro_Celebration*, i64 }, i8 }* sret %1, i64 256, { i64, i64 } %7, %runtime.Source_Code_Location* %0, i8* %9)
  %10 = load { { %src.Pomodoro_Celebration*, i64 }, i8 }, { { %src.Pomodoro_Celebration*, i64 }, i8 }* %1, align 8
  %11 = getelementptr inbounds { { %src.Pomodoro_Celebration*, i64 }, i8 }, { { %src.Pomodoro_Celebration*, i64 }, i8 }* %1, i32 0, i32 0
  %12 = load { %src.Pomodoro_Celebration*, i64 }, { %src.Pomodoro_Celebration*, i64 }* %11, align 8
  store { %src.Pomodoro_Celebration*, i64 } %12, { %src.Pomodoro_Celebration*, i64 }* getelementptr inbounds (%src.Pomodoro, %src.Pomodoro* @src.pomodoro, i64 0, i32 8), align 8
  ret void
}

define internal void @src.pomodoro_destroy(i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %0 = alloca %runtime.Source_Code_Location, align 8
  br label %entry

entry:                                            ; preds = %decls
  %1 = bitcast i8* %__.context_ptr to %runtime.Context*
  %2 = load { %src.Pomodoro_Celebration*, i64 }, { %src.Pomodoro_Celebration*, i64 }* getelementptr inbounds (%src.Pomodoro, %src.Pomodoro* @src.pomodoro, i64 0, i32 8), align 8
  %3 = getelementptr inbounds %runtime.Context, %runtime.Context* %1, i32 0, i32 0
  %4 = load %runtime.Allocator, %runtime.Allocator* %3, align 8
  %5 = load { i64, i64 }, { i64, i64 }* bitcast ({ %src.Pomodoro_Celebration*, i64 }* getelementptr inbounds (%src.Pomodoro, %src.Pomodoro* @src.pomodoro, i64 0, i32 8) to { i64, i64 }*), align 8
  %6 = bitcast %runtime.Allocator* %3 to { i64, i64 }*
  %7 = load { i64, i64 }, { i64, i64 }* %6, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([59 x i8], [59 x i8]* @"csbs$34b", i64 0, i64 0), i64 58 }, i32 35, i32 2, %..string { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"csbs$34d", i64 0, i64 0), i64 16 } }, %runtime.Source_Code_Location* %0, align 8
  %8 = bitcast %runtime.Context* %1 to i8*
  %9 = call i8 @runtime.delete_slice-50204({ i64, i64 } %5, { i64, i64 } %7, %runtime.Source_Code_Location* %0, i8* %8)
  %10 = load i32, i32* getelementptr inbounds (%src.Pomodoro, %src.Pomodoro* @src.pomodoro, i64 0, i32 1), align 4
  %11 = call i32 @SDL_RemoveTimer(i32 %10)
  ret void
}

define internal void @src.pomodoro_celebration_spawn(float %0, float %1, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %2 = alloca float, align 4
  %3 = alloca float, align 4
  %4 = alloca %src.Pomodoro_Celebration, align 4
  %5 = alloca i64, align 8
  %6 = alloca [4 x i8], align 8
  %7 = alloca float, align 4
  %8 = alloca i64, align 8
  %9 = alloca double, align 8
  br label %entry

entry:                                            ; preds = %decls
  store float %0, float* %2, align 4
  store float %1, float* %3, align 4
  %10 = bitcast i8* %__.context_ptr to %runtime.Context*
  %11 = load i8, i8* getelementptr inbounds (%src.Pomodoro, %src.Pomodoro* @src.pomodoro, i64 0, i32 6), align 1
  %12 = trunc i8 %11 to i1
  br i1 %12, label %if.done, label %if.then

if.then:                                          ; preds = %entry
  store i8 1, i8* getelementptr inbounds (%src.Pomodoro, %src.Pomodoro* @src.pomodoro, i64 0, i32 6), align 1
  %13 = bitcast %src.Pomodoro_Celebration* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* %13, i8 0, i64 16, i1 false)
  %14 = load { %src.Pomodoro_Celebration*, i64 }, { %src.Pomodoro_Celebration*, i64 }* getelementptr inbounds (%src.Pomodoro, %src.Pomodoro* @src.pomodoro, i64 0, i32 8), align 8
  store i64 -1, i64* %5, align 8
  br label %for.index.loop

for.index.loop:                                   ; preds = %for.index.body, %if.then
  %15 = load i64, i64* %5, align 8
  %16 = add i64 %15, 1
  store i64 %16, i64* %5, align 8
  %17 = load i64, i64* getelementptr inbounds (%src.Pomodoro, %src.Pomodoro* @src.pomodoro, i64 0, i32 8, i32 1), align 8
  %18 = icmp slt i64 %16, %17
  br i1 %18, label %for.index.body, label %for.index.done

for.index.body:                                   ; preds = %for.index.loop
  %19 = load i64, i64* %5, align 8
  %20 = load %src.Pomodoro_Celebration*, %src.Pomodoro_Celebration** getelementptr inbounds (%src.Pomodoro, %src.Pomodoro* @src.pomodoro, i64 0, i32 8, i32 0), align 8
  %21 = getelementptr %src.Pomodoro_Celebration, %src.Pomodoro_Celebration* %20, i64 %19
  %22 = load %src.Pomodoro_Celebration, %src.Pomodoro_Celebration* %21, align 4
  %23 = getelementptr inbounds %src.Pomodoro_Celebration, %src.Pomodoro_Celebration* %21, i32 0, i32 3
  store i8 0, i8* %23, align 1
  %24 = getelementptr inbounds %src.Pomodoro_Celebration, %src.Pomodoro_Celebration* %21, i32 0, i32 0
  %25 = load float, float* %2, align 4
  store float %25, float* %24, align 4
  %26 = getelementptr inbounds %src.Pomodoro_Celebration, %src.Pomodoro_Celebration* %21, i32 0, i32 1
  %27 = load float, float* %3, align 4
  store float %27, float* %26, align 4
  %28 = getelementptr inbounds %src.Pomodoro_Celebration, %src.Pomodoro_Celebration* %21, i32 0, i32 2
  %29 = bitcast %runtime.Context* %10 to i8*
  %30 = call i64 @src.color_rand_non_alpha(%rand.Rand* null, i8* %29)
  %31 = bitcast [4 x i8]* %6 to i64*
  store i64 %30, i64* %31, align 8
  %32 = load [4 x i8], [4 x i8]* %6, align 1
  store [4 x i8] %32, [4 x i8]* %28, align 1
  %33 = load float, float* %2, align 4
  %34 = bitcast %runtime.Context* %10 to i8*
  %35 = call float @rand.float32(%rand.Rand* null, i8* %34)
  %36 = fmul float %35, 4.000000e+02
  %37 = fadd float %33, %36
  %38 = fsub float %37, 2.000000e+02
  store float %38, float* %7, align 4
  %39 = bitcast %runtime.Context* %10 to i8*
  %40 = call float @rand.float32(%rand.Rand* null, i8* %39)
  %41 = fmul float %40, 4.000000e+03
  %42 = fadd float %41, 5.000000e+02
  %43 = fptosi float %42 to i64
  %44 = mul i64 1000000, %43
  store i64 %44, i64* %8, align 8
  %45 = bitcast %runtime.Context* %10 to i8*
  %46 = call double @rand.float64(%rand.Rand* null, i8* %45)
  %47 = fmul double %46, 2.000000e+00
  store double %47, double* %9, align 8
  %48 = getelementptr inbounds %src.Pomodoro_Celebration, %src.Pomodoro_Celebration* %21, i32 0, i32 1
  %49 = load float, float* %3, align 4
  %50 = load %src.Mode_Panel*, %src.Mode_Panel** @src.mode_panel, align 8
  %51 = getelementptr inbounds %src.Mode_Panel, %src.Mode_Panel* %50, i32 0, i32 0
  %52 = getelementptr inbounds %src.Element, %src.Element* %51, i32 0, i32 5
  %53 = getelementptr inbounds %src.Rect, %src.Rect* %52, i32 0, i32 3
  %54 = load float, float* %53, align 4
  %55 = fadd float %49, %54
  %56 = load i64, i64* %8, align 8
  %57 = load double, double* %9, align 8
  %58 = bitcast %runtime.Context* %10 to i8*
  %59 = call %"src.Flux_Tween(T)-17575"* @ease.flux_to-50244(%"src.ease.Flux_Map(f32)-17572"* getelementptr inbounds (%src.Global_State, %src.Global_State* @src.gs, i64 0, i32 12), float* %48, float %55, i64 3, i64 %56, double %57, i8* %58)
  %60 = getelementptr inbounds %src.Pomodoro_Celebration, %src.Pomodoro_Celebration* %21, i32 0, i32 0
  %61 = load float, float* %7, align 4
  %62 = load i64, i64* %8, align 8
  %63 = load double, double* %9, align 8
  %64 = bitcast %runtime.Context* %10 to i8*
  %65 = call %"src.Flux_Tween(T)-17575"* @ease.flux_to-50244(%"src.ease.Flux_Map(f32)-17572"* getelementptr inbounds (%src.Global_State, %src.Global_State* @src.gs, i64 0, i32 12), float* %60, float %61, i64 2, i64 %62, double %63, i8* %64)
  br label %for.index.loop

for.index.done:                                   ; preds = %for.index.loop
  br label %if.done

if.done:                                          ; preds = %for.index.done, %entry
  ret void
}

define internal void @src.pomodoro_celebration_render(%src.Render_Target* %0, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %1 = alloca %src.Render_Target*, align 8
  %2 = alloca i64, align 8
  %3 = alloca %src.Pomodoro_Celebration, align 4
  %4 = alloca i64, align 8
  %5 = alloca %src.Rect, align 8
  %6 = alloca %src.Rect, align 8
  %7 = alloca i64, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Render_Target* %0, %src.Render_Target** %1, align 8
  %8 = bitcast i8* %__.context_ptr to %runtime.Context*
  %9 = load i8, i8* getelementptr inbounds (%src.Pomodoro, %src.Pomodoro* @src.pomodoro, i64 0, i32 6), align 1
  %10 = trunc i8 %9 to i1
  br i1 %10, label %if.then, label %if.done6

if.then:                                          ; preds = %entry
  store i64 0, i64* %2, align 8
  %11 = bitcast %src.Pomodoro_Celebration* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* %11, i8 0, i64 16, i1 false)
  %12 = load { %src.Pomodoro_Celebration*, i64 }, { %src.Pomodoro_Celebration*, i64 }* getelementptr inbounds (%src.Pomodoro, %src.Pomodoro* @src.pomodoro, i64 0, i32 8), align 8
  store i64 -1, i64* %4, align 8
  br label %for.index.loop

for.index.loop:                                   ; preds = %if.done3, %if.then1, %if.then
  %13 = load i64, i64* %4, align 8
  %14 = add i64 %13, 1
  store i64 %14, i64* %4, align 8
  %15 = load i64, i64* getelementptr inbounds (%src.Pomodoro, %src.Pomodoro* @src.pomodoro, i64 0, i32 8, i32 1), align 8
  %16 = icmp slt i64 %14, %15
  br i1 %16, label %for.index.body, label %for.index.done

for.index.body:                                   ; preds = %for.index.loop
  %17 = load i64, i64* %4, align 8
  %18 = load %src.Pomodoro_Celebration*, %src.Pomodoro_Celebration** getelementptr inbounds (%src.Pomodoro, %src.Pomodoro* @src.pomodoro, i64 0, i32 8, i32 0), align 8
  %19 = getelementptr %src.Pomodoro_Celebration, %src.Pomodoro_Celebration* %18, i64 %17
  %20 = load %src.Pomodoro_Celebration, %src.Pomodoro_Celebration* %19, align 4
  %21 = getelementptr inbounds %src.Pomodoro_Celebration, %src.Pomodoro_Celebration* %19, i32 0, i32 3
  %22 = load i8, i8* %21, align 1
  %23 = trunc i8 %22 to i1
  br i1 %23, label %if.then1, label %if.done

if.then1:                                         ; preds = %for.index.body
  br label %for.index.loop

unreachable:                                      ; No predecessors!
  br label %if.done

if.done:                                          ; preds = %unreachable, %for.index.body
  %24 = load i64, i64* %2, align 8
  %25 = add i64 %24, 1
  store i64 %25, i64* %2, align 8
  %26 = getelementptr inbounds %src.Pomodoro_Celebration, %src.Pomodoro_Celebration* %19, i32 0, i32 0
  %27 = load float, float* %26, align 4
  %28 = getelementptr inbounds %src.Pomodoro_Celebration, %src.Pomodoro_Celebration* %19, i32 0, i32 1
  %29 = load float, float* %28, align 4
  %30 = bitcast %runtime.Context* %8 to i8*
  %31 = call { <2 x float>, <2 x float> } @src.rect_wh(float %27, float %29, float 1.000000e+01, float 1.000000e+01, i8* %30)
  %32 = bitcast %src.Rect* %6 to { <2 x float>, <2 x float> }*
  store { <2 x float>, <2 x float> } %31, { <2 x float>, <2 x float> }* %32, align 8
  %33 = load %src.Rect, %src.Rect* %6, align 4
  store %src.Rect %33, %src.Rect* %5, align 4
  %34 = load %src.Render_Target*, %src.Render_Target** %1, align 8
  %35 = load %src.Rect, %src.Rect* %5, align 4
  %36 = getelementptr inbounds %src.Pomodoro_Celebration, %src.Pomodoro_Celebration* %19, i32 0, i32 2
  %37 = load [4 x i8], [4 x i8]* %36, align 1
  %38 = load float, float* @src.ROUNDNESS, align 4
  %39 = bitcast %src.Rect* %5 to { <2 x float>, <2 x float> }*
  %40 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %39, align 8
  %41 = bitcast i64* %7 to [4 x i8]*
  store [4 x i8] %37, [4 x i8]* %41, align 1
  %42 = load i64, i64* %7, align 8
  %43 = bitcast %runtime.Context* %8 to i8*
  call void @src.render_rect(%src.Render_Target* %34, { <2 x float>, <2 x float> } %40, i64 %42, float %38, i8* %43)
  %44 = getelementptr inbounds %src.Pomodoro_Celebration, %src.Pomodoro_Celebration* %19, i32 0, i32 1
  %45 = load float, float* %44, align 4
  %46 = load %src.Mode_Panel*, %src.Mode_Panel** @src.mode_panel, align 8
  %47 = getelementptr inbounds %src.Mode_Panel, %src.Mode_Panel* %46, i32 0, i32 0
  %48 = getelementptr inbounds %src.Element, %src.Element* %47, i32 0, i32 5
  %49 = getelementptr inbounds %src.Rect, %src.Rect* %48, i32 0, i32 3
  %50 = load float, float* %49, align 4
  %51 = fcmp oge float %45, %50
  %52 = zext i1 %51 to i8
  %53 = trunc i8 %52 to i1
  br i1 %53, label %if.then2, label %if.done3

if.then2:                                         ; preds = %if.done
  %54 = getelementptr inbounds %src.Pomodoro_Celebration, %src.Pomodoro_Celebration* %19, i32 0, i32 3
  store i8 1, i8* %54, align 1
  br label %if.done3

if.done3:                                         ; preds = %if.then2, %if.done
  br label %for.index.loop

for.index.done:                                   ; preds = %for.index.loop
  %55 = load i64, i64* %2, align 8
  %56 = icmp eq i64 %55, 0
  %57 = zext i1 %56 to i8
  %58 = trunc i8 %57 to i1
  br i1 %58, label %if.then4, label %if.done5

if.then4:                                         ; preds = %for.index.done
  store i8 0, i8* getelementptr inbounds (%src.Pomodoro, %src.Pomodoro* @src.pomodoro, i64 0, i32 6), align 1
  br label %if.done5

if.done5:                                         ; preds = %if.then4, %for.index.done
  br label %if.done6

if.done6:                                         ; preds = %if.done5, %entry
  ret void
}

define internal i64 @src.time_stop_stopwatch(%time.Stopwatch* %0, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %1 = alloca %time.Stopwatch*, align 8
  %2 = alloca i64, align 8
  %3 = alloca %time.Tick, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %time.Stopwatch* %0, %time.Stopwatch** %1, align 8
  store i64 0, i64* %2, align 8
  %4 = bitcast i8* %__.context_ptr to %runtime.Context*
  %5 = load %time.Stopwatch*, %time.Stopwatch** %1, align 8
  %6 = getelementptr inbounds %time.Stopwatch, %time.Stopwatch* %5, i32 0, i32 0
  %7 = load i8, i8* %6, align 1
  %8 = trunc i8 %7 to i1
  br i1 %8, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  %9 = load %time.Stopwatch*, %time.Stopwatch** %1, align 8
  %10 = getelementptr inbounds %time.Stopwatch, %time.Stopwatch* %9, i32 0, i32 2
  %11 = load %time.Tick, %time.Tick* %10, align 8
  %12 = call i64 @time.tick_now()
  %13 = bitcast %time.Tick* %3 to i64*
  store i64 %12, i64* %13, align 8
  %14 = load %time.Tick, %time.Tick* %3, align 8
  %15 = bitcast %time.Tick* %10 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = bitcast %time.Tick* %3 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = call i64 @time.tick_diff(i64 %16, i64 %18)
  store i64 %19, i64* %2, align 8
  %20 = load %time.Stopwatch*, %time.Stopwatch** %1, align 8
  %21 = getelementptr inbounds %time.Stopwatch, %time.Stopwatch* %20, i32 0, i32 3
  %22 = load i64, i64* %2, align 8
  %23 = load i64, i64* %21, align 8
  %24 = add i64 %23, %22
  store i64 %24, i64* %21, align 8
  %25 = load %time.Stopwatch*, %time.Stopwatch** %1, align 8
  %26 = getelementptr inbounds %time.Stopwatch, %time.Stopwatch* %25, i32 0, i32 0
  store i8 0, i8* %26, align 1
  br label %if.done

if.done:                                          ; preds = %if.then, %entry
  %27 = load i64, i64* %2, align 8
  store i64 %27, i64* %2, align 8
  ret i64 %27
}

define internal void @src.duration_clock({ i64, i64, i64 }* noalias sret %agg.result, i64 %0, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %1 = alloca i64, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i64 %0, i64* %1, align 8
  %2 = getelementptr inbounds { i64, i64, i64 }, { i64, i64, i64 }* %agg.result, i32 0, i32 0
  %3 = getelementptr inbounds { i64, i64, i64 }, { i64, i64, i64 }* %agg.result, i32 0, i32 1
  %4 = getelementptr inbounds { i64, i64, i64 }, { i64, i64, i64 }* %agg.result, i32 0, i32 2
  %5 = bitcast i8* %__.context_ptr to %runtime.Context*
  %6 = load i64, i64* %1, align 8
  %7 = call double @time.duration_hours(i64 %6)
  %8 = fptosi double %7 to i64
  %9 = srem i64 %8, 24
  store i64 %9, i64* %2, align 8
  %10 = load i64, i64* %1, align 8
  %11 = call double @time.duration_minutes(i64 %10)
  %12 = fptosi double %11 to i64
  %13 = srem i64 %12, 60
  store i64 %13, i64* %3, align 8
  %14 = load i64, i64* %1, align 8
  %15 = call double @time.duration_seconds(i64 %14)
  %16 = fptosi double %15 to i64
  %17 = srem i64 %16, 60
  store i64 %17, i64* %4, align 8
  %18 = load i64, i64* %2, align 8
  %19 = load i64, i64* %3, align 8
  %20 = load i64, i64* %4, align 8
  store i64 %18, i64* %2, align 8
  store i64 %19, i64* %3, align 8
  store i64 %20, i64* %4, align 8
  %21 = getelementptr inbounds { i64, i64, i64 }, { i64, i64, i64 }* %agg.result, i32 0, i32 0
  %22 = getelementptr inbounds { i64, i64, i64 }, { i64, i64, i64 }* %agg.result, i32 0, i32 1
  %23 = getelementptr inbounds { i64, i64, i64 }, { i64, i64, i64 }* %agg.result, i32 0, i32 2
  store i64 %18, i64* %21, align 8
  store i64 %19, i64* %22, align 8
  store i64 %20, i64* %23, align 8
  ret void
}

define internal void @src.pomodoro_stopwatch_stop_add(i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %0 = alloca i64, align 8
  br label %entry

entry:                                            ; preds = %decls
  %1 = bitcast i8* %__.context_ptr to %runtime.Context*
  %2 = bitcast %runtime.Context* %1 to i8*
  %3 = call i64 @src.time_stop_stopwatch(%time.Stopwatch* getelementptr inbounds (%src.Pomodoro, %src.Pomodoro* @src.pomodoro, i64 0, i32 3), i8* %2)
  store i64 %3, i64* %0, align 8
  %4 = load i64, i64* getelementptr inbounds (%src.Pomodoro, %src.Pomodoro* @src.pomodoro, i64 0, i32 4), align 8
  %5 = add i64 %4, 3660000000000
  store i64 %5, i64* getelementptr inbounds (%src.Pomodoro, %src.Pomodoro* @src.pomodoro, i64 0, i32 4), align 8
  ret void
}

define internal void @src.pomodoro_stopwatch_toggle(i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  br label %entry

entry:                                            ; preds = %decls
  %0 = bitcast i8* %__.context_ptr to %runtime.Context*
  %1 = load i8, i8* getelementptr inbounds (%src.Pomodoro, %src.Pomodoro* @src.pomodoro, i64 0, i32 3, i32 0), align 1
  %2 = trunc i8 %1 to i1
  br i1 %2, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %3 = bitcast %runtime.Context* %0 to i8*
  call void @src.pomodoro_stopwatch_stop_add(i8* %3)
  %4 = bitcast %runtime.Context* %0 to i8*
  call void @src.sound_play(i64 1, i8* %4)
  br label %if.done3

if.else:                                          ; preds = %entry
  %5 = load i64, i64* getelementptr inbounds (%src.Pomodoro, %src.Pomodoro* @src.pomodoro, i64 0, i32 3, i32 3), align 8
  %6 = icmp ne i64 %5, 0
  %7 = zext i1 %6 to i8
  %8 = trunc i8 %7 to i1
  br i1 %8, label %if.then1, label %if.else2

if.then1:                                         ; preds = %if.else
  %9 = bitcast %runtime.Context* %0 to i8*
  call void @src.sound_play(i64 2, i8* %9)
  br label %if.done

if.else2:                                         ; preds = %if.else
  %10 = bitcast %runtime.Context* %0 to i8*
  call void @src.sound_play(i64 0, i8* %10)
  br label %if.done

if.done:                                          ; preds = %if.else2, %if.then1
  %11 = bitcast %runtime.Context* %0 to i8*
  call void @time.stopwatch_start(%time.Stopwatch* getelementptr inbounds (%src.Pomodoro, %src.Pomodoro* @src.pomodoro, i64 0, i32 3), i8* %11)
  br label %if.done3

if.done3:                                         ; preds = %if.done, %if.then
  ret void
}

; Function Attrs: alwaysinline
define internal void @src.pomodoro_stopwatch_reset(i8* noalias nocapture nonnull %__.context_ptr) #4 {
decls:
  br label %entry

entry:                                            ; preds = %decls
  %0 = bitcast i8* %__.context_ptr to %runtime.Context*
  %1 = load %src.Icon_Button*, %src.Icon_Button** getelementptr inbounds (%src.Sidebar, %src.Sidebar* @src.sb, i64 0, i32 3, i32 11), align 8
  %2 = getelementptr inbounds %src.Icon_Button, %src.Icon_Button* %1, i32 0, i32 0
  %3 = bitcast %runtime.Context* %0 to i8*
  call void @src.element_hide(%src.Element* %2, i1 true, i8* %3) #4
  %4 = load i8, i8* getelementptr inbounds (%src.Pomodoro, %src.Pomodoro* @src.pomodoro, i64 0, i32 3, i32 0), align 1
  %5 = trunc i8 %4 to i1
  br i1 %5, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  %6 = bitcast %runtime.Context* %0 to i8*
  call void @src.pomodoro_stopwatch_stop_add(i8* %6) #4
  store i64 0, i64* getelementptr inbounds (%src.Pomodoro, %src.Pomodoro* @src.pomodoro, i64 0, i32 3, i32 3), align 8
  br label %if.done

if.done:                                          ; preds = %if.then, %entry
  ret void
}

define internal void @src.pomodoro_stopwatch_hot_toggle(i64 %0, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %1 = alloca i64, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i64 %0, i64* %1, align 8
  %2 = bitcast i8* %__.context_ptr to %runtime.Context*
  %3 = load i64, i64* %1, align 8
  %4 = load i64, i64* getelementptr inbounds (%src.Pomodoro, %src.Pomodoro* @src.pomodoro, i64 0, i32 0), align 8
  %5 = icmp eq i64 %3, %4
  %6 = zext i1 %5 to i8
  %7 = trunc i8 %6 to i1
  br i1 %7, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  %8 = bitcast %runtime.Context* %2 to i8*
  call void @src.pomodoro_stopwatch_toggle(i8* %8)
  br label %defer

defer:                                            ; preds = %if.then
  %9 = load %src.Icon_Button*, %src.Icon_Button** getelementptr inbounds (%src.Sidebar, %src.Sidebar* @src.sb, i64 0, i32 3, i32 11), align 8
  %10 = load i8, i8* getelementptr inbounds (%src.Pomodoro, %src.Pomodoro* @src.pomodoro, i64 0, i32 3, i32 0), align 1
  %11 = icmp eq i8 %10, 0
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %src.Icon_Button, %src.Icon_Button* %9, i32 0, i32 0
  %14 = icmp ne i8 %12, 0
  %15 = bitcast %runtime.Context* %2 to i8*
  call void @src.element_hide(%src.Element* %13, i1 %14, i8* %15)
  %16 = load %src.Mode_Panel*, %src.Mode_Panel** @src.mode_panel, align 8
  %17 = getelementptr inbounds %src.Mode_Panel, %src.Mode_Panel* %16, i32 0, i32 0
  %18 = bitcast %runtime.Context* %2 to i8*
  call void @src.element_repaint(%src.Element* %17, i8* %18)
  ret void

if.done:                                          ; preds = %entry
  %19 = load i64, i64* %1, align 8
  store i64 %19, i64* getelementptr inbounds (%src.Pomodoro, %src.Pomodoro* @src.pomodoro, i64 0, i32 0), align 8
  %20 = load i8, i8* getelementptr inbounds (%src.Pomodoro, %src.Pomodoro* @src.pomodoro, i64 0, i32 3, i32 0), align 1
  %21 = trunc i8 %20 to i1
  br i1 %21, label %if.then1, label %if.done2

if.then1:                                         ; preds = %if.done
  %22 = bitcast %runtime.Context* %2 to i8*
  call void @src.pomodoro_stopwatch_reset(i8* %22)
  br label %if.done2

if.done2:                                         ; preds = %if.then1, %if.done
  %23 = bitcast %runtime.Context* %2 to i8*
  call void @time.stopwatch_start(%time.Stopwatch* getelementptr inbounds (%src.Pomodoro, %src.Pomodoro* @src.pomodoro, i64 0, i32 3), i8* %23)
  %24 = bitcast %runtime.Context* %2 to i8*
  call void @src.pomodoro_label_format(i8* %24)
  br label %defer3

defer3:                                           ; preds = %if.done2
  %25 = load %src.Icon_Button*, %src.Icon_Button** getelementptr inbounds (%src.Sidebar, %src.Sidebar* @src.sb, i64 0, i32 3, i32 11), align 8
  %26 = load i8, i8* getelementptr inbounds (%src.Pomodoro, %src.Pomodoro* @src.pomodoro, i64 0, i32 3, i32 0), align 1
  %27 = icmp eq i8 %26, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %src.Icon_Button, %src.Icon_Button* %25, i32 0, i32 0
  %30 = icmp ne i8 %28, 0
  %31 = bitcast %runtime.Context* %2 to i8*
  call void @src.element_hide(%src.Element* %29, i1 %30, i8* %31)
  %32 = load %src.Mode_Panel*, %src.Mode_Panel** @src.mode_panel, align 8
  %33 = getelementptr inbounds %src.Mode_Panel, %src.Mode_Panel* %32, i32 0, i32 0
  %34 = bitcast %runtime.Context* %2 to i8*
  call void @src.element_repaint(%src.Element* %33, i8* %34)
  ret void
}

define internal i64 @src.pomodoro_stopwatch_diff(i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %0 = alloca i64, align 8
  %1 = alloca float, align 4
  br label %entry

entry:                                            ; preds = %decls
  %2 = bitcast i8* %__.context_ptr to %runtime.Context*
  %3 = load %time.Stopwatch, %time.Stopwatch* getelementptr inbounds (%src.Pomodoro, %src.Pomodoro* @src.pomodoro, i64 0, i32 3), align 8
  %4 = bitcast %runtime.Context* %2 to i8*
  %5 = call i64 @time.stopwatch_duration(%time.Stopwatch* getelementptr inbounds (%src.Pomodoro, %src.Pomodoro* @src.pomodoro, i64 0, i32 3), i8* %4)
  store i64 %5, i64* %0, align 8
  %6 = load i64, i64* getelementptr inbounds (%src.Pomodoro, %src.Pomodoro* @src.pomodoro, i64 0, i32 0), align 8
  %7 = bitcast %runtime.Context* %2 to i8*
  %8 = call float @src.pomodoro_time_index(i64 %6, i8* %7)
  store float %8, float* %1, align 4
  %9 = load float, float* %1, align 4
  %10 = fptosi float %9 to i64
  %11 = mul i64 60000000000, %10
  %12 = load i64, i64* %0, align 8
  %13 = sub i64 %11, %12
  ret i64 %13
}

define internal void @src.pomodoro_label_format(i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %0 = alloca i64, align 8
  %1 = alloca i64, align 8
  %2 = alloca i64, align 8
  %3 = alloca { i64, i64, i64 }, align 8
  %4 = alloca %strings.Builder*, align 8
  %5 = alloca %..any, align 8
  %6 = alloca %..any, align 8
  %7 = alloca { %..any*, i64 }, align 8
  %8 = alloca [2 x %..any], align 8
  %9 = alloca { i64, i64 }, align 8
  %10 = alloca %..string, align 8
  br label %entry

entry:                                            ; preds = %decls
  %11 = bitcast i8* %__.context_ptr to %runtime.Context*
  %12 = bitcast %runtime.Context* %11 to i8*
  %13 = call i64 @src.pomodoro_stopwatch_diff(i8* %12)
  store i64 %13, i64* %0, align 8
  %14 = load i64, i64* %0, align 8
  %15 = bitcast { i64, i64, i64 }* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* %15, i8 0, i64 24, i1 false)
  %16 = bitcast %runtime.Context* %11 to i8*
  call void @src.duration_clock({ i64, i64, i64 }* sret %3, i64 %14, i8* %16)
  %17 = load { i64, i64, i64 }, { i64, i64, i64 }* %3, align 8
  %18 = getelementptr inbounds { i64, i64, i64 }, { i64, i64, i64 }* %3, i32 0, i32 0
  %19 = load i64, i64* %18, align 8
  %20 = getelementptr inbounds { i64, i64, i64 }, { i64, i64, i64 }* %3, i32 0, i32 1
  %21 = load i64, i64* %20, align 8
  %22 = getelementptr inbounds { i64, i64, i64 }, { i64, i64, i64 }* %3, i32 0, i32 2
  %23 = load i64, i64* %22, align 8
  store i64 %21, i64* %1, align 8
  store i64 %23, i64* %2, align 8
  %24 = load %src.Label*, %src.Label** getelementptr inbounds (%src.Sidebar, %src.Sidebar* @src.sb, i64 0, i32 5), align 8
  %25 = getelementptr inbounds %src.Label, %src.Label* %24, i32 0, i32 1
  store %strings.Builder* %25, %strings.Builder** %4, align 8
  %26 = load %strings.Builder*, %strings.Builder** %4, align 8
  %27 = bitcast %runtime.Context* %11 to i8*
  call void @strings.builder_reset(%strings.Builder* %26, i8* %27)
  %28 = load %strings.Builder*, %strings.Builder** %4, align 8
  %29 = load i64, i64* %1, align 8
  %30 = load i64, i64* %2, align 8
  %31 = bitcast %..any* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* %31, i8 0, i64 16, i1 false)
  %32 = bitcast i64* %1 to i8*
  %33 = getelementptr inbounds %..any, %..any* %5, i32 0, i32 0
  %34 = getelementptr inbounds %..any, %..any* %5, i32 0, i32 1
  store i8* %32, i8** %33, align 8
  store i64 4683743612465315843, i64* %34, align 8
  %35 = load %..any, %..any* %5, align 8
  %36 = bitcast %..any* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* %36, i8 0, i64 16, i1 false)
  %37 = bitcast i64* %2 to i8*
  %38 = getelementptr inbounds %..any, %..any* %6, i32 0, i32 0
  %39 = getelementptr inbounds %..any, %..any* %6, i32 0, i32 1
  store i8* %37, i8** %38, align 8
  store i64 4683743612465315843, i64* %39, align 8
  %40 = load %..any, %..any* %6, align 8
  %41 = bitcast { %..any*, i64 }* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* %41, i8 0, i64 16, i1 false)
  %42 = bitcast [2 x %..any]* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* %42, i8 0, i64 32, i1 false)
  %43 = getelementptr [2 x %..any], [2 x %..any]* %8, i64 0, i64 0
  store %..any %35, %..any* %43, align 8
  %44 = getelementptr [2 x %..any], [2 x %..any]* %8, i64 0, i64 1
  store %..any %40, %..any* %44, align 8
  %45 = getelementptr [2 x %..any], [2 x %..any]* %8, i64 0, i64 0
  %46 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %7, i32 0, i32 0
  store %..any* %45, %..any** %46, align 8
  %47 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %7, i32 0, i32 1
  store i64 2, i64* %47, align 8
  %48 = load { %..any*, i64 }, { %..any*, i64 }* %7, align 8
  %49 = bitcast { i64, i64 }* %9 to %..string*
  store %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$34e", i64 0, i64 0), i64 7 }, %..string* %49, align 8
  %50 = load { i64, i64 }, { i64, i64 }* %9, align 8
  %51 = bitcast { %..any*, i64 }* %7 to { i64, i64 }*
  %52 = load { i64, i64 }, { i64, i64 }* %51, align 8
  %53 = bitcast %runtime.Context* %11 to i8*
  %54 = call { i64, i64 } @fmt.sbprintf(%strings.Builder* %28, { i64, i64 } %50, { i64, i64 } %52, i8* %53)
  %55 = bitcast %..string* %10 to { i64, i64 }*
  store { i64, i64 } %54, { i64, i64 }* %55, align 8
  %56 = load %..string, %..string* %10, align 8
  %57 = load %src.Label*, %src.Label** getelementptr inbounds (%src.Sidebar, %src.Sidebar* @src.sb, i64 0, i32 5), align 8
  %58 = getelementptr inbounds %src.Label, %src.Label* %57, i32 0, i32 0
  %59 = bitcast %runtime.Context* %11 to i8*
  call void @src.element_repaint(%src.Element* %58, i8* %59)
  ret void
}

define internal i32 @src.pomodoro_timer_callback(i32 %0, i8* %1) {
decls:
  %2 = alloca i32, align 4
  %3 = alloca i8*, align 8
  %4 = alloca %runtime.Context, align 8
  %5 = alloca %runtime.Context, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i32 %0, i32* %2, align 4
  store i8* %1, i8** %3, align 8
  %6 = bitcast %runtime.Context* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* %6, i8 0, i64 96, i1 false)
  call void @runtime.__init_context-431(%runtime.Context* %4)
  %7 = bitcast %runtime.Context* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* %7, i8 0, i64 96, i1 false)
  call void @runtime.default_context(%runtime.Context* sret %5)
  %8 = load %runtime.Context, %runtime.Context* %5, align 8
  %9 = bitcast %runtime.Context* %4 to i8*
  %10 = bitcast %runtime.Context* %5 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %9, i8* align 8 %10, i64 96, i1 false)
  %11 = load %runtime.Logger, %runtime.Logger* getelementptr inbounds (%src.Global_State, %src.Global_State* @src.gs, i64 0, i32 1), align 8
  %12 = getelementptr inbounds %runtime.Context, %runtime.Context* %4, i32 0, i32 3
  store %runtime.Logger %11, %runtime.Logger* %12, align 8
  %13 = load i8, i8* getelementptr inbounds (%src.Pomodoro, %src.Pomodoro* @src.pomodoro, i64 0, i32 3, i32 0), align 1
  %14 = trunc i8 %13 to i1
  br i1 %14, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  %15 = bitcast %runtime.Context* %4 to i8*
  call void @src.pomodoro_label_format(i8* %15)
  %16 = bitcast %runtime.Context* %4 to i8*
  call void @src.sdl_push_empty_event(i8* %16)
  br label %if.done

if.done:                                          ; preds = %if.then, %entry
  %17 = load i32, i32* %2, align 4
  ret i32 %17
}

define internal float @src.pomodoro_time_index(i64 %0, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %1 = alloca i64, align 8
  %2 = alloca i64, align 8
  %3 = alloca float, align 4
  br label %entry

entry:                                            ; preds = %decls
  store i64 %0, i64* %1, align 8
  %4 = bitcast i8* %__.context_ptr to %runtime.Context*
  %5 = load i64, i64* %1, align 8
  %6 = icmp sgt i64 %5, 0
  %7 = select i1 %6, i64 %5, i64 0
  %8 = icmp slt i64 %7, 2
  %9 = select i1 %8, i64 %7, i64 2
  store i64 %9, i64* %2, align 8
  store float 0.000000e+00, float* %3, align 4
  %10 = load i64, i64* %2, align 8
  switch i64 %10, label %switch.done [
    i64 0, label %switch.case.body
    i64 1, label %switch.case.body1
    i64 2, label %switch.case.body2
  ]

switch.case.body:                                 ; preds = %entry
  %11 = load %src.Slider*, %src.Slider** getelementptr inbounds (%src.Sidebar, %src.Sidebar* @src.sb, i64 0, i32 3, i32 8), align 8
  %12 = getelementptr inbounds %src.Slider, %src.Slider* %11, i32 0, i32 1
  %13 = load float, float* %12, align 4
  store float %13, float* %3, align 4
  br label %switch.done

switch.case.body1:                                ; preds = %entry
  %14 = load %src.Slider*, %src.Slider** getelementptr inbounds (%src.Sidebar, %src.Sidebar* @src.sb, i64 0, i32 3, i32 9), align 8
  %15 = getelementptr inbounds %src.Slider, %src.Slider* %14, i32 0, i32 1
  %16 = load float, float* %15, align 4
  store float %16, float* %3, align 4
  br label %switch.done

switch.case.body2:                                ; preds = %entry
  %17 = load %src.Slider*, %src.Slider** getelementptr inbounds (%src.Sidebar, %src.Sidebar* @src.sb, i64 0, i32 3, i32 10), align 8
  %18 = getelementptr inbounds %src.Slider, %src.Slider* %17, i32 0, i32 1
  %19 = load float, float* %18, align 4
  store float %19, float* %3, align 4
  br label %switch.done

switch.done:                                      ; preds = %switch.case.body2, %switch.case.body1, %switch.case.body, %entry
  %20 = load float, float* %3, align 4
  %21 = fmul float %20, 6.000000e+01
  ret float %21
}

define internal i64 @src.pomodoro_button_message(%src.Element* %0, i64 %1, i64 %2, i8* %3, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %4 = alloca %src.Element*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i8*, align 8
  %8 = alloca %src.Button*, align 8
  %9 = alloca [4 x i8]*, align 8
  %10 = alloca i64, align 8
  %11 = alloca i8, align 1
  br label %entry

entry:                                            ; preds = %decls
  store %src.Element* %0, %src.Element** %4, align 8
  store i64 %1, i64* %5, align 8
  store i64 %2, i64* %6, align 8
  store i8* %3, i8** %7, align 8
  %12 = bitcast i8* %__.context_ptr to %runtime.Context*
  %13 = load %src.Element*, %src.Element** %4, align 8
  %14 = bitcast %src.Element* %13 to %src.Button*
  store %src.Button* %14, %src.Button** %8, align 8
  %15 = load i64, i64* %5, align 8
  switch i64 %15, label %switch.done [
    i64 34, label %switch.case.body
    i64 22, label %switch.case.body4
  ]

switch.case.body:                                 ; preds = %entry
  %16 = load i8*, i8** %7, align 8
  %17 = bitcast i8* %16 to [4 x i8]*
  store [4 x i8]* %17, [4 x i8]** %9, align 8
  %18 = load %src.Button*, %src.Button** %8, align 8
  %19 = getelementptr inbounds %src.Button, %src.Button* %18, i32 0, i32 1
  %20 = load %strings.Builder, %strings.Builder* %19, align 8
  %21 = bitcast %runtime.Context* %12 to i8*
  %22 = call i64 @src.pomodoro_button_message.pomodoro_index_from-0(%strings.Builder* %19, i8* %21)
  store i64 %22, i64* %10, align 8
  %23 = load i64, i64* %10, align 8
  %24 = load i64, i64* getelementptr inbounds (%src.Pomodoro, %src.Pomodoro* @src.pomodoro, i64 0, i32 0), align 8
  %25 = icmp eq i64 %23, %24
  %26 = zext i1 %25 to i8
  store i8 %26, i8* %11, align 1
  %27 = load [4 x i8]*, [4 x i8]** %9, align 8
  %28 = load i8, i8* %11, align 1
  %29 = trunc i8 %28 to i1
  br i1 %29, label %if.then, label %if.else

if.then:                                          ; preds = %switch.case.body
  %30 = load [4 x i8], [4 x i8]* getelementptr inbounds (%src.Theme, %src.Theme* @src.theme, i64 0, i32 2), align 1
  br label %if.done

if.else:                                          ; preds = %switch.case.body
  %31 = load [4 x i8], [4 x i8]* getelementptr inbounds (%src.Theme, %src.Theme* @src.theme, i64 0, i32 5), align 1
  br label %if.done

if.done:                                          ; preds = %if.else, %if.then
  %32 = phi [4 x i8] [ %30, %if.then ], [ %31, %if.else ]
  store [4 x i8] %32, [4 x i8]* %27, align 1
  %33 = load i8, i8* %11, align 1
  %34 = trunc i8 %33 to i1
  br i1 %34, label %if.then1, label %if.else2

if.then1:                                         ; preds = %if.done
  br label %if.done3

if.else2:                                         ; preds = %if.done
  br label %if.done3

if.done3:                                         ; preds = %if.else2, %if.then1
  %35 = phi i64 [ 1, %if.then1 ], [ 2, %if.else2 ]
  ret i64 %35

switch.case.body4:                                ; preds = %entry
  %36 = load %src.Button*, %src.Button** %8, align 8
  %37 = getelementptr inbounds %src.Button, %src.Button* %36, i32 0, i32 1
  %38 = load %strings.Builder, %strings.Builder* %37, align 8
  %39 = bitcast %runtime.Context* %12 to i8*
  %40 = call i64 @src.pomodoro_button_message.pomodoro_index_from-0(%strings.Builder* %37, i8* %39)
  store i64 %40, i64* getelementptr inbounds (%src.Pomodoro, %src.Pomodoro* @src.pomodoro, i64 0, i32 0), align 8
  %41 = bitcast %runtime.Context* %12 to i8*
  call void @src.pomodoro_stopwatch_reset(i8* %41)
  %42 = bitcast %runtime.Context* %12 to i8*
  call void @src.pomodoro_label_format(i8* %42)
  %43 = load %src.Element*, %src.Element** %4, align 8
  %44 = bitcast %runtime.Context* %12 to i8*
  call void @src.element_repaint(%src.Element* %43, i8* %44)
  br label %switch.done

switch.done:                                      ; preds = %switch.case.body4, %entry
  ret i64 0
}

define internal void @src.pomodoro_update(i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %0 = alloca i64, align 8
  %1 = alloca i64, align 8
  %2 = alloca %strings.Builder*, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca { i64, i64, i64 }, align 8
  %7 = alloca %..any, align 8
  %8 = alloca %..any, align 8
  %9 = alloca %..any, align 8
  %10 = alloca { %..any*, i64 }, align 8
  %11 = alloca [3 x %..any], align 8
  %12 = alloca { i64, i64 }, align 8
  %13 = alloca %..string, align 8
  %14 = alloca float, align 4
  %15 = alloca { <2 x float>, <2 x float> }, align 8
  %16 = alloca float, align 4
  br label %entry

entry:                                            ; preds = %decls
  %17 = bitcast i8* %__.context_ptr to %runtime.Context*
  %18 = bitcast %runtime.Context* %17 to i8*
  %19 = call i64 @src.pomodoro_stopwatch_diff(i8* %18)
  store i64 %19, i64* %0, align 8
  %20 = load i64, i64* %0, align 8
  %21 = icmp slt i64 %20, 0
  %22 = zext i1 %21 to i8
  %23 = trunc i8 %22 to i1
  br i1 %23, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  %24 = bitcast %runtime.Context* %17 to i8*
  call void @src.pomodoro_stopwatch_reset(i8* %24)
  %25 = bitcast %runtime.Context* %17 to i8*
  call void @src.sound_play(i64 3, i8* %25)
  br label %if.done

if.done:                                          ; preds = %if.then, %entry
  %26 = load %src.Slider*, %src.Slider** getelementptr inbounds (%src.Sidebar, %src.Sidebar* @src.sb, i64 0, i32 3, i32 12), align 8
  %27 = getelementptr inbounds %src.Slider, %src.Slider* %26, i32 0, i32 1
  %28 = load float, float* %27, align 4
  %29 = fmul float %28, 2.400000e+01
  %30 = fptosi float %29 to i64
  %31 = icmp sgt i64 %30, 1
  %32 = select i1 %31, i64 %30, i64 1
  %33 = mul i64 %32, 3600000000000
  store i64 %33, i64* %1, align 8
  %34 = load %src.Linear_Gauge*, %src.Linear_Gauge** getelementptr inbounds (%src.Sidebar, %src.Sidebar* @src.sb, i64 0, i32 3, i32 13), align 8
  %35 = getelementptr inbounds %src.Linear_Gauge, %src.Linear_Gauge* %34, i32 0, i32 1
  %36 = load i64, i64* getelementptr inbounds (%src.Pomodoro, %src.Pomodoro* @src.pomodoro, i64 0, i32 4), align 8
  %37 = sitofp i64 %36 to float
  %38 = load i64, i64* %1, align 8
  %39 = sitofp i64 %38 to float
  %40 = fdiv float %37, %39
  store float %40, float* %35, align 4
  %41 = load %src.Label*, %src.Label** getelementptr inbounds (%src.Sidebar, %src.Sidebar* @src.sb, i64 0, i32 3, i32 14), align 8
  %42 = getelementptr inbounds %src.Label, %src.Label* %41, i32 0, i32 1
  store %strings.Builder* %42, %strings.Builder** %2, align 8
  %43 = load %strings.Builder*, %strings.Builder** %2, align 8
  %44 = bitcast %runtime.Context* %17 to i8*
  call void @strings.builder_reset(%strings.Builder* %43, i8* %44)
  %45 = load i64, i64* getelementptr inbounds (%src.Pomodoro, %src.Pomodoro* @src.pomodoro, i64 0, i32 4), align 8
  %46 = bitcast { i64, i64, i64 }* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* %46, i8 0, i64 24, i1 false)
  %47 = bitcast %runtime.Context* %17 to i8*
  call void @src.duration_clock({ i64, i64, i64 }* sret %6, i64 %45, i8* %47)
  %48 = load { i64, i64, i64 }, { i64, i64, i64 }* %6, align 8
  %49 = getelementptr inbounds { i64, i64, i64 }, { i64, i64, i64 }* %6, i32 0, i32 0
  %50 = load i64, i64* %49, align 8
  %51 = getelementptr inbounds { i64, i64, i64 }, { i64, i64, i64 }* %6, i32 0, i32 1
  %52 = load i64, i64* %51, align 8
  %53 = getelementptr inbounds { i64, i64, i64 }, { i64, i64, i64 }* %6, i32 0, i32 2
  %54 = load i64, i64* %53, align 8
  store i64 %50, i64* %3, align 8
  store i64 %52, i64* %4, align 8
  store i64 %54, i64* %5, align 8
  %55 = load %strings.Builder*, %strings.Builder** %2, align 8
  %56 = load i64, i64* %3, align 8
  %57 = load i64, i64* %4, align 8
  %58 = load i64, i64* %5, align 8
  %59 = bitcast %..any* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* %59, i8 0, i64 16, i1 false)
  %60 = bitcast i64* %3 to i8*
  %61 = getelementptr inbounds %..any, %..any* %7, i32 0, i32 0
  %62 = getelementptr inbounds %..any, %..any* %7, i32 0, i32 1
  store i8* %60, i8** %61, align 8
  store i64 4683743612465315843, i64* %62, align 8
  %63 = load %..any, %..any* %7, align 8
  %64 = bitcast %..any* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* %64, i8 0, i64 16, i1 false)
  %65 = bitcast i64* %4 to i8*
  %66 = getelementptr inbounds %..any, %..any* %8, i32 0, i32 0
  %67 = getelementptr inbounds %..any, %..any* %8, i32 0, i32 1
  store i8* %65, i8** %66, align 8
  store i64 4683743612465315843, i64* %67, align 8
  %68 = load %..any, %..any* %8, align 8
  %69 = bitcast %..any* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* %69, i8 0, i64 16, i1 false)
  %70 = bitcast i64* %5 to i8*
  %71 = getelementptr inbounds %..any, %..any* %9, i32 0, i32 0
  %72 = getelementptr inbounds %..any, %..any* %9, i32 0, i32 1
  store i8* %70, i8** %71, align 8
  store i64 4683743612465315843, i64* %72, align 8
  %73 = load %..any, %..any* %9, align 8
  %74 = bitcast { %..any*, i64 }* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* %74, i8 0, i64 16, i1 false)
  %75 = bitcast [3 x %..any]* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* %75, i8 0, i64 48, i1 false)
  %76 = getelementptr [3 x %..any], [3 x %..any]* %11, i64 0, i64 0
  store %..any %63, %..any* %76, align 8
  %77 = getelementptr [3 x %..any], [3 x %..any]* %11, i64 0, i64 1
  store %..any %68, %..any* %77, align 8
  %78 = getelementptr [3 x %..any], [3 x %..any]* %11, i64 0, i64 2
  store %..any %73, %..any* %78, align 8
  %79 = getelementptr [3 x %..any], [3 x %..any]* %11, i64 0, i64 0
  %80 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %10, i32 0, i32 0
  store %..any* %79, %..any** %80, align 8
  %81 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %10, i32 0, i32 1
  store i64 3, i64* %81, align 8
  %82 = load { %..any*, i64 }, { %..any*, i64 }* %10, align 8
  %83 = bitcast { i64, i64 }* %12 to %..string*
  store %..string { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @"csbs$34f", i64 0, i64 0), i64 18 }, %..string* %83, align 8
  %84 = load { i64, i64 }, { i64, i64 }* %12, align 8
  %85 = bitcast { %..any*, i64 }* %10 to { i64, i64 }*
  %86 = load { i64, i64 }, { i64, i64 }* %85, align 8
  %87 = bitcast %runtime.Context* %17 to i8*
  %88 = call { i64, i64 } @fmt.sbprintf(%strings.Builder* %55, { i64, i64 } %84, { i64, i64 } %86, i8* %87)
  %89 = bitcast %..string* %13 to { i64, i64 }*
  store { i64, i64 } %88, { i64, i64 }* %89, align 8
  %90 = load %..string, %..string* %13, align 8
  %91 = load %src.Linear_Gauge*, %src.Linear_Gauge** getelementptr inbounds (%src.Sidebar, %src.Sidebar* @src.sb, i64 0, i32 3, i32 13), align 8
  %92 = getelementptr inbounds %src.Linear_Gauge, %src.Linear_Gauge* %91, i32 0, i32 1
  %93 = load float, float* %92, align 4
  %94 = fcmp ogt float %93, 1.000000e+00
  %95 = zext i1 %94 to i8
  %96 = trunc i8 %95 to i1
  br i1 %96, label %cmp.and, label %if.done2

cmp.and:                                          ; preds = %if.done
  %97 = load i8, i8* getelementptr inbounds (%src.Pomodoro, %src.Pomodoro* @src.pomodoro, i64 0, i32 5), align 1
  %98 = trunc i8 %97 to i1
  br i1 %98, label %if.done2, label %if.then1

if.then1:                                         ; preds = %cmp.and
  store i8 1, i8* getelementptr inbounds (%src.Pomodoro, %src.Pomodoro* @src.pomodoro, i64 0, i32 5), align 1
  %99 = load %src.Linear_Gauge*, %src.Linear_Gauge** getelementptr inbounds (%src.Sidebar, %src.Sidebar* @src.sb, i64 0, i32 3, i32 13), align 8
  %100 = getelementptr inbounds %src.Linear_Gauge, %src.Linear_Gauge* %99, i32 0, i32 0
  %101 = getelementptr inbounds %src.Element, %src.Element* %100, i32 0, i32 5
  %102 = getelementptr inbounds %src.Rect, %src.Rect* %101, i32 0, i32 0
  %103 = load float, float* %102, align 4
  %104 = load %src.Linear_Gauge*, %src.Linear_Gauge** getelementptr inbounds (%src.Sidebar, %src.Sidebar* @src.sb, i64 0, i32 3, i32 13), align 8
  %105 = getelementptr inbounds %src.Linear_Gauge, %src.Linear_Gauge* %104, i32 0, i32 0
  %106 = getelementptr inbounds %src.Element, %src.Element* %105, i32 0, i32 5
  %107 = load %src.Rect, %src.Rect* %106, align 4
  %108 = bitcast { <2 x float>, <2 x float> }* %15 to %src.Rect*
  store %src.Rect %107, %src.Rect* %108, align 4
  %109 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %15, align 8
  %110 = bitcast %runtime.Context* %17 to i8*
  %111 = call float @src.rect_width_halfed({ <2 x float>, <2 x float> } %109, i8* %110)
  %112 = fadd float %103, %111
  store float %112, float* %14, align 4
  %113 = load %src.Linear_Gauge*, %src.Linear_Gauge** getelementptr inbounds (%src.Sidebar, %src.Sidebar* @src.sb, i64 0, i32 3, i32 13), align 8
  %114 = getelementptr inbounds %src.Linear_Gauge, %src.Linear_Gauge* %113, i32 0, i32 0
  %115 = getelementptr inbounds %src.Element, %src.Element* %114, i32 0, i32 5
  %116 = getelementptr inbounds %src.Rect, %src.Rect* %115, i32 0, i32 2
  %117 = load float, float* %116, align 4
  store float %117, float* %16, align 4
  %118 = load float, float* %14, align 4
  %119 = load float, float* %16, align 4
  %120 = bitcast %runtime.Context* %17 to i8*
  call void @src.pomodoro_celebration_spawn(float %118, float %119, i8* %120)
  br label %if.done2

if.done2:                                         ; preds = %if.then1, %cmp.and, %if.done
  ret void
}

; Function Attrs: alwaysinline
define internal i8 @src.rect_valid({ <2 x float>, <2 x float> } %0, i8* noalias nocapture nonnull %__.context_ptr) #4 {
decls:
  %1 = alloca %src.Rect, align 8
  br label %entry

entry:                                            ; preds = %decls
  %2 = bitcast %src.Rect* %1 to { <2 x float>, <2 x float> }*
  store { <2 x float>, <2 x float> } %0, { <2 x float>, <2 x float> }* %2, align 8
  %3 = load %src.Rect, %src.Rect* %1, align 4
  %4 = bitcast i8* %__.context_ptr to %runtime.Context*
  %5 = getelementptr inbounds %src.Rect, %src.Rect* %1, i32 0, i32 1
  %6 = load float, float* %5, align 4
  %7 = getelementptr inbounds %src.Rect, %src.Rect* %1, i32 0, i32 0
  %8 = load float, float* %7, align 4
  %9 = fcmp ogt float %6, %8
  %10 = zext i1 %9 to i8
  %11 = trunc i8 %10 to i1
  br i1 %11, label %logical.cmp.rhs, label %logical.cmp.done

logical.cmp.rhs:                                  ; preds = %entry
  %12 = getelementptr inbounds %src.Rect, %src.Rect* %1, i32 0, i32 3
  %13 = load float, float* %12, align 4
  %14 = getelementptr inbounds %src.Rect, %src.Rect* %1, i32 0, i32 2
  %15 = load float, float* %14, align 4
  %16 = fcmp ogt float %13, %15
  %17 = zext i1 %16 to i8
  br label %logical.cmp.done

logical.cmp.done:                                 ; preds = %logical.cmp.rhs, %entry
  %18 = phi i8 [ 0, %entry ], [ %17, %logical.cmp.rhs ]
  ret i8 %18
}

; Function Attrs: alwaysinline
define internal i8 @src.rect_invalid({ <2 x float>, <2 x float> } %0, i8* noalias nocapture nonnull %__.context_ptr) #4 {
decls:
  %1 = alloca %src.Rect, align 8
  br label %entry

entry:                                            ; preds = %decls
  %2 = bitcast %src.Rect* %1 to { <2 x float>, <2 x float> }*
  store { <2 x float>, <2 x float> } %0, { <2 x float>, <2 x float> }* %2, align 8
  %3 = load %src.Rect, %src.Rect* %1, align 4
  %4 = bitcast i8* %__.context_ptr to %runtime.Context*
  %5 = load %src.Rect, %src.Rect* %1, align 4
  %6 = bitcast %src.Rect* %1 to { <2 x float>, <2 x float> }*
  %7 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %6, align 8
  %8 = bitcast %runtime.Context* %4 to i8*
  %9 = call i8 @src.rect_valid({ <2 x float>, <2 x float> } %7, i8* %8) #4
  %10 = icmp eq i8 %9, 0
  %11 = zext i1 %10 to i8
  ret i8 %11
}

; Function Attrs: alwaysinline
define internal { <2 x float>, <2 x float> } @src.rect_wh(float %0, float %1, float %2, float %3, i8* noalias nocapture nonnull %__.context_ptr) #4 {
decls:
  %4 = alloca float, align 4
  %5 = alloca float, align 4
  %6 = alloca float, align 4
  %7 = alloca float, align 4
  %8 = alloca %src.Rect, align 8
  br label %entry

entry:                                            ; preds = %decls
  store float %0, float* %4, align 4
  store float %1, float* %5, align 4
  store float %2, float* %6, align 4
  store float %3, float* %7, align 4
  %9 = bitcast i8* %__.context_ptr to %runtime.Context*
  %10 = bitcast %src.Rect* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* %10, i8 0, i64 16, i1 false)
  store %src.Rect zeroinitializer, %src.Rect* %8, align 4
  %11 = load float, float* %4, align 4
  %12 = getelementptr inbounds %src.Rect, %src.Rect* %8, i32 0, i32 0
  store float %11, float* %12, align 4
  %13 = load float, float* %4, align 4
  %14 = load float, float* %6, align 4
  %15 = fadd float %13, %14
  %16 = getelementptr inbounds %src.Rect, %src.Rect* %8, i32 0, i32 1
  store float %15, float* %16, align 4
  %17 = load float, float* %5, align 4
  %18 = getelementptr inbounds %src.Rect, %src.Rect* %8, i32 0, i32 2
  store float %17, float* %18, align 4
  %19 = load float, float* %5, align 4
  %20 = load float, float* %7, align 4
  %21 = fadd float %19, %20
  %22 = getelementptr inbounds %src.Rect, %src.Rect* %8, i32 0, i32 3
  store float %21, float* %22, align 4
  %23 = load %src.Rect, %src.Rect* %8, align 4
  %24 = bitcast %src.Rect* %8 to { <2 x float>, <2 x float> }*
  %25 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %24, align 8
  ret { <2 x float>, <2 x float> } %25
}

; Function Attrs: alwaysinline
define internal <2 x float> @src.rect_center({ <2 x float>, <2 x float> } %0, i8* noalias nocapture nonnull %__.context_ptr) #4 {
decls:
  %1 = alloca %src.Rect, align 8
  %2 = alloca float, align 4
  %3 = alloca float, align 4
  %4 = alloca { float, float }, align 8
  br label %entry

entry:                                            ; preds = %decls
  %5 = bitcast %src.Rect* %1 to { <2 x float>, <2 x float> }*
  store { <2 x float>, <2 x float> } %0, { <2 x float>, <2 x float> }* %5, align 8
  %6 = load %src.Rect, %src.Rect* %1, align 4
  store float 0.000000e+00, float* %2, align 4
  store float 0.000000e+00, float* %3, align 4
  %7 = bitcast i8* %__.context_ptr to %runtime.Context*
  %8 = getelementptr inbounds %src.Rect, %src.Rect* %1, i32 0, i32 0
  %9 = load float, float* %8, align 4
  %10 = getelementptr inbounds %src.Rect, %src.Rect* %1, i32 0, i32 1
  %11 = load float, float* %10, align 4
  %12 = getelementptr inbounds %src.Rect, %src.Rect* %1, i32 0, i32 0
  %13 = load float, float* %12, align 4
  %14 = fsub float %11, %13
  %15 = fdiv float %14, 2.000000e+00
  %16 = fadd float %9, %15
  %17 = getelementptr inbounds %src.Rect, %src.Rect* %1, i32 0, i32 2
  %18 = load float, float* %17, align 4
  %19 = getelementptr inbounds %src.Rect, %src.Rect* %1, i32 0, i32 3
  %20 = load float, float* %19, align 4
  %21 = getelementptr inbounds %src.Rect, %src.Rect* %1, i32 0, i32 2
  %22 = load float, float* %21, align 4
  %23 = fsub float %20, %22
  %24 = fdiv float %23, 2.000000e+00
  %25 = fadd float %18, %24
  store float %16, float* %2, align 4
  store float %25, float* %3, align 4
  %26 = getelementptr inbounds { float, float }, { float, float }* %4, i32 0, i32 0
  %27 = getelementptr inbounds { float, float }, { float, float }* %4, i32 0, i32 1
  store float %16, float* %26, align 4
  store float %25, float* %27, align 4
  %28 = load { float, float }, { float, float }* %4, align 4
  %29 = bitcast { float, float }* %4 to <2 x float>*
  %30 = load <2 x float>, <2 x float>* %29, align 8
  ret <2 x float> %30
}

; Function Attrs: alwaysinline
define internal float @src.rect_width_halfed({ <2 x float>, <2 x float> } %0, i8* noalias nocapture nonnull %__.context_ptr) #4 {
decls:
  %1 = alloca %src.Rect, align 8
  br label %entry

entry:                                            ; preds = %decls
  %2 = bitcast %src.Rect* %1 to { <2 x float>, <2 x float> }*
  store { <2 x float>, <2 x float> } %0, { <2 x float>, <2 x float> }* %2, align 8
  %3 = load %src.Rect, %src.Rect* %1, align 4
  %4 = bitcast i8* %__.context_ptr to %runtime.Context*
  %5 = getelementptr inbounds %src.Rect, %src.Rect* %1, i32 0, i32 1
  %6 = load float, float* %5, align 4
  %7 = getelementptr inbounds %src.Rect, %src.Rect* %1, i32 0, i32 0
  %8 = load float, float* %7, align 4
  %9 = fsub float %6, %8
  %10 = fdiv float %9, 2.000000e+00
  ret float %10
}

; Function Attrs: alwaysinline
define internal float @src.rect_width({ <2 x float>, <2 x float> } %0, i8* noalias nocapture nonnull %__.context_ptr) #4 {
decls:
  %1 = alloca %src.Rect, align 8
  br label %entry

entry:                                            ; preds = %decls
  %2 = bitcast %src.Rect* %1 to { <2 x float>, <2 x float> }*
  store { <2 x float>, <2 x float> } %0, { <2 x float>, <2 x float> }* %2, align 8
  %3 = load %src.Rect, %src.Rect* %1, align 4
  %4 = bitcast i8* %__.context_ptr to %runtime.Context*
  %5 = getelementptr inbounds %src.Rect, %src.Rect* %1, i32 0, i32 1
  %6 = load float, float* %5, align 4
  %7 = getelementptr inbounds %src.Rect, %src.Rect* %1, i32 0, i32 0
  %8 = load float, float* %7, align 4
  %9 = fsub float %6, %8
  ret float %9
}

; Function Attrs: alwaysinline
define internal float @src.rect_height_halfed({ <2 x float>, <2 x float> } %0, i8* noalias nocapture nonnull %__.context_ptr) #4 {
decls:
  %1 = alloca %src.Rect, align 8
  br label %entry

entry:                                            ; preds = %decls
  %2 = bitcast %src.Rect* %1 to { <2 x float>, <2 x float> }*
  store { <2 x float>, <2 x float> } %0, { <2 x float>, <2 x float> }* %2, align 8
  %3 = load %src.Rect, %src.Rect* %1, align 4
  %4 = bitcast i8* %__.context_ptr to %runtime.Context*
  %5 = getelementptr inbounds %src.Rect, %src.Rect* %1, i32 0, i32 3
  %6 = load float, float* %5, align 4
  %7 = getelementptr inbounds %src.Rect, %src.Rect* %1, i32 0, i32 2
  %8 = load float, float* %7, align 4
  %9 = fsub float %6, %8
  %10 = fdiv float %9, 2.000000e+00
  ret float %10
}

; Function Attrs: alwaysinline
define internal float @src.rect_height({ <2 x float>, <2 x float> } %0, i8* noalias nocapture nonnull %__.context_ptr) #4 {
decls:
  %1 = alloca %src.Rect, align 8
  br label %entry

entry:                                            ; preds = %decls
  %2 = bitcast %src.Rect* %1 to { <2 x float>, <2 x float> }*
  store { <2 x float>, <2 x float> } %0, { <2 x float>, <2 x float> }* %2, align 8
  %3 = load %src.Rect, %src.Rect* %1, align 4
  %4 = bitcast i8* %__.context_ptr to %runtime.Context*
  %5 = getelementptr inbounds %src.Rect, %src.Rect* %1, i32 0, i32 3
  %6 = load float, float* %5, align 4
  %7 = getelementptr inbounds %src.Rect, %src.Rect* %1, i32 0, i32 2
  %8 = load float, float* %7, align 4
  %9 = fsub float %6, %8
  ret float %9
}

; Function Attrs: alwaysinline
define internal { <2 x float>, <2 x float> } @src.rect_xxyy(float %0, float %1, i8* noalias nocapture nonnull %__.context_ptr) #4 {
decls:
  %2 = alloca float, align 4
  %3 = alloca float, align 4
  %4 = alloca %src.Rect, align 8
  br label %entry

entry:                                            ; preds = %decls
  store float %0, float* %2, align 4
  store float %1, float* %3, align 4
  %5 = bitcast i8* %__.context_ptr to %runtime.Context*
  %6 = bitcast %src.Rect* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* %6, i8 0, i64 16, i1 false)
  store %src.Rect zeroinitializer, %src.Rect* %4, align 4
  %7 = load float, float* %2, align 4
  %8 = getelementptr inbounds %src.Rect, %src.Rect* %4, i32 0, i32 0
  store float %7, float* %8, align 4
  %9 = load float, float* %2, align 4
  %10 = getelementptr inbounds %src.Rect, %src.Rect* %4, i32 0, i32 1
  store float %9, float* %10, align 4
  %11 = load float, float* %3, align 4
  %12 = getelementptr inbounds %src.Rect, %src.Rect* %4, i32 0, i32 2
  store float %11, float* %12, align 4
  %13 = load float, float* %3, align 4
  %14 = getelementptr inbounds %src.Rect, %src.Rect* %4, i32 0, i32 3
  store float %13, float* %14, align 4
  %15 = load %src.Rect, %src.Rect* %4, align 4
  %16 = bitcast %src.Rect* %4 to { <2 x float>, <2 x float> }*
  %17 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %16, align 8
  ret { <2 x float>, <2 x float> } %17
}

define internal { <2 x float>, <2 x float> } @src.rect_intersection({ <2 x float>, <2 x float> } %0, { <2 x float>, <2 x float> } %1, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %2 = alloca %src.Rect, align 8
  %3 = alloca %src.Rect, align 8
  %4 = alloca %src.Rect, align 8
  br label %entry

entry:                                            ; preds = %decls
  %5 = bitcast %src.Rect* %2 to { <2 x float>, <2 x float> }*
  store { <2 x float>, <2 x float> } %0, { <2 x float>, <2 x float> }* %5, align 8
  %6 = load %src.Rect, %src.Rect* %2, align 4
  %7 = bitcast %src.Rect* %3 to { <2 x float>, <2 x float> }*
  store { <2 x float>, <2 x float> } %1, { <2 x float>, <2 x float> }* %7, align 8
  %8 = load %src.Rect, %src.Rect* %3, align 4
  %9 = bitcast i8* %__.context_ptr to %runtime.Context*
  %10 = load %src.Rect, %src.Rect* %2, align 4
  store %src.Rect %10, %src.Rect* %4, align 4
  %11 = getelementptr inbounds %src.Rect, %src.Rect* %4, i32 0, i32 0
  %12 = load float, float* %11, align 4
  %13 = getelementptr inbounds %src.Rect, %src.Rect* %3, i32 0, i32 0
  %14 = load float, float* %13, align 4
  %15 = fcmp olt float %12, %14
  %16 = zext i1 %15 to i8
  %17 = trunc i8 %16 to i1
  br i1 %17, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  %18 = getelementptr inbounds %src.Rect, %src.Rect* %4, i32 0, i32 0
  %19 = getelementptr inbounds %src.Rect, %src.Rect* %3, i32 0, i32 0
  %20 = load float, float* %19, align 4
  store float %20, float* %18, align 4
  br label %if.done

if.done:                                          ; preds = %if.then, %entry
  %21 = getelementptr inbounds %src.Rect, %src.Rect* %4, i32 0, i32 2
  %22 = load float, float* %21, align 4
  %23 = getelementptr inbounds %src.Rect, %src.Rect* %3, i32 0, i32 2
  %24 = load float, float* %23, align 4
  %25 = fcmp olt float %22, %24
  %26 = zext i1 %25 to i8
  %27 = trunc i8 %26 to i1
  br i1 %27, label %if.then1, label %if.done2

if.then1:                                         ; preds = %if.done
  %28 = getelementptr inbounds %src.Rect, %src.Rect* %4, i32 0, i32 2
  %29 = getelementptr inbounds %src.Rect, %src.Rect* %3, i32 0, i32 2
  %30 = load float, float* %29, align 4
  store float %30, float* %28, align 4
  br label %if.done2

if.done2:                                         ; preds = %if.then1, %if.done
  %31 = getelementptr inbounds %src.Rect, %src.Rect* %4, i32 0, i32 1
  %32 = load float, float* %31, align 4
  %33 = getelementptr inbounds %src.Rect, %src.Rect* %3, i32 0, i32 1
  %34 = load float, float* %33, align 4
  %35 = fcmp ogt float %32, %34
  %36 = zext i1 %35 to i8
  %37 = trunc i8 %36 to i1
  br i1 %37, label %if.then3, label %if.done4

if.then3:                                         ; preds = %if.done2
  %38 = getelementptr inbounds %src.Rect, %src.Rect* %4, i32 0, i32 1
  %39 = getelementptr inbounds %src.Rect, %src.Rect* %3, i32 0, i32 1
  %40 = load float, float* %39, align 4
  store float %40, float* %38, align 4
  br label %if.done4

if.done4:                                         ; preds = %if.then3, %if.done2
  %41 = getelementptr inbounds %src.Rect, %src.Rect* %4, i32 0, i32 3
  %42 = load float, float* %41, align 4
  %43 = getelementptr inbounds %src.Rect, %src.Rect* %3, i32 0, i32 3
  %44 = load float, float* %43, align 4
  %45 = fcmp ogt float %42, %44
  %46 = zext i1 %45 to i8
  %47 = trunc i8 %46 to i1
  br i1 %47, label %if.then5, label %if.done6

if.then5:                                         ; preds = %if.done4
  %48 = getelementptr inbounds %src.Rect, %src.Rect* %4, i32 0, i32 3
  %49 = getelementptr inbounds %src.Rect, %src.Rect* %3, i32 0, i32 3
  %50 = load float, float* %49, align 4
  store float %50, float* %48, align 4
  br label %if.done6

if.done6:                                         ; preds = %if.then5, %if.done4
  %51 = load %src.Rect, %src.Rect* %4, align 4
  %52 = bitcast %src.Rect* %4 to { <2 x float>, <2 x float> }*
  %53 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %52, align 8
  ret { <2 x float>, <2 x float> } %53
}

define internal { <2 x float>, <2 x float> } @src.rect_bounding({ <2 x float>, <2 x float> } %0, { <2 x float>, <2 x float> } %1, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %2 = alloca %src.Rect, align 8
  %3 = alloca %src.Rect, align 8
  %4 = alloca %src.Rect, align 8
  br label %entry

entry:                                            ; preds = %decls
  %5 = bitcast %src.Rect* %2 to { <2 x float>, <2 x float> }*
  store { <2 x float>, <2 x float> } %0, { <2 x float>, <2 x float> }* %5, align 8
  %6 = load %src.Rect, %src.Rect* %2, align 4
  %7 = bitcast %src.Rect* %3 to { <2 x float>, <2 x float> }*
  store { <2 x float>, <2 x float> } %1, { <2 x float>, <2 x float> }* %7, align 8
  %8 = load %src.Rect, %src.Rect* %3, align 4
  %9 = bitcast i8* %__.context_ptr to %runtime.Context*
  %10 = load %src.Rect, %src.Rect* %2, align 4
  store %src.Rect %10, %src.Rect* %4, align 4
  %11 = getelementptr inbounds %src.Rect, %src.Rect* %4, i32 0, i32 0
  %12 = load float, float* %11, align 4
  %13 = getelementptr inbounds %src.Rect, %src.Rect* %3, i32 0, i32 0
  %14 = load float, float* %13, align 4
  %15 = fcmp ogt float %12, %14
  %16 = zext i1 %15 to i8
  %17 = trunc i8 %16 to i1
  br i1 %17, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  %18 = getelementptr inbounds %src.Rect, %src.Rect* %4, i32 0, i32 0
  %19 = getelementptr inbounds %src.Rect, %src.Rect* %3, i32 0, i32 0
  %20 = load float, float* %19, align 4
  store float %20, float* %18, align 4
  br label %if.done

if.done:                                          ; preds = %if.then, %entry
  %21 = getelementptr inbounds %src.Rect, %src.Rect* %4, i32 0, i32 2
  %22 = load float, float* %21, align 4
  %23 = getelementptr inbounds %src.Rect, %src.Rect* %3, i32 0, i32 2
  %24 = load float, float* %23, align 4
  %25 = fcmp ogt float %22, %24
  %26 = zext i1 %25 to i8
  %27 = trunc i8 %26 to i1
  br i1 %27, label %if.then1, label %if.done2

if.then1:                                         ; preds = %if.done
  %28 = getelementptr inbounds %src.Rect, %src.Rect* %4, i32 0, i32 2
  %29 = getelementptr inbounds %src.Rect, %src.Rect* %3, i32 0, i32 2
  %30 = load float, float* %29, align 4
  store float %30, float* %28, align 4
  br label %if.done2

if.done2:                                         ; preds = %if.then1, %if.done
  %31 = getelementptr inbounds %src.Rect, %src.Rect* %4, i32 0, i32 1
  %32 = load float, float* %31, align 4
  %33 = getelementptr inbounds %src.Rect, %src.Rect* %3, i32 0, i32 1
  %34 = load float, float* %33, align 4
  %35 = fcmp olt float %32, %34
  %36 = zext i1 %35 to i8
  %37 = trunc i8 %36 to i1
  br i1 %37, label %if.then3, label %if.done4

if.then3:                                         ; preds = %if.done2
  %38 = getelementptr inbounds %src.Rect, %src.Rect* %4, i32 0, i32 1
  %39 = getelementptr inbounds %src.Rect, %src.Rect* %3, i32 0, i32 1
  %40 = load float, float* %39, align 4
  store float %40, float* %38, align 4
  br label %if.done4

if.done4:                                         ; preds = %if.then3, %if.done2
  %41 = getelementptr inbounds %src.Rect, %src.Rect* %4, i32 0, i32 3
  %42 = load float, float* %41, align 4
  %43 = getelementptr inbounds %src.Rect, %src.Rect* %3, i32 0, i32 3
  %44 = load float, float* %43, align 4
  %45 = fcmp olt float %42, %44
  %46 = zext i1 %45 to i8
  %47 = trunc i8 %46 to i1
  br i1 %47, label %if.then5, label %if.done6

if.then5:                                         ; preds = %if.done4
  %48 = getelementptr inbounds %src.Rect, %src.Rect* %4, i32 0, i32 3
  %49 = getelementptr inbounds %src.Rect, %src.Rect* %3, i32 0, i32 3
  %50 = load float, float* %49, align 4
  store float %50, float* %48, align 4
  br label %if.done6

if.done6:                                         ; preds = %if.then5, %if.done4
  %51 = load %src.Rect, %src.Rect* %4, align 4
  %52 = bitcast %src.Rect* %4 to { <2 x float>, <2 x float> }*
  %53 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %52, align 8
  ret { <2 x float>, <2 x float> } %53
}

define internal i8 @src.rect_contains({ <2 x float>, <2 x float> } %0, float %1, float %2, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %3 = alloca %src.Rect, align 8
  %4 = alloca float, align 4
  %5 = alloca float, align 4
  br label %entry

entry:                                            ; preds = %decls
  %6 = bitcast %src.Rect* %3 to { <2 x float>, <2 x float> }*
  store { <2 x float>, <2 x float> } %0, { <2 x float>, <2 x float> }* %6, align 8
  %7 = load %src.Rect, %src.Rect* %3, align 4
  store float %1, float* %4, align 4
  store float %2, float* %5, align 4
  %8 = bitcast i8* %__.context_ptr to %runtime.Context*
  %9 = getelementptr inbounds %src.Rect, %src.Rect* %3, i32 0, i32 0
  %10 = load float, float* %9, align 4
  %11 = load float, float* %4, align 4
  %12 = fcmp ole float %10, %11
  %13 = zext i1 %12 to i8
  %14 = trunc i8 %13 to i1
  br i1 %14, label %cmp.and, label %logical.cmp.done

cmp.and:                                          ; preds = %entry
  %15 = getelementptr inbounds %src.Rect, %src.Rect* %3, i32 0, i32 1
  %16 = load float, float* %15, align 4
  %17 = load float, float* %4, align 4
  %18 = fcmp ogt float %16, %17
  %19 = zext i1 %18 to i8
  %20 = trunc i8 %19 to i1
  br i1 %20, label %cmp.and1, label %logical.cmp.done

cmp.and1:                                         ; preds = %cmp.and
  %21 = getelementptr inbounds %src.Rect, %src.Rect* %3, i32 0, i32 2
  %22 = load float, float* %21, align 4
  %23 = load float, float* %5, align 4
  %24 = fcmp ole float %22, %23
  %25 = zext i1 %24 to i8
  %26 = trunc i8 %25 to i1
  br i1 %26, label %logical.cmp.rhs, label %logical.cmp.done

logical.cmp.rhs:                                  ; preds = %cmp.and1
  %27 = getelementptr inbounds %src.Rect, %src.Rect* %3, i32 0, i32 3
  %28 = load float, float* %27, align 4
  %29 = load float, float* %5, align 4
  %30 = fcmp ogt float %28, %29
  %31 = zext i1 %30 to i8
  br label %logical.cmp.done

logical.cmp.done:                                 ; preds = %logical.cmp.rhs, %cmp.and1, %cmp.and, %entry
  %32 = phi i8 [ 0, %entry ], [ 0, %cmp.and ], [ 0, %cmp.and1 ], [ %31, %logical.cmp.rhs ]
  ret i8 %32
}

define internal { <2 x float>, <2 x float> } @src.rect_cut_left(%src.Rect* %0, float %1, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %2 = alloca %src.Rect*, align 8
  %3 = alloca float, align 4
  %4 = alloca float, align 4
  %5 = alloca %src.Rect, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Rect* %0, %src.Rect** %2, align 8
  store float %1, float* %3, align 4
  %6 = bitcast i8* %__.context_ptr to %runtime.Context*
  %7 = load %src.Rect*, %src.Rect** %2, align 8
  %8 = getelementptr inbounds %src.Rect, %src.Rect* %7, i32 0, i32 0
  %9 = load float, float* %8, align 4
  store float %9, float* %4, align 4
  %10 = load %src.Rect*, %src.Rect** %2, align 8
  %11 = getelementptr inbounds %src.Rect, %src.Rect* %10, i32 0, i32 0
  %12 = load %src.Rect*, %src.Rect** %2, align 8
  %13 = getelementptr inbounds %src.Rect, %src.Rect* %12, i32 0, i32 1
  %14 = load float, float* %13, align 4
  %15 = load %src.Rect*, %src.Rect** %2, align 8
  %16 = getelementptr inbounds %src.Rect, %src.Rect* %15, i32 0, i32 0
  %17 = load float, float* %16, align 4
  %18 = load float, float* %3, align 4
  %19 = fadd float %17, %18
  %20 = fcmp olt float %14, %19
  %21 = select i1 %20, float %14, float %19
  store float %21, float* %11, align 4
  %22 = bitcast %src.Rect* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* %22, i8 0, i64 16, i1 false)
  store %src.Rect zeroinitializer, %src.Rect* %5, align 4
  %23 = load float, float* %4, align 4
  %24 = getelementptr inbounds %src.Rect, %src.Rect* %5, i32 0, i32 0
  store float %23, float* %24, align 4
  %25 = load %src.Rect*, %src.Rect** %2, align 8
  %26 = getelementptr inbounds %src.Rect, %src.Rect* %25, i32 0, i32 0
  %27 = load float, float* %26, align 4
  %28 = getelementptr inbounds %src.Rect, %src.Rect* %5, i32 0, i32 1
  store float %27, float* %28, align 4
  %29 = load %src.Rect*, %src.Rect** %2, align 8
  %30 = getelementptr inbounds %src.Rect, %src.Rect* %29, i32 0, i32 2
  %31 = load float, float* %30, align 4
  %32 = getelementptr inbounds %src.Rect, %src.Rect* %5, i32 0, i32 2
  store float %31, float* %32, align 4
  %33 = load %src.Rect*, %src.Rect** %2, align 8
  %34 = getelementptr inbounds %src.Rect, %src.Rect* %33, i32 0, i32 3
  %35 = load float, float* %34, align 4
  %36 = getelementptr inbounds %src.Rect, %src.Rect* %5, i32 0, i32 3
  store float %35, float* %36, align 4
  %37 = load %src.Rect, %src.Rect* %5, align 4
  %38 = bitcast %src.Rect* %5 to { <2 x float>, <2 x float> }*
  %39 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %38, align 8
  ret { <2 x float>, <2 x float> } %39
}

define internal { <2 x float>, <2 x float> } @src.rect_cut_top(%src.Rect* %0, float %1, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %2 = alloca %src.Rect*, align 8
  %3 = alloca float, align 4
  %4 = alloca float, align 4
  %5 = alloca %src.Rect, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Rect* %0, %src.Rect** %2, align 8
  store float %1, float* %3, align 4
  %6 = bitcast i8* %__.context_ptr to %runtime.Context*
  %7 = load %src.Rect*, %src.Rect** %2, align 8
  %8 = getelementptr inbounds %src.Rect, %src.Rect* %7, i32 0, i32 2
  %9 = load float, float* %8, align 4
  store float %9, float* %4, align 4
  %10 = load %src.Rect*, %src.Rect** %2, align 8
  %11 = getelementptr inbounds %src.Rect, %src.Rect* %10, i32 0, i32 2
  %12 = load %src.Rect*, %src.Rect** %2, align 8
  %13 = getelementptr inbounds %src.Rect, %src.Rect* %12, i32 0, i32 3
  %14 = load float, float* %13, align 4
  %15 = load %src.Rect*, %src.Rect** %2, align 8
  %16 = getelementptr inbounds %src.Rect, %src.Rect* %15, i32 0, i32 2
  %17 = load float, float* %16, align 4
  %18 = load float, float* %3, align 4
  %19 = fadd float %17, %18
  %20 = fcmp olt float %14, %19
  %21 = select i1 %20, float %14, float %19
  store float %21, float* %11, align 4
  %22 = bitcast %src.Rect* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* %22, i8 0, i64 16, i1 false)
  store %src.Rect zeroinitializer, %src.Rect* %5, align 4
  %23 = load %src.Rect*, %src.Rect** %2, align 8
  %24 = getelementptr inbounds %src.Rect, %src.Rect* %23, i32 0, i32 0
  %25 = load float, float* %24, align 4
  %26 = getelementptr inbounds %src.Rect, %src.Rect* %5, i32 0, i32 0
  store float %25, float* %26, align 4
  %27 = load %src.Rect*, %src.Rect** %2, align 8
  %28 = getelementptr inbounds %src.Rect, %src.Rect* %27, i32 0, i32 1
  %29 = load float, float* %28, align 4
  %30 = getelementptr inbounds %src.Rect, %src.Rect* %5, i32 0, i32 1
  store float %29, float* %30, align 4
  %31 = load float, float* %4, align 4
  %32 = getelementptr inbounds %src.Rect, %src.Rect* %5, i32 0, i32 2
  store float %31, float* %32, align 4
  %33 = load %src.Rect*, %src.Rect** %2, align 8
  %34 = getelementptr inbounds %src.Rect, %src.Rect* %33, i32 0, i32 2
  %35 = load float, float* %34, align 4
  %36 = getelementptr inbounds %src.Rect, %src.Rect* %5, i32 0, i32 3
  store float %35, float* %36, align 4
  %37 = load %src.Rect, %src.Rect* %5, align 4
  %38 = bitcast %src.Rect* %5 to { <2 x float>, <2 x float> }*
  %39 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %38, align 8
  ret { <2 x float>, <2 x float> } %39
}

define internal { <2 x float>, <2 x float> } @src.rect_cut_left_hard(%src.Rect* %0, float %1, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %2 = alloca %src.Rect*, align 8
  %3 = alloca float, align 4
  %4 = alloca %src.Rect, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Rect* %0, %src.Rect** %2, align 8
  store float %1, float* %3, align 4
  %5 = bitcast %src.Rect* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* %5, i8 0, i64 16, i1 false)
  %6 = bitcast i8* %__.context_ptr to %runtime.Context*
  %7 = load %src.Rect*, %src.Rect** %2, align 8
  %8 = load %src.Rect, %src.Rect* %7, align 4
  store %src.Rect %8, %src.Rect* %4, align 4
  %9 = getelementptr inbounds %src.Rect, %src.Rect* %4, i32 0, i32 1
  %10 = load %src.Rect*, %src.Rect** %2, align 8
  %11 = getelementptr inbounds %src.Rect, %src.Rect* %10, i32 0, i32 0
  %12 = load float, float* %11, align 4
  %13 = load float, float* %3, align 4
  %14 = fadd float %12, %13
  store float %14, float* %9, align 4
  %15 = load %src.Rect*, %src.Rect** %2, align 8
  %16 = getelementptr inbounds %src.Rect, %src.Rect* %15, i32 0, i32 0
  %17 = getelementptr inbounds %src.Rect, %src.Rect* %4, i32 0, i32 1
  %18 = load float, float* %17, align 4
  store float %18, float* %16, align 4
  %19 = load %src.Rect, %src.Rect* %4, align 4
  store %src.Rect %19, %src.Rect* %4, align 4
  %20 = bitcast %src.Rect* %4 to { <2 x float>, <2 x float> }*
  %21 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %20, align 8
  ret { <2 x float>, <2 x float> } %21
}

define internal { <2 x float>, <2 x float> } @src.rect_margin({ <2 x float>, <2 x float> } %0, float %1, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %2 = alloca %src.Rect, align 8
  %3 = alloca float, align 4
  %4 = alloca %src.Rect, align 8
  br label %entry

entry:                                            ; preds = %decls
  %5 = bitcast %src.Rect* %2 to { <2 x float>, <2 x float> }*
  store { <2 x float>, <2 x float> } %0, { <2 x float>, <2 x float> }* %5, align 8
  %6 = load %src.Rect, %src.Rect* %2, align 4
  store float %1, float* %3, align 4
  %7 = bitcast i8* %__.context_ptr to %runtime.Context*
  %8 = load %src.Rect, %src.Rect* %2, align 4
  store %src.Rect %8, %src.Rect* %4, align 4
  %9 = getelementptr inbounds %src.Rect, %src.Rect* %4, i32 0, i32 0
  %10 = load float, float* %3, align 4
  %11 = load float, float* %9, align 4
  %12 = fadd float %11, %10
  store float %12, float* %9, align 4
  %13 = getelementptr inbounds %src.Rect, %src.Rect* %4, i32 0, i32 2
  %14 = load float, float* %3, align 4
  %15 = load float, float* %13, align 4
  %16 = fadd float %15, %14
  store float %16, float* %13, align 4
  %17 = getelementptr inbounds %src.Rect, %src.Rect* %4, i32 0, i32 1
  %18 = load float, float* %3, align 4
  %19 = load float, float* %17, align 4
  %20 = fsub float %19, %18
  store float %20, float* %17, align 4
  %21 = getelementptr inbounds %src.Rect, %src.Rect* %4, i32 0, i32 3
  %22 = load float, float* %3, align 4
  %23 = load float, float* %21, align 4
  %24 = fsub float %23, %22
  store float %24, float* %21, align 4
  %25 = load %src.Rect, %src.Rect* %4, align 4
  %26 = bitcast %src.Rect* %4 to { <2 x float>, <2 x float> }*
  %27 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %26, align 8
  ret { <2 x float>, <2 x float> } %27
}

define internal { <2 x float>, <2 x float> } @src.rect_add({ <2 x float>, <2 x float> } %0, { <2 x float>, <2 x float> } %1, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %2 = alloca %src.Rect, align 8
  %3 = alloca %src.Rect, align 8
  %4 = alloca %src.Rect, align 8
  br label %entry

entry:                                            ; preds = %decls
  %5 = bitcast %src.Rect* %2 to { <2 x float>, <2 x float> }*
  store { <2 x float>, <2 x float> } %0, { <2 x float>, <2 x float> }* %5, align 8
  %6 = load %src.Rect, %src.Rect* %2, align 4
  %7 = bitcast %src.Rect* %3 to { <2 x float>, <2 x float> }*
  store { <2 x float>, <2 x float> } %1, { <2 x float>, <2 x float> }* %7, align 8
  %8 = load %src.Rect, %src.Rect* %3, align 4
  %9 = bitcast i8* %__.context_ptr to %runtime.Context*
  %10 = load %src.Rect, %src.Rect* %2, align 4
  store %src.Rect %10, %src.Rect* %4, align 4
  %11 = getelementptr inbounds %src.Rect, %src.Rect* %4, i32 0, i32 0
  %12 = getelementptr inbounds %src.Rect, %src.Rect* %3, i32 0, i32 0
  %13 = load float, float* %12, align 4
  %14 = load float, float* %11, align 4
  %15 = fadd float %14, %13
  store float %15, float* %11, align 4
  %16 = getelementptr inbounds %src.Rect, %src.Rect* %4, i32 0, i32 2
  %17 = getelementptr inbounds %src.Rect, %src.Rect* %3, i32 0, i32 2
  %18 = load float, float* %17, align 4
  %19 = load float, float* %16, align 4
  %20 = fadd float %19, %18
  store float %20, float* %16, align 4
  %21 = getelementptr inbounds %src.Rect, %src.Rect* %4, i32 0, i32 1
  %22 = getelementptr inbounds %src.Rect, %src.Rect* %3, i32 0, i32 1
  %23 = load float, float* %22, align 4
  %24 = load float, float* %21, align 4
  %25 = fadd float %24, %23
  store float %25, float* %21, align 4
  %26 = getelementptr inbounds %src.Rect, %src.Rect* %4, i32 0, i32 3
  %27 = getelementptr inbounds %src.Rect, %src.Rect* %3, i32 0, i32 3
  %28 = load float, float* %27, align 4
  %29 = load float, float* %26, align 4
  %30 = fadd float %29, %28
  store float %30, float* %26, align 4
  %31 = load %src.Rect, %src.Rect* %4, align 4
  %32 = bitcast %src.Rect* %4 to { <2 x float>, <2 x float> }*
  %33 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %32, align 8
  ret { <2 x float>, <2 x float> } %33
}

define internal { <2 x float>, <2 x float> } @src.rect_translate({ <2 x float>, <2 x float> } %0, { <2 x float>, <2 x float> } %1, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %2 = alloca %src.Rect, align 8
  %3 = alloca %src.Rect, align 8
  %4 = alloca %src.Rect, align 8
  br label %entry

entry:                                            ; preds = %decls
  %5 = bitcast %src.Rect* %2 to { <2 x float>, <2 x float> }*
  store { <2 x float>, <2 x float> } %0, { <2 x float>, <2 x float> }* %5, align 8
  %6 = load %src.Rect, %src.Rect* %2, align 4
  %7 = bitcast %src.Rect* %3 to { <2 x float>, <2 x float> }*
  store { <2 x float>, <2 x float> } %1, { <2 x float>, <2 x float> }* %7, align 8
  %8 = load %src.Rect, %src.Rect* %3, align 4
  %9 = bitcast i8* %__.context_ptr to %runtime.Context*
  %10 = load %src.Rect, %src.Rect* %2, align 4
  store %src.Rect %10, %src.Rect* %4, align 4
  %11 = getelementptr inbounds %src.Rect, %src.Rect* %4, i32 0, i32 0
  %12 = getelementptr inbounds %src.Rect, %src.Rect* %3, i32 0, i32 0
  %13 = load float, float* %12, align 4
  %14 = load float, float* %11, align 4
  %15 = fadd float %14, %13
  store float %15, float* %11, align 4
  %16 = getelementptr inbounds %src.Rect, %src.Rect* %4, i32 0, i32 2
  %17 = getelementptr inbounds %src.Rect, %src.Rect* %3, i32 0, i32 2
  %18 = load float, float* %17, align 4
  %19 = load float, float* %16, align 4
  %20 = fadd float %19, %18
  store float %20, float* %16, align 4
  %21 = getelementptr inbounds %src.Rect, %src.Rect* %4, i32 0, i32 1
  %22 = getelementptr inbounds %src.Rect, %src.Rect* %3, i32 0, i32 0
  %23 = load float, float* %22, align 4
  %24 = load float, float* %21, align 4
  %25 = fadd float %24, %23
  store float %25, float* %21, align 4
  %26 = getelementptr inbounds %src.Rect, %src.Rect* %4, i32 0, i32 3
  %27 = getelementptr inbounds %src.Rect, %src.Rect* %3, i32 0, i32 2
  %28 = load float, float* %27, align 4
  %29 = load float, float* %26, align 4
  %30 = fadd float %29, %28
  store float %30, float* %26, align 4
  %31 = load %src.Rect, %src.Rect* %4, align 4
  %32 = bitcast %src.Rect* %4 to { <2 x float>, <2 x float> }*
  %33 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %32, align 8
  ret { <2 x float>, <2 x float> } %33
}

define internal void @src.rect_cut_out_rect([4 x %src.Rect]* noalias sret %agg.result, { <2 x float>, <2 x float> } %0, { <2 x float>, <2 x float> } %1, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %2 = alloca %src.Rect, align 8
  %3 = alloca %src.Rect, align 8
  %4 = alloca %src.Rect, align 4
  %5 = alloca { <2 x float>, <2 x float> }, align 8
  %6 = alloca { <2 x float>, <2 x float> }, align 8
  %7 = alloca %src.Rect, align 8
  br label %entry

entry:                                            ; preds = %decls
  %8 = bitcast %src.Rect* %2 to { <2 x float>, <2 x float> }*
  store { <2 x float>, <2 x float> } %0, { <2 x float>, <2 x float> }* %8, align 8
  %9 = load %src.Rect, %src.Rect* %2, align 4
  %10 = bitcast %src.Rect* %3 to { <2 x float>, <2 x float> }*
  store { <2 x float>, <2 x float> } %1, { <2 x float>, <2 x float> }* %10, align 8
  %11 = load %src.Rect, %src.Rect* %3, align 4
  %12 = bitcast i8* %__.context_ptr to %runtime.Context*
  %13 = getelementptr [4 x %src.Rect], [4 x %src.Rect]* %agg.result, i64 0, i64 0
  %14 = load %src.Rect, %src.Rect* %2, align 4
  store %src.Rect %14, %src.Rect* %13, align 4
  %15 = getelementptr [4 x %src.Rect], [4 x %src.Rect]* %agg.result, i64 0, i64 0
  %16 = getelementptr inbounds %src.Rect, %src.Rect* %15, i32 0, i32 3
  %17 = getelementptr inbounds %src.Rect, %src.Rect* %3, i32 0, i32 2
  %18 = load float, float* %17, align 4
  store float %18, float* %16, align 4
  %19 = getelementptr [4 x %src.Rect], [4 x %src.Rect]* %agg.result, i64 0, i64 1
  %20 = load %src.Rect, %src.Rect* %2, align 4
  store %src.Rect %20, %src.Rect* %19, align 4
  %21 = getelementptr [4 x %src.Rect], [4 x %src.Rect]* %agg.result, i64 0, i64 1
  %22 = getelementptr inbounds %src.Rect, %src.Rect* %21, i32 0, i32 2
  %23 = getelementptr inbounds %src.Rect, %src.Rect* %3, i32 0, i32 3
  %24 = load float, float* %23, align 4
  store float %24, float* %22, align 4
  %25 = getelementptr [4 x %src.Rect], [4 x %src.Rect]* %agg.result, i64 0, i64 0
  %26 = load %src.Rect, %src.Rect* %25, align 4
  %27 = getelementptr [4 x %src.Rect], [4 x %src.Rect]* %agg.result, i64 0, i64 1
  %28 = load %src.Rect, %src.Rect* %27, align 4
  %29 = bitcast { <2 x float>, <2 x float> }* %5 to %src.Rect*
  store %src.Rect %26, %src.Rect* %29, align 4
  %30 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %5, align 8
  %31 = bitcast { <2 x float>, <2 x float> }* %6 to %src.Rect*
  store %src.Rect %28, %src.Rect* %31, align 4
  %32 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %6, align 8
  %33 = bitcast %runtime.Context* %12 to i8*
  %34 = call { <2 x float>, <2 x float> } @src.rect_intersection({ <2 x float>, <2 x float> } %30, { <2 x float>, <2 x float> } %32, i8* %33)
  %35 = bitcast %src.Rect* %7 to { <2 x float>, <2 x float> }*
  store { <2 x float>, <2 x float> } %34, { <2 x float>, <2 x float> }* %35, align 8
  %36 = load %src.Rect, %src.Rect* %7, align 4
  store %src.Rect %36, %src.Rect* %4, align 4
  %37 = getelementptr [4 x %src.Rect], [4 x %src.Rect]* %agg.result, i64 0, i64 2
  %38 = load %src.Rect, %src.Rect* %4, align 4
  store %src.Rect %38, %src.Rect* %37, align 4
  %39 = getelementptr [4 x %src.Rect], [4 x %src.Rect]* %agg.result, i64 0, i64 2
  %40 = getelementptr inbounds %src.Rect, %src.Rect* %39, i32 0, i32 1
  %41 = getelementptr inbounds %src.Rect, %src.Rect* %3, i32 0, i32 0
  %42 = load float, float* %41, align 4
  store float %42, float* %40, align 4
  %43 = getelementptr [4 x %src.Rect], [4 x %src.Rect]* %agg.result, i64 0, i64 3
  %44 = load %src.Rect, %src.Rect* %4, align 4
  store %src.Rect %44, %src.Rect* %43, align 4
  %45 = getelementptr [4 x %src.Rect], [4 x %src.Rect]* %agg.result, i64 0, i64 3
  %46 = getelementptr inbounds %src.Rect, %src.Rect* %45, i32 0, i32 0
  %47 = getelementptr inbounds %src.Rect, %src.Rect* %3, i32 0, i32 1
  %48 = load float, float* %47, align 4
  store float %48, float* %46, align 4
  %49 = load [4 x %src.Rect], [4 x %src.Rect]* %agg.result, align 4
  store [4 x %src.Rect] %49, [4 x %src.Rect]* %agg.result, align 4
  %50 = bitcast [4 x %src.Rect]* %agg.result to i8*
  %51 = bitcast [4 x %src.Rect]* %agg.result to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %50, i8* %51, i64 64, i1 false)
  ret void
}

define internal %src.Render_Target* @src.render_target_init(%sdl2.Window* %0, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %1 = alloca %sdl2.Window*, align 8
  %2 = alloca %src.Render_Target*, align 8
  %3 = alloca %runtime.Source_Code_Location, align 8
  %4 = alloca { %src.Render_Target*, i8 }, align 8
  %5 = alloca i8, align 1
  %6 = alloca { i32, i8 }, align 8
  %7 = alloca %..string, align 8
  %8 = alloca %..any, align 8
  %9 = alloca { %..any*, i64 }, align 8
  %10 = alloca [1 x %..any], align 8
  %11 = alloca %runtime.Source_Code_Location, align 8
  %12 = alloca %runtime.Source_Code_Location, align 8
  %13 = alloca { { %src.Render_Group*, i64, i64, %runtime.Allocator }, i8 }, align 8
  %14 = alloca %runtime.Source_Code_Location, align 8
  %15 = alloca { { %src.Render_Vertex*, i64 }, i8 }, align 8
  %16 = alloca %src.Render_Texture, align 8
  %17 = alloca { i64, i64 }, align 8
  %18 = alloca { i64, i64 }, align 8
  %19 = alloca { i64, i64 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %sdl2.Window* %0, %sdl2.Window** %1, align 8
  store %src.Render_Target* null, %src.Render_Target** %2, align 8
  %20 = bitcast i8* %__.context_ptr to %runtime.Context*
  %21 = getelementptr inbounds %runtime.Context, %runtime.Context* %20, i32 0, i32 0
  %22 = load %runtime.Allocator, %runtime.Allocator* %21, align 8
  %23 = bitcast %runtime.Allocator* %21 to { i64, i64 }*
  %24 = load { i64, i64 }, { i64, i64 }* %23, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([59 x i8], [59 x i8]* @"csbs$1bb", i64 0, i64 0), i64 58 }, i32 114, i32 8, %..string { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @"csbs$350", i64 0, i64 0), i64 18 } }, %runtime.Source_Code_Location* %3, align 8
  %25 = bitcast %runtime.Context* %20 to i8*
  %26 = call { i64, i64 } @runtime.new-50307({ i64, i64 } %24, %runtime.Source_Code_Location* %3, i8* %25)
  %27 = bitcast { %src.Render_Target*, i8 }* %4 to { i64, i64 }*
  store { i64, i64 } %26, { i64, i64 }* %27, align 8
  %28 = load { %src.Render_Target*, i8 }, { %src.Render_Target*, i8 }* %4, align 8
  %29 = getelementptr inbounds { %src.Render_Target*, i8 }, { %src.Render_Target*, i8 }* %4, i32 0, i32 0
  %30 = load %src.Render_Target*, %src.Render_Target** %29, align 8
  store %src.Render_Target* %30, %src.Render_Target** %2, align 8
  %31 = call i32 @SDL_GL_SetAttribute(i32 17, i32 3)
  %32 = call i32 @SDL_GL_SetAttribute(i32 18, i32 3)
  %33 = load %src.Render_Target*, %src.Render_Target** %2, align 8
  %34 = getelementptr inbounds %src.Render_Target, %src.Render_Target* %33, i32 0, i32 18
  %35 = load %sdl2.Window*, %sdl2.Window** %1, align 8
  %36 = call i8* @SDL_GL_CreateContext(%sdl2.Window* %35)
  store i8* %36, i8** %34, align 8
  %37 = bitcast %runtime.Context* %20 to i8*
  call void @odin_gl.load_up_to(i64 3, i64 3, i8* bitcast (void (i8*, i8*, i8*)* @sdl2.gl_set_proc_address to i8*), i8* %37)
  store i8 0, i8* %5, align 1
  %38 = load %src.Render_Target*, %src.Render_Target** %2, align 8
  %39 = getelementptr inbounds %src.Render_Target, %src.Render_Target* %38, i32 0, i32 5
  %40 = load { i8*, i64 }, { i8*, i64 }* @src.shader_vert, align 8
  %41 = load %..string, %..string* bitcast ({ i8*, i64 }* @src.shader_vert to %..string*), align 8
  %42 = load { i8*, i64 }, { i8*, i64 }* @src.shader_frag, align 8
  %43 = load %..string, %..string* bitcast ({ i8*, i64 }* @src.shader_frag to %..string*), align 8
  %44 = load { i64, i64 }, { i64, i64 }* bitcast ({ i8*, i64 }* @src.shader_vert to { i64, i64 }*), align 8
  %45 = load { i64, i64 }, { i64, i64 }* bitcast ({ i8*, i64 }* @src.shader_frag to { i64, i64 }*), align 8
  %46 = bitcast %runtime.Context* %20 to i8*
  %47 = call i64 @odin_gl.load_shaders_source({ i64, i64 } %44, { i64, i64 } %45, i1 false, i8* %46)
  %48 = bitcast { i32, i8 }* %6 to i64*
  store i64 %47, i64* %48, align 8
  %49 = load { i32, i8 }, { i32, i8 }* %6, align 4
  %50 = getelementptr inbounds { i32, i8 }, { i32, i8 }* %6, i32 0, i32 0
  %51 = load i32, i32* %50, align 4
  %52 = getelementptr inbounds { i32, i8 }, { i32, i8 }* %6, i32 0, i32 1
  %53 = load i8, i8* %52, align 1
  store i32 %51, i32* %39, align 4
  store i8 %53, i8* %5, align 1
  %54 = load i8, i8* %5, align 1
  %55 = trunc i8 %54 to i1
  br i1 %55, label %if.done, label %if.then

if.then:                                          ; preds = %entry
  store %..string { i8* getelementptr inbounds ([32 x i8], [32 x i8]* @"csbs$351", i64 0, i64 0), i64 31 }, %..string* %7, align 8
  %56 = bitcast %..string* %7 to i8*
  %57 = getelementptr inbounds %..any, %..any* %8, i32 0, i32 0
  %58 = getelementptr inbounds %..any, %..any* %8, i32 0, i32 1
  store i8* %56, i8** %57, align 8
  store i64 432345564227567633, i64* %58, align 8
  %59 = load %..any, %..any* %8, align 8
  %60 = bitcast { %..any*, i64 }* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* %60, i8 0, i64 16, i1 false)
  %61 = bitcast [1 x %..any]* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* %61, i8 0, i64 16, i1 false)
  %62 = getelementptr [1 x %..any], [1 x %..any]* %10, i64 0, i64 0
  store %..any %59, %..any* %62, align 8
  %63 = getelementptr [1 x %..any], [1 x %..any]* %10, i64 0, i64 0
  %64 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %9, i32 0, i32 0
  store %..any* %63, %..any** %64, align 8
  %65 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %9, i32 0, i32 1
  store i64 1, i64* %65, align 8
  %66 = load { %..any*, i64 }, { %..any*, i64 }* %9, align 8
  %67 = bitcast { %..any*, i64 }* %9 to { i64, i64 }*
  %68 = load { i64, i64 }, { i64, i64 }* %67, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([59 x i8], [59 x i8]* @"csbs$1bb", i64 0, i64 0), i64 58 }, i32 126, i32 7, %..string { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @"csbs$350", i64 0, i64 0), i64 18 } }, %runtime.Source_Code_Location* %11, align 8
  %69 = bitcast %runtime.Context* %20 to i8*
  call void @log.panic({ i64, i64 } %68, %runtime.Source_Code_Location* %11, i8* %69)
  unreachable

if.done:                                          ; preds = %entry
  %70 = load %src.Render_Target*, %src.Render_Target** %2, align 8
  %71 = getelementptr inbounds %src.Render_Target, %src.Render_Target* %70, i32 0, i32 5
  %72 = load i32, i32* %71, align 4
  call void @odin_gl.UseProgram(i32 %72)
  %73 = load %src.Render_Target*, %src.Render_Target** %2, align 8
  %74 = getelementptr inbounds %src.Render_Target, %src.Render_Target* %73, i32 0, i32 6
  %75 = load %src.Render_Target*, %src.Render_Target** %2, align 8
  %76 = getelementptr inbounds %src.Render_Target, %src.Render_Target* %75, i32 0, i32 5
  %77 = load i32, i32* %76, align 4
  %78 = call i32 @odin_gl.GetUniformLocation(i32 %77, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$352", i64 0, i64 0))
  store i32 %78, i32* %74, align 4
  %79 = load %src.Render_Target*, %src.Render_Target** %2, align 8
  %80 = getelementptr inbounds %src.Render_Target, %src.Render_Target* %79, i32 0, i32 7
  %81 = load %src.Render_Target*, %src.Render_Target** %2, align 8
  %82 = getelementptr inbounds %src.Render_Target, %src.Render_Target* %81, i32 0, i32 5
  %83 = load i32, i32* %82, align 4
  %84 = call i32 @odin_gl.GetUniformLocation(i32 %83, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"csbs$353", i64 0, i64 0))
  store i32 %84, i32* %80, align 4
  %85 = load %src.Render_Target*, %src.Render_Target** %2, align 8
  %86 = getelementptr inbounds %src.Render_Target, %src.Render_Target* %85, i32 0, i32 9
  %87 = load %src.Render_Target*, %src.Render_Target** %2, align 8
  %88 = getelementptr inbounds %src.Render_Target, %src.Render_Target* %87, i32 0, i32 5
  %89 = load i32, i32* %88, align 4
  %90 = call i32 @odin_gl.GetAttribLocation(i32 %89, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$354", i64 0, i64 0))
  store i32 %90, i32* %86, align 4
  %91 = load %src.Render_Target*, %src.Render_Target** %2, align 8
  %92 = getelementptr inbounds %src.Render_Target, %src.Render_Target* %91, i32 0, i32 10
  %93 = load %src.Render_Target*, %src.Render_Target** %2, align 8
  %94 = getelementptr inbounds %src.Render_Target, %src.Render_Target* %93, i32 0, i32 5
  %95 = load i32, i32* %94, align 4
  %96 = call i32 @odin_gl.GetAttribLocation(i32 %95, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$355", i64 0, i64 0))
  store i32 %96, i32* %92, align 4
  %97 = load %src.Render_Target*, %src.Render_Target** %2, align 8
  %98 = getelementptr inbounds %src.Render_Target, %src.Render_Target* %97, i32 0, i32 11
  %99 = load %src.Render_Target*, %src.Render_Target** %2, align 8
  %100 = getelementptr inbounds %src.Render_Target, %src.Render_Target* %99, i32 0, i32 5
  %101 = load i32, i32* %100, align 4
  %102 = call i32 @odin_gl.GetAttribLocation(i32 %101, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$356", i64 0, i64 0))
  store i32 %102, i32* %98, align 4
  %103 = load %src.Render_Target*, %src.Render_Target** %2, align 8
  %104 = getelementptr inbounds %src.Render_Target, %src.Render_Target* %103, i32 0, i32 12
  %105 = load %src.Render_Target*, %src.Render_Target** %2, align 8
  %106 = getelementptr inbounds %src.Render_Target, %src.Render_Target* %105, i32 0, i32 5
  %107 = load i32, i32* %106, align 4
  %108 = call i32 @odin_gl.GetAttribLocation(i32 %107, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @"csbs$357", i64 0, i64 0))
  store i32 %108, i32* %104, align 4
  %109 = load %src.Render_Target*, %src.Render_Target** %2, align 8
  %110 = getelementptr inbounds %src.Render_Target, %src.Render_Target* %109, i32 0, i32 13
  %111 = load %src.Render_Target*, %src.Render_Target** %2, align 8
  %112 = getelementptr inbounds %src.Render_Target, %src.Render_Target* %111, i32 0, i32 5
  %113 = load i32, i32* %112, align 4
  %114 = call i32 @odin_gl.GetAttribLocation(i32 %113, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$358", i64 0, i64 0))
  store i32 %114, i32* %110, align 4
  %115 = load %src.Render_Target*, %src.Render_Target** %2, align 8
  %116 = getelementptr inbounds %src.Render_Target, %src.Render_Target* %115, i32 0, i32 14
  %117 = load %src.Render_Target*, %src.Render_Target** %2, align 8
  %118 = getelementptr inbounds %src.Render_Target, %src.Render_Target* %117, i32 0, i32 5
  %119 = load i32, i32* %118, align 4
  %120 = call i32 @odin_gl.GetAttribLocation(i32 %119, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$359", i64 0, i64 0))
  store i32 %120, i32* %116, align 4
  %121 = load %src.Render_Target*, %src.Render_Target** %2, align 8
  %122 = getelementptr inbounds %src.Render_Target, %src.Render_Target* %121, i32 0, i32 3
  call void @odin_gl.GenVertexArrays(i32 1, i32* %122)
  %123 = load %src.Render_Target*, %src.Render_Target** %2, align 8
  %124 = getelementptr inbounds %src.Render_Target, %src.Render_Target* %123, i32 0, i32 3
  %125 = load i32, i32* %124, align 4
  call void @odin_gl.BindVertexArray(i32 %125)
  %126 = load %src.Render_Target*, %src.Render_Target** %2, align 8
  %127 = getelementptr inbounds %src.Render_Target, %src.Render_Target* %126, i32 0, i32 4
  call void @odin_gl.GenBuffers(i32 1, i32* %127)
  %128 = load %src.Render_Target*, %src.Render_Target** %2, align 8
  %129 = getelementptr inbounds %src.Render_Target, %src.Render_Target* %128, i32 0, i32 4
  %130 = load i32, i32* %129, align 4
  call void @odin_gl.BindBuffer(i32 34962, i32 %130)
  %131 = load %src.Render_Target*, %src.Render_Target** %2, align 8
  %132 = getelementptr inbounds %src.Render_Target, %src.Render_Target* %131, i32 0, i32 0
  %133 = getelementptr inbounds %runtime.Context, %runtime.Context* %20, i32 0, i32 0
  %134 = load %runtime.Allocator, %runtime.Allocator* %133, align 8
  %135 = bitcast %runtime.Allocator* %133 to { i64, i64 }*
  %136 = load { i64, i64 }, { i64, i64 }* %135, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([59 x i8], [59 x i8]* @"csbs$1bb", i64 0, i64 0), i64 58 }, i32 149, i32 11, %..string { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @"csbs$350", i64 0, i64 0), i64 18 } }, %runtime.Source_Code_Location* %12, align 8
  %137 = bitcast { { %src.Render_Group*, i64, i64, %runtime.Allocator }, i8 }* %13 to i8*
  call void @llvm.memset.p0i8.i64(i8* %137, i8 0, i64 48, i1 false)
  %138 = bitcast %runtime.Context* %20 to i8*
  call void @runtime.make_dynamic_array_len_cap-50378({ { %src.Render_Group*, i64, i64, %runtime.Allocator }, i8 }* sret %13, i64 0, i64 32, { i64, i64 } %136, %runtime.Source_Code_Location* %12, i8* %138)
  %139 = load { { %src.Render_Group*, i64, i64, %runtime.Allocator }, i8 }, { { %src.Render_Group*, i64, i64, %runtime.Allocator }, i8 }* %13, align 8
  %140 = getelementptr inbounds { { %src.Render_Group*, i64, i64, %runtime.Allocator }, i8 }, { { %src.Render_Group*, i64, i64, %runtime.Allocator }, i8 }* %13, i32 0, i32 0
  %141 = load { %src.Render_Group*, i64, i64, %runtime.Allocator }, { %src.Render_Group*, i64, i64, %runtime.Allocator }* %140, align 8
  store { %src.Render_Group*, i64, i64, %runtime.Allocator } %141, { %src.Render_Group*, i64, i64, %runtime.Allocator }* %132, align 8
  %142 = load %src.Render_Target*, %src.Render_Target** %2, align 8
  %143 = getelementptr inbounds %src.Render_Target, %src.Render_Target* %142, i32 0, i32 1
  %144 = getelementptr inbounds %runtime.Context, %runtime.Context* %20, i32 0, i32 0
  %145 = load %runtime.Allocator, %runtime.Allocator* %144, align 8
  %146 = bitcast %runtime.Allocator* %144 to { i64, i64 }*
  %147 = load { i64, i64 }, { i64, i64 }* %146, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([59 x i8], [59 x i8]* @"csbs$1bb", i64 0, i64 0), i64 58 }, i32 150, i32 13, %..string { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @"csbs$350", i64 0, i64 0), i64 18 } }, %runtime.Source_Code_Location* %14, align 8
  %148 = bitcast { { %src.Render_Vertex*, i64 }, i8 }* %15 to i8*
  call void @llvm.memset.p0i8.i64(i8* %148, i8 0, i64 24, i1 false)
  %149 = bitcast %runtime.Context* %20 to i8*
  call void @runtime.make_slice-50415({ { %src.Render_Vertex*, i64 }, i8 }* sret %15, i64 32000, { i64, i64 } %147, %runtime.Source_Code_Location* %14, i8* %149)
  %150 = load { { %src.Render_Vertex*, i64 }, i8 }, { { %src.Render_Vertex*, i64 }, i8 }* %15, align 8
  %151 = getelementptr inbounds { { %src.Render_Vertex*, i64 }, i8 }, { { %src.Render_Vertex*, i64 }, i8 }* %15, i32 0, i32 0
  %152 = load { %src.Render_Vertex*, i64 }, { %src.Render_Vertex*, i64 }* %151, align 8
  store { %src.Render_Vertex*, i64 } %152, { %src.Render_Vertex*, i64 }* %143, align 8
  %153 = load %src.Render_Target*, %src.Render_Target** %2, align 8
  %154 = getelementptr inbounds %src.Render_Target, %src.Render_Target* %153, i32 0, i32 15
  %155 = getelementptr [4 x %src.Render_Texture], [4 x %src.Render_Texture]* %154, i64 0, i64 0
  %156 = bitcast %src.Render_Texture* %16 to i8*
  call void @llvm.memset.p0i8.i64(i8* %156, i8 0, i64 48, i1 false)
  store %src.Render_Texture { i32 0, i32 0, { i8*, i64 } zeroinitializer, i32 0, i32 33321, i32 6403, i32 0, %image.Image* null }, %src.Render_Texture* %16, align 8
  %157 = load { i8*, i64 }, { i8*, i64 }* getelementptr inbounds (%fontstash.Font_Atlas, %fontstash.Font_Atlas* @fontstash.fa, i64 0, i32 3), align 8
  %158 = getelementptr inbounds %src.Render_Texture, %src.Render_Texture* %16, i32 0, i32 2
  store { i8*, i64 } %157, { i8*, i64 }* %158, align 8
  %159 = load i64, i64* getelementptr inbounds (%fontstash.Font_Atlas, %fontstash.Font_Atlas* @fontstash.fa, i64 0, i32 0), align 8
  %160 = trunc i64 %159 to i32
  %161 = getelementptr inbounds %src.Render_Texture, %src.Render_Texture* %16, i32 0, i32 0
  store i32 %160, i32* %161, align 4
  %162 = load i64, i64* getelementptr inbounds (%fontstash.Font_Atlas, %fontstash.Font_Atlas* @fontstash.fa, i64 0, i32 1), align 8
  %163 = trunc i64 %162 to i32
  %164 = getelementptr inbounds %src.Render_Texture, %src.Render_Texture* %16, i32 0, i32 1
  store i32 %163, i32* %164, align 4
  %165 = load %src.Render_Texture, %src.Render_Texture* %16, align 8
  store %src.Render_Texture %165, %src.Render_Texture* %155, align 8
  %166 = load %src.Render_Target*, %src.Render_Target** %2, align 8
  %167 = bitcast %runtime.Context* %20 to i8*
  call void @src.texture_generate-1107(%src.Render_Target* %166, i64 0, i32 33071, i8* %167)
  %168 = load %src.Render_Target*, %src.Render_Target** %2, align 8
  %169 = getelementptr inbounds %src.Render_Target, %src.Render_Target* %168, i32 0, i32 15
  %170 = getelementptr [4 x %src.Render_Texture], [4 x %src.Render_Texture]* %169, i64 0, i64 0
  %171 = getelementptr inbounds %src.Render_Texture, %src.Render_Texture* %170, i32 0, i32 6
  %172 = load %src.Render_Target*, %src.Render_Target** %2, align 8
  %173 = getelementptr inbounds %src.Render_Target, %src.Render_Target* %172, i32 0, i32 5
  %174 = load i32, i32* %173, align 4
  %175 = call i32 @odin_gl.GetUniformLocation(i32 %174, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"csbs$35a", i64 0, i64 0))
  store i32 %175, i32* %171, align 4
  %176 = load %src.Render_Target*, %src.Render_Target** %2, align 8
  %177 = load { i8*, i64 }, { i8*, i64 }* @src.png_sv, align 8
  %178 = load { i64, i64 }, { i64, i64 }* bitcast ({ i8*, i64 }* @src.png_sv to { i64, i64 }*), align 8
  %179 = bitcast { i64, i64 }* %17 to %..string*
  store %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$35b", i64 0, i64 0), i64 3 }, %..string* %179, align 8
  %180 = load { i64, i64 }, { i64, i64 }* %17, align 8
  %181 = bitcast %runtime.Context* %20 to i8*
  call void @src.texture_generate_from_png(%src.Render_Target* %176, i64 1, { i64, i64 } %178, { i64, i64 } %180, i32 33071, i8* %181)
  %182 = load %src.Render_Target*, %src.Render_Target** %2, align 8
  %183 = load { i8*, i64 }, { i8*, i64 }* @src.png_hue, align 8
  %184 = load { i64, i64 }, { i64, i64 }* bitcast ({ i8*, i64 }* @src.png_hue to { i64, i64 }*), align 8
  %185 = bitcast { i64, i64 }* %18 to %..string*
  store %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$35c", i64 0, i64 0), i64 4 }, %..string* %185, align 8
  %186 = load { i64, i64 }, { i64, i64 }* %18, align 8
  %187 = bitcast %runtime.Context* %20 to i8*
  call void @src.texture_generate_from_png(%src.Render_Target* %182, i64 2, { i64, i64 } %184, { i64, i64 } %186, i32 33071, i8* %187)
  %188 = load %src.Render_Target*, %src.Render_Target** %2, align 8
  %189 = load { i8*, i64 }, { i8*, i64 }* @src.png_test, align 8
  %190 = load { i64, i64 }, { i64, i64 }* bitcast ({ i8*, i64 }* @src.png_test to { i64, i64 }*), align 8
  %191 = bitcast { i64, i64 }* %19 to %..string*
  store %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$35d", i64 0, i64 0), i64 5 }, %..string* %191, align 8
  %192 = load { i64, i64 }, { i64, i64 }* %19, align 8
  %193 = bitcast %runtime.Context* %20 to i8*
  call void @src.texture_generate_from_png(%src.Render_Target* %188, i64 3, { i64, i64 } %190, { i64, i64 } %192, i32 10497, i8* %193)
  %194 = load %src.Render_Target*, %src.Render_Target** %2, align 8
  store %src.Render_Target* %194, %src.Render_Target** %2, align 8
  ret %src.Render_Target* %194
}

define internal void @src.render_target_destroy(%src.Render_Target* %0, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %1 = alloca %src.Render_Target*, align 8
  %2 = alloca %runtime.Source_Code_Location, align 8
  %3 = alloca %runtime.Source_Code_Location, align 8
  %4 = alloca %src.Render_Texture, align 8
  %5 = alloca [4 x %src.Render_Texture]*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca %runtime.Source_Code_Location, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Render_Target* %0, %src.Render_Target** %1, align 8
  %9 = bitcast i8* %__.context_ptr to %runtime.Context*
  %10 = load %src.Render_Target*, %src.Render_Target** %1, align 8
  %11 = getelementptr inbounds %src.Render_Target, %src.Render_Target* %10, i32 0, i32 18
  %12 = load i8*, i8** %11, align 8
  call void @SDL_GL_DeleteContext(i8* %12)
  %13 = load %src.Render_Target*, %src.Render_Target** %1, align 8
  %14 = getelementptr inbounds %src.Render_Target, %src.Render_Target* %13, i32 0, i32 1
  %15 = load { %src.Render_Vertex*, i64 }, { %src.Render_Vertex*, i64 }* %14, align 8
  %16 = getelementptr inbounds %runtime.Context, %runtime.Context* %9, i32 0, i32 0
  %17 = load %runtime.Allocator, %runtime.Allocator* %16, align 8
  %18 = bitcast { %src.Render_Vertex*, i64 }* %14 to { i64, i64 }*
  %19 = load { i64, i64 }, { i64, i64 }* %18, align 8
  %20 = bitcast %runtime.Allocator* %16 to { i64, i64 }*
  %21 = load { i64, i64 }, { i64, i64 }* %20, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([59 x i8], [59 x i8]* @"csbs$1bb", i64 0, i64 0), i64 58 }, i32 170, i32 2, %..string { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @"csbs$35e", i64 0, i64 0), i64 21 } }, %runtime.Source_Code_Location* %2, align 8
  %22 = bitcast %runtime.Context* %9 to i8*
  %23 = call i8 @runtime.delete_slice-50486({ i64, i64 } %19, { i64, i64 } %21, %runtime.Source_Code_Location* %2, i8* %22)
  %24 = load %src.Render_Target*, %src.Render_Target** %1, align 8
  %25 = getelementptr inbounds %src.Render_Target, %src.Render_Target* %24, i32 0, i32 0
  %26 = load { %src.Render_Group*, i64, i64, %runtime.Allocator }, { %src.Render_Group*, i64, i64, %runtime.Allocator }* %25, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([59 x i8], [59 x i8]* @"csbs$1bb", i64 0, i64 0), i64 58 }, i32 171, i32 2, %..string { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @"csbs$35e", i64 0, i64 0), i64 21 } }, %runtime.Source_Code_Location* %3, align 8
  %27 = bitcast %runtime.Context* %9 to i8*
  %28 = call i8 @runtime.delete_dynamic_array-50511({ %src.Render_Group*, i64, i64, %runtime.Allocator }* %25, %runtime.Source_Code_Location* %3, i8* %27)
  %29 = bitcast %src.Render_Texture* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* %29, i8 0, i64 48, i1 false)
  %30 = load %src.Render_Target*, %src.Render_Target** %1, align 8
  %31 = getelementptr inbounds %src.Render_Target, %src.Render_Target* %30, i32 0, i32 15
  store [4 x %src.Render_Texture]* %31, [4 x %src.Render_Texture]** %5, align 8
  %32 = load [4 x %src.Render_Texture]*, [4 x %src.Render_Texture]** %5, align 8
  store i64 4, i64* %6, align 8
  store i64 -1, i64* %7, align 8
  br label %for.index.loop

for.index.loop:                                   ; preds = %for.index.body, %entry
  %33 = load i64, i64* %7, align 8
  %34 = add i64 %33, 1
  store i64 %34, i64* %7, align 8
  %35 = load i64, i64* %6, align 8
  %36 = icmp slt i64 %34, %35
  br i1 %36, label %for.index.body, label %for.index.done

for.index.body:                                   ; preds = %for.index.loop
  %37 = load i64, i64* %7, align 8
  %38 = getelementptr [4 x %src.Render_Texture], [4 x %src.Render_Texture]* %32, i64 0, i64 %37
  %39 = load %src.Render_Texture, %src.Render_Texture* %38, align 8
  %40 = bitcast %runtime.Context* %9 to i8*
  call void @src.texture_destroy(%src.Render_Texture* %38, i8* %40)
  br label %for.index.loop

for.index.done:                                   ; preds = %for.index.loop
  %41 = load %src.Render_Target*, %src.Render_Target** %1, align 8
  %42 = getelementptr inbounds %runtime.Context, %runtime.Context* %9, i32 0, i32 0
  %43 = load %runtime.Allocator, %runtime.Allocator* %42, align 8
  %44 = bitcast %src.Render_Target* %41 to i8*
  %45 = bitcast %runtime.Allocator* %42 to { i64, i64 }*
  %46 = load { i64, i64 }, { i64, i64 }* %45, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([59 x i8], [59 x i8]* @"csbs$1bb", i64 0, i64 0), i64 58 }, i32 177, i32 2, %..string { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @"csbs$35e", i64 0, i64 0), i64 21 } }, %runtime.Source_Code_Location* %8, align 8
  %47 = bitcast %runtime.Context* %9 to i8*
  %48 = call i8 @runtime.mem_free(i8* %44, { i64, i64 } %46, %runtime.Source_Code_Location* %8, i8* %47)
  ret void
}

define internal void @src.render_target_begin(%src.Render_Target* %0, i64 %1, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %2 = alloca %src.Render_Target*, align 8
  %3 = alloca [4 x i8], align 8
  br label %entry

entry:                                            ; preds = %decls
  store %src.Render_Target* %0, %src.Render_Target** %2, align 8
  %4 = bitcast [4 x i8]* %3 to i64*
  store i64 %1, i64* %4, align 8
  %5 = load [4 x i8], [4 x i8]* %3, align 1
  %6 = bitcast i8* %__.context_ptr to %runtime.Context*
  %7 = load %src.Render_Target*, %src.Render_Target** %2, align 8
  %8 = getelementptr inbounds %src.Render_Target, %src.Render_Target* %7, i32 0, i32 8
  %9 = load [4 x i8], [4 x i8]* %3, align 1
  store [4 x i8] %9, [4 x i8]* %8, align 1
  %10 = load %src.Render_Target*, %src.Render_Target** %2, align 8
  %11 = getelementptr inbounds %src.Render_Target, %src.Render_Target* %10, i32 0, i32 0
  call void @runtime.clear_dynamic_array-50557({ %src.Render_Group*, i64, i64, %runtime.Allocator }* %11)
  %12 = load %src.Render_Target*, %src.Render_Target** %2, align 8
  %13 = getelementptr inbounds %src.Render_Target, %src.Render_Target* %12, i32 0, i32 2
  store i64 0, i64* %13, align 8
  ret void
}

define internal void @src.rect_scissor(i32 %0, { <2 x float>, <2 x float> } %1, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %2 = alloca i32, align 4
  %3 = alloca %src.Rect, align 8
  %4 = alloca i32, align 4
  br label %entry

entry:                                            ; preds = %decls
  store i32 %0, i32* %2, align 4
  %5 = bitcast %src.Rect* %3 to { <2 x float>, <2 x float> }*
  store { <2 x float>, <2 x float> } %1, { <2 x float>, <2 x float> }* %5, align 8
  %6 = load %src.Rect, %src.Rect* %3, align 4
  %7 = bitcast i8* %__.context_ptr to %runtime.Context*
  %8 = getelementptr inbounds %src.Rect, %src.Rect* %3, i32 0, i32 3
  %9 = load float, float* %8, align 4
  %10 = getelementptr inbounds %src.Rect, %src.Rect* %3, i32 0, i32 2
  %11 = load float, float* %10, align 4
  %12 = fsub float %9, %11
  %13 = fptosi float %12 to i32
  store i32 %13, i32* %4, align 4
  %14 = getelementptr inbounds %src.Rect, %src.Rect* %3, i32 0, i32 0
  %15 = load float, float* %14, align 4
  %16 = fptosi float %15 to i32
  %17 = load i32, i32* %2, align 4
  %18 = load i32, i32* %4, align 4
  %19 = sub i32 %17, %18
  %20 = getelementptr inbounds %src.Rect, %src.Rect* %3, i32 0, i32 2
  %21 = load float, float* %20, align 4
  %22 = fptosi float %21 to i32
  %23 = sub i32 %19, %22
  %24 = getelementptr inbounds %src.Rect, %src.Rect* %3, i32 0, i32 1
  %25 = load float, float* %24, align 4
  %26 = getelementptr inbounds %src.Rect, %src.Rect* %3, i32 0, i32 0
  %27 = load float, float* %26, align 4
  %28 = fsub float %25, %27
  %29 = fptosi float %28 to i32
  %30 = load i32, i32* %4, align 4
  call void @odin_gl.Scissor(i32 %16, i32 %23, i32 %29, i32 %30)
  ret void
}

define internal void @src.render_target_end(%src.Render_Target* %0, %sdl2.Window* %1, i64 %2, i64 %3, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %4 = alloca %src.Render_Target*, align 8
  %5 = alloca %sdl2.Window*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i32, align 4
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca %src.Render_Vertex*, align 8
  %13 = alloca %src.Render_Group, align 8
  %14 = alloca { %src.Render_Group*, i64, i64, %runtime.Allocator }*, align 8
  %15 = alloca i64, align 8
  %16 = alloca { <2 x float>, <2 x float> }, align 8
  %17 = alloca i64, align 8
  %18 = alloca %src.Render_Vertex*, align 8
  %19 = alloca %..any, align 8
  %20 = alloca { %..any*, i64 }, align 8
  %21 = alloca [1 x %..any], align 8
  %22 = alloca { i64, i64 }, align 8
  %23 = alloca %runtime.Source_Code_Location, align 8
  %24 = alloca [16 x float], align 32
  %25 = alloca [16 x float], align 32
  br label %entry

entry:                                            ; preds = %decls
  store %src.Render_Target* %0, %src.Render_Target** %4, align 8
  store %sdl2.Window* %1, %sdl2.Window** %5, align 8
  store i64 %2, i64* %6, align 8
  store i64 %3, i64* %7, align 8
  %26 = bitcast i8* %__.context_ptr to %runtime.Context*
  %27 = load %sdl2.Window*, %sdl2.Window** %5, align 8
  %28 = load %src.Render_Target*, %src.Render_Target** %4, align 8
  %29 = getelementptr inbounds %src.Render_Target, %src.Render_Target* %28, i32 0, i32 18
  %30 = load i8*, i8** %29, align 8
  %31 = call i32 @SDL_GL_MakeCurrent(%sdl2.Window* %27, i8* %30)
  call void @odin_gl.Enable(i32 3089)
  call void @odin_gl.Enable(i32 3042)
  call void @odin_gl.Enable(i32 32925)
  call void @odin_gl.Disable(i32 2884)
  call void @odin_gl.Disable(i32 2929)
  call void @odin_gl.BlendFuncSeparate(i32 770, i32 771, i32 1, i32 0)
  %32 = load i64, i64* %6, align 8
  %33 = trunc i64 %32 to i32
  %34 = load i64, i64* %7, align 8
  %35 = trunc i64 %34 to i32
  call void @odin_gl.Viewport(i32 0, i32 0, i32 %33, i32 %35)
  %36 = load i64, i64* %6, align 8
  %37 = trunc i64 %36 to i32
  %38 = load i64, i64* %7, align 8
  %39 = trunc i64 %38 to i32
  call void @odin_gl.Scissor(i32 0, i32 0, i32 %37, i32 %39)
  call void @odin_gl.ClearColor(float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00)
  call void @odin_gl.Clear(i32 16384)
  call void @odin_gl.BindTexture(i32 3553, i32 0)
  %40 = load %src.Render_Target*, %src.Render_Target** %4, align 8
  %41 = getelementptr inbounds %src.Render_Target, %src.Render_Target* %40, i32 0, i32 9
  %42 = load i32, i32* %41, align 4
  call void @odin_gl.EnableVertexAttribArray(i32 %42)
  %43 = load %src.Render_Target*, %src.Render_Target** %4, align 8
  %44 = getelementptr inbounds %src.Render_Target, %src.Render_Target* %43, i32 0, i32 10
  %45 = load i32, i32* %44, align 4
  call void @odin_gl.EnableVertexAttribArray(i32 %45)
  %46 = load %src.Render_Target*, %src.Render_Target** %4, align 8
  %47 = getelementptr inbounds %src.Render_Target, %src.Render_Target* %46, i32 0, i32 11
  %48 = load i32, i32* %47, align 4
  call void @odin_gl.EnableVertexAttribArray(i32 %48)
  %49 = load %src.Render_Target*, %src.Render_Target** %4, align 8
  %50 = getelementptr inbounds %src.Render_Target, %src.Render_Target* %49, i32 0, i32 12
  %51 = load i32, i32* %50, align 4
  call void @odin_gl.EnableVertexAttribArray(i32 %51)
  %52 = load %src.Render_Target*, %src.Render_Target** %4, align 8
  %53 = getelementptr inbounds %src.Render_Target, %src.Render_Target* %52, i32 0, i32 13
  %54 = load i32, i32* %53, align 4
  call void @odin_gl.EnableVertexAttribArray(i32 %54)
  %55 = load %src.Render_Target*, %src.Render_Target** %4, align 8
  %56 = getelementptr inbounds %src.Render_Target, %src.Render_Target* %55, i32 0, i32 14
  %57 = load i32, i32* %56, align 4
  call void @odin_gl.EnableVertexAttribArray(i32 %57)
  store i32 36, i32* %8, align 4
  %58 = load %src.Render_Target*, %src.Render_Target** %4, align 8
  %59 = getelementptr inbounds %src.Render_Target, %src.Render_Target* %58, i32 0, i32 9
  %60 = load i32, i32* %59, align 4
  %61 = load i32, i32* %8, align 4
  call void @odin_gl.VertexAttribPointer(i32 %60, i32 2, i32 5126, i1 true, i32 %61, i64 0)
  %62 = load %src.Render_Target*, %src.Render_Target** %4, align 8
  %63 = getelementptr inbounds %src.Render_Target, %src.Render_Target* %62, i32 0, i32 10
  %64 = load i32, i32* %63, align 4
  %65 = load i32, i32* %8, align 4
  call void @odin_gl.VertexAttribPointer(i32 %64, i32 2, i32 5126, i1 true, i32 %65, i64 8)
  %66 = load %src.Render_Target*, %src.Render_Target** %4, align 8
  %67 = getelementptr inbounds %src.Render_Target, %src.Render_Target* %66, i32 0, i32 11
  %68 = load i32, i32* %67, align 4
  %69 = load i32, i32* %8, align 4
  call void @odin_gl.VertexAttribIPointer(i32 %68, i32 1, i32 5125, i32 %69, i64 16)
  %70 = load %src.Render_Target*, %src.Render_Target** %4, align 8
  %71 = getelementptr inbounds %src.Render_Target, %src.Render_Target* %70, i32 0, i32 12
  %72 = load i32, i32* %71, align 4
  %73 = load i32, i32* %8, align 4
  call void @odin_gl.VertexAttribIPointer(i32 %72, i32 1, i32 5125, i32 %73, i64 20)
  %74 = load %src.Render_Target*, %src.Render_Target** %4, align 8
  %75 = getelementptr inbounds %src.Render_Target, %src.Render_Target* %74, i32 0, i32 13
  %76 = load i32, i32* %75, align 4
  %77 = load i32, i32* %8, align 4
  call void @odin_gl.VertexAttribPointer(i32 %76, i32 2, i32 5126, i1 true, i32 %77, i64 24)
  %78 = load %src.Render_Target*, %src.Render_Target** %4, align 8
  %79 = getelementptr inbounds %src.Render_Target, %src.Render_Target* %78, i32 0, i32 14
  %80 = load i32, i32* %79, align 4
  %81 = load i32, i32* %8, align 4
  call void @odin_gl.VertexAttribIPointer(i32 %80, i32 1, i32 5125, i32 %81, i64 32)
  %82 = load %src.Render_Target*, %src.Render_Target** %4, align 8
  %83 = getelementptr inbounds %src.Render_Target, %src.Render_Target* %82, i32 0, i32 16
  %84 = load i8, i8* %83, align 1
  %85 = trunc i8 %84 to i1
  br i1 %85, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  %86 = load %src.Render_Target*, %src.Render_Target** %4, align 8
  %87 = getelementptr inbounds %src.Render_Target, %src.Render_Target* %86, i32 0, i32 15
  %88 = getelementptr [4 x %src.Render_Texture], [4 x %src.Render_Texture]* %87, i64 0, i64 0
  %89 = bitcast %runtime.Context* %26 to i8*
  call void @src.texture_update(%src.Render_Texture* %88, i8* %89)
  %90 = load %src.Render_Target*, %src.Render_Target** %4, align 8
  %91 = getelementptr inbounds %src.Render_Target, %src.Render_Target* %90, i32 0, i32 16
  store i8 0, i8* %91, align 1
  br label %if.done

if.done:                                          ; preds = %if.then, %entry
  store i64 0, i64* %9, align 8
  %92 = load { i64*, i64 }, { i64*, i64 }* getelementptr (%runtime.Type_Info_Enum, %runtime.Type_Info_Enum* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 211, i32 5) to %runtime.Type_Info_Enum*), i64 0, i32 2), align 8
  %93 = load i64*, i64** getelementptr (%runtime.Type_Info_Enum, %runtime.Type_Info_Enum* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([270 x %runtime.Type_Info], [270 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 211, i32 5) to %runtime.Type_Info_Enum*), i64 0, i32 2, i32 0), align 8
  store i64 0, i64* %10, align 8
  br label %for.enum.loop

for.enum.loop:                                    ; preds = %for.enum.body, %if.done
  %94 = load i64, i64* %10, align 8
  %95 = icmp slt i64 %94, 4
  br i1 %95, label %for.enum.body, label %for.enum.done

for.enum.body:                                    ; preds = %for.enum.loop
  %96 = getelementptr i64, i64* %93, i64 %94
  %97 = load i64, i64* %10, align 8
  %98 = add i64 %97, 1
  store i64 %98, i64* %10, align 8
  %99 = load i64, i64* %96, align 8
  store i64 %99, i64* %11, align 8
  %100 = load %src.Render_Target*, %src.Render_Target** %4, align 8
  %101 = load i64, i64* %11, align 8
  %102 = bitcast %runtime.Context* %26 to i8*
  call void @src.texture_bind(%src.Render_Target* %100, i64 %101, i8* %102)
  br label %for.enum.loop

for.enum.done:                                    ; preds = %for.enum.loop
  %103 = load %src.Render_Target*, %src.Render_Target** %4, align 8
  %104 = getelementptr inbounds %src.Render_Target, %src.Render_Target* %103, i32 0, i32 1
  %105 = load { %src.Render_Vertex*, i64 }, { %src.Render_Vertex*, i64 }* %104, align 8
  %106 = bitcast { %src.Render_Vertex*, i64 }* %104 to { i64, i64 }*
  %107 = load { i64, i64 }, { i64, i64 }* %106, align 8
  %108 = call %src.Render_Vertex* @runtime.raw_slice_data-50606({ i64, i64 } %107)
  store %src.Render_Vertex* %108, %src.Render_Vertex** %12, align 8
  %109 = bitcast %src.Render_Group* %13 to i8*
  call void @llvm.memset.p0i8.i64(i8* %109, i8 0, i64 32, i1 false)
  %110 = load %src.Render_Target*, %src.Render_Target** %4, align 8
  %111 = getelementptr inbounds %src.Render_Target, %src.Render_Target* %110, i32 0, i32 0
  store { %src.Render_Group*, i64, i64, %runtime.Allocator }* %111, { %src.Render_Group*, i64, i64, %runtime.Allocator }** %14, align 8
  %112 = load { %src.Render_Group*, i64, i64, %runtime.Allocator }*, { %src.Render_Group*, i64, i64, %runtime.Allocator }** %14, align 8
  %113 = getelementptr inbounds { %src.Render_Group*, i64, i64, %runtime.Allocator }, { %src.Render_Group*, i64, i64, %runtime.Allocator }* %112, i32 0, i32 1
  store i64 -1, i64* %15, align 8
  br label %for.index.loop

for.index.loop:                                   ; preds = %if.done2, %for.enum.done
  %114 = load i64, i64* %15, align 8
  %115 = add i64 %114, 1
  store i64 %115, i64* %15, align 8
  %116 = load i64, i64* %113, align 8
  %117 = icmp slt i64 %115, %116
  br i1 %117, label %for.index.body, label %for.index.done

for.index.body:                                   ; preds = %for.index.loop
  %118 = load i64, i64* %15, align 8
  %119 = getelementptr inbounds { %src.Render_Group*, i64, i64, %runtime.Allocator }, { %src.Render_Group*, i64, i64, %runtime.Allocator }* %112, i32 0, i32 0
  %120 = load %src.Render_Group*, %src.Render_Group** %119, align 8
  %121 = getelementptr %src.Render_Group, %src.Render_Group* %120, i64 %118
  %122 = load %src.Render_Group, %src.Render_Group* %121, align 8
  %123 = load i64, i64* %7, align 8
  %124 = trunc i64 %123 to i32
  %125 = getelementptr inbounds %src.Render_Group, %src.Render_Group* %121, i32 0, i32 0
  %126 = load %src.Rect, %src.Rect* %125, align 4
  %127 = bitcast { <2 x float>, <2 x float> }* %16 to %src.Rect*
  store %src.Rect %126, %src.Rect* %127, align 4
  %128 = load { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %16, align 8
  %129 = bitcast %runtime.Context* %26 to i8*
  call void @src.rect_scissor(i32 %124, { <2 x float>, <2 x float> } %128, i8* %129)
  %130 = getelementptr inbounds %src.Render_Group, %src.Render_Group* %121, i32 0, i32 2
  %131 = load i64, i64* %130, align 8
  %132 = getelementptr inbounds %src.Render_Group, %src.Render_Group* %121, i32 0, i32 1
  %133 = load i64, i64* %132, align 8
  %134 = sub i64 %131, %133
  store i64 %134, i64* %17, align 8
  %135 = load i64, i64* %17, align 8
  %136 = icmp ne i64 %135, 0
  %137 = zext i1 %136 to i8
  %138 = trunc i8 %137 to i1
  br i1 %138, label %if.then1, label %if.done2

if.then1:                                         ; preds = %for.index.body
  %139 = load %src.Render_Vertex*, %src.Render_Vertex** %12, align 8
  %140 = getelementptr inbounds %src.Render_Group, %src.Render_Group* %121, i32 0, i32 1
  %141 = load i64, i64* %140, align 8
  %142 = getelementptr %src.Render_Vertex*, %src.Render_Vertex* %139, i64 %141
  store %src.Render_Vertex** %142, %src.Render_Vertex** %18, align 8
  %143 = load %src.Render_Vertex*, %src.Render_Vertex** %18, align 8
  %144 = bitcast %..any* %19 to i8*
  call void @llvm.memset.p0i8.i64(i8* %144, i8 0, i64 16, i1 false)
  %145 = bitcast %src.Render_Vertex** %18 to i8*
  %146 = getelementptr inbounds %..any, %..any* %19, i32 0, i32 0
  %147 = getelementptr inbounds %..any, %..any* %19, i32 0, i32 1
  store i8* %145, i8** %146, align 8
  store i64 792633534417207560, i64* %147, align 8
  %148 = load %..any, %..any* %19, align 8
  %149 = bitcast { %..any*, i64 }* %20 to i8*
  call void @llvm.memset.p0i8.i64(i8* %149, i8 0, i64 16, i1 false)
  %150 = bitcast [1 x %..any]* %21 to i8*
  call void @llvm.memset.p0i8.i64(i8* %150, i8 0, i64 16, i1 false)
  %151 = getelementptr [1 x %..any], [1 x %..any]* %21, i64 0, i64 0
  store %..any %148, %..any* %151, align 8
  %152 = getelementptr [1 x %..any], [1 x %..any]* %21, i64 0, i64 0
  %153 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %20, i32 0, i32 0
  store %..any* %152, %..any** %153, align 8
  %154 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %20, i32 0, i32 1
  store i64 1, i64* %154, align 8
  %155 = load { %..any*, i64 }, { %..any*, i64 }* %20, align 8
  %156 = bitcast { %..any*, i64 }* %20 to { i64, i64 }*
  %157 = load { i64, i64 }, { i64, i64 }* %156, align 8
  %158 = bitcast { i64, i64 }* %22 to %..string*
  store %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$2ad", i64 0, i64 0), i64 1 }, %..string* %158, align 8
  %159 = load { i64, i64 }, { i64, i64 }* %22, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([59 x i8], [59 x i8]* @"csbs$1bb", i64 0, i64 0), i64 58 }, i32 247, i32 8, %..string { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @"csbs$35f", i64 0, i64 0), i64 17 } }, %runtime.Source_Code_Location* %23, align 8
  %160 = bitcast %runtime.Context* %26 to i8*
  call void @log.info({ i64, i64 } %157, { i64, i64 } %159, %runtime.Source_Code_Location* %23, i8* %160)
  %161 = load i64, i64* %17, align 8
  %162 = mul i64 %161, 36
  %163 = load %src.Render_Vertex*, %src.Render_Vertex** %18, align 8
  %164 = bitcast %src.Render_Vertex* %163 to i8*
  call void @odin_gl.BufferData(i32 34962, i64 %162, i8* %164, i32 35040)
  %165 = load i64, i64* %6, align 8
  %166 = sitofp i64 %165 to float
  %167 = load i64, i64* %7, align 8
  %168 = sitofp i64 %167 to float
  %169 = bitcast [16 x float]* %25 to i8*
  call void @llvm.memset.p0i8.i64(i8* %169, i8 0, i64 64, i1 false)
  call void @math_linalg_glsl.mat4Ortho3d([16 x float]* sret %25, float 0.000000e+00, float %166, float %168, float 0.000000e+00, float -1.000000e+00, float 1.000000e+00)
  %170 = load [16 x float], [16 x float]* %25, align 4
  store [16 x float] %170, [16 x float]* %24, align 4
  %171 = load %src.Render_Target*, %src.Render_Target** %4, align 8
  %172 = getelementptr inbounds %src.Render_Target, %src.Render_Target* %171, i32 0, i32 6
  %173 = load i32, i32* %172, align 4
  %174 = getelementptr [16 x float], [16 x float]* %24, i64 0, i64 0
  %175 = bitcast float* %174 to [4 x float]*
  %176 = getelementptr [4 x float], [4 x float]* %175, i64 0, i64 0
  call void @odin_gl.UniformMatrix4fv(i32 %173, i32 1, i1 false, float* %176)
  %177 = load %src.Render_Target*, %src.Render_Target** %4, align 8
  %178 = getelementptr inbounds %src.Render_Target, %src.Render_Target* %177, i32 0, i32 7
  %179 = load i32, i32* %178, align 4
  %180 = load %src.Render_Target*, %src.Render_Target** %4, align 8
  %181 = getelementptr inbounds %src.Render_Target, %src.Render_Target* %180, i32 0, i32 8
  %182 = getelementptr [4 x i8], [4 x i8]* %181, i64 0, i64 0
  %183 = load i8, i8* %182, align 1
  %184 = uitofp i8 %183 to float
  %185 = fdiv float %184, 2.550000e+02
  %186 = load %src.Render_Target*, %src.Render_Target** %4, align 8
  %187 = getelementptr inbounds %src.Render_Target, %src.Render_Target* %186, i32 0, i32 8
  %188 = getelementptr [4 x i8], [4 x i8]* %187, i64 0, i64 1
  %189 = load i8, i8* %188, align 1
  %190 = uitofp i8 %189 to float
  %191 = fdiv float %190, 2.550000e+02
  %192 = load %src.Render_Target*, %src.Render_Target** %4, align 8
  %193 = getelementptr inbounds %src.Render_Target, %src.Render_Target* %192, i32 0, i32 8
  %194 = getelementptr [4 x i8], [4 x i8]* %193, i64 0, i64 2
  %195 = load i8, i8* %194, align 1
  %196 = uitofp i8 %195 to float
  %197 = fdiv float %196, 2.550000e+02
  %198 = load %src.Render_Target*, %src.Render_Target** %4, align 8
  %199 = getelementptr inbounds %src.Render_Target, %src.Render_Target* %198, i32 0, i32 8
  %200 = getelementptr [4 x i8], [4 x i8]* %199, i64 0, i64 3
  %201 = load i8, i8* %200, align 1
  %202 = uitofp i8 %201 to float
  %203 = fdiv float %202, 2.550000e+02
  call void @odin_gl.Uniform4f(i32 %179, float %185, float %191, float %197, float %203)
  %204 = load i64, i64* %17, align 8
  %205 = trunc i64 %204 to i32
  call void @odin_gl.DrawArrays(i32 4, i32 0, i32 %205)
  br label %if.done2

if.done2:                                         ; preds = %if.then1, %for.index.body
  br label %for.index.loop

for.index.done:                                   ; preds = %for.index.loop
  %206 = load %src.Render_Target*, %src.Render_Target** %4, align 8
  %207 = getelementptr inbounds %src.Render_Target, %src.Render_Target* %206, i32 0, i32 9
  %208 = load i32, i32* %207, align 4
  call void @odin_gl.DisableVertexAttribArray(i32 %208)
  %209 = load %src.Render_Target*, %src.Render_Target** %4, align 8
  %210 = getelementptr inbounds %src.Render_Target, %src.Render_Target* %209, i32 0, i32 10
  %211 = load i32, i32* %210, align 4
  call void @odin_gl.DisableVertexAttribArray(i32 %211)
  %212 = load %src.Render_Target*, %src.Render_Target** %4, align 8
  %213 = getelementptr inbounds %src.Render_Target, %src.Render_Target* %212, i32 0, i32 11
  %214 = load i32, i32* %213, align 4
  call void @odin_gl.DisableVertexAttribArray(i32 %214)
  %215 = load %src.Render_Target*, %src.Render_Target** %4, align 8
  %216 = getelementptr inbounds %src.Render_Target, %src.Render_Target* %215, i32 0, i32 12
  %217 = load i32, i32* %216, align 4
  call void @odin_gl.DisableVertexAttribArray(i32 %217)
  %218 = load %src.Render_Target*, %src.Render_Target** %4, align 8
  %219 = getelementptr inbounds %src.Render_Target, %src.Render_Target* %218, i32 0, i32 14
  %220 = load i32, i32* %219, align 4
  call void @odin_gl.DisableVertexAttribArray(i32 %220)
  call void @odin_gl.Flush()
  %221 = load %sdl2.Window*, %sdl2.Window** %5, align 8
  call void @SDL_GL_SwapWindow(%sdl2.Window* %221)
  ret void
}

declare internal { i64, i64 } @src.render_target_push_vertices-1099(%src.Render_Target*, %src.Render_Group*, i64, i8* noalias nocapture nonnull)

declare internal void @src.render_push_clip(%src.Render_Target*, { <2 x float>, <2 x float> }, i8* noalias nocapture nonnull)

declare internal void @src.render_rect(%src.Render_Target*, { <2 x float>, <2 x float> }, i64, float, i8* noalias nocapture nonnull)

declare internal void @src.render_rect_outline(%src.Render_Target*, { <2 x float>, <2 x float> }, i64, float, float, i8* noalias nocapture nonnull)

declare internal void @src.render_underline(%src.Render_Target*, { <2 x float>, <2 x float> }, i64, float, i8* noalias nocapture nonnull)

declare internal void @src.render_drop_shadow(%src.Render_Target*, { <2 x float>, <2 x float> }, i64, float, i8* noalias nocapture nonnull)

declare internal void @src.texture_generate_from_png(%src.Render_Target*, i64, { i64, i64 }, { i64, i64 }, i32, i8* noalias nocapture nonnull)

declare internal void @src.texture_generate-1107(%src.Render_Target*, i64, i32, i8* noalias nocapture nonnull)

declare internal void @src.texture_update(%src.Render_Texture*, i8* noalias nocapture nonnull)

declare internal void @src.texture_bind(%src.Render_Target*, i64, i8* noalias nocapture nonnull)

declare internal void @src.texture_destroy(%src.Render_Texture*, i8* noalias nocapture nonnull)

declare internal float @src.render_glyph(%src.Render_Target*, %src.Render_Group*, %fontstash.Font*, float, float, float, i64, i32, float, float, float, i8* noalias nocapture nonnull)

declare internal { <2 x float>, <2 x float> } @src.render_string(%src.Render_Target*, %fontstash.Font*, { i64, i64 }, float, float, i64, float, i8* noalias nocapture nonnull)

declare internal void @src.render_text_strike_through(%src.Render_Target*, float, { <2 x float>, <2 x float> }, i64, float, i8* noalias nocapture nonnull)

declare internal { <2 x float>, <2 x float> } @src.render_string_aligned(%src.Render_Target*, %fontstash.Font*, { i64, i64 }, { <2 x float>, <2 x float> }, i64, i64, i64, float, i8* noalias nocapture nonnull)

declare internal { <2 x float>, <2 x float> } @src.render_icon(%src.Render_Target*, %fontstash.Font*, i64, float, float, i64, float, i8* noalias nocapture nonnull)

declare internal { <2 x float>, <2 x float> } @src.render_icon_aligned(%src.Render_Target*, %fontstash.Font*, i64, { <2 x float>, <2 x float> }, i64, i64, i64, float, i8* noalias nocapture nonnull)

declare internal void @src.render_texture(%src.Render_Target*, i64, { <2 x float>, <2 x float> }, i64, i8* noalias nocapture nonnull)

declare internal <2 x float> @src.string_align_xy(float, float, { <2 x float>, <2 x float> }, i64, i64, i8* noalias nocapture nonnull)

declare internal void @src.render_element_clipped(%src.Render_Target*, %src.Element*, i8* noalias nocapture nonnull)

declare internal i32 @src.editor_save({ i64, i64 }, i8* noalias nocapture nonnull)

declare internal i32 @src.editor_load_version(%bytes.Reader*, i32, i16, i8* noalias nocapture nonnull)

declare internal i32 @src.editor_read_opt_tags(%bytes.Reader*, i8* noalias nocapture nonnull)

declare internal i32 @src.editor_load({ i64, i64 }, i8* noalias nocapture nonnull)

declare internal void @src.reader_read_bytes_out({ { i8*, i64 }, i32 }* noalias sret, %bytes.Reader*, i64, i8* noalias nocapture nonnull)

declare internal i8 @src.json_save_misc({ i64, i64 }, i8* noalias nocapture nonnull)

declare internal i8 @src.json_load_misc({ i64, i64 }, i8* noalias nocapture nonnull)

declare internal void @src.undo_dirty_increase(%src.Undo_Manager*, i8*, i8* noalias nocapture nonnull)

declare internal void @src.undo_dirty_decrease(%src.Undo_Manager*, i8*, i8* noalias nocapture nonnull)

declare internal void @src.dirty_push(%src.Undo_Manager*, i8* noalias nocapture nonnull)

declare internal void @src.undo_task_head_tail(%src.Undo_Manager*, i8*, i8* noalias nocapture nonnull)

declare internal void @src.task_head_tail_push(%src.Undo_Manager*, i8* noalias nocapture nonnull)

declare internal void @src.undo_u8_xor(%src.Undo_Manager*, i8*, i8* noalias nocapture nonnull)

declare internal void @src.u8_xor_push(%src.Undo_Manager*, i8*, i8, i8* noalias nocapture nonnull)

declare internal void @src.tag_toggle(i8, i8* noalias nocapture nonnull)

declare internal void @src.undo_task_swap(%src.Undo_Manager*, i8*, i8* noalias nocapture nonnull)

declare internal void @src.task_swap(%src.Undo_Manager*, i64, i64, i8* noalias nocapture nonnull)

declare internal void @src.undo_bool_toggle(%src.Undo_Manager*, i8*, i8* noalias nocapture nonnull)

declare internal void @src.undo_u8_set(%src.Undo_Manager*, i8*, i8* noalias nocapture nonnull)

declare internal void @src.task_set_state_undoable(%src.Undo_Manager*, %src.Task*, i8, i8* noalias nocapture nonnull)

declare internal void @src.undo_task_indentation_set(%src.Undo_Manager*, i8*, i8* noalias nocapture nonnull)

declare internal void @src.undo_task_remove_at(%src.Undo_Manager*, i8*, i8* noalias nocapture nonnull)

declare internal void @src.undo_task_insert_at(%src.Undo_Manager*, i8*, i8* noalias nocapture nonnull)

declare internal void @src.undo_task_append(%src.Undo_Manager*, i8*, i8* noalias nocapture nonnull)

declare internal void @src.undo_task_pop(%src.Undo_Manager*, i8*, i8* noalias nocapture nonnull)

declare internal void @src.task_remove_selection(%src.Undo_Manager*, i1 zeroext, i8* noalias nocapture nonnull)

declare internal void @src.copy_selection(i8* noalias nocapture nonnull)

declare internal i8 @src.shortcuts_run_multi({ i64, i64 }, i8* noalias nocapture nonnull)

declare internal void @src.add_shortcuts(%src.Window*, i8* noalias nocapture nonnull)

declare internal void @src.sidebar_mode_toggle(i64, i8* noalias nocapture nonnull)

declare internal i64 @src.sidebar_button_message(%src.Element*, i64, i64, i8*, i8* noalias nocapture nonnull)

declare internal %src.Split_Pane* @src.sidebar_init(%src.Element*, i8* noalias nocapture nonnull)

; Function Attrs: alwaysinline
declare internal i8 @src.options_autosave(i8* noalias nocapture nonnull) #4

; Function Attrs: alwaysinline
declare internal i8 @src.options_wrapping(i8* noalias nocapture nonnull) #4

; Function Attrs: alwaysinline
declare internal float @src.options_tab(i8* noalias nocapture nonnull) #4

; Function Attrs: alwaysinline
declare internal i64 @src.options_scroll_x(i8* noalias nocapture nonnull) #4

; Function Attrs: alwaysinline
declare internal i64 @src.options_scroll_y(i8* noalias nocapture nonnull) #4

; Function Attrs: alwaysinline
declare internal i64 @src.options_tag_mode(i8* noalias nocapture nonnull) #4

; Function Attrs: alwaysinline
declare internal i8 @src.options_uppercase_word(i8* noalias nocapture nonnull) #4

; Function Attrs: alwaysinline
declare internal i8 @src.options_use_animations(i8* noalias nocapture nonnull) #4

declare internal i64 @src.mode_based_button_message(%src.Element*, i64, i64, i8*, i8* noalias nocapture nonnull)

declare internal void @src.drag_init(%src.Window*, i8* noalias nocapture nonnull)

declare internal void @src.task_write_text_indentation(%strings.Builder*, %src.Task*, i64, i8* noalias nocapture nonnull)

declare internal void @src.task_head_tail_call_all(i8*, i8*, i8* noalias nocapture nonnull)

declare internal void @src.task_data_init(i8* noalias nocapture nonnull)

declare internal void @src.task_data_destroy(i8* noalias nocapture nonnull)

declare internal void @src.copy_reset(i8* noalias nocapture nonnull)

declare internal void @src.copy_push(%src.Task*, i8* noalias nocapture nonnull)

declare internal i8 @src.copy_empty(i8* noalias nocapture nonnull)

declare internal void @src.copy_paste_at(%src.Undo_Manager*, i64, i64, i8* noalias nocapture nonnull)

declare internal void @src.bookmark_advance(i1 zeroext, i8* noalias nocapture nonnull)

declare internal void @src.range_advance_index(i64*, i64, i1 zeroext, i8* noalias nocapture nonnull)

; Function Attrs: alwaysinline
declare internal %src.Undo_Manager* @src.mode_panel_manager_scoped(i8* noalias nocapture nonnull) #4

; Function Attrs: alwaysinline
declare internal %src.Undo_Manager* @src.mode_panel_manager_begin(i8* noalias nocapture nonnull) #4

; Function Attrs: alwaysinline
declare internal void @src.mode_panel_manager_end(%src.Undo_Manager*, i8* noalias nocapture nonnull) #4

; Function Attrs: alwaysinline
declare internal i8 @src.task_has_selection(i8* noalias nocapture nonnull) #4

; Function Attrs: alwaysinline
declare internal { i64, i64 } @src.task_low_and_high(i8* noalias nocapture nonnull) #4

declare internal void @src.task_head_tail_check_end(i8* noalias nocapture nonnull)

declare internal i8 @src.task_head_tail_check_begin(i8* noalias nocapture nonnull)

declare internal %src.Task* @src.task_init(i64, { i64, i64 }, i8* noalias nocapture nonnull)

declare internal %src.Task* @src.task_push(i64, { i64, i64 }, i64, i8* noalias nocapture nonnull)

declare internal void @src.task_insert_at(%src.Undo_Manager*, i64, %src.Task*, i8* noalias nocapture nonnull)

declare internal %src.Task* @src.task_push_undoable(%src.Undo_Manager*, i64, { i64, i64 }, i64, i8* noalias nocapture nonnull)

declare internal void @src.task_box_format_to_lines(%src.Task_Box*, float, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @src.task_visible_children_iter(i64, i64*, i8* noalias nocapture nonnull)

declare internal %src.Mode_Panel* @src.mode_panel_init(%src.Element*, i32, i8* noalias nocapture nonnull)

declare internal void @src.mode_panel_draw_verticals(%src.Render_Target*, i8* noalias nocapture nonnull)

declare internal void @src.task_set_children_info(i8* noalias nocapture nonnull)

declare internal void @src.task_set_visible_tasks(i8* noalias nocapture nonnull)

declare internal void @src.task_check_parent_states(%src.Undo_Manager*, i8* noalias nocapture nonnull)

declare internal i64 @src.mode_panel_message(%src.Element*, i64, i64, i8*, i8* noalias nocapture nonnull)

declare internal i64 @src.task_box_message_custom(%src.Element*, i64, i64, i8*, i8* noalias nocapture nonnull)

declare internal i64 @src.task_message(%src.Element*, i64, i64, i8*, i8* noalias nocapture nonnull)

declare internal void @src.goto_init(%src.Window*, i8* noalias nocapture nonnull)

declare internal void @src.search_init(%src.Element*, i8* noalias nocapture nonnull)

declare internal void @src.search_update_results({ i64, i64 }, i8* noalias nocapture nonnull)

declare internal void @src.search_find_next(i8* noalias nocapture nonnull)

declare internal void @src.search_find_prev(i8* noalias nocapture nonnull)

declare internal i64 @src.contains_multiple_iterator({ i64, i64 }, { i64, i64 }, i64*, i8* noalias nocapture nonnull)

declare internal void @src.task_panel_init(%src.Split_Pane*, i8* noalias nocapture nonnull)

declare internal void @src.tasks_load_file(i8* noalias nocapture nonnull)

declare internal void @src.tasks_load_reset(i8* noalias nocapture nonnull)

declare internal void @src.tasks_load_default(i8* noalias nocapture nonnull)

; Function Attrs: alwaysinline
declare internal i64 @src.theme_panel(i64, i8* noalias nocapture nonnull) #4

; Function Attrs: alwaysinline
declare internal i64 @src.theme_task_text(i8, i8* noalias nocapture nonnull) #4

declare internal %src.Panel* @src.theme_selected_panel(i8* noalias nocapture nonnull)

declare internal void @src.theme_reformat_panel_sliders(%src.Panel*, i8* noalias nocapture nonnull)

declare internal i8 @src.theme_panel_locked(%src.Panel*, i8* noalias nocapture nonnull)

declare internal void @src.theme_editor_spawn(i8* noalias nocapture nonnull)

declare internal i64 @src.color_parse_string({ i64, i64 }, i8* noalias nocapture nonnull)

declare internal void @src.undo_manager_init(%src.Undo_Manager*, i64, i8* noalias nocapture nonnull)

declare internal void @src.undo_manager_reset(%src.Undo_Manager*, i8* noalias nocapture nonnull)

declare internal void @src.undo_manager_destroy(%src.Undo_Manager*, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @src.undo_push(%src.Undo_Manager*, i8*, i8*, i64, i8* noalias nocapture nonnull)

declare internal void @src.undo_group_end(%src.Undo_Manager*, i8* noalias nocapture nonnull)

declare internal i8 @src.undo_is_empty(%src.Undo_Manager*, i1 zeroext, i8* noalias nocapture nonnull)

declare internal void @src.undo_invoke(%src.Undo_Manager*, i1 zeroext, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @os.read_at_least(i32, { i64, i64 }, i64, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @os.read_full(i32, { i64, i64 }, i8* noalias nocapture nonnull)

declare internal void @os.read_entire_file_from_filename({ { i8*, i64 }, i8 }* noalias sret, { i64, i64 }, { i64, i64 }, i8* noalias nocapture nonnull)

declare internal void @os.read_entire_file_from_handle({ { i8*, i64 }, i8 }* noalias sret, i32, { i64, i64 }, i8* noalias nocapture nonnull)

declare internal i8 @os.write_entire_file({ i64, i64 }, { i64, i64 }, i1 zeroext, i8* noalias nocapture nonnull)

declare internal void @os.heap_allocator_proc({ { i8*, i64 }, i8 }* noalias sret, i8*, i8, i64, i64, i8*, i64, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @os.heap_allocator(i8* noalias nocapture nonnull)

declare internal i32 @os._unix_open(i8*, i64, i64, i8* noalias nocapture nonnull)

declare internal i64 @os._unix_close(i32, i8* noalias nocapture nonnull)

declare internal i64 @os._unix_read(i32, i8*, i64, i8* noalias nocapture nonnull)

declare internal i64 @os._unix_write(i32, i8*, i64, i8* noalias nocapture nonnull)

declare internal i64 @os._unix_seek(i32, i64, i64, i8* noalias nocapture nonnull)

declare internal i64 @os._unix_fstat(i32, %os.OS_Stat*, i8* noalias nocapture nonnull)

declare i8* @calloc(i64, i64)

declare void @free(i8*)

declare i8* @realloc(i8*, i64)

declare internal i32 @os._get_errno-1577(i64, i8* noalias nocapture nonnull)

declare internal i64 @os.open({ i64, i64 }, i64, i64, i8* noalias nocapture nonnull)

declare internal i32 @os.close(i32, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @os.read(i32, { i64, i64 }, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @os.write(i32, { i64, i64 }, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @os.seek(i32, i64, i64, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @os.file_size(i32, i8* noalias nocapture nonnull)

declare internal i8* @os.heap_alloc(i64, i8* noalias nocapture nonnull)

declare internal i8* @os.heap_resize(i8*, i64, i8* noalias nocapture nonnull)

declare internal void @os.heap_free(i8*, i8* noalias nocapture nonnull)

declare internal i64 @os.current_thread_id()

declare internal { i64, i64 } @os.stream_from_handle(i32, i8* noalias nocapture nonnull)

declare internal void @mem.alloc_bytes({ { i8*, i64 }, i8 }* noalias sret, i64, i64, { i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal i8 @mem.free_bytes({ i64, i64 }, { i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @mem.default_resize_bytes_align({ { i8*, i64 }, i8 }* noalias sret, { i64, i64 }, i64, i64, { i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @mem.nil_allocator_proc({ { i8*, i64 }, i8 }* noalias sret, i8*, i8, i64, i64, i8*, i64, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @mem.nil_allocator(i8* noalias nocapture nonnull)

declare internal void @mem.arena_init(%mem.Arena*, { i64, i64 }, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @mem.arena_allocator(%mem.Arena*, i8* noalias nocapture nonnull)

declare internal void @mem.arena_allocator_proc({ { i8*, i64 }, i8 }* noalias sret, i8*, i8, i64, i64, i8*, i64, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal i8* @mem.zero(i8*, i64)

declare internal i8* @mem.copy(i8*, i8*, i64)

declare internal i64 @mem.compare({ i64, i64 }, { i64, i64 })

declare internal i64 @mem.compare_byte_ptrs(i8*, i8*, i64)

declare internal i8 @mem.check_zero_ptr(i8*, i64, i8* noalias nocapture nonnull)

; Function Attrs: alwaysinline
declare internal { i64, i64 } @mem.byte_slice(i8*, i64) #4

declare internal i8 @mem.is_power_of_two(i64)

declare internal i8* @mem.align_forward(i8*, i64, i8* noalias nocapture nonnull)

declare internal i64 @mem.align_forward_uintptr(i64, i64, i8* noalias nocapture nonnull)

declare internal i64 @mem.align_backward_uintptr(i64, i64, i8* noalias nocapture nonnull)

declare internal void @strings.builder_make_none(%strings.Builder* noalias sret, { i64, i64 }, i8* noalias nocapture nonnull)

declare internal void @strings.builder_make_len_cap(%strings.Builder* noalias sret, i64, i64, { i64, i64 }, i8* noalias nocapture nonnull)

declare internal %strings.Builder* @strings.builder_init_none(%strings.Builder*, { i64, i64 }, i8* noalias nocapture nonnull)

declare internal %strings.Builder* @strings.builder_init_len_cap(%strings.Builder*, i64, i64, { i64, i64 }, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @strings.to_stream(%strings.Builder*, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @strings.to_writer(%strings.Builder*, i8* noalias nocapture nonnull)

declare internal void @strings.builder_destroy(%strings.Builder*, i8* noalias nocapture nonnull)

declare internal void @strings.builder_reset(%strings.Builder*, i8* noalias nocapture nonnull)

declare internal void @strings.builder_from_bytes(%strings.Builder* noalias sret, { i64, i64 }, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @strings.to_string(%strings.Builder*, i8* noalias nocapture nonnull)

declare internal i64 @strings.write_byte(%strings.Builder*, i8, i8* noalias nocapture nonnull)

declare internal i64 @strings.write_bytes(%strings.Builder*, { i64, i64 }, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @strings.write_rune(%strings.Builder*, i32, i8* noalias nocapture nonnull)

declare internal i64 @strings.write_string(%strings.Builder*, { i64, i64 }, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @strings.pop_rune(%strings.Builder*, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @strings.to_lower({ i64, i64 }, { i64, i64 }, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @strings.clone({ i64, i64 }, { i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal i8* @strings.clone_to_cstring({ i64, i64 }, { i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @strings.string_from_ptr(i8*, i64, i8* noalias nocapture nonnull)

declare internal i8* @strings.unsafe_string_to_cstring({ i64, i64 }, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @strings.clone_from_cstring(i8*, { i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal i64 @strings.rune_count({ i64, i64 }, i8* noalias nocapture nonnull)

declare internal i64 @strings.index_byte({ i64, i64 }, i8, i8* noalias nocapture nonnull)

declare internal i64 @strings.index({ i64, i64 }, { i64, i64 }, i8* noalias nocapture nonnull)

declare internal i8 @strings.is_space(i32, i8* noalias nocapture nonnull)

declare internal i64 @strings.index_proc({ i64, i64 }, i8*, i1 zeroext, i8* noalias nocapture nonnull)

declare internal i64 @strings.last_index_proc({ i64, i64 }, i8*, i1 zeroext, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @strings.trim_left_proc({ i64, i64 }, i8*, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @strings.trim_right_proc({ i64, i64 }, i8*, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @strings.trim_left_space({ i64, i64 }, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @strings.trim_right_space({ i64, i64 }, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @strings.trim_space({ i64, i64 }, i8* noalias nocapture nonnull)

declare internal void @io.to_writer({ %io.Writer, i8 }* noalias sret, { i64, i64 }, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @io.write({ i64, i64 }, { i64, i64 }, i64*, i8* noalias nocapture nonnull)

declare internal i32 @io.flush({ i64, i64 }, i8* noalias nocapture nonnull)

declare internal i32 @io.write_byte_to_writer({ i64, i64 }, i8, i64*, i8* noalias nocapture nonnull)

declare internal i32 @io._write_byte-2059({ i64, i64 }, i8, i64*, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @io.write_string({ i64, i64 }, { i64, i64 }, i64*, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @io.write_rune({ i64, i64 }, i32, i64*, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @io.write_u64({ i64, i64 }, i64, i64, i64*, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @io.write_i64({ i64, i64 }, i64, i64, i64*, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @io.write_int({ i64, i64 }, i64, i64, i64*, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @io.write_f16({ i64, i64 }, half, i64*, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @io.write_f32({ i64, i64 }, float, i64*, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @io.write_f64({ i64, i64 }, double, i64*, i8* noalias nocapture nonnull)

declare internal i32 @io.n_wrapper(i64, i32, i64*, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @io.write_encoded_rune({ i64, i64 }, i32, i1 zeroext, i64*, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @io.write_escaped_rune({ i64, i64 }, i32, i8, i1 zeroext, i64*, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @io.write_quoted_string({ i64, i64 }, { i64, i64 }, i8, i64*, i8* noalias nocapture nonnull)

declare internal i64 @io.write_quoted_rune({ i64, i64 }, i32, i8* noalias nocapture nonnull)

declare internal i64 @time.tick_now()

declare internal i64 @time.tick_diff(i64, i64)

declare internal i64 @time.tick_since(i64)

declare internal i64 @time.now()

declare internal void @time.stopwatch_start(%time.Stopwatch*, i8* noalias nocapture nonnull)

declare internal i64 @time.stopwatch_duration(%time.Stopwatch*, i8* noalias nocapture nonnull)

declare internal double @time.duration_seconds(i64)

declare internal double @time.duration_minutes(i64)

declare internal double @time.duration_hours(i64)

declare internal void @time.date({ i64, i64, i64 }* noalias sret, i64, i8* noalias nocapture nonnull)

declare internal void @time.clock_from_time({ i64, i64, i64 }* noalias sret, i64, i8* noalias nocapture nonnull)

declare internal void @time.clock_from_seconds({ i64, i64, i64 }* noalias sret, i64, i8* noalias nocapture nonnull)

declare internal i64 @time._time_abs-2177(i64, i8* noalias nocapture nonnull)

declare internal void @time._abs_date-2178({ i64, i64, i64, i64 }* noalias sret, i64, i1 zeroext, i8* noalias nocapture nonnull)

declare internal i64 @time._now-2189()

declare internal i64 @time._tick_now-2191()

declare internal void @bytes.buffer_init_allocator(%bytes.Buffer*, i64, i64, { i64, i64 }, i8* noalias nocapture nonnull)

declare internal void @bytes.buffer_destroy(%bytes.Buffer*, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @bytes.buffer_to_bytes(%bytes.Buffer*, i8* noalias nocapture nonnull)

declare internal i64 @bytes.buffer_length(%bytes.Buffer*, i8* noalias nocapture nonnull)

declare internal void @bytes.buffer_reset(%bytes.Buffer*, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @bytes._buffer_try_grow-2208(%bytes.Buffer*, i64, i8* noalias nocapture nonnull)

declare internal i64 @bytes._buffer_grow-2209(%bytes.Buffer*, i64, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @bytes.buffer_write(%bytes.Buffer*, { i64, i64 }, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @bytes.buffer_write_ptr(%bytes.Buffer*, i8*, i64, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @bytes.buffer_write_string(%bytes.Buffer*, { i64, i64 }, i8* noalias nocapture nonnull)

declare internal i32 @bytes.buffer_write_byte(%bytes.Buffer*, i8, i8* noalias nocapture nonnull)

declare internal void @bytes.reader_init(%bytes.Reader*, { i64, i64 }, i8* noalias nocapture nonnull)

declare internal i64 @bytes.reader_length(%bytes.Reader*, i8* noalias nocapture nonnull)

declare internal i64 @bytes.reader_read_byte(%bytes.Reader*, i8* noalias nocapture nonnull)

declare internal void @log.create_console_logger(%runtime.Logger* noalias sret, i64, i16, { i64, i64 }, i8* noalias nocapture nonnull)

declare internal void @log.file_console_logger_proc(i8*, i64, { i64, i64 }, i16, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @log.do_level_header(i16, i64, %strings.Builder*, i8* noalias nocapture nonnull)

declare internal void @log.do_location_header(i16, %strings.Builder*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @log.info({ i64, i64 }, { i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @log.error({ i64, i64 }, { i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

; Function Attrs: noreturn
declare internal void @log.panic({ i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull) #3

; Function Attrs: noreturn
declare internal void @log.panicf({ i64, i64 }, { i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull) #3

declare internal void @log.log(i64, { i64, i64 }, { i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @log.logf(i64, { i64, i64 }, { i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @json.marshal({ { i8*, i64 }, %json.Marshal_Error }* noalias sret, { i64, i64 }, %json.Marshal_Options*, { i64, i64 }, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @json.marshal_to_builder(%strings.Builder*, { i64, i64 }, %json.Marshal_Options*, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @json.marshal_to_writer({ i64, i64 }, { i64, i64 }, %json.Marshal_Options*, i8* noalias nocapture nonnull)

declare internal i32 @json.opt_write_key({ i64, i64 }, %json.Marshal_Options*, { i64, i64 }, i8* noalias nocapture nonnull)

declare internal i32 @json.opt_write_start({ i64, i64 }, %json.Marshal_Options*, i8, i8* noalias nocapture nonnull)

declare internal i32 @json.opt_write_iteration({ i64, i64 }, %json.Marshal_Options*, i64, i8* noalias nocapture nonnull)

declare internal i32 @json.opt_write_end({ i64, i64 }, %json.Marshal_Options*, i8, i8* noalias nocapture nonnull)

declare internal i32 @json.opt_write_indentation({ i64, i64 }, %json.Marshal_Options*, i8* noalias nocapture nonnull)

declare internal void @json.make_parser(%json.Parser* noalias sret, { i64, i64 }, i64, i1 zeroext, { i64, i64 }, i8* noalias nocapture nonnull)

declare internal void @json.make_parser_from_string(%json.Parser* noalias sret, { i64, i64 }, i64, i1 zeroext, { i64, i64 }, i8* noalias nocapture nonnull)

declare internal void @json.advance_token({ %json.Token, i64 }* noalias sret, %json.Parser*, i8* noalias nocapture nonnull)

declare internal i8 @json.allow_token(%json.Parser*, i64, i8* noalias nocapture nonnull)

declare internal i64 @json.expect_token(%json.Parser*, i64, i8* noalias nocapture nonnull)

declare internal i64 @json.parse_colon(%json.Parser*, i8* noalias nocapture nonnull)

declare internal i8 @json.parse_comma(%json.Parser*, i8* noalias nocapture nonnull)

declare internal void @json.parse_value({ %json.Value, i64 }* noalias sret, %json.Parser*, i8* noalias nocapture nonnull)

declare internal void @json.parse_array({ %json.Value, i64 }* noalias sret, %json.Parser*, i8* noalias nocapture nonnull)

declare internal void @json.bytes_make-2390({ { i8*, i64 }, i64 }* noalias sret, i64, i64, { i64, i64 }, i8* noalias nocapture nonnull)

declare internal void @json.clone_string({ %..string, i64 }* noalias sret, { i64, i64 }, { i64, i64 }, i8* noalias nocapture nonnull)

declare internal void @json.parse_object_key({ %..string, i64 }* noalias sret, %json.Parser*, { i64, i64 }, i8* noalias nocapture nonnull)

declare internal void @json.parse_object_body({ { { i64*, i64 }, { i8*, i64, i64, %runtime.Allocator } }, i64 }* noalias sret, %json.Parser*, i64, i8* noalias nocapture nonnull)

declare internal void @json.parse_object({ %json.Value, i64 }* noalias sret, %json.Parser*, i8* noalias nocapture nonnull)

declare internal void @json.unquote_string({ %..string, i64 }* noalias sret, %json.Token*, i64, { i64, i64 }, i8* noalias nocapture nonnull)

declare internal void @json.make_tokenizer(%json.Tokenizer* noalias sret, { i64, i64 }, i64, i1 zeroext, i8* noalias nocapture nonnull)

declare internal i32 @json.next_rune(%json.Tokenizer*, i8* noalias nocapture nonnull)

declare internal void @json.get_token({ %json.Token, i64 }* noalias sret, %json.Tokenizer*, i8* noalias nocapture nonnull)

declare internal i8 @json.is_valid_number({ i64, i64 }, i64, i8* noalias nocapture nonnull)

declare internal i8 @json.is_valid_string_literal({ i64, i64 }, i64, i8* noalias nocapture nonnull)

declare internal void @json.destroy_value(%json.Value*, i8* noalias nocapture nonnull)

declare internal void @json.unmarshal_any(%json.Unmarshal_Error* noalias sret, { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, i8* noalias nocapture nonnull)

declare internal i8 @json.assign_bool-2423({ i64, i64 }, i1 zeroext, i8* noalias nocapture nonnull)

declare internal i8 @json.unmarshal_string_token-2426(%json.Parser*, { i64, i64 }, { i64, i64 }, %runtime.Type_Info*, i8* noalias nocapture nonnull)

declare internal void @json.unmarshal_value-2427(%json.Unmarshal_Error* noalias sret, %json.Parser*, { i64, i64 }, i8* noalias nocapture nonnull)

declare internal void @json.unmarshal_expect_token-2428(%json.Token* noalias sret, %json.Parser*, i64, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @json.unmarshal_object-2429(%json.Unmarshal_Error* noalias sret, %json.Parser*, { i64, i64 }, i64, i8* noalias nocapture nonnull)

declare internal i64 @json.unmarshal_count_array-2430(%json.Parser*, i8* noalias nocapture nonnull)

declare internal void @json.unmarshal_array-2431(%json.Unmarshal_Error* noalias sret, %json.Parser*, { i64, i64 }, i8* noalias nocapture nonnull)

declare internal i8 @json.is_valid({ i64, i64 }, i64, i1 zeroext, i8* noalias nocapture nonnull)

declare internal i8 @json.validate_object_key(%json.Parser*, i8* noalias nocapture nonnull)

declare internal i8 @json.validate_object_body(%json.Parser*, i64, i8* noalias nocapture nonnull)

declare internal i8 @json.validate_object(%json.Parser*, i8* noalias nocapture nonnull)

declare internal i8 @json.validate_array(%json.Parser*, i8* noalias nocapture nonnull)

declare internal i8 @json.validate_value(%json.Parser*, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @utf8.encode_rune(i32, i8* noalias nocapture nonnull)

; Function Attrs: alwaysinline
declare internal { i64, i64 } @utf8.decode_rune_in_string({ i64, i64 }, i8* noalias nocapture nonnull) #4

declare internal { i64, i64 } @utf8.decode_rune_in_bytes({ i64, i64 }, i8* noalias nocapture nonnull)

; Function Attrs: alwaysinline
declare internal { i64, i64 } @utf8.decode_last_rune_in_string({ i64, i64 }, i8* noalias nocapture nonnull) #4

declare internal { i64, i64 } @utf8.decode_last_rune_in_bytes({ i64, i64 }, i8* noalias nocapture nonnull)

; Function Attrs: alwaysinline
declare internal i8 @utf8.rune_start(i8, i8* noalias nocapture nonnull) #4

; Function Attrs: alwaysinline
declare internal i64 @utf8.rune_count_in_string({ i64, i64 }, i8* noalias nocapture nonnull) #4

declare internal i64 @utf8.rune_count_in_bytes({ i64, i64 }, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @strconv.generic_ftoa({ i64, i64 }, double, i8, i64, i64, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @strconv.format_digits({ i64, i64 }, i1 zeroext, i1 zeroext, %strconv.Decimal_Slice*, i64, i8, i8* noalias nocapture nonnull)

declare internal void @strconv.round_shortest(%strconv_decimal.Decimal*, i64, i64, %strconv.Float_Info*, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @strconv.is_integer_negative(i64, i1 zeroext, i64, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @strconv.append_bits({ i64, i64 }, i64, i64, i1 zeroext, i64, { i64, i64 }, i8, i8* noalias nocapture nonnull)

declare internal void @strconv.is_integer_negative_128({ i128, i8 }* noalias sret, i128, i1 zeroext, i64, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @strconv.append_bits_128({ i64, i64 }, i128, i64, i1 zeroext, i64, { i64, i64 }, i8, i8* noalias nocapture nonnull)

declare internal i64 @strconv._digit_value(i32, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @strconv.parse_i64_of_base({ i64, i64 }, i64, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @strconv.parse_i64_maybe_prefixed({ i64, i64 }, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @strconv.parse_int({ i64, i64 }, i64, i8* noalias nocapture nonnull)

declare internal void @strconv.parse_i128_maybe_prefixed({ i128, i8 }* noalias sret, { i64, i64 }, i8* noalias nocapture nonnull)

declare internal { double, i64 } @strconv.parse_f64({ i64, i64 }, i8* noalias nocapture nonnull)

declare internal i64 @strconv.atoi({ i64, i64 }, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @strconv.append_float({ i64, i64 }, double, i8, i64, i64, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @fmt.tprint({ i64, i64 }, { i64, i64 }, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @fmt.tprintf({ i64, i64 }, { i64, i64 }, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @fmt.sbprint(%strings.Builder*, { i64, i64 }, { i64, i64 }, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @fmt.sbprintf(%strings.Builder*, { i64, i64 }, { i64, i64 }, i8* noalias nocapture nonnull)

declare internal i64 @fmt.wprint({ i64, i64 }, { i64, i64 }, { i64, i64 }, i8* noalias nocapture nonnull)

declare internal i64 @fmt.wprintf({ i64, i64 }, { i64, i64 }, { i64, i64 }, i8* noalias nocapture nonnull)

declare internal void @fmt._parse_int({ i64, i64, i8 }* noalias sret, { i64, i64 }, i64, i8* noalias nocapture nonnull)

declare internal void @fmt._arg_number({ i64, i64, i8 }* noalias sret, %fmt.Info*, i64, { i64, i64 }, i64, i64, i8* noalias nocapture nonnull)

declare internal void @fmt.int_from_arg({ i64, i64, i8 }* noalias sret, { i64, i64 }, i64, i8* noalias nocapture nonnull)

declare internal void @fmt.fmt_bad_verb(%fmt.Info*, i32, i8* noalias nocapture nonnull)

declare internal void @fmt.fmt_bool(%fmt.Info*, i1 zeroext, i32, i8* noalias nocapture nonnull)

declare internal void @fmt.fmt_write_padding(%fmt.Info*, i64, i8* noalias nocapture nonnull)

declare internal void @fmt._fmt_int(%fmt.Info*, i64, i64, i1 zeroext, i64, { i64, i64 }, i8* noalias nocapture nonnull)

declare internal void @fmt._fmt_int_128(%fmt.Info*, i128, i64, i1 zeroext, i64, { i64, i64 }, i8* noalias nocapture nonnull)

declare internal void @fmt.fmt_rune(%fmt.Info*, i32, i32, i8* noalias nocapture nonnull)

declare internal void @fmt.fmt_int(%fmt.Info*, i64, i1 zeroext, i64, i32, i8* noalias nocapture nonnull)

declare internal void @fmt.fmt_int_128(%fmt.Info*, i128, i1 zeroext, i64, i32, i8* noalias nocapture nonnull)

declare internal void @fmt._pad(%fmt.Info*, { i64, i64 }, i8* noalias nocapture nonnull)

declare internal void @fmt.fmt_float(%fmt.Info*, double, i64, i32, i8* noalias nocapture nonnull)

declare internal void @fmt.fmt_string(%fmt.Info*, { i64, i64 }, i32, i8* noalias nocapture nonnull)

declare internal void @fmt.fmt_cstring(%fmt.Info*, i8*, i32, i8* noalias nocapture nonnull)

declare internal void @fmt.fmt_pointer(%fmt.Info*, i8*, i32, i8* noalias nocapture nonnull)

declare internal void @fmt.fmt_soa_pointer(%fmt.Info*, { i64, i64 }, i32, i8* noalias nocapture nonnull)

declare internal void @fmt.enum_value_to_string({ %..string, i8 }* noalias sret, { i64, i64 }, i8* noalias nocapture nonnull)

declare internal void @fmt.fmt_enum(%fmt.Info*, { i64, i64 }, i32, i8* noalias nocapture nonnull)

declare internal void @fmt.stored_enum_value_to_string({ %..string, i8 }* noalias sret, %runtime.Type_Info*, i64, i64, i8* noalias nocapture nonnull)

declare internal void @fmt.fmt_bit_set(%fmt.Info*, { i64, i64 }, { i64, i64 }, i8* noalias nocapture nonnull)

declare internal void @fmt.fmt_write_indent(%fmt.Info*, i8* noalias nocapture nonnull)

declare internal void @fmt.fmt_write_array(%fmt.Info*, i8*, i64, i64, i64, i32, i8* noalias nocapture nonnull)

declare internal i8 @fmt.handle_tag-2585(i8*, %runtime.Type_Info_Struct*, i64, i32*, i64*, i8*, i8* noalias nocapture nonnull)

declare internal void @fmt.fmt_struct(%fmt.Info*, { i64, i64 }, i32, %runtime.Type_Info_Struct*, { i64, i64 }, i8* noalias nocapture nonnull)

declare internal i64 @fmt.search_nul_termination-2587(i8*, i64, i64, i8* noalias nocapture nonnull)

declare internal void @fmt.fmt_array_nul_terminated(%fmt.Info*, i8*, i64, i64, %runtime.Type_Info*, i32, i8* noalias nocapture nonnull)

declare internal void @fmt.fmt_array(%fmt.Info*, i8*, i64, i64, %runtime.Type_Info*, i32, i8* noalias nocapture nonnull)

declare internal void @fmt.fmt_named(%fmt.Info*, { i64, i64 }, i32, %runtime.Type_Info_Named*, i8* noalias nocapture nonnull)

declare internal void @fmt.fmt_union(%fmt.Info*, { i64, i64 }, i32, %runtime.Type_Info_Union*, i64, i8* noalias nocapture nonnull)

declare internal void @fmt.fmt_matrix(%fmt.Info*, { i64, i64 }, i32, %runtime.Type_Info_Matrix*, i8* noalias nocapture nonnull)

declare internal void @fmt.fmt_value(%fmt.Info*, { i64, i64 }, i32, i8* noalias nocapture nonnull)

declare internal void @fmt.fmt_complex(%fmt.Info*, { double, double }, i64, i32, i8* noalias nocapture nonnull)

declare internal void @fmt.fmt_quaternion(%fmt.Info*, %..quaternion256*, i64, i32, i8* noalias nocapture nonnull)

declare internal void @fmt.fmt_arg(%fmt.Info*, { i64, i64 }, i32, i8* noalias nocapture nonnull)

declare internal i64 @fmt.fprintf(i32, { i64, i64 }, { i64, i64 }, i8* noalias nocapture nonnull)

declare internal i64 @fmt.eprintf({ i64, i64 }, { i64, i64 }, i8* noalias nocapture nonnull)

declare internal void @strconv_decimal.trim(%strconv_decimal.Decimal*, i8* noalias nocapture nonnull)

declare internal void @strconv_decimal.assign(%strconv_decimal.Decimal*, i64, i8* noalias nocapture nonnull)

declare internal void @strconv_decimal.shift_right(%strconv_decimal.Decimal*, i64, i8* noalias nocapture nonnull)

declare internal void @strconv_decimal.shift_left(%strconv_decimal.Decimal*, i64, i8* noalias nocapture nonnull)

declare internal void @strconv_decimal.shift(%strconv_decimal.Decimal*, i64, i8* noalias nocapture nonnull)

declare internal i8 @strconv_decimal.can_round_up(%strconv_decimal.Decimal*, i64, i8* noalias nocapture nonnull)

declare internal void @strconv_decimal.round(%strconv_decimal.Decimal*, i64, i8* noalias nocapture nonnull)

declare internal void @strconv_decimal.round_up(%strconv_decimal.Decimal*, i64, i8* noalias nocapture nonnull)

declare internal void @strconv_decimal.round_down(%strconv_decimal.Decimal*, i64, i8* noalias nocapture nonnull)

declare internal float @math.round_f32(float)

declare internal float @math.ceil_f32(float)

declare internal float @math.floor_f32(float)

declare internal <2 x float> @math.modf_f32(float)

declare internal { double, double } @math.modf_f64(double)

declare internal i64 @math.classify_f32(float)

declare internal i8 @math.is_nan_f32(float)

declare internal i8 @math.is_inf_f32(float, i64)

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.sin.f64(double) #6

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.cos.f64(double) #6

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.pow.f64(double, double) #6

; Function Attrs: nounwind readnone speculatable willreturn
declare float @llvm.exp.f32(float) #6

declare internal double @math.sqrt_f64(double)

declare internal i64 @reflect.type_kind(i64, i8* noalias nocapture nonnull)

declare internal %runtime.Type_Info* @reflect.type_info_base(%runtime.Type_Info*, i8* noalias nocapture nonnull)

declare internal %runtime.Type_Info* @reflect.type_info_core(%runtime.Type_Info*, i8* noalias nocapture nonnull)

declare internal i64 @reflect.typeid_base(i64, i8* noalias nocapture nonnull)

declare internal i64 @reflect.typeid_core(i64, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @reflect.any_base({ i64, i64 }, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @reflect.any_core({ i64, i64 }, i8* noalias nocapture nonnull)

declare internal void @reflect.struct_fields_zipped({ %..string*, %runtime.Type_Info**, %..string*, i64*, i8*, i64 }* noalias sret, i64, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @reflect.struct_tag_get({ i64, i64 }, { i64, i64 }, i8* noalias nocapture nonnull)

declare internal void @reflect.struct_tag_lookup({ %..string, i8 }* noalias sret, { i64, i64 }, { i64, i64 }, i8* noalias nocapture nonnull)

declare internal i8 @reflect.type_info_union_is_pure_maybe(%runtime.Type_Info_Union*, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @reflect.as_int({ i64, i64 }, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @reflect.as_i64({ i64, i64 }, i8* noalias nocapture nonnull)

declare internal i8* @reflect.relative_pointer_to_absolute_raw(i8*, i64, i8* noalias nocapture nonnull)

declare internal i8 @reflect.is_rune(%runtime.Type_Info*, i8* noalias nocapture nonnull)

declare internal i8 @reflect.is_any(%runtime.Type_Info*, i8* noalias nocapture nonnull)

declare internal i8 @reflect.is_string(%runtime.Type_Info*, i8* noalias nocapture nonnull)

declare internal i8 @reflect.is_cstring(%runtime.Type_Info*, i8* noalias nocapture nonnull)

declare internal i8 @reflect.is_pointer(%runtime.Type_Info*, i8* noalias nocapture nonnull)

declare internal i8 @reflect.is_pointer_internally(%runtime.Type_Info*, i8* noalias nocapture nonnull)

declare internal i8 @reflect.is_enum(%runtime.Type_Info*, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @reflect.write_typeid_writer({ i64, i64 }, i64, i64*, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @reflect.write_type_writer({ i64, i64 }, %runtime.Type_Info*, i64*, i8* noalias nocapture nonnull)

declare internal i64 @unix.sys_gettid()

declare i32 @clock_gettime(i64, %unix.timespec*)

declare internal i64 @unicode.binary_search(i32, { i64, i64 }, i64, i64, i8* noalias nocapture nonnull)

declare internal i32 @unicode.to_lower(i32, i8* noalias nocapture nonnull)

declare internal i32 @unicode.to_upper(i32, i8* noalias nocapture nonnull)

declare internal i8 @unicode.is_lower(i32, i8* noalias nocapture nonnull)

declare internal i8 @unicode.is_upper(i32, i8* noalias nocapture nonnull)

declare internal i8 @unicode.is_letter(i32, i8* noalias nocapture nonnull)

declare internal i8 @unicode.is_digit(i32, i8* noalias nocapture nonnull)

declare internal i8 @unicode.is_number(i32, i8* noalias nocapture nonnull)

declare internal void @fontstash.init(i64, i64, i8* noalias nocapture nonnull)

declare internal void @fontstash.destroy(i8* noalias nocapture nonnull)

declare internal void @fontstash.font_atlas_init-3675(%fontstash.Font_Atlas*, i64, i64, i64, i8* noalias nocapture nonnull)

declare internal void @fontstash.font_atlas_destroy-3676(%fontstash.Font_Atlas*, i8* noalias nocapture nonnull)

declare internal void @fontstash.font_atlas_insert_node-3677(%fontstash.Font_Atlas*, i64, i64, i64, i64, i8* noalias nocapture nonnull)

declare internal void @fontstash.font_atlas_remove_node-3678(%fontstash.Font_Atlas*, i64, i8* noalias nocapture nonnull)

declare internal void @fontstash.font_atlas_add_skyline_level-3680(%fontstash.Font_Atlas*, i64, i64, i64, i64, i64, i8* noalias nocapture nonnull)

declare internal i64 @fontstash.font_atlas_rect_fits-3681(%fontstash.Font_Atlas*, i64, i64, i64, i8* noalias nocapture nonnull)

declare internal void @fontstash.font_atlas_add_rect-3682({ i64, i64, i8 }* noalias sret, %fontstash.Font_Atlas*, i64, i64, i8* noalias nocapture nonnull)

declare internal %fontstash.Font* @fontstash.font_init({ i64, i64 }, i1 zeroext, float, i8* noalias nocapture nonnull)

declare internal void @fontstash.font_init_ascii-3685(%fontstash.Font*, float, i8* noalias nocapture nonnull)

declare internal void @fontstash.font_destroy(%fontstash.Font*, i8* noalias nocapture nonnull)

declare internal i32 @fontstash.font_hash-3687(i32, i8* noalias nocapture nonnull)

declare internal void @fontstash.font_render_glyph_bitmap-3688(%fontstash.Font*, { i64, i64 }, i32, i32, i32, float, float, i32, i8* noalias nocapture nonnull)

declare internal void @fontstash.font_build_glyph_bitmap-3689({ i32, i32, i32, i32, i32, i32 }* noalias sret, %fontstash.Font*, i32, float, float, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @fontstash.get_glyph(%fontstash.Font*, float, float, i32, i8* noalias nocapture nonnull)

; Function Attrs: alwaysinline
declare internal float @fontstash.ascent_scaled(%fontstash.Font*, float, i8* noalias nocapture nonnull) #4

declare internal float @fontstash.ascent_pixel_size(%fontstash.Font*, float, i8* noalias nocapture nonnull)

; Function Attrs: alwaysinline
declare internal i32 @fontstash.get_glyph_index(%fontstash.Font*, i32, i8* noalias nocapture nonnull) #4

; Function Attrs: alwaysinline
declare internal float @fontstash.scale_for_pixel_height(%fontstash.Font*, float, i8* noalias nocapture nonnull) #4

declare internal float @fontstash.codepoint_xadvance(%fontstash.Font*, i32, float, i8* noalias nocapture nonnull)

declare internal float @fontstash.glyph_xadvance(%fontstash.Font*, i32, i8* noalias nocapture nonnull)

declare internal float @fontstash.string_width(%fontstash.Font*, float, { i64, i64 }, i8* noalias nocapture nonnull)

declare internal float @fontstash.icon_width(%fontstash.Font*, float, i64, i8* noalias nocapture nonnull)

declare internal void @fontstash.format_to_lines(%fontstash.Font*, float, { i64, i64 }, float, { %..string*, i64, i64, %runtime.Allocator }*, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @fontstash.codepoint_index_to_line({ i64, i64 }, i64, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @rand.init(%rand.Rand*, i64, i8* noalias nocapture nonnull)

declare internal i32 @rand._random-3743(%rand.Rand*, i8* noalias nocapture nonnull)

declare internal i64 @rand.uint64(%rand.Rand*, i8* noalias nocapture nonnull)

declare internal i64 @rand.int63(%rand.Rand*, i8* noalias nocapture nonnull)

declare internal i64 @rand.int63_max(i64, %rand.Rand*, i8* noalias nocapture nonnull)

declare internal double @rand.float64(%rand.Rand*, i8* noalias nocapture nonnull)

declare internal float @rand.float32(%rand.Rand*, i8* noalias nocapture nonnull)

declare i32 @stbtt_InitFont(%stb_truetype.fontinfo*, i8*, i32)

declare i32 @stbtt_FindGlyphIndex(%stb_truetype.fontinfo*, i32)

declare float @stbtt_ScaleForPixelHeight(%stb_truetype.fontinfo*, float)

declare void @stbtt_GetFontVMetrics(%stb_truetype.fontinfo*, i32*, i32*, i32*)

declare void @stbtt_GetGlyphHMetrics(%stb_truetype.fontinfo*, i32, i32*, i32*)

declare void @stbtt_MakeGlyphBitmap(%stb_truetype.fontinfo*, i8*, i32, i32, i32, float, float, i32)

declare void @stbtt_GetGlyphBitmapBox(%stb_truetype.fontinfo*, i32, float, float, i32*, i32*, i32*, i32*)

; Function Attrs: alwaysinline
declare internal i8 @cutf8.decode(i32*, i32*, i8, i8* noalias nocapture nonnull) #4

declare internal i64 @cutf8.count({ i64, i64 }, i8* noalias nocapture nonnull)

declare internal void @cutf8.ds_iter({ i32, i64, i8 }* noalias sret, %cutf8.Decode_State*, { i64, i64 }, i8* noalias nocapture nonnull)

declare internal i64 @cutf8.ds_recount(%cutf8.Decode_State*, { i64, i64 }, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @cutf8.ds_to_runes(%cutf8.Decode_State*, { i64, i64 }, { i64, i64 }, i8* noalias nocapture nonnull)

declare internal void @cutf8.ds_string_selection({ %..string, i8 }* noalias sret, %cutf8.Decode_State*, { i64, i64 }, i64, i64, i8* noalias nocapture nonnull)

declare i32 @SDL_Init(i32)

declare void @SDL_Quit()

declare i32 @SDL_SetClipboardText(i8*)

declare i8* @SDL_GetClipboardText()

declare i32 @SDL_HasClipboardText()

declare i8* @SDL_GetError()

declare i8* @SDL_GetPrefPath(i8*, i8*)

declare void @SDL_FlushEvent(i32)

declare i32 @SDL_PollEvent(%sdl2.Event*)

declare i32 @SDL_WaitEvent(%sdl2.Event*)

declare i32 @SDL_PushEvent(%sdl2.Event*)

declare i32 @SDL_SetHint(i8*, i8*)

declare i8* @SDL_GetKeyboardState(i32*)

declare i8* @SDL_GetKeyName(i32)

declare void @SDL_StartTextInput()

declare i32 @SDL_CaptureMouse(i32)

declare %sdl2.Cursor* @SDL_CreateSystemCursor(i32)

declare void @SDL_SetCursor(%sdl2.Cursor*)

declare void @SDL_FreeCursor(%sdl2.Cursor*)

declare %sdl2.RWops* @SDL_RWFromFile(i8*, i8*)

declare void @SDL_free(i8*)

declare i64 @SDL_GetPerformanceCounter()

declare i64 @SDL_GetPerformanceFrequency()

declare i32 @SDL_AddTimer(i32, i8*, i8*)

declare i32 @SDL_RemoveTimer(i32)

declare %sdl2.Window* @SDL_CreateWindow(i8*, i32, i32, i32, i32, i32)

declare i32 @SDL_GetWindowID(%sdl2.Window*)

declare void @SDL_SetWindowTitle(%sdl2.Window*, i8*)

declare void @SDL_GetWindowSize(%sdl2.Window*, i32*, i32*)

declare void @SDL_HideWindow(%sdl2.Window*)

declare void @SDL_DestroyWindow(%sdl2.Window*)

declare void @SDL_EnableScreenSaver()

declare i8* @SDL_GL_GetProcAddress(i8*)

declare i32 @SDL_GL_SetAttribute(i32, i32)

declare i8* @SDL_GL_CreateContext(%sdl2.Window*)

declare i32 @SDL_GL_MakeCurrent(%sdl2.Window*, i8*)

declare void @SDL_GL_SwapWindow(%sdl2.Window*)

declare void @SDL_GL_DeleteContext(i8*)

declare internal void @sdl2.gl_set_proc_address(i8*, i8*, i8* noalias nocapture nonnull)

declare internal void @math_linalg_glsl.mat4Ortho3d([16 x float]* noalias sret, float, float, float, float, float, float)

declare internal i64 @image.compute_buffer_size(i64, i64, i64, i64, i64, i8* noalias nocapture nonnull)

declare internal void @image.register(i64, i8*, i8*, i8* noalias nocapture nonnull)

declare internal void @png.destroy(%image.Image*, i8* noalias nocapture nonnull)

declare internal void @png.plte({ %png.PLTE, i8 }* noalias sret, %image.PNG_Chunk*, i8* noalias nocapture nonnull)

declare internal void @png.copy_chunk({ %image.PNG_Chunk, %image.Error }* noalias sret, %image.PNG_Chunk*, { i64, i64 }, i8* noalias nocapture nonnull)

declare internal void @png.append_chunk(%image.Error* noalias sret, { %image.PNG_Chunk*, i64, i64, %runtime.Allocator }*, %image.PNG_Chunk*, { i64, i64 }, i8* noalias nocapture nonnull)

declare internal void @png.load_from_bytes({ %image.Image*, %image.Error }* noalias sret, { i64, i64 }, i16, { i64, i64 }, i8* noalias nocapture nonnull)

; Function Attrs: alwaysinline
declare internal i8 @png.filter_paeth(i8, i8, i8, i8* noalias nocapture nonnull) #4

declare internal i8 @png.defilter_8(%png.Filter_Params*, i8* noalias nocapture nonnull)

declare internal i8 @png.defilter_less_than_8(%png.Filter_Params*, i8* noalias nocapture nonnull)

declare internal i8 @png.defilter_16(%png.Filter_Params*, i8* noalias nocapture nonnull)

declare internal void @png.defilter(%image.Error* noalias sret, %image.Image*, %bytes.Buffer*, %image.PNG_IHDR*, i16, i8* noalias nocapture nonnull)

declare internal i64 @odin_gl.compile_shader_from_source-11634({ i64, i64 }, i32, i8* noalias nocapture nonnull)

declare internal i64 @odin_gl.create_and_link_program-11635({ i64, i64 }, i1 zeroext, i8* noalias nocapture nonnull)

declare internal i64 @odin_gl.load_shaders_source({ i64, i64 }, { i64, i64 }, i1 zeroext, i8* noalias nocapture nonnull)

declare internal void @odin_gl.load_up_to(i64, i64, i8*, i8* noalias nocapture nonnull)

declare internal void @odin_gl.load_1_0(i8*, i8* noalias nocapture nonnull)

declare internal void @odin_gl.load_1_1(i8*, i8* noalias nocapture nonnull)

declare internal void @odin_gl.load_1_2(i8*, i8* noalias nocapture nonnull)

declare internal void @odin_gl.load_1_3(i8*, i8* noalias nocapture nonnull)

declare internal void @odin_gl.load_1_4(i8*, i8* noalias nocapture nonnull)

declare internal void @odin_gl.load_1_5(i8*, i8* noalias nocapture nonnull)

declare internal void @odin_gl.load_2_0(i8*, i8* noalias nocapture nonnull)

declare internal void @odin_gl.load_2_1(i8*, i8* noalias nocapture nonnull)

declare internal void @odin_gl.load_3_0(i8*, i8* noalias nocapture nonnull)

declare internal void @odin_gl.load_3_1(i8*, i8* noalias nocapture nonnull)

declare internal void @odin_gl.load_3_2(i8*, i8* noalias nocapture nonnull)

declare internal void @odin_gl.load_3_3(i8*, i8* noalias nocapture nonnull)

declare internal void @odin_gl.load_4_0(i8*, i8* noalias nocapture nonnull)

declare internal void @odin_gl.load_4_1(i8*, i8* noalias nocapture nonnull)

declare internal void @odin_gl.load_4_2(i8*, i8* noalias nocapture nonnull)

declare internal void @odin_gl.load_4_3(i8*, i8* noalias nocapture nonnull)

declare internal void @odin_gl.load_4_4(i8*, i8* noalias nocapture nonnull)

declare internal void @odin_gl.load_4_5(i8*, i8* noalias nocapture nonnull)

declare internal void @odin_gl.load_4_6(i8*, i8* noalias nocapture nonnull)

; Function Attrs: alwaysinline optsize
declare internal i16 @zlib.z_bit_reverse(i16, i8, i8* noalias nocapture nonnull) #7

; Function Attrs: optsize
declare internal { i64, i64 } @zlib.grow_buffer({ i8*, i64, i64, %runtime.Allocator }*, i8* noalias nocapture nonnull) #8

declare internal void @zlib.allocate_huffman_table({ %zlib.Huffman_Table*, %compress.Error }* noalias sret, { i64, i64 }, i8* noalias nocapture nonnull)

; Function Attrs: optsize
declare internal { i64, i64 } @zlib.build_huffman(%zlib.Huffman_Table*, { i64, i64 }, i8* noalias nocapture nonnull) #8

; Function Attrs: optsize
declare internal { i64, i64 } @zlib.inflate_from_context(%compress.Context_Memory_Input*, i1 zeroext, i64, { i64, i64 }, i8* noalias nocapture nonnull) #8

declare internal { i64, i64 } @zlib.inflate_from_byte_array({ i64, i64 }, %bytes.Buffer*, i1 zeroext, i64, i8* noalias nocapture nonnull)

declare internal void @compress.input_size_from_memory({ i64, %compress.Error }* noalias sret, %compress.Context_Memory_Input*, i8* noalias nocapture nonnull)

; Function Attrs: alwaysinline optsize
declare internal void @compress.read_slice_from_memory({ { i8*, i64 }, i32 }* noalias sret, %compress.Context_Memory_Input*, i64, i8* noalias nocapture nonnull) #7

; Function Attrs: alwaysinline optsize
declare internal i64 @compress.read_u8_from_memory(%compress.Context_Memory_Input*, i8* noalias nocapture nonnull) #7

; Function Attrs: alwaysinline optsize
declare internal void @compress.refill_lsb_from_memory(%compress.Context_Memory_Input*, i8, i8* noalias nocapture nonnull) #7

; Function Attrs: alwaysinline optsize
declare internal void @compress.consume_bits_lsb_from_memory(%compress.Context_Memory_Input*, i8, i8* noalias nocapture nonnull) #7

; Function Attrs: alwaysinline optsize
declare internal i32 @compress.peek_bits_lsb_from_memory(%compress.Context_Memory_Input*, i8, i8* noalias nocapture nonnull) #7

; Function Attrs: alwaysinline optsize
declare internal i32 @compress.peek_bits_no_refill_lsb_from_memory(%compress.Context_Memory_Input*, i8, i8* noalias nocapture nonnull) #7

; Function Attrs: alwaysinline optsize
declare internal i32 @compress.read_bits_lsb_from_memory(%compress.Context_Memory_Input*, i8, i8* noalias nocapture nonnull) #7

; Function Attrs: alwaysinline optsize
declare internal i32 @compress.read_bits_no_refill_lsb_from_memory(%compress.Context_Memory_Input*, i8, i8* noalias nocapture nonnull) #7

; Function Attrs: optsize
declare internal void @compress.discard_to_next_byte_lsb_from_memory(%compress.Context_Memory_Input*, i8* noalias nocapture nonnull) #8

; Function Attrs: optsize
declare internal i32 @hash.crc32({ i64, i64 }, i32, i8* noalias nocapture nonnull) #8

; Function Attrs: optsize
declare internal i32 @hash.adler32({ i64, i64 }, i32, i8* noalias nocapture nonnull) #8

; Function Attrs: alwaysinline
declare internal %sdl2_mixer.Chunk* @sdl2_mixer.LoadWAV(i8*) #4

declare i32 @Mix_Init(i32)

declare i32 @Mix_OpenAudio(i32, i16, i32, i32)

declare %sdl2_mixer.Chunk* @Mix_LoadWAV_RW(%sdl2.RWops*, i32)

; Function Attrs: alwaysinline
declare internal i32 @sdl2_mixer.PlayChannel(i32, %sdl2_mixer.Chunk*, i32) #4

declare i32 @Mix_PlayChannelTimed(i32, %sdl2_mixer.Chunk*, i32, i32)

declare i32 @Mix_Volume(i32, i32)

declare internal i64 @runtime.typeid_base(i64)

declare internal { i64, i64 } @runtime.default_allocator(i8* noalias nocapture nonnull)

declare internal void @runtime.default_temp_allocator_init(%runtime.Default_Temp_Allocator*, i64, { i64, i64 }, i8* noalias nocapture nonnull)

declare internal void @runtime.default_temp_allocator_destroy(%runtime.Default_Temp_Allocator*, i8* noalias nocapture nonnull)

declare internal void @runtime.default_temp_allocator_alloc-12641({ { i8*, i64 }, i8 }* noalias sret, %runtime.Default_Temp_Allocator*, i64, i64, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal i8 @runtime.default_temp_allocator_free-12642(%runtime.Default_Temp_Allocator*, i8*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @runtime.default_temp_allocator_free_all-12643(%runtime.Default_Temp_Allocator*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @runtime.default_temp_allocator_resize-12644({ { i8*, i64 }, i8 }* noalias sret, %runtime.Default_Temp_Allocator*, i8*, i64, i64, i64, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @runtime.default_temp_allocator_proc({ { i8*, i64 }, i8 }* noalias sret, i8*, i8, i64, i64, i8*, i64, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare dso_local i32 @main(i32, i8**)

declare internal void @runtime.type_assertion_check(i1 zeroext, { i64, i64 }, i32, i32, i64, i64)

declare internal void @runtime.type_assertion_check2(i1 zeroext, { i64, i64 }, i32, i32, i64, i64, i8*)

declare internal i8* @runtime.memset(i8*, i32, i64)

declare internal i8 @odin_gl.check_error-13290(i32, i32, i32, i8*, i8*, i8* noalias nocapture nonnull)

declare internal void @odin_gl.Scissor(i32, i32, i32, i32)

declare internal void @odin_gl.TexParameteri(i32, i32, i32)

declare internal void @odin_gl.TexImage2D(i32, i32, i32, i32, i32, i32, i32, i32, i8*)

declare internal void @odin_gl.Clear(i32)

declare internal void @odin_gl.ClearColor(float, float, float, float)

declare internal void @odin_gl.Disable(i32)

declare internal void @odin_gl.Enable(i32)

declare internal void @odin_gl.Flush()

declare internal void @odin_gl.Viewport(i32, i32, i32, i32)

declare internal void @odin_gl.DrawArrays(i32, i32, i32)

declare internal void @odin_gl.BindTexture(i32, i32)

declare internal void @odin_gl.GenTextures(i32, i32*)

declare internal void @odin_gl.ActiveTexture(i32)

declare internal void @odin_gl.BlendFuncSeparate(i32, i32, i32, i32)

declare internal void @odin_gl.BindBuffer(i32, i32)

declare internal void @odin_gl.GenBuffers(i32, i32*)

declare internal void @odin_gl.BufferData(i32, i64, i8*, i32)

declare internal void @odin_gl.AttachShader(i32, i32)

declare internal void @odin_gl.CompileShader(i32)

declare internal i32 @odin_gl.CreateProgram()

declare internal i32 @odin_gl.CreateShader(i32)

declare internal void @odin_gl.DeleteShader(i32)

declare internal void @odin_gl.DisableVertexAttribArray(i32)

declare internal void @odin_gl.EnableVertexAttribArray(i32)

declare internal i32 @odin_gl.GetAttribLocation(i32, i8*)

declare internal void @odin_gl.GetProgramiv(i32, i32, i32*)

declare internal void @odin_gl.GetProgramInfoLog(i32, i32, i32*, i8*)

declare internal void @odin_gl.GetShaderiv(i32, i32, i32*)

declare internal void @odin_gl.GetShaderInfoLog(i32, i32, i32*, i8*)

declare internal i32 @odin_gl.GetUniformLocation(i32, i8*)

declare internal void @odin_gl.LinkProgram(i32)

declare internal void @odin_gl.ShaderSource(i32, i32, i8**, i32*)

declare internal void @odin_gl.UseProgram(i32)

declare internal void @odin_gl.Uniform4f(i32, float, float, float, float)

declare internal void @odin_gl.Uniform1i(i32, i32)

declare internal void @odin_gl.UniformMatrix4fv(i32, i32, i1 zeroext, float*)

declare internal void @odin_gl.VertexAttribPointer(i32, i32, i32, i1 zeroext, i32, i64)

declare internal void @odin_gl.VertexAttribIPointer(i32, i32, i32, i32, i64)

declare internal void @odin_gl.BindVertexArray(i32)

declare internal void @odin_gl.GenVertexArrays(i32, i32*)

declare internal void @odin_gl.ProgramParameteri(i32, i32, i32)

declare internal i8* @runtime.raw_string_data-46612({ i64, i64 })

declare internal i8* @runtime.raw_slice_data-46645({ i64, i64 })

; Function Attrs: alwaysinline
declare internal i64 @runtime._default_hasher_const-46807(i8*, i64) #4

declare internal i8 @runtime.__slice_resize-46927({ i64*, i64 }*, i64, { i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal i64 @runtime.copy_slice-47133({ i64, i64 }, { i64, i64 })

declare internal { i64, i64 } @mem.slice_ptr-47489(i32*, i64)

declare internal i8* @runtime.raw_dynamic_array_data-47534({ i8*, i64, i64, %runtime.Allocator }*)

declare internal void @runtime.clear_dynamic_array-47554({ %..string*, i64, i64, %runtime.Allocator }*)

declare internal void @runtime.append_elem-47577({ %..string*, i64, i64, %runtime.Allocator }*, { i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal i8 @runtime.delete_dynamic_array-47636({ i8*, i64, i64, %runtime.Allocator }*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal %src.Text_Box* @src.element_init-47674(%src.Element*, i32, i8*, i64, { i64, i64 }, i8* noalias nocapture nonnull)

declare internal %src.Task_Box* @src.element_init-47735(%src.Element*, i32, i8*, i64, { i64, i64 }, i8* noalias nocapture nonnull)

declare internal void @runtime.append_elem-47786({ i8*, i64, i64, %runtime.Allocator }*, i8, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @runtime.append_elems-47797({ i8*, i64, i64, %runtime.Allocator }*, { i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @runtime.incl_elem-48009(i32*, i64, i8* noalias nocapture nonnull)

declare internal void @runtime.excl_elem-48031(i32*, i64, i8* noalias nocapture nonnull)

declare internal void @runtime.append_elem-48056({ %src.Element**, i64, i64, %runtime.Allocator }*, %src.Element*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @runtime.unordered_remove-48085({ %src.Element**, i64, i64, %runtime.Allocator }*, i64, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal float @math.lerp-48100(float, float, float)

declare internal void @runtime.incl_bit_set-48133(i32*, i32, i8* noalias nocapture nonnull)

declare internal void @runtime.ordered_remove-48188({ %src.Element**, i64, i64, %runtime.Allocator }*, i64, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal i8 @runtime.delete_dynamic_array-48199({ %src.Element**, i64, i64, %runtime.Allocator }*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal %src.Button* @src.element_init-48276(%src.Element*, i32, i8*, i64, { i64, i64 }, i8* noalias nocapture nonnull)

declare internal %src.Color_Button* @src.element_init-48296(%src.Element*, i32, i8*, i64, { i64, i64 }, i8* noalias nocapture nonnull)

declare internal %src.Icon_Button* @src.element_init-48320(%src.Element*, i32, i8*, i64, { i64, i64 }, i8* noalias nocapture nonnull)

declare internal %src.Label* @src.element_init-48373(%src.Element*, i32, i8*, i64, { i64, i64 }, i8* noalias nocapture nonnull)

declare internal %src.Slider* @src.element_init-48427(%src.Element*, i32, i8*, i64, { i64, i64 }, i8* noalias nocapture nonnull)

declare internal %src.Checkbox* @src.element_init-48466(%src.Element*, i32, i8*, i64, { i64, i64 }, i8* noalias nocapture nonnull)

declare internal %src.Spacer* @src.element_init-48484(%src.Element*, i32, i8*, i64, { i64, i64 }, i8* noalias nocapture nonnull)

declare internal %src.Panel* @src.element_init-48547(%src.Element*, i32, i8*, i64, { i64, i64 }, i8* noalias nocapture nonnull)

declare internal %src.Panel_Floaty* @src.element_init-48565(%src.Element*, i32, i8*, i64, { i64, i64 }, i8* noalias nocapture nonnull)

declare internal %src.Scrollbar* @src.element_init-48724(%src.Element*, i32, i8*, i64, { i64, i64 }, i8* noalias nocapture nonnull)

declare internal %src.Element* @src.element_init-48739(%src.Element*, i32, i8*, i64, { i64, i64 }, i8* noalias nocapture nonnull)

declare internal %src.Color_Picker* @src.element_init-48983(%src.Element*, i32, i8*, i64, { i64, i64 }, i8* noalias nocapture nonnull)

declare internal %src.Color_Picker_SV* @src.element_init-48998(%src.Element*, i32, i8*, i64, { i64, i64 }, i8* noalias nocapture nonnull)

declare internal %src.Color_Picker_HUE* @src.element_init-49013(%src.Element*, i32, i8*, i64, { i64, i64 }, i8* noalias nocapture nonnull)

declare internal i8 @runtime.delete_slice-49046({ i64, i64 }, { i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal %src.Toggle_Selector* @src.element_init-49075(%src.Element*, i32, i8*, i64, { i64, i64 }, i8* noalias nocapture nonnull)

declare internal void @runtime.make_slice-49090({ { %src.Rect*, i64 }, i8 }* noalias sret, i64, { i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal %src.Split_Pane* @src.element_init-49162(%src.Element*, i32, i8*, i64, { i64, i64 }, i8* noalias nocapture nonnull)

declare internal %src.Enum_Panel* @src.element_init-49189(%src.Element*, i32, i8*, i64, { i64, i64 }, i8* noalias nocapture nonnull)

declare internal %src.Linear_Gauge* @src.element_init-49214(%src.Element*, i32, i8*, i64, { i64, i64 }, i8* noalias nocapture nonnull)

declare internal void @runtime.make_slice-49269({ { i8*, i64 }, i8 }* noalias sret, i64, { i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal %src.Window* @src.element_init-49320(%src.Element*, i32, i8*, i64, { i64, i64 }, i8* noalias nocapture nonnull)

declare internal void @runtime.make_map-49386({ { i64*, i64 }, { i8*, i64, i64, %runtime.Allocator } }* noalias sret, i64, { i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @runtime.make_dynamic_array_len_cap-49438({ { i64*, i64, i64, %runtime.Allocator }, i8 }* noalias sret, i64, i64, { i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @runtime.append_elem-49471({ %src.Window**, i64, i64, %runtime.Allocator }*, %src.Window*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal i8 @runtime.delete_map-49574({ { i64*, i64 }, { i8*, i64, i64, %runtime.Allocator } }*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @runtime.clear_dynamic_array-49719({ i64*, i64, i64, %runtime.Allocator }*)

declare internal void @runtime.clear_dynamic_array-49738({ i8*, i64, i64, %runtime.Allocator }*)

declare internal void @runtime.append_elem-49762({ i64*, i64, i64, %runtime.Allocator }*, i64, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @runtime.make_dynamic_array_len_cap-49841({ { %src.Window**, i64, i64, %runtime.Allocator }, i8 }* noalias sret, i64, i64, { i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @ease.flux_init-49874(%"src.ease.Flux_Map(f32)-17572"* noalias sret, i64, i8* noalias nocapture nonnull)

declare internal void @ease.flux_destroy-49893(%"src.ease.Flux_Map(f32)-17572"*, i8* noalias nocapture nonnull)

declare internal i8 @runtime.delete_dynamic_array-49906({ %src.Window**, i64, i64, %runtime.Allocator }*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @ease.flux_update-49950(%"src.ease.Flux_Map(f32)-17572"*, double, i8* noalias nocapture nonnull)

declare internal void @runtime.unordered_remove-49965({ %src.Window**, i64, i64, %runtime.Allocator }*, i64, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal i8 @runtime.delete_map-50115({ { i64*, i64 }, { i8*, i64, i64, %runtime.Allocator } }*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @runtime.make_slice-50151({ { %src.Pomodoro_Celebration*, i64 }, i8 }* noalias sret, i64, { i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal i8 @runtime.delete_slice-50204({ i64, i64 }, { i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal %"src.Flux_Tween(T)-17575"* @ease.flux_to-50244(%"src.ease.Flux_Map(f32)-17572"*, float*, float, i64, i64, double, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @runtime.new-50307({ i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @runtime.make_dynamic_array_len_cap-50378({ { %src.Render_Group*, i64, i64, %runtime.Allocator }, i8 }* noalias sret, i64, i64, { i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @runtime.make_slice-50415({ { %src.Render_Vertex*, i64 }, i8 }* noalias sret, i64, { i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal i8 @runtime.delete_slice-50486({ i64, i64 }, { i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal i8 @runtime.delete_dynamic_array-50511({ %src.Render_Group*, i64, i64, %runtime.Allocator }*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @runtime.clear_dynamic_array-50557({ %src.Render_Group*, i64, i64, %runtime.Allocator }*)

declare internal %src.Render_Vertex* @runtime.raw_slice_data-50606({ i64, i64 })

declare internal void @runtime.append_elem-50657({ %src.Render_Group*, i64, i64, %runtime.Allocator }*, %src.Render_Group*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @slice.clone-50839({ i64, i64 }, { i64, i64 }, i8* noalias nocapture nonnull)

declare internal void @sort.quick_sort_proc-50857({ i64, i64 }, i8*, i8* noalias nocapture nonnull)

declare internal i32 @src.buffer_write_type-50868(%bytes.Buffer*, i16, i8* noalias nocapture nonnull)

declare internal i32 @src.buffer_write_type-50888(%bytes.Buffer*, i32, i8* noalias nocapture nonnull)

declare internal i32 @src.buffer_write_type-50903(%bytes.Buffer*, { i64, i64 }, i8* noalias nocapture nonnull)

declare internal i32 @src.buffer_write_type-50915(%bytes.Buffer*, i64, i8* noalias nocapture nonnull)

declare internal void @src.reader_read_type-50930({ %src.V1_Save_Header, i32 }* noalias sret, %bytes.Reader*, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @src.reader_read_type-50941(%bytes.Reader*, i8* noalias nocapture nonnull)

declare internal i64 @src.reader_read_type-50953(%bytes.Reader*, i8* noalias nocapture nonnull)

declare internal i8 @runtime.delete_slice-50975({ i64, i64 }, { i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal i64 @src.reader_read_type-51006(%bytes.Reader*, i8* noalias nocapture nonnull)

declare internal void @json.unmarshal-51066(%json.Unmarshal_Error* noalias sret, { i64, i64 }, %src.Misc_Save_Load*, i64, { i64, i64 }, i8* noalias nocapture nonnull)

declare internal i8 @runtime.inject_at_elem-51124({ %src.Element**, i64, i64, %runtime.Allocator }*, i64, %src.Element*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal %src.Element* @runtime.pop-51188({ %src.Element**, i64, i64, %runtime.Allocator }*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @runtime.new_clone-51322(i64, { i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @runtime.new_clone-51350(i64, { i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @runtime.make_dynamic_array_len_cap-51480({ { %src.Task**, i64, i64, %runtime.Allocator }, i8 }* noalias sret, i64, i64, { i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @runtime.make_dynamic_array_len_cap-51604({ { %src.Search_Result_Mixed*, i64, i64, %runtime.Allocator }, i8 }* noalias sret, i64, i64, { i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @runtime.make_dynamic_array_len_cap-51678({ { %src.Copy_Task*, i64, i64, %runtime.Allocator }, i8 }* noalias sret, i64, i64, { i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal i8 @runtime.delete_dynamic_array-51761({ %src.Task**, i64, i64, %runtime.Allocator }*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal i8 @runtime.delete_dynamic_array-51792({ i64*, i64, i64, %runtime.Allocator }*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal i8 @runtime.delete_dynamic_array-51823({ %src.Search_Result_Mixed*, i64, i64, %runtime.Allocator }*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal i8 @runtime.delete_dynamic_array-51884({ %src.Copy_Task*, i64, i64, %runtime.Allocator }*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @runtime.clear_dynamic_array-51941({ %src.Copy_Task*, i64, i64, %runtime.Allocator }*)

declare internal void @runtime.append_elem-51966({ %src.Copy_Task*, i64, i64, %runtime.Allocator }*, { i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @runtime.new-52012({ i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @runtime.make_dynamic_array_len_cap-52071({ { %src.Search_Result*, i64, i64, %runtime.Allocator }, i8 }* noalias sret, i64, i64, { i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal %src.Mode_Panel* @src.element_init-52174(%src.Element*, i32, i8*, i64, { i64, i64 }, i8* noalias nocapture nonnull)

declare internal void @runtime.make_dynamic_array_len_cap-52226({ { %src.Rect*, i64, i64, %runtime.Allocator }, i8 }* noalias sret, i64, i64, { i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @runtime.clear_dynamic_array-52273({ %src.Task**, i64, i64, %runtime.Allocator }*)

declare internal void @runtime.append_elem-52299({ %src.Task**, i64, i64, %runtime.Allocator }*, %src.Task*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @runtime.clear_dynamic_array-52425({ %src.Rect*, i64, i64, %runtime.Allocator }*)

declare internal void @runtime.append_elem-52456({ %src.Rect*, i64, i64, %runtime.Allocator }*, { <2 x float>, <2 x float> }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal i8 @runtime.delete_dynamic_array-52534({ %src.Rect*, i64, i64, %runtime.Allocator }*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @runtime.clear_dynamic_array-52736({ %src.Search_Result*, i64, i64, %runtime.Allocator }*)

declare internal void @runtime.append_elem-52765({ %src.Search_Result*, i64, i64, %runtime.Allocator }*, i64, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @runtime.clear_dynamic_array-52789({ %src.Search_Result_Mixed*, i64, i64, %runtime.Allocator }*)

declare internal void @runtime.append_elem-52815({ %src.Search_Result_Mixed*, i64, i64, %runtime.Allocator }*, { i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @runtime.clear_dynamic_array-52892({ %src.Element**, i64, i64, %runtime.Allocator }*)

declare internal void @runtime.make_dynamic_array-52994({ { i8*, i64, i64, %runtime.Allocator }, i8 }* noalias sret, { i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @runtime.make_dynamic_array_len_cap-53026({ { i8*, i64, i64, %runtime.Allocator }, i8 }* noalias sret, i64, i64, { i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal i8 @runtime.resize_dynamic_array-53210({ i8*, i64, i64, %runtime.Allocator }*, i64, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @mem.slice_ptr-53265(i8*, i64)

declare internal void @runtime.append_elem-54407({ { i8*, i64 }*, i64, i64, %runtime.Allocator }*, { i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @runtime.ordered_remove-54496({ { i8*, i64 }*, i64, i64, %runtime.Allocator }*, i64, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @runtime.clear_dynamic_array-54504({ { i8*, i64 }*, i64, i64, %runtime.Allocator }*)

declare internal { i64, i64 } @mem.slice_ptr-55450(i64*, i64)

declare internal i8 @runtime.reserve_dynamic_array-55874({ i8*, i64, i64, %runtime.Allocator }*, i64, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @runtime.append_elem_string-55982({ i8*, i64, i64, %runtime.Allocator }*, { i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal i64 @runtime.copy_from_string-56204({ i64, i64 }, { i64, i64 })

declare internal i8 @runtime.delete_slice-57824({ i64, i64 }, { i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @runtime.make_dynamic_array-59182({ { { i8*, i64 }*, i64, i64, %runtime.Allocator }, i8 }* noalias sret, { i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @runtime.make_dynamic_array_len_cap-59811({ { { i8*, i64 }*, i64, i64, %runtime.Allocator }, i8 }* noalias sret, i64, i64, { i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @runtime.new-59947({ i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal i8 @runtime.delete_dynamic_array-60263({ %json.Value*, i64, i64, %runtime.Allocator }*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @runtime.append_elem-60295({ %json.Value*, i64, i64, %runtime.Allocator }*, %json.Value*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal i8 @runtime.delete_map-60402({ { i64*, i64 }, { i8*, i64, i64, %runtime.Allocator } }*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal i8 @json.assign_int-60736({ i64, i64 }, i64, i8* noalias nocapture nonnull)

declare internal i8 @json.assign_int-60747({ i64, i64 }, i128, i8* noalias nocapture nonnull)

declare internal i8 @json.assign_float-60756({ i64, i64 }, i128, i8* noalias nocapture nonnull)

declare internal i8 @json.assign_int-60767({ i64, i64 }, double, i8* noalias nocapture nonnull)

declare internal i8 @json.assign_float-60776({ i64, i64 }, double, i8* noalias nocapture nonnull)

declare internal i8 @json.assign_int-60795({ i64, i64 }, i64, i8* noalias nocapture nonnull)

declare internal void @runtime.make_slice-60908({ { i8*, i64 }, i8 }* noalias sret, i64, { i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @mem.zero_slice-61037({ i64, i64 })

declare internal void @runtime.make_slice-61264({ { i32*, i64 }, i8 }* noalias sret, i64, { i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @runtime.make_dynamic_array_len_cap-64099({ { %fontstash.Atlas_Node*, i64, i64, %runtime.Allocator }, i8 }* noalias sret, i64, i64, { i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @runtime.append_elem-64132({ %fontstash.Atlas_Node*, i64, i64, %runtime.Allocator }*, i64, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal i8 @runtime.delete_dynamic_array-64160({ %fontstash.Atlas_Node*, i64, i64, %runtime.Allocator }*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal i8 @runtime.resize_dynamic_array-64193({ %fontstash.Atlas_Node*, i64, i64, %runtime.Allocator }*, i64, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @runtime.new-64273({ i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @runtime.make_dynamic_array_len_cap-64325({ { %fontstash.Glyph*, i64, i64, %runtime.Allocator }, i8 }* noalias sret, i64, i64, { i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal i8 @runtime.delete_dynamic_array-64392({ %fontstash.Glyph*, i64, i64, %runtime.Allocator }*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @runtime.append_elem-64467({ %fontstash.Glyph*, i64, i64, %runtime.Allocator }*, %fontstash.Glyph*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @runtime.make_dynamic_array_len_cap-64852({ { i32*, i64, i64, %runtime.Allocator }, i8 }* noalias sret, i64, i64, { i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @runtime.append_elem-64886({ i32*, i64, i64, %runtime.Allocator }*, i32, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @slice.clone-64914({ i64, i64 }, { i64, i64 }, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @mem.slice_data_cast-67156({ i64, i64 })

declare internal { i64, i64 } @runtime.new-67174({ i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @mem.slice_data_cast-67270({ i64, i64 })

declare internal { i64, i64 } @mem.slice_data_cast-68015({ i64, i64 })

declare internal i8 @runtime.delete_dynamic_array-68258({ %image.PNG_Chunk*, i64, i64, %runtime.Allocator }*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @runtime.append_elem-68703({ %image.PNG_Chunk*, i64, i64, %runtime.Allocator }*, %image.PNG_Chunk*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @png.load_from_context-68734({ %image.Image*, %image.Error }* noalias sret, %compress.Context_Memory_Input*, i16, { i64, i64 }, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @runtime.new-69418({ i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @mem.zero_slice-69430({ i64, i64 })

declare internal { i64, i64 } @mem.zero_slice-69439({ i64, i64 })

declare internal { i64, i64 } @zlib.inflate_raw-69477(%compress.Context_Memory_Input*, i64, { i64, i64 }, i8* noalias nocapture nonnull)

; Function Attrs: alwaysinline
declare internal i64 @compress.read_u8_prefer_code_buffer_lsb-69489(%compress.Context_Memory_Input*, i8* noalias nocapture nonnull) #4

declare internal void @runtime.make_aligned-69797({ { i8*, i64 }, i8 }* noalias sret, i64, i64, { i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal i8 @runtime.delete_dynamic_array-69836({ { i8*, i64 }*, i64, i64, %runtime.Allocator }*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal i8 @runtime.reserve_dynamic_array-70637({ %..string*, i64, i64, %runtime.Allocator }*, i64, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @runtime.new-70691({ i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @runtime.make_dynamic_array-70712({ { %src.Element**, i64, i64, %runtime.Allocator }, i8 }* noalias sret, { i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @runtime.new-70813({ i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal i8 @runtime.reserve_dynamic_array-71045({ %src.Element**, i64, i64, %runtime.Allocator }*, i64, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal i64 @runtime.copy_slice-71073({ i64, i64 }, { i64, i64 })

declare internal %src.Element** @runtime.raw_dynamic_array_data-71098({ %src.Element**, i64, i64, %runtime.Allocator }*)

declare internal { i64, i64 } @runtime.new-71118({ i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @runtime.new-71233({ i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @runtime.new-71348({ i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @runtime.new-71463({ i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @runtime.new-71578({ i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @runtime.new-71694({ i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @runtime.new-71809({ i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @runtime.new-71924({ i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @runtime.new-72039({ i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @runtime.new-72154({ i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @runtime.new-72269({ i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @runtime.new-72544({ i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @runtime.new-72659({ i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @runtime.new-72774({ i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal %src.Rect* @runtime.raw_slice_data-72893({ i64, i64 })

declare internal { i64, i64 } @runtime.new-72917({ i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @runtime.make_aligned-73038({ { %src.Rect*, i64 }, i8 }* noalias sret, i64, i64, { i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @runtime.new-73049({ i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @runtime.new-73164({ i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @runtime.new-73280({ i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @runtime.new-73526({ i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @runtime.reserve_map-73660({ { i64*, i64 }, { i8*, i64, i64, %runtime.Allocator } }*, i64, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal i8 @runtime.reserve_dynamic_array-73703({ %src.Window**, i64, i64, %runtime.Allocator }*, i64, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal i8 @runtime.reserve_dynamic_array-73747({ i64*, i64, i64, %runtime.Allocator }*, i64, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @runtime.make_map-73858({ { i64*, i64 }, { i8*, i64, i64, %runtime.Allocator } }* noalias sret, i64, { i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @runtime.make_dynamic_array_len_cap-73910({ { float**, i64, i64, %runtime.Allocator }, i8 }* noalias sret, i64, i64, { i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal i8 @runtime.delete_map-73972({ { i64*, i64 }, { i8*, i64, i64, %runtime.Allocator } }*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal i8 @runtime.delete_dynamic_array-73983({ float**, i64, i64, %runtime.Allocator }*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal %src.Window** @runtime.raw_dynamic_array_data-74022({ %src.Window**, i64, i64, %runtime.Allocator }*)

declare internal void @runtime.clear_dynamic_array-74038({ float**, i64, i64, %runtime.Allocator }*)

declare internal void @ease.flux_tween_init-74064(%"src.Flux_Tween(T)-17575"*, i64, i8* noalias nocapture nonnull)

declare internal double @ease.ease-74074(i64, double)

declare internal void @runtime.append_elem-74085({ float**, i64, i64, %runtime.Allocator }*, float*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @runtime.delete_key-74134({ float*, %"src.Flux_Tween(T)-17575" }* noalias sret, { { i64*, i64 }, { i8*, i64, i64, %runtime.Allocator } }*, float*, i8* noalias nocapture nonnull)

declare internal void @runtime.make_aligned-74261({ { %src.Pomodoro_Celebration*, i64 }, i8 }* noalias sret, i64, i64, { i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal %src.Pomodoro_Celebration* @runtime.raw_slice_data-74276({ i64, i64 })

declare internal { i64, i64 } @runtime.new_aligned-74307(i64, { i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @runtime.make_aligned-74353({ { %src.Render_Vertex*, i64 }, i8 }* noalias sret, i64, i64, { i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal %src.Render_Group* @runtime.raw_dynamic_array_data-74399({ %src.Render_Group*, i64, i64, %runtime.Allocator }*)

declare internal i8 @runtime.reserve_dynamic_array-74423({ %src.Render_Group*, i64, i64, %runtime.Allocator }*, i64, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @runtime.make_slice-74455({ { %src.Element**, i64 }, i8 }* noalias sret, i64, { i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal i8 @runtime.resize_dynamic_array-74589({ %src.Element**, i64, i64, %runtime.Allocator }*, i64, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal %src.Task** @runtime.raw_dynamic_array_data-74879({ %src.Task**, i64, i64, %runtime.Allocator }*)

declare internal i64* @runtime.raw_dynamic_array_data-74907({ i64*, i64, i64, %runtime.Allocator }*)

declare internal %src.Search_Result_Mixed* @runtime.raw_dynamic_array_data-74935({ %src.Search_Result_Mixed*, i64, i64, %runtime.Allocator }*)

declare internal %src.Copy_Task* @runtime.raw_dynamic_array_data-74963({ %src.Copy_Task*, i64, i64, %runtime.Allocator }*)

declare internal i8 @runtime.reserve_dynamic_array-74986({ %src.Copy_Task*, i64, i64, %runtime.Allocator }*, i64, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @runtime.new_aligned-75015(i64, { i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @runtime.new-75059({ i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal i8 @runtime.reserve_dynamic_array-75206({ %src.Task**, i64, i64, %runtime.Allocator }*, i64, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal i8 @runtime.reserve_dynamic_array-75236({ %src.Rect*, i64, i64, %runtime.Allocator }*, i64, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal %src.Rect* @runtime.raw_dynamic_array_data-75273({ %src.Rect*, i64, i64, %runtime.Allocator }*)

declare internal i8 @runtime.reserve_dynamic_array-75308({ %src.Search_Result*, i64, i64, %runtime.Allocator }*, i64, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal i8 @runtime.reserve_dynamic_array-75338({ %src.Search_Result_Mixed*, i64, i64, %runtime.Allocator }*, i64, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal { i8*, i64 }* @runtime.raw_dynamic_array_data-75758({ { i8*, i64 }*, i64, i64, %runtime.Allocator }*)

declare internal i8 @runtime.reserve_dynamic_array-75825({ { i8*, i64 }*, i64, i64, %runtime.Allocator }*, i64, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal i64 @runtime.copy_slice-75852({ i64, i64 }, { i64, i64 })

declare internal i64* @runtime.raw_slice_data-76494({ i64, i64 })

declare internal { i64, i64 } @runtime.new_aligned-76896(i64, { i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal %json.Value* @runtime.raw_dynamic_array_data-77057({ %json.Value*, i64, i64, %runtime.Allocator }*)

declare internal i8 @runtime.reserve_dynamic_array-77080({ %json.Value*, i64, i64, %runtime.Allocator }*, i64, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @runtime.make_aligned-77295({ { i8*, i64 }, i8 }* noalias sret, i64, i64, { i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @runtime.make_aligned-77342({ { i32*, i64 }, i8 }* noalias sret, i64, i64, { i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal i8 @runtime.reserve_dynamic_array-77563({ %fontstash.Atlas_Node*, i64, i64, %runtime.Allocator }*, i64, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal %fontstash.Atlas_Node* @runtime.raw_dynamic_array_data-77598({ %fontstash.Atlas_Node*, i64, i64, %runtime.Allocator }*)

declare internal { i64, i64 } @runtime.new_aligned-77653(i64, { i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal %fontstash.Glyph* @runtime.raw_dynamic_array_data-77701({ %fontstash.Glyph*, i64, i64, %runtime.Allocator }*)

declare internal i8 @runtime.reserve_dynamic_array-77724({ %fontstash.Glyph*, i64, i64, %runtime.Allocator }*, i64, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal i8 @runtime.reserve_dynamic_array-77783({ i32*, i64, i64, %runtime.Allocator }*, i64, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal i64 @runtime.copy_slice-77861({ i64, i64 }, { i64, i64 })

declare internal { i64, i64 } @runtime.new_aligned-78063(i64, { i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal %image.PNG_Chunk* @runtime.raw_dynamic_array_data-78107({ %image.PNG_Chunk*, i64, i64, %runtime.Allocator }*)

declare internal i8 @runtime.reserve_dynamic_array-78130({ %image.PNG_Chunk*, i64, i64, %runtime.Allocator }*, i64, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @runtime.new-78164({ i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

; Function Attrs: alwaysinline
declare internal { i64, i64 } @compress.read_data-78177(%compress.Context_Memory_Input*, i8* noalias nocapture nonnull) #4

; Function Attrs: alwaysinline
declare internal { i64, i64 } @compress.peek_data_from_memory-78204(%compress.Context_Memory_Input*, i8* noalias nocapture nonnull) #4

declare internal void @png.read_header-78222({ %image.PNG_IHDR, %image.Error }* noalias sret, %compress.Context_Memory_Input*, i8* noalias nocapture nonnull)

declare internal void @png.read_chunk-78240({ %image.PNG_Chunk, %image.Error }* noalias sret, %compress.Context_Memory_Input*, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @mem.slice_data_cast-78436({ i64, i64 })

declare internal { i64, i64 } @runtime.new_aligned-78552(i64, { i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal i16* @runtime.raw_slice_data-78594({ i64, i64 })

; Function Attrs: alwaysinline
declare internal i32 @zlib.write_byte-78657(%compress.Context_Memory_Input*, i8, i8* noalias nocapture nonnull) #4

declare internal void @zlib.decode_huffman-78678({ i16, %compress.Error }* noalias sret, %compress.Context_Memory_Input*, %zlib.Huffman_Table*, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @zlib.parse_huffman_block-78691(%compress.Context_Memory_Input*, %zlib.Huffman_Table*, %zlib.Huffman_Table*, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @runtime.new_aligned-78810(i64, { i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @runtime.make_dynamic_array_len_cap-78827({ { %src.Element**, i64, i64, %runtime.Allocator }, i8 }* noalias sret, i64, i64, { i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @runtime.new_aligned-78840(i64, { i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal %src.Element** @runtime.raw_slice_data-78889({ i64, i64 })

declare internal { i64, i64 } @runtime.new_aligned-78970(i64, { i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @runtime.new_aligned-78983(i64, { i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @runtime.new_aligned-78996(i64, { i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @runtime.new_aligned-79009(i64, { i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @runtime.new_aligned-79022(i64, { i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @runtime.new_aligned-79035(i64, { i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @runtime.new_aligned-79048(i64, { i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @runtime.new_aligned-79061(i64, { i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @runtime.new_aligned-79074(i64, { i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @runtime.new_aligned-79087(i64, { i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @runtime.new_aligned-79100(i64, { i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @runtime.new_aligned-79157(i64, { i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @runtime.new_aligned-79170(i64, { i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @runtime.new_aligned-79183(i64, { i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @runtime.new_aligned-79197(i64, { i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @runtime.new_aligned-79240(i64, { i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @runtime.new_aligned-79253(i64, { i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @runtime.new_aligned-79266(i64, { i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @runtime.new_aligned-79292(i64, { i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @runtime.__get_map_header-79319(%runtime.Map_Header* noalias sret, { { i64*, i64 }, { i8*, i64, i64, %runtime.Allocator } }*)

declare internal void @runtime.reserve_map-79415({ { i64*, i64 }, { i8*, i64, i64, %runtime.Allocator } }*, i64, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal float** @runtime.raw_dynamic_array_data-79477({ float**, i64, i64, %runtime.Allocator }*)

declare internal double @ease.quadratic_in-79495(double)

declare internal double @ease.quadratic_out-79502(double)

declare internal double @ease.quadratic_in_out-79509(double)

declare internal double @ease.cubic_in-79516(double)

declare internal double @ease.cubic_out-79523(double)

declare internal double @ease.cubic_in_out-79530(double)

declare internal double @ease.quartic_in-79537(double)

declare internal double @ease.quartic_out-79544(double)

declare internal double @ease.quartic_in_out-79551(double)

declare internal double @ease.quintic_in-79558(double)

declare internal double @ease.quintic_out-79565(double)

declare internal double @ease.quintic_in_out-79572(double)

declare internal double @ease.sine_in-79579(double)

declare internal double @ease.sine_out-79586(double)

declare internal double @ease.sine_in_out-79593(double)

declare internal double @ease.circular_in-79600(double)

declare internal double @ease.circular_out-79607(double)

declare internal double @ease.circular_in_out-79614(double)

declare internal double @ease.exponential_in-79621(double)

declare internal double @ease.exponential_out-79628(double)

declare internal double @ease.exponential_in_out-79635(double)

declare internal double @ease.elastic_in-79642(double)

declare internal double @ease.elastic_out-79649(double)

declare internal double @ease.elastic_in_out-79656(double)

declare internal double @ease.back_in-79663(double)

declare internal double @ease.back_out-79670(double)

declare internal double @ease.back_in_out-79677(double)

declare internal double @ease.bounce_in-79684(double)

declare internal double @ease.bounce_out-79691(double)

declare internal double @ease.bounce_in_out-79698(double)

declare internal i8 @runtime.reserve_dynamic_array-79712({ float**, i64, i64, %runtime.Allocator }*, i64, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @runtime.__get_map_header-79757(%runtime.Map_Header* noalias sret, { { i64*, i64 }, { i8*, i64, i64, %runtime.Allocator } }*)

declare internal { i64, i64 } @runtime.__get_map_hash-79765(float**)

declare internal void @runtime.make_aligned-79907({ { %src.Element**, i64 }, i8 }* noalias sret, i64, i64, { i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @runtime.new_aligned-80018(i64, { i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal { i8*, i64 }* @runtime.raw_slice_data-80307({ i64, i64 })

declare internal i32* @runtime.raw_slice_data-81218({ i64, i64 })

declare internal { i64, i64 } @runtime.new_aligned-81404(i64, { i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

; Function Attrs: alwaysinline
declare internal { i64, i64 } @compress.read_data-81466(%compress.Context_Memory_Input*, i8* noalias nocapture nonnull) #4

; Function Attrs: alwaysinline
declare internal i64 @compress.read_data-81481(%compress.Context_Memory_Input*, i8* noalias nocapture nonnull) #4

declare internal void @zlib.decode_huffman_slowpath-81533({ i16, %compress.Error }* noalias sret, %compress.Context_Memory_Input*, %zlib.Huffman_Table*, i8* noalias nocapture nonnull)

declare internal i32 @zlib.repl_byte-81565(%compress.Context_Memory_Input*, i16, i8, i8* noalias nocapture nonnull)

declare internal i32 @zlib.repl_bytes-81577(%compress.Context_Memory_Input*, i16, i16, i8* noalias nocapture nonnull)

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #9

; Function Attrs: cold
declare internal void @runtime.assert.internal-0({ i64, i64 }, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull) #10

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.inline.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64 immarg, i1 immarg) #0

; Function Attrs: cold
declare internal void @runtime.bounds_check_error.handle_error-0({ i64, i64 }, i32, i32, i64, i64) #10

; Function Attrs: cold
declare internal void @runtime.matrix_bounds_check_error.handle_error-0({ i64, i64 }, i32, i32, i64, i64, i64, i64) #10

; Function Attrs: cold
declare internal void @runtime.make_slice_error_loc.handle_error-0(%runtime.Source_Code_Location*, i64) #10

; Function Attrs: cold
declare internal void @runtime.make_dynamic_array_error_loc.handle_error-0(%runtime.Source_Code_Location*, i64, i64) #10

; Function Attrs: cold
declare internal void @runtime.make_map_expr_error_loc.handle_error-0(%runtime.Source_Code_Location*, i64) #10

; Function Attrs: nounwind readnone speculatable willreturn
declare i128 @llvm.ctlz.i128(i128, i1 immarg) #6

; Function Attrs: nounwind readnone speculatable willreturn
declare i64 @llvm.cttz.i64(i64, i1 immarg) #6

; Function Attrs: nounwind readnone speculatable willreturn
declare i64 @llvm.ctlz.i64(i64, i1 immarg) #6

declare internal i8 @src.element_box_mouse_selection.mcs_check_single-0(%src.element_box_mouse_selection.Mouse_Character_Selection-3*, %src.Box*, i64, i1 zeroext, i8* noalias nocapture nonnull)

declare internal i8 @src.element_box_mouse_selection.mcs_check_word-1(%src.element_box_mouse_selection.Mouse_Character_Selection-3*, %src.Box*, i64, i64, i8* noalias nocapture nonnull)

declare internal void @src.element_box_mouse_selection.mcs_check_line_last-2(%src.element_box_mouse_selection.Mouse_Character_Selection-3*, %src.Box*, i8* noalias nocapture nonnull)

declare internal { <2 x float>, <2 x float> } @src.checkbox_message.box_icon_rect-0(%src.Checkbox*, i8* noalias nocapture nonnull)

declare internal float @src.checkbox_message.box_width-1(%src.Checkbox*, i8* noalias nocapture nonnull)

declare internal { i64, i64 } @src.linear_gauge_message.gauge_text-0(%src.Linear_Gauge*, i8* noalias nocapture nonnull)

declare internal i64 @src.window_init._window_message-0(%src.Element*, i64, i64, i8*, i8* noalias nocapture nonnull)

declare internal i32 @src.window_init.window_timer_callback-1(i32, i8*)

declare internal i8 @src.window_input_event.cond-0(%src.Element*, %src.Element*, i8*, i8* noalias nocapture nonnull)

declare internal i64 @"src.main$anon-12"(%src.Element*, i64, i64, i8*, i8* noalias nocapture nonnull)

declare internal void @"src.main$anon-13"(%src.Window*, i8* noalias nocapture nonnull)

declare internal i64 @src.pomodoro_button_message.pomodoro_index_from-0(%strings.Builder*, i8* noalias nocapture nonnull)

attributes #0 = { argmemonly nounwind willreturn }
attributes #1 = { argmemonly nounwind willreturn writeonly }
attributes #2 = { nounwind }
attributes #3 = { noreturn }
attributes #4 = { alwaysinline }
attributes #5 = { noinline }
attributes #6 = { nounwind readnone speculatable willreturn }
attributes #7 = { alwaysinline optsize }
attributes #8 = { optsize }
attributes #9 = { cold noreturn nounwind }
attributes #10 = { cold }
